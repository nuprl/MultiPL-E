language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h711ust.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9h711ust.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0rh7zb.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdw0rh7zb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpybx75p6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpybx75p6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmz5yq0x.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqmz5yq0x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  return ab > 0 and bc > 0 and\
    \ cb > 0 and ab + bc + cb == ab * bc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaimraeo7.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaimraeo7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tj9uhqy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7tj9uhqy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq + bc_sq - cb_sq\n\
    \t\n\tif det < 0 then\n\t\treturn false\n\telse\n\t\tlocal inv_det = 1 / det\n\
    \t\tlocal inv_ab = ab * inv_det\n\t\tlocal inv_bc = bc * inv_det\n\t\tlocal inv_cb\
    \ = cb * inv_det\n\t\t\n\t\treturn (inv_ab + inv_bc + inv_cb) == 0 and\n\t\t\t\
    (inv_ab - inv_bc + inv_cb) == 0 and\n\t\t\t(inv_ab - inv_bc - inv_cb) == 0\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd9lg32a.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmd9lg32a.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7d33g25.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd7d33g25.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4fgbyqt.lua:108: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp42arsnle.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbom6jj_.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqbom6jj_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ a - b\n    local bc = b - c\n    local cb = c - b\n    local ab_sq = ab * ab\n\
    \    local bc_sq = bc * bc\n    local cb_sq = cb * cb\n    local det = ab_sq *\
    \ bc_sq - bc_sq * cb_sq\n    return det >= 0 and det <= ab_sq * cb_sq\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsea7asty.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsea7asty.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab*bc*ac > 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlt_bv5n.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzlt_bv5n.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac\
    \ = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc =\
    \ ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\tlocal ab_ac = ab\
    \ * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc\
    \ * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab *\
    \ bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\
    \tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\t\
    local bc_ab = bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab = ac * ab\n\tlocal\
    \ ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab\
    \ = bc * ab\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc =\
    \ bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab =\
    \ ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc\
    \ * ac\n\tlocal bc_ab = bc * ab\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab = ab *\
    \ ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac = ac *\
    \ ac\n\tlocal ac_ab = ac * ab\n\tlocal ab_bc = ab * bc\n\tlocal ab_bc = ab * bc\n\
    \t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4c1p9fju.lua:81: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  local cd\
    \ = math.abs(d - c)\n  \n  return ab > bc and ab > ad and ab > cd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpohwyhsit.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpohwyhsit.lua:11: in local 'candidate'\n\t/tmp/tmpohwyhsit.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 then\n    return b == 0 and c == 0 or b\
    \ == 0 and c == 0 or b == 0 and c == 0 or b == 0 and c == 0\n  elseif b == 0 then\n\
    \    return a == 0 and c == 0 or a == 0 and c == 0 or a == 0 and c == 0 or a ==\
    \ 0 and c == 0\n  elseif c == 0 then\n    return a == 0 and b == 0 or a == 0 and\
    \ b == 0 or a == 0 and b == 0 or a == 0 and b == 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpil9s7p3k.lua:34: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab > 0 and bc > 0 and\
    \ ac > 0 and (ab + bc + ac) == (a + b + c)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60qx9jms.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp60qx9jms.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\tlocal de\
    \ = math.abs(d - a)\n\treturn ab >= bc and ab >= ad and bc >= de\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuhckidp.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpkuhckidp.lua:11: in local 'candidate'\n\t/tmp/tmpkuhckidp.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and ab + bc + ac == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s3sze74.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6s3sze74.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxboxa4s.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprxboxa4s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2tk5hn.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6n2tk5hn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq * bc_sq - cb_sq\
    \ * ab_sq\n\t\n\tif det < 0 then\n\t\treturn false\n\telse\n\t\treturn det > 0\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojpxz1ep.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpojpxz1ep.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpignasfxa.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxboxa4s.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprxboxa4s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  local de\
    \ = math.abs(d - e)\n  return ab > bc and ab > ad and ab > de\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_n4_9xk.lua:11:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp0_n4_9xk.lua:11: in local 'candidate'\n\t/tmp/tmp0_n4_9xk.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\treturn ab_ac + ab_bc <= bc_ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1801yn5y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1801yn5y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(a-b)\n   local bc = math.abs(b-c)\n   local ca = math.abs(c-a)\n  \
    \ return ab > bc and ab > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m_zzyw0.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8m_zzyw0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal cd = math.abs(c-a)\n\t\n\tif ab > bc then\
    \ return ab > cd end\n\treturn bc > cd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl40249em.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl40249em.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    local det = ab * bc - ac * ac\n    return det > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb21ve96o.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb21ve96o.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab = math.abs(a + b)\n\
    \tlocal bc = math.abs(b + c)\n\tlocal ac = math.abs(a + c)\n\treturn ab > bc and\
    \ (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5cg7zdu.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf5cg7zdu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptg9jt6l5.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a ~= 0 or b ~= 0 or c ~= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpignasfxa.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0rh7zb.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdw0rh7zb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgle8pdom.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgle8pdom.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7d33g25.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd7d33g25.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local abc = ab * bc\n  return\
    \ abc > 0 and abc < ab * ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdjxmn4x.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbdjxmn4x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and (ab\
    \ == bc or ca == b or ca == ca)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaspgq6om.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaspgq6om.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\tlocal det\
    \ = ab * bc - ac * ac\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44o3nbjk.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp44o3nbjk.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a-b)\n\
    \  local bc = math.abs(b-c)\n  local ac = math.abs(a-c)\n  return ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdanpsny9.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdanpsny9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a <= 0 or b <= 0 or c <= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvd3gsl4d.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmz5yq0x.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqmz5yq0x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab*bc*ac > 0 and ab*ac*bc\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawpikcwj.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpawpikcwj.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\t\n\tif ab\
    \ > bc then\n\t\tif ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\tif bc > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9xgjatm.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo9xgjatm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local abc = ab * bc\n  return\
    \ abc > 0 and abc < ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyqxd4kc.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiyqxd4kc.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  local det = ab * cb - bc * ab\n\
    \  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprojkn2g7.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprojkn2g7.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 then\n\t\tif b ~= 0 then\n\t\t\tif c ~=\
    \ 0 then\n\t\t\t\t-- Check that the sides are equal\n\t\t\t\tif a == b and a ==\
    \ c then\n\t\t\t\t\t-- Check that the angle is right\n\t\t\t\t\tif math.abs(math.atan2(c-b,\
    \ a-b)) < math.pi then\n\t\t\t\t\t\treturn true\n\t\t\t\t\telse\n\t\t\t\t\t\t\
    return false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn false\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplacyjul.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpplacyjul.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a-b)\n\
    \  local bc = math.abs(b-c)\n  local cd = math.abs(c-a)\n  return ab == bc and\
    \ ab == cd or ab == cd or bc == cd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6043nqe.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk6043nqe.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ a - b\n   local bc = b - c\n   local ac = c - a\n   if ab == bc and ab == ac\
    \ then\n      return true\n   elseif ab == 0 then\n      return false\n   elseif\
    \ bc == 0 then\n      return false\n   elseif ac == 0 then\n      return false\n\
    \   elseif ab == bc then\n      return false\n   elseif ab == ac then\n      return\
    \ true\n   elseif bc == ac then\n      return true\n   elseif ab == bc then\n\
    \      return true\n   elseif ab == ac then\n      return true\n   else\n    \
    \  return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7jlq_njk.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7jlq_njk.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2tk5hn.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6n2tk5hn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b_glyuv.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_b_glyuv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab == bc and ac == bc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3x4liug.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw3x4liug.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgle8pdom.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgle8pdom.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * bc + bc * b\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pfwhsc_.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5pfwhsc_.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc\n\tlocal cb_sqr = cb * cb\n\tlocal ab_cub = (ab_sqr + bc_sqr\
    \ + cb_sqr) ^ 3\n\tlocal bc_cub = (bc_sqr + ab_sqr + cb_sqr) ^ 3\n\tlocal cb_cub\
    \ = (cb_sqr + ab_sqr + ab_cub) ^ 3\n\treturn ab_cub + bc_cub + cb_cub == 0 \n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mrwbyjc.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2mrwbyjc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7k6bymu.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc7k6bymu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tif a == 0 then\n\t\treturn\
    \ false\n\tend\n\tif b == 0 then\n\t\treturn false\n\tend\n\tif c == 0 then\n\t\
    \treturn false\n\tend\n\tif a > b then\n\t\tlocal t = b\n\t\tb = a\n\t\ta = t\n\
    \tend\n\tif a > c then\n\t\tlocal t = c\n\t\tc = a\n\t\ta = t\n\tend\n\tif b >\
    \ c then\n\t\tlocal t = c\n\t\tc = b\n\t\tb = t\n\tend\n\tif b == c then\n\t\t\
    return false\n\tend\n\tif b > a then\n\t\tlocal t = a\n\t\ta = b\n\t\tb = t\n\t\
    end\n\tif a == c then\n\t\treturn false\n\tend\n\tif a > b then\n\t\tlocal t =\
    \ b\n\t\tb = a\n\t\ta = t\n\tend\n\tif a == b then\n\t\treturn false\n\tend\n\t\
    if a > c then\n\t\tlocal t = c\n\t\tc = a\n\t\ta = t\n\tend\n\tif a == c then\n\
    \t\treturn false\n\tend\n\tif b > c then\n\t\tlocal t = c\n\t\tc = b\n\t\tb =\
    \ t\n\tend\n\tif b == c then\n\t\treturn false\n\tend\n\tif a > b then\n\t\tlocal\
    \ t = b\n\t\tb = a\n\t\ta = t\n\tend\n\tif a == b then\n\t\treturn false\n\tend\n\
    \tif a > c then\n\t\tlocal t = c\n\t\tc = a\n\t\ta = t\n\tend\n\tif a == c then\n\
    \t\treturn false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegdqrjpy.lua:94:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpegdqrjpy.lua:94:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ab > bc and\
    \ ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7uatx91d.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7uatx91d.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2tk5hn.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6n2tk5hn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95_xpf6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp95_xpf6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7tj9uhqy.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7tj9uhqy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = tonumber(a), tonumber(b), tonumber(c)\n\tif a == b and b == c then return\
    \ true end\n\tif a == c then return false end\n\tif b == c then return false end\n\
    \tif a + b > c then return false end\n\tif a + c > b then return false end\n\t\
    if b + c > a then return false end\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjnj5gzp.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdjnj5gzp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\tlocal abc = ab + bc\n\
    \tlocal bca = bc + ca\n\tlocal cab = ca+ab\n\treturn abc > bca\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bjccjk6.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8bjccjk6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw373rnk.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuw373rnk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxboxa4s.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprxboxa4s.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and a == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c then return true end\n\
    \  -- Check that the sides are equal\n  if b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b and b == c then return true end\n  --\
    \ Check that the sides are equal\n  if a == b and c == b then return true end\n\
    \  -- Check that the sides are equal\n  if a == c and b == c then return true\
    \ end\n  -- Check that the sides are equal\n  if b == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c and c\
    \ == a then return true end\n  -- Check that the sides are equal\n  if a == c\
    \ and c == b then return true end\n  -- Check that the sides are equal\n  if a\
    \ == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == a then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c and c == a then return true end\n  -- Check that the sides\
    \ are equal\n  if a == c and c == b then return true end\n  -- Check that the\
    \ sides are equal\n  if a == c and c == c then return true end\n  -- Check that\
    \ the sides are equal\n  if b == c and c == a then return true end\n  -- Check\
    \ that the sides are equal\n  if a == b and b == c and c == a then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if b == c and c == a then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c and c\
    \ == a then return true end\n  -- Check that the sides are equal\n  if a == c\
    \ and c == b then return true end\n  -- Check that the sides are equal\n  if a\
    \ == c and c == c then return true end\n  -- Check that the sides are equal\n\
    \  if b == c and c == a then return true end\n  -- Check that the sides are equal\n\
    \  if a == b and b == c and c == a then return true end\n  -- Check that the sides\
    \ are equal\n  if a == c and c == b then return true end\n  -- Check that the\
    \ sides are equal\n  if a == c and \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzqv6ow64.lua:63: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ab = bc * ab\n\treturn ab_ac + bc_ab > 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcdnu2qf.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzcdnu2qf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_ab\
    \ = ab * ab\n  local bc_bc = bc * bc\n  local bc_ab = bc * ab\n  local ac_ac =\
    \ ac * ac\n  local ab_ac_bc = ab_ac + bc_bc\n  local ab_ac_bc_ab = ab_ac + bc_ab\
    \ + ab_ab\n  local ab_ac_bc_ab_sq = ab_ac_bc * ab_ac_bc\n  local ab_ac_bc_ab_sq_squared\
    \ = ab_ac_bc_ab_sq * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared\
    \ * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared *\
    \ ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared * ab_ac_bc_ab_sq\n\
    \  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared * ab_ac_bc_ab_sq\n  local\
    \ ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared\
    \ = ab_ac_bc_ab_sq_squared * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared =\
    \ ab_ac_bc_ab_sq_squared * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared\
    \ * ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared *\
    \ ab_ac_bc_ab_sq\n  local ab_ac_bc_ab_sq_squared = ab_ac_bc_ab_sq_squared * \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu96x9p7x.lua:34: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return math.abs(math.acos((math.pow(ab,\
    \ 2) + math.pow(bc, 2) - math.pow(ac, 2)) / (2 * ab * bc)) * 180 / math.pi) >=\
    \ 90\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe68uwf6k.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe68uwf6k.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ab == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj4tlsp0.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgj4tlsp0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95_xpf6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp95_xpf6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\
    \treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == c then\n\
    \t\treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif b == c then\n\
    \t\treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or\
    \ a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides\
    \ are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphou13hx5.lua:102: ''end'' expected (to close ''if'' at line
    100) near ''=''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3orcbtet.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3orcbtet.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  local\
    \ bc_bc = bc * bc \n  local ab_bc = ab * bc \n  return ab_sqr + bc_sqr - ab_ac\
    \ - bc_bc == 0 and ab_ac + bc_bc == 0 and ab_bc == 0 and bc_sqr == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimy8w9oi.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpimy8w9oi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  local ab_bc\
    \ = ab * bc\n  local bc_ac = bc * ac\n  local ab_ac_bc = ab_ac + bc_ac\n  local\
    \ ab_bc_ac = ab_bc + ac_ac\n  local ab_ac_bc_sq = ab_ac_bc * ab_ac_bc\n  local\
    \ ab_bc_ac_bc_sq = ab_bc_ac + bc_ac_bc * bc_ac\n  local det = ab_ac_bc_sq - ab_bc_ac_bc_sq\n\
    \  local sq = ab_sq + bc_sq - ac_sq\n  return det >= 0 and sq >= 0 and ab_sq +\
    \ bc_sq - ac_sq == 0 and ab_ac_bc_sq - ab_bc_ac_bc_sq == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpilmtzzmo.lua:19:\
    \ attempt to perform arithmetic on a nil value (global 'ac_ac')\nstack traceback:\n\
    \t/tmp/tmpilmtzzmo.lua:19: in local 'candidate'\n\t/tmp/tmpilmtzzmo.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95_xpf6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp95_xpf6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 or b == 0 or c == 0\n  then\n    return\
    \ false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppw3ni_ir.lua:31: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ a - b\n    local bc = b - c\n    local ac = c - a\n    local ab_2 = ab * ab\n\
    \    local bc_2 = bc * bc \n    local ac_2 = ac * ac\n    local ab_3 = ab_2 *\
    \ ab\n    local bc_3 = bc_2 * bc\n    local ac_3 = ac_2 * ac\n    local ab_4 =\
    \ ab_2 * ab\n    local bc_4 = bc_2 * bc\n    local ac_4 = ac_2 * ac\n    local\
    \ ab_5 = ab_2 * ab\n    local bc_5 = bc_2 * bc\n    local ac_5 = ac_2 * ac\n \
    \   local ab_6 = ab_2 * ab\n    local bc_6 = bc_2 * bc\n    local ac_6 = ac_2\
    \ * ac\n    local ab_7 = ab_2 * ab\n    local bc_7 = bc_2 * bc\n    local ac_7\
    \ = ac_2 * ac\n    local ab_8 = ab_2 * ab\n    local bc_8 = bc_2 * bc\n    local\
    \ ac_8 = ac_2 * ac\n    local ab_9 = ab_2 * ab\n    local bc_9 = bc_2 * bc\n \
    \   local ac_9 = ac_2 * ac\n    local ab_10 = ab_2 * ab\n    local bc_10 = bc_2\
    \ * bc\n    local ac_10 = ac_2 * ac\n    local ab_11 = ab_2 * ab\n    local bc_11\
    \ = bc_2 * bc\n    local ac_11 = ac_2 * ac\n    local ab_12 = ab_2 * ab\n    local\
    \ bc_12 = bc_2 * bc\n    local ac_12 = ac_2 * ac\n    local ab_13 = ab_2 * ab\n\
    \    local bc_13 = bc_2 * bc\n    local ac_13 = ac_2 * ac\n    local ab_14 = ab_2\
    \ * ab\n    local bc_14 = bc_2 * bc\n    local ac_14 = ac_2 * ac\n    local ab_15\
    \ = ab_2 * ab\n    local bc_15 = bc_2 * bc\n    local ac_15 = ac_2 * ac\n    local\
    \ ab_16 = ab_2 * ab\n    local bc_16 = bc_2 * bc\n    local ac_16 = ac_2 * ac\n\
    \    local ab_17 = ab_2 * ab\n    local bc_17 = bc_2 * bc\n    local ac_17 = ac_2\
    \ * ac\n    local ab_18 = ab_2 * ab\n    local bc_18 = bc_2 * bc\n    local ac_18\
    \ = ac_2 * ac\n    local ab_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp_kcjtyj.lua:81: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \tif det < 0 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmjlhsvx.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprmjlhsvx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9vxi55r.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn9vxi55r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab == bc and\
    \ ab == ca or ab == ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7it9jcl5.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7it9jcl5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\
    \treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == c then\n\
    \t\treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif b == c then\n\
    \t\treturn true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or\
    \ a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides\
    \ are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t\n\t-- Check that the sides are\
    \ equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5n1opw8l.lua:103: ''end'' expected (to close ''if'' at line
    100) near ''lu''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and ab + bc + ac == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6s3sze74.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6s3sze74.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmz5yq0x.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqmz5yq0x.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9xjup2j.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi9xjup2j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive.\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that a + b > c and b + c > a.\n  if a + b > c and b + c > a\
    \ then\n    return false\n  end\n  -- Check that a + c > b and a + b > c.\n  if\
    \ a + c > b and a + b > c then\n    return true\n  end\n  -- Check that b + c\
    \ > a and b + a > c.\n  if b + c > a and b + a > c then\n    return true\n  end\n\
    \  -- Check that a + b > c and b + c > a.\n  if a + b > c and b + c > a then\n\
    \    return true\n  end\n  -- Check that a + c > b and a + b > c.\n  if a + c\
    \ > b and a + b > c then\n    return true\n  end\n  -- Check that b + c > a and\
    \ b + a > c.\n  if b + c > a and b + a > c then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i5woqrh.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4i5woqrh.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a-b)\n\
    \  local bc = math.abs(b-c)\n  local ca = math.abs(c-a)\n  return ab > bc and\
    \ ab > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp877psgld.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp877psgld.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjunt_7y.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxjunt_7y.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab > bc then return true end\n   if ab > ac then return false end\n   if\
    \ bc > ac then return true end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm8f4t1p.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppm8f4t1p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ab == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj4tlsp0.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgj4tlsp0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1qq8tvj.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr1qq8tvj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 and b ~= 0 and c ~= 0 then\n\t\t-- Check\
    \ that the sides are equal\n\t\tif a == b and a == c then\n\t\t\t-- Check that\
    \ the angle is right\n\t\t\tif math.abs(math.atan2(b,c)) < math.pi then\n\t\t\t\
    \treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\t--\
    \ Check that the angle is right\n\t\t\tif math.abs(math.atan2(b,c)) < math.pi\
    \ then\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1s9pgq9.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk1s9pgq9.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 or b == 0 or c == 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp42arsnle.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b-a)\n   local bc = math.abs(c-b)\n   local ac = math.abs(c-a)\n  \
    \ return (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqmxajns.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpaqmxajns.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b then\n\t\t\
    return true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7ssiy6j.lua:130: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7d33g25.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd7d33g25.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab*bc*ac >= 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp312z7dwo.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp312z7dwo.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptg9jt6l5.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1qq8tvj.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr1qq8tvj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal\
    \ bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3\
    \ = bc_2 * bc \n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4\
    \ = bc_3 * bc \n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5\
    \ = bc_4 * bc \n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6\
    \ = bc_5 * bc \n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7\
    \ = bc_6 * bc \n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8\
    \ = bc_7 * bc \n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9\
    \ = bc_8 * bc \n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10\
    \ = bc_9 * bc \n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal\
    \ bc_11 = bc_10 * bc \n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\
    \tlocal bc_12 = bc_11 * bc \n\tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12\
    \ * ab\n\tlocal bc_13 = bc_12 * bc \n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14\
    \ = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc \n\tlocal ac_14 = ac_13 * ac\n\tlocal\
    \ ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc \n\tlocal ac_15 = ac_14 * ac\n\
    \tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc \n\tlocal ac_16 = ac_15\
    \ * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc \n\tlocal ac_17\
    \ = ac_16 * ac\n\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplxotszbb.lua:78: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    local abc = ab + bc\n    if abc > ac then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnql8egdb.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnql8egdb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(a-b)\n\
    \  local bc = math.abs(b-c)\n  local ca = math.abs(c-a)\n  return ab > bc and\
    \ ab > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp877psgld.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp877psgld.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_bc = bc * bc \n\treturn ab_sqr + bc_sqr + ac_sqr - ab_ac - bc_bc == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_62nr5s2.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_62nr5s2.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\t\
    end\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b\
    \ == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1a0w_syf.lua:91: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95_xpf6n.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp95_xpf6n.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12w3rscd.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp12w3rscd.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- The three\
    \ sides of a triangle are a, b, c\n\t-- The angle between them is given by acos((a+b+c)/2)\n\
    \t-- The hypotenuse is given by sqrt(a^2 + b^2 + c^2)\n\t-- The area of the triangle\
    \ is given by a * b * c\n\t-- The area of the hypotenuse is given by sqrt(a^2\
    \ + b^2)\n\t-- The area of the triangle is given by a * b * c\n\t-- The area of\
    \ the hypotenuse is given by sqrt(a^2 + b^2)\n\t-- The area of the triangle is\
    \ given by a * b * c\n\t-- The area of the hypotenuse is given by sqrt(a^2 + b^2)\n\
    \t-- The area of the triangle is given by a * b * c\n\t-- The area of the hypotenuse\
    \ is given by sqrt(a^2 + b^2)\n\t-- The area of the triangle is given by a * b\
    \ * c\n\t-- The area of the hypotenuse is given by sqrt(a^2 + b^2)\n\t-- The area\
    \ of the triangle is given by a * b * c\n\t-- The area of the hypotenuse is given\
    \ by sqrt(a^2 + b^2)\n\t-- The area of the triangle is given by a * b * c\n\t\
    -- The area of the hypotenuse is given by sqrt(a^2 + b^2)\n\t-- The area of the\
    \ triangle is given by a * b * c\n\t-- The area of the hypotenuse is given by\
    \ sqrt(a^2 + b^2)\n\t-- The area of the triangle is given by a * b * c\n\t-- The\
    \ area of the hypotenuse is given by sqrt(a^2 + b^2)\n\t-- The area of the triangle\
    \ is given by a * b * c\n\t-- The area of the hypotenuse is given by sqrt(a^2\
    \ + b^2)\n\t-- The area of the triangle is given by a * b * c\n\t-- The area of\
    \ the hypotenuse is given by sqrt(a^2 + b^2)\n\t-- The area of the triangle is\
    \ given by a * b * c\n\t-- The area of the hypotenuse is given by sqrt(a^2 + b^2)\n\
    \t-- The area of the triangle is given by a * b * c\n\t-- The area of the hypotenuse\
    \ is given by sqrt(a^2 + b^2)\n\t-- The area of the triangle is given by a * b\
    \ * c\n\t-- The area \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz1gsecqj.lua:57: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\t\n\tif ab\
    \ > bc then\n\t\tif ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\tif bc > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9xgjatm.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo9xgjatm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjunt_7y.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxjunt_7y.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 and b ~= 0 and c ~= 0 then\n\t\t-- Check\
    \ that the sides are equal\n\t\tif a == b and a == c then\n\t\t\t-- Check that\
    \ the angles are right\n\t\t\tif math.abs(math.atan2(b,a)) < math.pi/2 then\n\t\
    \t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\
    \treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjf5lmbl.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnjf5lmbl.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a <= 0 or b <= 0 or c <= 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvd3gsl4d.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\treturn ab_ac + ab_bc > 0 and bc_ac\
    \ + bc_bc > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptvhz12f.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpptvhz12f.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   return (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0m0vh4hm.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0m0vh4hm.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkgpvghd.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  local\
    \ ab_ac_squared = ab_ac * ab_ac\n  local bc_ab = bc * ab\n  local bc_ab_squared\
    \ = bc_ab * bc_ab\n  local bc_ac = bc * ac\n  local bc_ac_squared = bc_ac * bc_ac\n\
    \  local ab_ab_squared = ab_sqr + bc_ab_squared\n  local ab_ac_squared = ab_ac_squared\
    \ + bc_ac_squared\n  return ab_sqr + bc_ab_squared + ab_ac_squared <= ab_ac_squared\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9pq17vw.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps9pq17vw.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal\
    \ bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal\
    \ ac_ac = ac * ac\n\tlocal ab_bc = ab * bc\n\tlocal ab_ac_bc = ab_ac * bc\n\t\
    local ab_bc_ac = ab_ab * ac\n\tlocal ab_ac_bc_ac = ab_ac_bc * ac\n\tlocal ab_ac_bc_ab\
    \ = ab_ac_bc * ab\n\tlocal bc_ab_ac = bc_ab * ac\n\tlocal bc_ab_ab = bc_ab * ab\n\
    \tlocal bc_bc_ac = bc_bc * ac\n\tlocal bc_bc_ab = bc_bc * ab\n\tlocal bc_ab_ac_bc\
    \ = bc_ab_ac * bc\n\tlocal bc_ab_ac_bc_ac = bc_ab_ac_bc * ac\n\tlocal bc_ab_ac_bc_ab\
    \ = bc_ab_ac_bc * ab\n\tlocal bc_bc_ab_ac = bc_bc_ab * ac\n\tlocal bc_bc_ab_ab\
    \ = bc_bc_ab * ab\n\tlocal bc_ab_ac_bc_ac = bc_ab_ac_bc * ac\n\tlocal bc_ab_ac_bc_ab\
    \ = bc_ab_ac_bc * ab\n\tlocal bc_ab_ac_bc_ab_ac = bc_ab_ac_bc_ac * ac\n\tlocal\
    \ bc_ab_ac_bc_ab_ab = bc_ab_ac_bc_ab * ab\n\tlocal bc_bc_ab_ac_bc_ac = bc_bc_ab_ac\
    \ * ac\n\tlocal bc_bc_ab_ac_bc_ab = bc_bc_ab_ac * ab\n\tlocal bc_bc_ab_ac_bc_ab_ac\
    \ = bc_bc_ab_ac_bc_ac * ac\n\tlocal bc_bc_ab_ac_bc_ab_ab = bc_bc_ab_ac_bc_ab *\
    \ ab\n\tlocal bc_ab_ac_bc_ac_bc = bc_ab_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7rkgtjfv.lua:60: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyyc4but3.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(b - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n\
    \   if ab > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9vxi55r.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn9vxi55r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local cb = c - b\n  local det = ab * cb - bc * ab\n\
    \  if det < 0 then\n    return false\n  elseif det > 0 then\n    return true\n\
    \  else\n    return ab * bc == -ab * cb\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gonpqry.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8gonpqry.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyluunw5q.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp78m163em.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(c-a)\n\t\n\tif ab > bc then\
    \ return ab > ac end\n\treturn bc > ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppygwy82l.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppygwy82l.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or math.abs(b - c) == math.abs(a - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvwsi7c5.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkvwsi7c5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- The sides\
    \ are a, b, c\n\t-- The angles are the angles between the sides\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3tagemcl.lua:83: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab > bc and\n        ab > ac and\n        ab > bc\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aky3hy7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8aky3hy7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2tk5hn.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6n2tk5hn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n2tk5hn.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6n2tk5hn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b and a == c then\n\
    \    return true\n  end\n  \n  -- Check that the sides are equal\n  if a == c\
    \ then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ b == c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n\
    \  if a == b or b == c or c == a then\n    return true\n  end\n  \n  -- Check\
    \ that the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or b == c then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or b == c then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or b == c then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or b == c then\n    return true\n  end\n  \n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  \n  -- Check that the sides are equal\n  if a == b or a == c or b ==\
    \ c then\n    return true\n  end\n  \n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4kgqheqo.lua:106: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvno5el3r.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvno5el3r.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7k6bymu.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpc7k6bymu.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal abc = math.abs(bc - ab)\n\treturn ab ==\
    \ abc or ab == bc or ab == c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfgicfs8.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzfgicfs8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9xjup2j.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi9xjup2j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n   local ab =\
    \ math.abs(a-b)\n   local bc = math.abs(b-c)\n   local ac = math.abs(a-c)\n  \
    \ return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla33czew.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpla33czew.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lfon_g5.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2lfon_g5.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(a\
    \ - b)\n\tlocal bc = math.abs(b - c)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab > ac or ab == bc)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppj74w67d.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppj74w67d.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn (ab + bc == ac)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jray1_h.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0jray1_h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph_h490cb.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyyc4but3.lua:30: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a == 0 then return False end\n  if b == 0 then\
    \ return False end\n  if c == 0 then return False end\n  -- Check that the sides\
    \ are equal\n  if a ~= b then return False end\n  if a ~= c then return False\
    \ end\n  -- Check that the angles are right\n  if math.abs(math.atan2(b, a) -\
    \ math.atan2(c, b)) > math.pi / 2 then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcylh4r2l.lua:26:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpcylh4r2l.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc \n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  return\
    \ ab_sq + bc_sq == ab_ac + bc_sq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicx5uitw.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpicx5uitw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \tif det < 0 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprmjlhsvx.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprmjlhsvx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ab > bc and\
    \ (ab > ac or math.abs(a - c) < math.abs(b - c))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphdl4ugf9.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphdl4ugf9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9dlthd1.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9dlthd1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n  local ab = a\
    \ - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazbunj5l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpazbunj5l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- right_angle_triangle(3, 4, 5) == True\n-- right_angle_triangle(1,\
    \ 2, 3) == False\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_tw505l.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe_tw505l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659793951
