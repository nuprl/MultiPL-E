name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n-- the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- array = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ list is equal to the length of operand list minus one.\n-- Operand is a list of\
  \ of non-negative integers.\n-- Operator list has at least one operator, and operand\
  \ list has at least two operands.\nlocal function do_algebra(operator, operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = operand[1]\n  for i = 2, #operand do\n    result =\
    \ operator[operator](result, operand[i])\n  end\n  return result\nend", "\tlocal\
    \ result = 0\n\tlocal index = 1\n\twhile index < #operator do\n\t\tlocal operator\
    \ = operator[index]\n\t\tlocal operand = operand[index]\n\t\tif operator == '+'\
    \ then\n\t\t\tresult = result + operand\n\t\telseif operator == '-' then\n\t\t\
    \tresult = result - operand\n\t\telseif operator == '*' then\n\t\t\tresult = result\
    \ * operand\n\t\telseif operator == '/' then\n\t\t\tresult = result // operand\n\
    \t\telseif operator == '**' then\n\t\t\tresult = result ** operand\n\t\telse\n\
    \t\t\tassert(false, \"Unknown operator: \" .. operator)\n\t\tend\n\t\tindex =\
    \ index + 1\n\tend\n\treturn result\nend", "  local result = operand[1]\n  for\
    \ i = 2, #operand do\n    result = operator[operator](result, operand[i])\n  end\n\
    \  return result\nend", "  local result = operand[1]\n  for i = 2, #operand do\n\
    \    result = operator[operand[i-1]](result, operand[i])\n  end\n  return result\n\
    end", "    local result = operand[1]\n    for i = 2, #operand do\n        result\
    \ = operator[operator](result, operand[i])\n    end\n    return result\nend",
  "\tlocal result = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\
    \tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\t\
    local r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal\
    \ w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b\
    \ = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g =\
    \ 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\
    \tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\t\
    local r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal\
    \ w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b\
    \ = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g =\
    \ 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\
    \tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\t\
    local r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal\
    \ w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b\
    \ = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g =\
    \ 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\
    \tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\t\
    local r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal\
    \ w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal b\
    \ = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g =\
    \ 0\n", "\tlocal result = 0\n\tlocal operator_count = #operator\n\tlocal operand_count\
    \ = #operand\n\tlocal i = 1\n\twhile i <= operand_count do\n\t\tlocal operand\
    \ = operand[i]\n\t\tlocal operator = operator[i]\n\t\tlocal operator_symbol =\
    \ operator:sub(1, 1)\n\t\tlocal operator_symbol_count = #operator_symbol\n\t\t\
    local operator_symbol_i = 0\n\t\twhile operator_symbol_i <= operator_symbol_count\
    \ do\n\t\t\tlocal operator_symbol = operator_symbol[operator_symbol_i]\n\t\t\t\
    local operator_symbol_count = #operator_symbol\n\t\t\tlocal operator_symbol_i\
    \ = 0\n\t\t\twhile operator_symbol_i <= operator_symbol_count do\n\t\t\t\tlocal\
    \ operator_symbol = operator_symbol[operator_symbol_i]\n\t\t\t\tlocal operator_symbol_count\
    \ = #operator_symbol\n\t\t\t\tlocal operator_symbol_i = 0\n\t\t\t\twhile operator_symbol_i\
    \ <= operator_symbol_count do\n\t\t\t\t\tlocal operator_symbol = operator_symbol[operator_symbol_i]\n\
    \t\t\t\t\tlocal operator_symbol_count = #operator_symbol\n\t\t\t\t\tlocal operator_symbol_i\
    \ = 0\n\t\t\t\t\twhile operator_symbol_i <= operator_symbol_count do\n\t\t\t\t\
    \t\tlocal operator_symbol = operator_symbol[operator_symbol_i]\n\t\t\t\t\t\tlocal\
    \ operator_symbol_count = #operator_symbol\n\t\t\t\t\t\tlocal operator_symbol_i\
    \ = 0\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tresult = result + (operand\
    \ - operator) * operator_symbol\n\t\ti = i + 1\n\tend\n\treturn result\nend",
  "    local result = operand[1]\n    for i = 2, #operand do\n        result = operator[operator](result,\
    \ operand[i])\n    end\n    return result\nend", "  local result = operand[1]\n\
    \  for i = 2, #operand do\n    result = operator[result]\n    result = operator[result]\n\
    \  end\n  return result\nend", "\tlocal result = operand[1]\n\tfor i = 2, #operand\
    \ do\n\t\tresult = operator[operator](result, operand[i])\n\tend\n\treturn result\n\
    end", "    local result = operand[1]\n    for i = 2, #operand do\n        result\
    \ = operator[operator](result, operand[i])\n    end\n    return result\nend",
  "  local result = operand[1]\n  for i = 2, #operand do\n    result = operator[result]\n\
    \  end\n  return result\nend", "  local result = 0\n  for i = 1, #operator do\n\
    \    result = result + operand[#operand-i] * operator[i]\n  end\n  return result\n\
    end", "\tlocal result = operand[1]\n\tlocal i = 1\n\twhile i < #operand do\n\t\
    \tresult = operator[operand[i]](result, operand[i+1])\n\t\ti = i + 2\n\tend\n\t\
    return result\nend", "\tlocal result = 0\n\tlocal operator_count = #operator\n\
    \tlocal operand_count = #operand\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\
    \tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\t\
    local q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal\
    \ v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a\
    \ = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f =\
    \ 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\
    \tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\t\
    local q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal\
    \ v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a\
    \ = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f =\
    \ 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\
    \tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\t\
    local q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal\
    \ v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a\
    \ = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f =\
    \ 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\
    \tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\t\
    local q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal\
    \ v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a\
    \ = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0", "  local result = operand[1]\n\
    \  for i = 2, #operand do\n    result = operator[operator](result, operand[i])\n\
    \  end\n  return result\nend", "  local result = 0\n  local operator_count = #operator\n\
    \  local operand_count = #operand\n  local operator_stack = {}\n  local operand_stack\
    \ = {}\n  local operator_stack_size = #operator_stack\n  local operand_stack_size\
    \ = #operand_stack\n  local operator_stack_index = 0\n  local operand_stack_index\
    \ = 0\n  local operator_index = 0\n  local operand_index = 0\n  local operator_stack_value\n\
    \  local operand_stack_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n  local operator\n  local operand\n  local operator_value\n\
    \  local operand_value\n", "  local result = operand[1]\n  for i = 2, #operand\
    \ do\n    result = operator[operator](result, operand[i])\n  end\n  return result\n\
    end", "\tlocal result = operand[1]\n\tfor i = 2, #operand do\n\t\tlocal op = operator[i]\n\
    \t\tlocal operand2 = operand[i]\n\t\tif op == '+' then\n\t\t\tresult = result\
    \ + operand2\n\t\telseif op == '-' then\n\t\t\tresult = result - operand2\n\t\t\
    elseif op == '*' then\n\t\t\tresult = result * operand2\n\t\telseif op == '/'\
    \ then\n\t\t\tresult = result // operand2\n\t\telseif op == '**' then\n\t\t\t\
    result = result ** operand2\n\t\tend\n\tend\n\treturn result\nend", "\tlocal result\
    \ = operand[1]\n\tfor i = 2, #operand do\n\t\tresult = operator[operator](result,\
    \ operand[i])\n\tend\n\treturn result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
