name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.remove(factors)\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then\
    \ return 2 end\n  -- If n is prime, return its largest factor.\n  if prime_table[n]\
    \ then return prime_table[n] end\n  -- If n is odd, return its largest factor\
    \ plus 1.\n  local factor = 2\n  while n % factor == 0 do\n    factor = factor\
    \ + 1\n  end\n  return factor\nend", "  -- Base case: n is prime.\n  if n == 1\
    \ then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case\n  if n < 2 then return 1 end", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest factor\
    \ of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest\
    \ factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through\
    \ all prime factors of n and return the largest one\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      return i\n    end\n  end\nend", "  -- Base case: n is\
    \ 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base\
    \ case\n  if n < 2 then return 1 end", "  -- Base case: n is 1 or even.\n  if\
    \ n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then\
    \ return 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 == 0 then return 3\
    \ end\n  -- Base case: n is divisible by 2 or 3.\n  if n % 3 == 0 then return\
    \ n end\n  -- Find largest factor of n that is evenly divisible by all primes\
    \ up to n.\n  local function factor(n)\n    local function factors(n)\n      --\
    \ Base case: n is even.\n      if n % 2 == 0 then return 2 end\n      -- Base\
    \ case: n is odd.\n      if n % 2 == 1 then return 1 end\n      -- Find all factors\
    \ of n that are evenly divisible by all primes up to n.\n      local function\
    \ factors(n)\n        -- Base case: n is even.\n        if n % 2 == 0 then return\
    \ 2 end\n        -- Base case: n is odd.\n        if n % 2 == 1 then return 1\
    \ end\n        -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n        local function factors(n)\n          -- Base case: n is even.\n\
    \          if n % 2 == 0 then return 2 end\n          -- Base case: n is odd.\n\
    \          if n % 2 == 1 then return 1 end\n          -- Find all factors of n\
    \ that are evenly divisible by all primes up to n.\n          local function factors(n)\n\
    \            -- Base case: n is even.\n            if n % 2 == 0 then return 2\
    \ end\n            -- Base case: n is odd.\n            if n % 2 == 1 then return\
    \ 1 end\n            -- Find all factors of n that are evenly divisible by all\
    \ primes up to n.\n            local function factors(n)\n              -- Base\
    \ case: n is even.\n              if n % 2 == 0 then return 2 end\n          \
    \    -- Base case: n is odd.\n              if n % 2 == 1 then return 1 end\n\
    \              -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n              local function factors(n)\n                -- Base case:\
    \ n is even.\n                if n % 2 == 0 then return 2 end\n              \
    \  -- Base case: n is odd.\n                if n % 2 == 1 then return 1 end\n\
    \                -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n                local function factors(n)\n                  -- Base\
    \ case: n is even.\n                  if n % ", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Otherwise, loop through all possible factors of n\
    \ and return the largest one\n  for i = 2, n do\n    if n % i == 0 then\n    \
    \  return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one\n  local m = math.floor(math.sqrt(n))\n  while m % 2 == 0 do\n\
    \    m = m / 2\n  end\n  return m + 1\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if i %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- Base case\n  if n < 2 then return 1 end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest factor of 2\n \
    \ if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the prime\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end", "  -- The prime factors of n are 1, 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29\n  -- See http://primes.utm.edu/prove/prove2_3.html\n  -- The\
    \ largest prime factor is 29.\n  -- The smallest prime factor is 2.\n  -- The\
    \ largest prime factor is 2^29 = 8388608.\n  -- The smallest prime factor is 2^2\
    \ = 4.\n  -- The largest prime factor is 2^29 - 1 = 8388609.\n  -- The smallest\
    \ prime factor is 2^2 - 1 = 2.\n  -- The largest prime factor is 2^29 - 2 = 8388610.\n\
    \  -- The smallest prime factor is 2^2 - 2 = 4.\n  -- The largest prime factor\
    \ is 2^29 - 3 = 8388611.\n  -- The smallest prime factor is 2^2 - 3 = 2.\n  --\
    \ The largest prime factor is 2^29 - 4 = 8388612.\n  -- The smallest prime factor\
    \ is 2^2 - 4 = 1.\n  -- The largest prime factor is 2^29 - 5 = 8388613.\n  --\
    \ The smallest prime factor is 2^2 - 5 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 6 = 8388614.\n  -- The smallest prime factor is 2^2 - 6 = 1.\n  -- The\
    \ largest prime factor is 2^29 - 7 = 8388615.\n  -- The smallest prime factor\
    \ is 2^2 - 7 = 1.\n  -- The largest prime factor is 2^29 - 8 = 8388616.\n  --\
    \ The smallest prime factor is 2^2 - 8 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 9 = 8388617.\n  -- The smallest prime factor is 2^2 - 9 = 1.\n  -- The\
    \ largest prime factor is 2^29 - 10 = 8388618.\n  -- The smallest prime factor\
    \ is 2^2 - 10 = 1.\n  -- The largest prime factor is 2^29 - 11 = 8388619.\n  --\
    \ The smallest prime factor is 2^2 - 11 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 12 = 8388620.\n  -- The smallest prime factor is 2^2 - 12 = 1.\n  --\
    \ The largest prime factor is 2^29 - 13 = 8388621.\n  -- The smallest prime factor\
    \ is 2^2 - 13 = 1.\n  -- The largest prime factor is 2^29 - 14 = 8388622.\n  --\
    \ The smallest prime factor is 2^2 - 14 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 15 = 8388623.\n  -- The smallest prime factor is 2^2 - 15 = 1.\n  --\
    \ The largest prime factor ", "  -- The prime factors of n are those that are\
    \ less than or equal to sqrt(n).\n  -- See http://en.wikipedia.org/wiki/Prime_number#Prime-factorization.\n\
    \  -- The first prime factor is sqrt(n). Since n divides evenly into the first\
    \ prime\n  -- factor, there is no need to test beyond sqrt(n).\n  local function\
    \ factors(n)\n    local factors = {}\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        table.insert(factors, i)\n        n = n / i\n      end\n    end\n\
    \    if n ~= 1 then\n      table.insert(factors, n)\n    end\n    return factors\n\
    \  end", "  -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n\
    \  -- The largest prime factor is 2 if n is even.\n  -- The largest prime factor\
    \ is 3 if n is odd.\n  -- The largest prime factor is 6 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 9 if n is odd and greater than 5.\n\
    \  -- The largest prime factor is 12 if n is odd and greater than 7.\n  -- The\
    \ largest prime factor is 6 if n is odd and greater than 11.\n  -- The largest\
    \ prime factor is 24 if n is odd and greater than 15.\n  -- The largest prime\
    \ factor is 24 if n is odd and greater than 23.\n  -- The largest prime factor\
    \ is 6 if n is odd and greater than 27.\n  -- The largest prime factor is 120\
    \ if n is odd and greater than 41.\n  -- The largest prime factor is 240 if n\
    \ is odd and greater than 121.\n  -- The largest prime factor is 480 if n is odd\
    \ and greater than 241.\n  -- The largest prime factor is 720 if n is odd and\
    \ greater than 481.\n  -- The largest prime factor is 960 if n is odd and greater\
    \ than 721.\n  -- The largest prime factor is 1920 if n is odd and greater than\
    \ 961.\n  -- The largest prime factor is 3840 if n is odd and greater than 1281.\n\
    \  -- The largest prime factor is 5760 if n is odd and greater than 1919.\n  --\
    \ The largest prime factor is 11520 if n is odd and greater than 3840.\n  -- The\
    \ largest prime factor is 230400 if n is odd and greater than 5760.\n  -- The\
    \ largest prime factor is 4611680 if n is odd and greater than 11520.\n  -- The\
    \ largest prime factor is 98317600 if n is odd and greater than 230400.\n  --\
    \ The largest prime factor is 1966140800 if n is odd and greater than 4611680.\n\
    \  -- The largest prime factor is 393243600 if n is odd and greater than 98317600.\n\
    \  -- The largest prime factor is 786432000 if n is odd and greater than 1966140800.\n\
    \  -- The largest prime factor is 1579417600 if n is odd and greater than 393243600.\n\
    \  -- The largest prime factor is 3145728000 if n is odd and greater than 786432000.\n\
    \  -- The largest prime factor is 628326400 if n is odd and greater than 1579417600.\n\
    \  -- ", "  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- If n is\
    \ even, return its largest factor of 2\n  if n % 2 == 0 then\n    return 2\n \
    \ end\n  -- If n is odd, return its largest factor of 3\n  if n % 3 == 0 then\n\
    \    return 3\n  end\n  -- If n is prime, return its largest factor of 5\n  if\
    \ n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible by 2, return its\
    \ largest factor of 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is\
    \ divisible by 3, return its largest factor of 5\n  if n % 5 == 0 then\n    return\
    \ 5\n  end\n  -- If n is divisible by 5, return its largest factor of 7\n  if\
    \ n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible by 7, return its\
    \ largest factor of 11\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n\
    \ is divisible by 11, return its largest factor of 13\n  if n % 13 == 0 then\n\
    \    return 13\n  end\n  -- If n is divisible by 13, return its largest factor\
    \ of 17\n  if n % 17 == 0 then\n    return 17\n  end\n  -- If n is divisible by\
    \ 17, return its largest factor of 19\n  if n % 19 == 0 then\n    return 19\n\
    \  end\n  -- If n is divisible by 19, return its largest factor of 23\n  if n\
    \ % 23 == 0 then\n    return 23\n  end\n  -- If n is divisible by 23, return its\
    \ largest factor of 29\n  if n % 29 == 0 then\n    return 29\n  end\n  -- If n\
    \ is divisible by 29, return its largest factor of 31\n  if n % 31 == 0 then\n\
    \    return 31\n  end\n  -- If n is divisible by 31, return its largest factor\
    \ of 37\n  if n % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by\
    \ 37, return its largest factor of 41\n  if n % 41 == 0 then\n    return 41\n\
    \  end\n  -- If n is divisible by 41, return its largest factor of 43\n  if n\
    \ % 43 == 0 then\n    return 43\n  end\n  -- If n is divisible by 43, return its\
    \ largest factor of 47\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n\
    \ is divisible by 47, return its largest factor of 53\n  if n % 53 == 0 then\n\
    \    return 53\n  end\n  ", "    local factors = {}\n    for i = 2, n do\n   \
    \     if n % i == 0 then\n            table.insert(factors, i)\n            n\
    \ = n / i\n        end\n    end\n    return table.max(factors)\nend", "  -- Base\
    \ case: n is 1 or even.\n  if n == 1 or n % 2 == 0 then return 2 end", "  if n\
    \ < 2 then return nil end\n  local factor = 2\n  while n > factor do\n    if n\
    \ % factor == 0 then\n      n = n / factor\n      factor = factor * 2\n    else\n\
    \      factor = factor * 2\n    end\n  end\n  return factor\nend", "  -- Base\
    \ case\n  if n < 2 then\n    return nil\n  end", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- The largest prime factor is n-1\
    \ if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2 if n is\
    \ even and 3 if n is odd.\n  -- The largest prime factor is 1 if n is odd and\
    \ 2 if n is even.\n  -- The largest prime factor is 1 if n is even and 3 if n\
    \ is odd.\n  -- The largest prime factor is 2 if n is even and 3 if n is odd.\n\
    \  -- The largest prime factor is 3 if n is even and 5 if n is odd.\n  -- The\
    \ largest prime factor is 5 if n is even and 7 if n is odd.\n  -- The largest\
    \ prime factor is 7 if n is even and 11 if n is odd.\n  -- The largest prime factor\
    \ is 11 if n is even and 13 if n is odd.\n  -- The largest prime factor is 13\
    \ if n is even and 17 if n is odd.\n  -- The largest prime factor is 17 if n is\
    \ even and 19 if n is odd.\n  -- The largest prime factor is 19 if n is even and\
    \ 23 if n is odd.\n  -- The largest prime factor is 23 if n is even and 29 if\
    \ n is odd.\n  -- The largest prime factor is 29 if n is even and 31 if n is odd.\n\
    \  -- The largest prime factor is 31 if n is even and 37 if n is odd.\n  -- The\
    \ largest prime factor is 37 if n is even and 43 if n is odd.\n  -- The largest\
    \ prime factor is 43 if n is even and 47 if n is odd.\n  -- The largest prime\
    \ factor is 47 if n is even and 53 if n is odd.\n  -- The largest prime factor\
    \ is 53 if n is even and 59 if n is odd.\n  -- The largest prime factor is 59\
    \ if n is even and 63 if n is odd.\n  -- The largest prime factor is 63 if n is\
    \ even and 67 if n is odd.\n  -- The largest prime factor is 67 if n is even and\
    \ 73 if n is odd.\n  -- The largest prime factor is 73 if n is even and 79 if\
    \ n is odd.\n  -- The largest prime factor is 79 if n is even and 83 if n is odd.\n\
    \  -- The largest prime factor is 83 if n is even and 89 if n is odd.\n  -- The\
    \ largest ", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = i\n            n =\
    \ n / i\n        else\n            i = i + 1\n        end\n    end\n    return\
    \ factors[#factors]\nend", "    local factor = 1\n    local i = 1\n    while i\
    \ * factor <= n do\n        factor = factor * i\n        i = i + 1\n    end\n\
    \    return factor\nend", "  -- Base case\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop\
    \ through all possible factors of n and return the largest one\n  for i = 2, n\
    \ do\n    if n % i == 0 then return i end\n  end\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = i\n            n = n / i\n        else\n           \
    \ i = i + 1\n        end\n    end\n    return factors[#factors]\nend", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd,\
    \ return its largest prime factor plus one\n  local m = math.floor((math.sqrt(n)\
    \ + 1.0) / 2.0)\n  while m % 2 == 0 do\n    m = math.floor((math.sqrt(m) + 1.0)\
    \ / 2.0)\n  end\n  return m + 1\nend", "  -- Base case: n is 1 or 2.\n  if n ==\
    \ 1 or n == 2 then\n    return n\n  -- Sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\n\
    \  elseif n % 2 == 0 then\n    local m = n / 2\n    local i = 3\n    while i <=\
    \ m do\n      local p = i * i\n      local q = m / p\n      local r = m % p\n\
    \      if r == 0 then\n        local s = i\n        while s * s <= m do\n    \
    \      s = s + 1\n        end\n        return s * s\n      else\n        i = i\
    \ + 1\n      end\n    end\n  end\n  -- The prime factors of n are 2 and n.\n \
    \ local i = 3\n  while i <= n do\n    local p = i * i\n    local q = n / p\n \
    \   local r = n % p\n    if r == 0 then\n      local s = i\n      while s * s\
    \ <= n do\n        s = s + 1\n      end\n      return s * s\n    else\n      i\
    \ = i + 1\n    end\n  end\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  n = n / i\n        end\n    end\n    return n and table.remove(factors)\nend",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  -- If n is prime, return\
    \ n\n  if primes[n] then\n    return n\n  end\n  -- If n is divisible by 2, return\
    \ 2\n  if n % 2 == 0 then\n    return 2\n  end\n  -- If n is divisible by 3, return\
    \ 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is divisible by 5, return\
    \ 5\n  if n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible by 7, return\
    \ 7\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible by 11,\
    \ return 11\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n is divisible\
    \ by 13, return 13\n  if n % 13 == 0 then\n    return 13\n  end\n  -- If n is\
    \ divisible by 17, return 17\n  if n % 17 == 0 then\n    return 17\n  end\n  --\
    \ If n is divisible by 19, return 19\n  if n % 19 == 0 then\n    return 19\n \
    \ end\n  -- If n is divisible by 23, return 23\n  if n % 23 == 0 then\n    return\
    \ 23\n  end\n  -- If n is divisible by 29, return 29\n  if n % 29 == 0 then\n\
    \    return 29\n  end\n  -- If n is divisible by 31, return 31\n  if n % 31 ==\
    \ 0 then\n    return 31\n  end\n  -- If n is divisible by 37, return 37\n  if\
    \ n % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by 41, return\
    \ 41\n  if n % 41 == 0 then\n    return 41\n  end\n  -- If n is divisible by 43,\
    \ return 43\n  if n % 43 == 0 then\n    return 43\n  end\n  -- If n is divisible\
    \ by 47, return 47\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n is\
    \ divisible by 53, return 53\n  if n % 53 == 0 then\n    return 53\n  end\n  --\
    \ If n is divisible by 59, return 59\n  if n % 59 == 0 then\n    return 59\n \
    \ end\n  -- If n is divisible by 61, return 61\n  if n % 61 == 0 then\n    return\
    \ 61\n  end\n  -- If n is divisible by 67, return 67\n  if n % 67 == 0 then\n\
    \    return 67\n  end\n  -- If n is divisible by 71, return 71\n  if n % 71 ==\
    \ 0 then\n", "  if n < 2 then return nil end\n  if n == 2 then return 1 end\n\
    \  if n % 2 == 0 then return n end\n  local m = n / 2\n  while m % 2 == 0 do\n\
    \    m = m / 2\n  end\n  while m % 3 == 0 do\n    m = m / 3\n  end\n  while m\
    \ % 5 == 0 do\n    m = m / 5\n  end\n  return m\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then return 1 end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case\n  if n < 2 then\n    return nil\n  end\n\
    \  -- If n is prime, return its prime factor\n  if primes[n] then\n    return\
    \ primes[n]\n  end\n  -- If n is divisible by 2, return 2\n  if n % 2 == 0 then\n\
    \    return 2\n  end\n  -- If n is divisible by 3, return 3\n  if n % 3 == 0 then\n\
    \    return 3\n  end\n  -- If n is divisible by 5, return 5\n  if n % 5 == 0 then\n\
    \    return 5\n  end\n  -- If n is divisible by 7, return 7\n  if n % 7 == 0 then\n\
    \    return 7\n  end\n  -- If n is divisible by 11, return 11\n  if n % 11 ==\
    \ 0 then\n    return 11\n  end\n  -- If n is divisible by 13, return 13\n  if\
    \ n % 13 == 0 then\n    return 13\n  end\n  -- If n is divisible by 17, return\
    \ 17\n  if n % 17 == 0 then\n    return 17\n  end\n  -- If n is divisible by 19,\
    \ return 19\n  if n % 19 == 0 then\n    return 19\n  end\n  -- If n is divisible\
    \ by 23, return 23\n  if n % 23 == 0 then\n    return 23\n  end\n  -- If n is\
    \ divisible by 29, return 29\n  if n % 29 == 0 then\n    return 29\n  end\n  --\
    \ If n is divisible by 31, return 31\n  if n % 31 == 0 then\n    return 31\n \
    \ end\n  -- If n is divisible by 37, return 37\n  if n % 37 == 0 then\n    return\
    \ 37\n  end\n  -- If n is divisible by 41, return 41\n  if n % 41 == 0 then\n\
    \    return 41\n  end\n  -- If n is divisible by 43, return 43\n  if n % 43 ==\
    \ 0 then\n    return 43\n  end\n  -- If n is divisible by 47, return 47\n  if\
    \ n % 47 == 0 then\n    return 47\n  end\n  -- If n is divisible by 53, return\
    \ 53\n  if n % 53 == 0 then\n    return 53\n  end\n  -- If n is divisible by 59,\
    \ return 59\n  if n % 59 == 0 then\n    return 59\n  end\n  -- If n is divisible\
    \ by 61, return 61\n  if n % 61 == 0 then\n    return 61\n  end\n  -- If n is\
    \ divisible by 67, return 67\n  if n % 67 == 0 then\n    return 67\n  end\n  --\
    \ If n is divisible by 71, return 71\n  if n % 7", "  -- Base case\n  if n < 2\
    \ then return 1 end\n  -- If n is even, return its largest factor of 2\n  if n\
    \ % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n\
    \  if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest factor\
    \ of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise, loop through all\
    \ prime factors of n and return the largest\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2\
    \ == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n \
    \ if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest factor\
    \ of 5\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return 5\
    \ end\n    i = i * 3\n  end\n  return n -- n is prime\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- If n is even, 2 is\
    \ the largest prime factor.\n  if n % 2 == 0 then\n    return 2\n  end\n  -- If\
    \ n is odd, 3 is the largest prime factor.\n  if n % 2 == 1 then\n    return 3\n\
    \  end\n  -- If n is odd and even, 5 is the largest prime factor.\n  if n % 3\
    \ == 0 then\n    return 5\n  end\n  -- If n is odd and odd, 7 is the largest prime\
    \ factor.\n  if n % 3 == 1 then\n    return 7\n  end\n  -- If n is odd and odd,\
    \ 9 is the largest prime factor.\n  if n % 5 == 0 then\n    return 9\n  end\n\
    \  -- If n is odd and odd, 11 is the largest prime factor.\n  if n % 7 == 0 then\n\
    \    return 11\n  end\n  -- If n is odd and odd, 13 is the largest prime factor.\n\
    \  if n % 11 == 0 then\n    return 13\n  end\n  -- If n is odd and odd, 17 is\
    \ the largest prime factor.\n  if n % 13 == 0 then\n    return 17\n  end\n  --\
    \ If n is odd and odd, 19 is the largest prime factor.\n  if n % 17 == 0 then\n\
    \    return 19\n  end\n  -- If n is odd and odd, 23 is the largest prime factor.\n\
    \  if n % 19 == 0 then\n    return 23\n  end\n  -- If n is odd and odd, 29 is\
    \ the largest prime factor.\n  if n % 23 == 0 then\n    return 29\n  end\n  --\
    \ If n is odd and odd, 31 is largest prime factor.\n  if n % 29 == 0 then\n  \
    \  return 31\n  end\n  -- If n is odd and odd, 37 is the largest prime factor.\n\
    \  if n % 31 == 0 then\n    return 37\n  end\n  -- If n is odd and odd, 41 is\
    \ the largest prime factor.\n  if n % 37 == 0 then\n    return 41\n  end\n  --\
    \ If n is odd and odd, 43 is the largest prime factor.\n  if n % 41 == 0 then\n\
    \    return 43\n  end\n  -- If n is odd and odd, 47 is the largest prime factor.\n\
    \  if n % 43 == 0 then\n    return 47\n  end\n  -- If n is odd and odd, 53 is\
    \ the largest prime factor.\n  if n % 47 == 0 then\n    return 53\n  end\n  --\
    \ If n is odd and odd, 59 is the largest prime factor.\n  if n % 53 == 0 then\n",
  "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n     \
    \   if n % i == 0 then\n            factors[i] = i\n            n = n / i\n  \
    \      else\n            i = i + 1\n        end\n    end\n    return factors[#factors]\n\
    end", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- The largest\
    \ prime factor is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime\
    \ factor is 2 if n is even.\n  -- The largest prime factor is 1 if n is odd.\n\
    \  -- The largest prime factor is n if n is prime.\n  -- The largest prime factor\
    \ is n if n is odd and n+1 if n is even.\n  -- The largest prime factor is n if\
    \ n is odd and n-1 if n is even.\n  -- The largest prime factor is n if n is odd\
    \ and n+1 if n is even and n-1 if n is prime.\n  -- The largest prime factor is\
    \ n if n is odd and n-1 if n is even and n+1 if n is prime.\n  -- The largest\
    \ prime factor is n if n is odd and n+1 if n is even and n-1 if n is prime and\
    \ n+1 is odd.\n  -- The largest prime factor is n if n is odd and n-1 if n is\
    \ even and n+1 if n is prime and n-1 is odd.\n  -- The largest prime factor is\
    \ n if n is odd and n+1 if n is even and n-1 if n is prime and n+1 is even and\
    \ n-1 is prime.\n  -- The largest prime factor is n if n is odd and n-1 if n is\
    \ even and n+1 if n is prime and n-1 is even and n+1 is prime.\n  -- The largest\
    \ prime factor is n if n is odd and n-1 if n is even and n+1 if n is prime and\
    \ n-1 is even and n+1 is prime and n is odd.\n  -- The largest prime factor is\
    \ n if n is odd and n-1 if n is even and n+1 if n is prime and n-1 is even and\
    \ n+1 is prime and n is even and n-1 is odd.\n  -- The largest prime factor is\
    \ n if n is odd and n-1 if n is even and n+1 if n is prime and n-1 is even and\
    \ n+1 is prime and n is even and n-1 is even and n is odd.\n  -- The largest prime\
    \ factor is n if n is odd and n-1 if n is even and n+1 if n is prime and n-1 is\
    \ even and n+1 is prime and n is even and n-1 is even and n is even and n is odd.\n\
    \  -- The largest prime factor is n if n is odd and n", "  -- Base case: n is\
    \ 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base\
    \ case: n is 1 or 2.\n  if n == 1 or n == 2 then\n    return n\n  end", "  --\
    \ Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n\
    \ is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n\
    \  if n % 2 == 0 then return 3 end\n  -- Base case: n is divisible by 2 or 3.\n\
    \  if n % 3 == 0 then return n end\n  -- Find largest factor of n that is greater\
    \ than or equal to 3.\n  local max_factor = 3\n  local max_factor_index = 1\n\
    \  for i = 4, n, 2 do\n    -- If n is divisible by i, then n is not a prime number.\n\
    \    if n % i == 0 then return nil end\n    -- If n is greater than max_factor,\
    \ then update max_factor and max_factor_index.\n    if n > max_factor then\n \
    \     max_factor = i\n      max_factor_index = i\n    end\n  end\n  return max_factor\n\
    end", "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  -- If n is prime,\
    \ return it\n  if primes[n] then\n    return n\n  end\n  -- If n is divisible\
    \ by 2, return it\n  if n % 2 == 0 then\n    return 2\n  end\n  -- If n is divisible\
    \ by 3, return it\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is divisible\
    \ by 5, return it\n  if n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible\
    \ by 7, return it\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible\
    \ by 11, return it\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n is\
    \ divisible by 13, return it\n  if n % 13 == 0 then\n    return 13\n  end\n  --\
    \ If n is divisible by 17, return it\n  if n % 17 == 0 then\n    return 17\n \
    \ end\n  -- If n is divisible by 19, return it\n  if n % 19 == 0 then\n    return\
    \ 19\n  end\n  -- If n is divisible by 23, return it\n  if n % 23 == 0 then\n\
    \    return 23\n  end\n  -- If n is divisible by 29, return it\n  if n % 29 ==\
    \ 0 then\n    return 29\n  end\n  -- If n is divisible by 31, return it\n  if\
    \ n % 31 == 0 then\n    return 31\n  end\n  -- If n is divisible by 37, return\
    \ it\n  if n % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by 41,\
    \ return it\n  if n % 41 == 0 then\n    return 41\n  end\n  -- If n is divisible\
    \ by 43, return it\n  if n % 43 == 0 then\n    return 43\n  end\n  -- If n is\
    \ divisible by 47, return it\n  if n % 47 == 0 then\n    return 47\n  end\n  --\
    \ If n is divisible by 53, return it\n  if n % 53 == 0 then\n    return 53\n \
    \ end\n  -- If n is divisible by 59, return it\n  if n % 59 == 0 then\n    return\
    \ 59\n  end\n  -- If n is divisible by 61, return it\n  if n % 61 == 0 then\n\
    \    return 61\n  end\n  -- If n is divisible by 67, return it\n  if n % 67 ==\
    \ 0 then\n    return 67\n  end\n  -- If n is divisible by 71, return it\n  if\
    \ n % 71 == 0 then\n", "  -- Base case: n is prime.\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case: n is less than or equal to 1.\n  if n <= 1 then return 1 end\n\
    \  -- Base case: n is even.\n  if n % 2 == 0 then return 2 end\n  -- Base case:\
    \ n is odd.\n  local m = math.floor(n/2)\n  -- Find the largest prime factor of\
    \ n.\n  local i = 1\n  while i * i <= m do\n    i = i * i\n  end\n  return i\n\
    end", "    local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n\
    \            n = n / factor\n        else\n            factor = factor + 1\n \
    \       end\n    end\n    return factor\nend", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end\n  -- Base case: n is even.\n  if n % 2 == 0 then\
    \ return n end\n  -- Find largest factor of n that is smaller than n.\n  local\
    \ function factor(n)\n    -- Divide n by each prime factor of n.\n    for i =\
    \ 2, n do\n      if n % i == 0 then\n        return i\n      end\n    end\n  \
    \  -- n does not divide any prime factor of n.\n    return nil\n  end\n  -- Find\
    \ largest factor of n that is greater than n.\n  local function factor(n)\n  \
    \  -- Divide n by each prime factor of n.\n    for i = 2, n do\n      if n % i\
    \ == 0 then\n        return i\n      end\n    end\n    -- n does not divide any\
    \ prime factor of n.\n    return nil\n  end\n  -- Find largest factor of n that\
    \ is less than n.\n  local function factor(n)\n    -- Divide n by each prime factor\
    \ of n.\n    for i = 2, n do\n      if n % i == 0 then\n        return i\n   \
    \   end\n    end\n    -- n does not divide any prime factor of n.\n    return\
    \ nil\n  end\n  -- Find largest factor of n that is greater than n.\n  local function\
    \ factor(n)\n    -- Divide n by each prime factor of n.\n    for i = 2, n do\n\
    \      if n % i == 0 then\n        return i\n      end\n    end\n    -- n does\
    \ not divide any prime factor of n.\n    return nil\n  end\n  -- Find largest\
    \ factor of n that is less than n.\n  local function factor(n)\n    -- Divide\
    \ n by each prime factor of n.\n    for i = 2, n do\n      if n % i == 0 then\n\
    \        return i\n      end\n    end\n    -- n does not divide any prime factor\
    \ of n.\n    return nil\n  end\n  -- Find largest factor of n that is greater\
    \ than n.\n  local function factor(n)\n    -- Divide n by each prime factor of\
    \ n.\n    for i = 2, n do\n      if n % i == 0 then\n        return i\n      end\n\
    \    end\n    -- n does not divide any prime factor of n.\n    return nil\n  end\n\
    \  -- Find largest factor of n that is less than n.\n  local function factor(n)\n\
    \    -- Divide n by each prime factor of n.\n    for i = 2, n do\n      if n %\
    \ i == 0 then\n        return i\n      end\n    end\n    -- n does not divide\
    \ any prime factor of n.\n    return nil\n  end\n  -- Find largest factor of n\
    \ that is greater than n.\n  local function factor(n)\n    -- Divide n by each\
    \ prime factor of n.\n    for i = 2, n do", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "  -- The prime factors of n are those that\
    \ are less than or equal to sqrt(n).\n  -- For any positive integer n, factors\
    \ of n are those that are less than or equal to\n  -- n/sqrt(n).\n  -- For any\
    \ positive integer n, factors of n are those that are less than or equal to\n\
    \  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are those that\
    \ are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive integer n,\
    \ factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n  --\
    \ For any positive integer n, factors of n are those that are less than or equal\
    \ to\n  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are those\
    \ that are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive integer\
    \ n, factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n\
    \  -- For any positive integer n, factors of n are those that are less than or\
    \ equal to\n  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are\
    \ those that are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive\
    \ integer n, factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n\
    \  -- For any positive integer n, factors of n are those that are less than or\
    \ equal to\n  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are\
    \ those that are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive\
    \ integer n, factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n\
    \  -- For any positive integer n, factors of n are those that are less than or\
    \ equal to\n  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are\
    \ those that are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive\
    \ integer n, factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n\
    \  -- For any positive integer n, factors of n are those that are less than or\
    \ equal to\n  -- n/sqrt(n).\n  -- For any positive integer n, factors of n are\
    \ those that are less than or equal to\n  -- n/sqrt(n).\n  -- For any positive\
    \ integer n, factors of n are those that are less than or equal to\n  -- n/sqrt(n).\n\
    \  -- For any positive integer n, factors of n are those that are less than or\
    \ equal to\n  -- ", "  -- Base case: n is 1 or even.\n  if n == 1 then return\
    \ 2 end\n  -- If n is prime, return its largest factor of n.\n  if prime_table[n]\
    \ then return prime_table[n] end\n  -- If n is composite and larger than the largest\
    \ prime factor of n, return n.\n  if n > largest_prime_factor(prime_table[n])\
    \ then return n end\n  -- Otherwise, loop through all prime factors of n and return\
    \ the largest one.\n  for i = 2, n do\n    if n % i == 0 then\n      -- If n is\
    \ larger than the largest prime factor of i, return i.\n      if n > largest_prime_factor(i)\
    \ then return i end\n      -- Otherwise, return n because n is larger than i.\n\
    \    end\n  end\n  return n\nend", "    local factor = 1\n    while n > 1 do\n\
    \        if n % factor == 0 then\n            n = n / factor\n        else\n \
    \           factor = factor * 2\n        end\n    end\n    return factor\nend",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base case: n is\
    \ 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n is even.\n  if\
    \ n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- Find largest factor\
    \ of n that is smaller than n.\n  local function factor(n)\n    if n % 2 == 0\
    \ then return n end\n    local m = n / 2\n    while m % 2 == 0 do\n      m = m\
    \ / 2\n    end\n    return m\n  end\n  -- Find the largest factor of n that is\
    \ smaller than n.\n  local m = factor(n)\n  -- Repeat steps until we find a factor\
    \ of n that is larger than n.\n  while m > n do\n    m = factor(m)\n  end\n  return\
    \ m\nend", "  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The number itself can be factored into smaller factors.\n  -- The number\
    \ itself is prime.\n  if n < 2 then return 1 end\n  -- If n is even, 2 is the\
    \ largest prime factor.\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ 2 is the largest prime factor of the odd number.\n  -- The number itself is\
    \ prime.\n  if n % 2 == 1 then return 2 end\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The number itself can be factored into\
    \ smaller factors.\n  -- The number itself is prime.\n  local function factor(n)\n\
    \    local factors = {}\n    for i = 2, n do\n      if n % i == 0 then\n     \
    \   table.insert(factors, i)\n      end\n    end\n    return factors\n  end\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The number\
    \ itself can be factored into smaller factors.\n  -- The number itself is prime.\n\
    \  local largest = math.floor(math.sqrt(n))\n  -- The number itself can be factored\
    \ into smaller factors.\n  -- The number itself is prime.\n  local factors = factor(n)\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The number\
    \ itself can be factored into smaller factors.\n  -- The number itself is prime.\n\
    \  local largest2 = math.floor(math.sqrt(n))\n  -- The number itself can be factored\
    \ into smaller factors.\n  -- The number itself is prime.\n  local factors2 =\
    \ factor(n)\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The number itself can be factored into smaller factors.\n  -- The number\
    \ itself is prime.\n  local largest3 = math.floor(math.sqrt(n))\n  -- The number\
    \ itself can be factored into smaller factors.\n  -- The number itself is prime.\n\
    \  local factors3 = factor(n)\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The number itself can be factored into smaller factors.\n\
    \  -- The number itself is prime.\n  local largest4 = math.floor(math.sqrt(n))\n\
    \  -- The number itself can be factored into smaller factors.\n  -- The number\
    \ itself is prime.\n  local factors4 = factor(n)\n  -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n  -- The number itself can be facto", " \
    \   local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n    \
    \    if n % i == 0 then\n            table.insert(factors, i)\n            n =\
    \ n / i\n        else\n            i = i + 1\n        end\n    end\n    if n >\
    \ 1 then\n        table.insert(factors, n)\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  n = n / i\n        else\n            i = i + 1\n        end\n    end\n    return\
    \ n\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is prime,\
    \ return n\n  if prime_table[n] then return n end\n  -- If n is divisible by 2,\
    \ return 2\n  if n % 2 == 0 then return 2 end\n  -- If n is divisible by 3, return\
    \ 3\n  if n % 3 == 0 then return 3 end\n  -- If n is divisible by 5, return 5\n\
    \  if n % 5 == 0 then return 5 end\n  -- If n is divisible by 7, return 7\n  if\
    \ n % 7 == 0 then return 7 end\n  -- If n is divisible by 11, return 11\n  if\
    \ n % 11 == 0 then return 11 end\n  -- If n is divisible by 13, return 13\n  if\
    \ n % 13 == 0 then return 13 end\n  -- If n is divisible by 17, return 17\n  if\
    \ n % 17 == 0 then return 17 end\n  -- If n is divisible by 19, return 19\n  if\
    \ n % 19 == 0 then return 19 end\n  -- If n is divisible by 23, return 23\n  if\
    \ n % 23 == 0 then return 23 end\n  -- If n is divisible by 29, return 29\n  if\
    \ n % 29 == 0 then return 29 end\n  -- If n is divisible by 31, return 31\n  if\
    \ n % 31 == 0 then return 31 end\n  -- If n is divisible by 37, return 37\n  if\
    \ n % 37 == 0 then return 37 end\n  -- If n is divisible by 41, return 41\n  if\
    \ n % 41 == 0 then return 41 end\n  -- If n is divisible by 43, return 43\n  if\
    \ n % 43 == 0 then return 43 end\n  -- If n is divisible by 47, return 47\n  if\
    \ n % 47 == 0 then return 47 end\n  -- If n is divisible by 53, return 53\n  if\
    \ n % 53 == 0 then return 53 end\n  -- If n is divisible by 59, return 59\n  if\
    \ n % 59 == 0 then return 59 end\n  -- If n is divisible by 61, return 61\n  if\
    \ n % 61 == 0 then return 61 end\n  -- If n is divisible by 67, return 67\n  if\
    \ n % 67 == 0 then return 67 end\n  -- If n is divisible by 71, return 71\n  if\
    \ n % 71 == 0 then return 71 end\n  -- If n is divisible by 73, return 73\n  if\
    \ n % 73 == 0 then return 73 end\n  -- If n is ", "  -- The largest prime factor\
    \ is less than or equal to n.\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ then the largest prime factor is less than or equal to n/2.\n  if n % 2 == 0\
    \ then return largest_prime_factor(n/2) end\n  -- If n is odd, then n can only\
    \ be evenly divided by 1 or by 3.\n  if n % 2 == 1 then return 3 end\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  local m = math.floor(math.sqrt(n))\n\
    \  -- The largest prime factor is less than or equal to n/m.\n  local p = n/m\n\
    \  -- The largest prime factor is less than or equal to n/3.\n  local q = n/3\n\
    \  -- The largest prime factor is less than or equal to n/5.\n  local r = n/5\n\
    \  -- The largest prime factor is less than or equal to n/7.\n  local s = n/7\n\
    \  -- The largest prime factor is less than or equal to n/9.\n  local t = n/9\n\
    \  -- The largest prime factor is less than or equal to n/11.\n  local u = n/11\n\
    \  -- The largest prime factor is less than or equal to n/13.\n  local v = n/13\n\
    \  -- The largest prime factor is less than or equal to n/15.\n  local w = n/15\n\
    \  -- The largest prime factor is less than or equal to n/17.\n  local x = n/17\n\
    \  -- The largest prime factor is less than or equal to n/19.\n  local y = n/19\n\
    \  -- The largest prime factor is less than or equal to n/21.\n  local z = n/21\n\
    \  -- The largest prime factor is less than or equal to n/23.\n  local aa = n/23\n\
    \  -- The largest prime factor is less than or equal to n/25.\n  local ab = n/25\n\
    \  -- The largest prime factor is less than or equal to n/27.\n  local ac = n/27\n\
    \  -- The largest prime factor is less than or equal to n/29.\n  local ad = n/29\n\
    \  -- The largest prime factor is less than or equal to n/31.\n  local ah = n/31\n\
    \  -- The largest prime factor is less than or equal to n/33.\n  local ai = n/33\n\
    \  -- The largest prime factor is less than or equal to n/35.\n  local aj = n/35\n\
    \  -- The largest prime factor is less than or equal to n/37.\n  local ak = n/37\n\
    \  -- The largest prime factor is less than or equal to n/39.\n  local al = n/39\n\
    \  -- The largest prime factor is less than or equal to n/41.\n  local am = n/41\n\
    \  -- ", "  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  local\
    \ m = math.floor(math.sqrt(n))\n  while m ~= 1 do\n    if n % m == 0 then\n  \
    \    return m\n    end\n    m = m / 2\n  end\n  return n\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            n = n / i\n            table.insert(factors, i)\n        end\n\
    \        i = i + 1\n    end\n    local largest = table.remove(factors)\n    return\
    \ largest\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n\
    \  end", "  -- Base case: n is 1 or even. Return 1.\n  if n == 1 then return 1\
    \ end\n  -- If n is prime, return its largest factor of n.\n  if prime_table[n]\
    \ then return largest_prime_factor(n / prime_table[n]) end\n  -- If n is odd,\
    \ return its largest factor of n.\n  local function factor(n)\n    if n % 2 then\n\
    \      return factor(n / 2)\n    else\n      return n\n    end\n  end\n  -- Find\
    \ the largest factor of n by trial division.\n  local function trial(divisor)\n\
    \    if divisor > n then return nil end\n    local result = factor(divisor)\n\
    \    if result ~= nil then\n      return result\n    end\n    return trial(divisor\
    \ / 2)\n  end\n  -- Find the largest factor of n by binary search.\n  local function\
    \ binary_search(divisor)\n    local low = 1\n    local high = prime_table[n]\n\
    \    while low < high do\n      local mid = (low + high) / 2\n      if prime_table[mid]\
    \ <= divisor then\n        low = mid + 1\n      else\n        high = mid\n   \
    \   end\n    end\n    return low\n  end\n  -- Find the largest factor of n by\
    \ binary search.\n  local function binary_search_with_memo(divisor, memo)\n  \
    \  local low = 1\n    local high = memo[n]\n    while low < high do\n      local\
    \ mid = (low + high) / 2\n      if prime_table[mid] <= divisor then\n        low\
    \ = mid + 1\n      else\n        high = mid\n      end\n    end\n    return low\n\
    \  end\n  -- Find the largest factor of n by binary search.\n  local function\
    \ binary_search_with_memo_prime(divisor, memo)\n    local low = 1\n    local high\
    \ = memo[n]\n    while low < high do\n      local mid = (low + high) / 2\n   \
    \   if prime_table[mid] <= divisor then\n        low = mid + 1\n      else\n \
    \       high = mid\n      end\n    end\n    return low\n  end\n  -- Find the largest\
    \ factor of n by binary search.\n  local function binary_search_with_memo_prime_prime(divisor,\
    \ memo)\n    local low = 1\n    local high = memo[n]\n    while low < high do\n\
    \      local mid = (low + high) / 2\n      if prime_table[mid] <= divisor then\n\
    \        low = mid + 1\n      else\n        high = mid\n      end\n    end\n \
    \   return low\n  end\n", "  -- Base case: n is 1 or even. Return the smallest\
    \ integer greater than n.\n  if n == 1 then return n end\n  -- Base case: n is\
    \ prime. Return the smallest integer greater than n.\n  if n % 2 == 0 then return\
    \ n end\n  -- Base case: n is even. Return the largest integer less than or equal\
    \ to n/2.\n  local m = n / 2\n  while m % 2 == 0 do\n    m = m / 2\n  end\n  return\
    \ m\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n\
    \  -- Base case: n is divisible by 2.\n  if n % 2 == 0 then\n    return 2\n  end\n\
    \  -- Find largest factor of n that is smaller than n.\n  local max_factor = 1\n\
    \  local max_factor_index = 1\n  for i = 2, n do\n    -- If n is divisible by\
    \ i, then n is not a prime number.\n    if n % i == 0 then\n      -- If n is larger\
    \ than the largest factor so far, then set max_factor to n.\n      if n > max_factor\
    \ then\n        max_factor = n\n        max_factor_index = i\n      end\n    \
    \  -- If n is smaller than the largest factor so far, then set max_factor to n.\n\
    \      elseif n < max_factor then\n        max_factor = n\n        max_factor_index\
    \ = i\n      end\n    end\n  end\n  return max_factor_index\nend", "  -- Base\
    \ case\n  if n < 2 then\n    return nil\n  end", "  -- The largest prime factor\
    \ is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2\
    \ if n is odd and 1 if n is even.\n  -- The largest prime factor is 1 if n is\
    \ odd and -1 if n is even.\n  -- The largest prime factor is -1 if n is odd and\
    \ -2 if n is even.\n  -- The largest prime factor is -2 if n is odd and -3 if\
    \ n is even.\n  -- The largest prime factor is -3 if n is odd and -4 if n is even.\n\
    \  -- The largest prime factor is -4 if n is odd and -5 if n is even.\n  -- The\
    \ largest prime factor is -5 if n is odd and -6 if n is even.\n  -- The largest\
    \ prime factor is -6 if n is odd and -7 if n is even.\n  -- The largest prime\
    \ factor is -7 if n is odd and -8 if n is even.\n  -- The largest prime factor\
    \ is -8 if n is odd and -9 if n is even.\n  -- The largest prime factor is -9\
    \ if n is odd and -10 if n is even.\n  -- The largest prime factor is -10 if n\
    \ is odd and -11 if n is even.\n  -- The largest prime factor is -11 if n is odd\
    \ and -12 if n is even.\n  -- The largest prime factor is -12 if n is odd and\
    \ -13 if n is even.\n  -- The largest prime factor is -13 if n is odd and -14\
    \ if n is even.\n  -- The largest prime factor is -14 if n is odd and -15 if n\
    \ is even.\n  -- The largest prime factor is -15 if n is odd and -16 if n is even.\n\
    \  -- The largest prime factor is -16 if n is odd and -17 if n is even.\n  --\
    \ The largest prime factor is -17 if n is odd and -18 if n is even.\n  -- The\
    \ largest prime factor is -18 if n is odd and -19 if n is even.\n  -- The largest\
    \ prime factor is -19 if n is odd and -20 if n is even.\n  -- The largest prime\
    \ factor is -20 if n is odd and -21 if n is even.\n  -- The largest prime factor\
    \ is -21 if n is odd and -22 if n is even.\n  -- The largest prime factor is -22\
    \ if n is odd and -23 if n is even.\n  -- The largest prime ", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = table.max(factors)\n    if largest\
    \ == n then\n        return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            n = n / i\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    local largest = table.max(factors)\n\
    \    return largest\nend", "  -- Base case\n  if n < 2 then\n    return nil\n\
    \  end", "  -- Base case: n is 1 or even.\n  if n == 1 or n % 2 == 0 then\n  \
    \  return 1\n  end", "    local factors = {}\n    local i = 1\n    while i <=\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return table.remove(factors)\nend", "  -- The largest prime factor\
    \ is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2\
    \ if n is odd and 1 if n is even.\n  -- The largest prime factor is 1 if n is\
    \ odd and -1 if n is even.\n  -- The largest prime factor is -1 if n is odd and\
    \ -2 if n is even.\n  -- The largest prime factor is -2 if n is odd and -3 if\
    \ n is even.\n  -- The largest prime factor is -3 if n is odd and -4 if n is even.\n\
    \  -- The largest prime factor is -4 if n is odd and -5 if n is even.\n  -- The\
    \ largest prime factor is -5 if n is odd and -6 if n is even.\n  -- The largest\
    \ prime factor is -6 if n is odd and -7 if n is even.\n  -- The largest prime\
    \ factor is -7 if n is odd and -8 if n is even.\n  -- The largest prime factor\
    \ is -8 if n is odd and -9 if n is even.\n  -- The largest prime factor is -9\
    \ if n is odd and -10 if n is even.\n  -- The largest prime factor is -10 if n\
    \ is odd and -11 if n is even.\n  -- The largest prime factor is -11 if n is odd\
    \ and -12 if n is even.\n  -- The largest prime factor is -12 if n is odd and\
    \ -13 if n is even.\n  -- The largest prime factor is -13 if n is odd and -14\
    \ if n is even.\n  -- The largest prime factor is -14 if n is odd and -15 if n\
    \ is even.\n  -- The largest prime factor is -15 if n is odd and -16 if n is even.\n\
    \  -- The largest prime factor is -16 if n is odd and -17 if n is even.\n  --\
    \ The largest prime factor is -17 if n is odd and -18 if n is even.\n  -- The\
    \ largest prime factor is -18 if n is odd and -19 if n is even.\n  -- The largest\
    \ prime factor is -19 if n is odd and -20 if n is even.\n  -- The largest prime\
    \ factor is -20 if n is odd and -21 if n is even.\n  -- The largest prime factor\
    \ is -21 if n is odd and -22 if n is even.\n  -- The largest prime factor is -22\
    \ if n is odd and -23 if n is even.\n  -- The largest prime ", "  -- Base case:\
    \ n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n\
    \  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n  if n == 3 then\
    \ return 3 end\n  -- Base case: n is 4 or even.\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- Base case: n is 5.\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 3) end\n  -- Base case: n is 6 or even.\n  if n % 5 == 0 then return largest_prime_factor(n\
    \ / 5) end\n  -- Base case: n is 7 or even.\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 7) end\n  -- Base case: n is 8 or even.\n  if n % 8 == 0 then return largest_prime_factor(n\
    \ / 8) end\n  -- Base case: n is 9 or even.\n  if n % 9 == 0 then return largest_prime_factor(n\
    \ / 9) end\n  -- Base case: n is 10 or even.\n  if n % 10 == 0 then return largest_prime_factor(n\
    \ / 10) end\n  -- Base case: n is 11 or even.\n  if n % 11 == 0 then return largest_prime_factor(n\
    \ / 11) end\n  -- Base case: n is 12 or even.\n  if n % 12 == 0 then return largest_prime_factor(n\
    \ / 12) end\n  -- Base case: n is 13 or even.\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 13) end\n  -- Base case: n is 14 or even.\n  if n % 14 == 0 then return largest_prime_factor(n\
    \ / 14) end\n  -- Base case: n is 15 or even.\n  if n % 15 == 0 then return largest_prime_factor(n\
    \ / 15) end\n  -- Base case: n is 16 or even.\n  if n % 16 == 0 then return largest_prime_factor(n\
    \ / 16) end\n  -- Base case: n is 17 or even.\n  if n % 17 == 0 then return largest_prime_factor(n\
    \ / 17) end\n  -- Base case: n is 18 or even.\n  if n % 18 == 0 then return largest_prime_factor(n\
    \ / 18) end\n  -- Base case: n is 19 or even.\n  if n % 19", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then\n    return nil\n  end", "  -- Base case: n is prime.\n  if n == 1\
    \ then\n    return 1\n  end", "  -- Base case\n  if n < 2 then\n    return nil\n\
    \  end", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base\
    \ case\n  if n == 1 then return 1 end\n  -- If n is prime, return its prime factors\n\
    \  if prime_table[n] then return prime_table[n] end\n  -- If n is divisible by\
    \ 2, return its prime factors\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is divisible by 3, return its prime factors\n  if n % 3\
    \ == 0 then return largest_prime_factor(n / 3) end\n  -- If n is divisible by\
    \ 5, return its prime factors\n  if n % 5 == 0 then return largest_prime_factor(n\
    \ / 5) end\n  -- If n is divisible by 7, return its prime factors\n  if n % 7\
    \ == 0 then return largest_prime_factor(n / 7) end\n  -- If n is divisible by\
    \ 11, return its prime factors\n  if n % 11 == 0 then return largest_prime_factor(n\
    \ / 11) end\n  -- If n is divisible by 13, return its prime factors\n  if n %\
    \ 13 == 0 then return largest_prime_factor(n / 13) end\n  -- If n is divisible\
    \ by 17, return its prime factors\n  if n % 17 == 0 then return largest_prime_factor(n\
    \ / 17) end\n  -- If n is divisible by 19, return its prime factors\n  if n %\
    \ 19 == 0 then return largest_prime_factor(n / 19) end\n  -- If n is divisible\
    \ by 23, return its prime factors\n  if n % 23 == 0 then return largest_prime_factor(n\
    \ / 23) end\n  -- If n is divisible by 29, return its prime factors\n  if n %\
    \ 29 == 0 then return largest_prime_factor(n / 29) end\n  -- If n is divisible\
    \ by 31, return its prime factors\n  if n % 31 == 0 then return largest_prime_factor(n\
    \ / 31) end\n  -- If n is divisible by 37, return its prime factors\n  if n %\
    \ 37 == 0 then return largest_prime_factor(n / 37) end\n  -- If n is divisible\
    \ by 41, return its prime factors\n  if n % 41 == 0 then return largest_prime_factor(n\
    \ / 41) end\n  -- If n is divisible by 43, return its prime factors\n  if n %\
    \ 43 == 0 then return largest_prime_factor(n / 43) end\n  -- If n is divisible\
    \ by 47, return its prime factors", "    local factor = 1\n    local i = 1\n \
    \   while i <= math.sqrt(n) do\n        if n % i == 0 then\n            factor\
    \ = i\n            n = n / i\n        end\n        i = i + 1\n    end\n    return\
    \ factor\nend", "    local factors = {}\n    for i = 2, n do\n        if n % i\
    \ == 0 then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "  -- Base case\n  if n < 2 then return 1 end\n  --\
    \ If n is even, return its largest factor of 2\n  if n % 2 == 0 then return 2\
    \ end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop over all odd numbers up to sqrt(n)\n  for\
    \ i = 5, math.sqrt(n), 2 do\n    -- If n is divisible by i, return i\n    if n\
    \ % i == 0 then return i end\n  end\nend", "  -- Base case\n  if n == 1 then return\
    \ 1 end\n  -- If n is prime, return its largest factor\n  if prime_table[n] then\
    \ return prime_table[n] end\n  -- If n is divisible by 2, return its largest factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is divisible\
    \ by 3, return its smallest factor\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 3) end\n  -- If n is divisible by 5, return its smallest factor\n  if n %\
    \ 5 == 0 then return largest_prime_factor(n / 5) end\n  -- If n is divisible by\
    \ 7, return its smallest factor\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 7) end\n  -- If n is divisible by 11, return its smallest factor\n  if n %\
    \ 11 == 0 then return largest_prime_factor(n / 11) end\n  -- If n is divisible\
    \ by 13, return its smallest factor\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 13) end\n  -- If n is divisible by 17, return its smallest factor\n  if n\
    \ % 17 == 0 then return largest_prime_factor(n / 17) end\n  -- If n is divisible\
    \ by 19, return its smallest factor\n  if n % 19 == 0 then return largest_prime_factor(n\
    \ / 19) end\n  -- If n is divisible by 23, return its smallest factor\n  if n\
    \ % 23 == 0 then return largest_prime_factor(n / 23) end\n  -- If n is divisible\
    \ by 29, return its smallest factor\n  if n % 29 == 0 then return largest_prime_factor(n\
    \ / 29) end\n  -- If n is divisible by 31, return its smallest factor\n  if n\
    \ % 31 == 0 then return largest_prime_factor(n / 31) end\n  -- If n is divisible\
    \ by 37, return its smallest factor\n  if n % 37 == 0 then return largest_prime_factor(n\
    \ / 37) end\n  -- If n is divisible by 41, return its smallest factor\n  if n\
    \ % 41 == 0 then return largest_prime_factor(n / 41) end\n  -- If n is divisible\
    \ by 43, return its smallest factor\n  if n % 43 == 0 then return largest_prime_factor(n\
    \ / 43) end\n  -- If n is divisible by 47, return its smallest factor\n  if n\
    \ % 47 == 0 then return largest_prime_factor(n / 47", "  -- The largest prime\
    \ factor is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor\
    \ is 2 if n is even.\n  -- The largest prime factor is 3 if n is odd.\n  -- The\
    \ largest prime factor is 6 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 7 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 8 if n is odd and greater than 3.\n  -- The largest prime factor is 11 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 13 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 14 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 15 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 16 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 17 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 19 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 20 if n is odd and greater than 3.\n  -- The largest prime factor is 21 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 22 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 23 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 24 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 25 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 26 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 27 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 28 if n is odd and greater than 3.\n  -- The largest prime factor is 29 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 30 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 31 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 32 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 33 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 34 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 35 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 36 if n is odd and greater than 3.\n  -- The largest prime factor is 37 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 38 if n is odd\
    \ and greater than ", "  -- Base case\n  if n == 1 then\n    return 1\n  end",
  "  if n < 2 then return 1 end\n  local factor = 1\n  while n > 1 do\n    local q\
    \ = n / factor\n    if n % factor == 0 then\n      n = q\n      factor = factor\
    \ * q\n    else\n      n = q\n    end\n  end\n  return factor\nend", "  -- Base\
    \ case: n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n  end",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then\n    local m = 2\n    while m <= n do\n \
    \     if n % m == 0 then\n        return m\n      end\n      m = m + 1\n    end\n\
    \  end\n  -- If n is odd, return its largest prime factor plus 1\n  local m =\
    \ 2\n  while m <= n do\n    if n % m == 0 then\n      return m + 1\n    end\n\
    \    m = m + 1\n  end\nend", "  -- Base case\n  if n < 2 then return 1 end\n \
    \ -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then return\
    \ 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop over all odd numbers up to sqrt(n)\n  for\
    \ i = 4, math.sqrt(n), 2 do\n    if n % i == 0 then return i end\n  end\nend",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  -- If n is prime, return\
    \ it\n  if prime_table[n] then\n    return n\n  end\n  -- If n is divisible by\
    \ 2, return it\n  if n % 2 == 0 then\n    return n\n  end\n  -- If n is divisible\
    \ by 3, return its largest factor of 3\n  if n % 3 == 0 then\n    return 3\n \
    \ end\n  -- If n is divisible by 5, return its largest factor of 5\n  if n % 5\
    \ == 0 then\n    return 5\n  end\n  -- If n is divisible by 7, return its largest\
    \ factor of 7\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible\
    \ by 11, return its largest factor of 11\n  if n % 11 == 0 then\n    return 11\n\
    \  end\n  -- If n is divisible by 13, return its largest factor of 13\n  if n\
    \ % 13 == 0 then\n    return 13\n  end\n  -- If n is divisible by 17, return its\
    \ largest factor of 17\n  if n % 17 == 0 then\n    return 17\n  end\n  -- If n\
    \ is divisible by 19, return its largest factor of 19\n  if n % 19 == 0 then\n\
    \    return 19\n  end\n  -- If n is divisible by 23, return its largest factor\
    \ of 23\n  if n % 23 == 0 then\n    return 23\n  end\n  -- If n is divisible by\
    \ 29, return its largest factor of 29\n  if n % 29 == 0 then\n    return 29\n\
    \  end\n  -- If n is divisible by 31, return its largest factor of 31\n  if n\
    \ % 31 == 0 then\n    return 31\n  end\n  -- If n is divisible by 37, return its\
    \ largest factor of 37\n  if n % 37 == 0 then\n    return 37\n  end\n  -- If n\
    \ is divisible by 41, return its largest factor of 41\n  if n % 41 == 0 then\n\
    \    return 41\n  end\n  -- If n is divisible by 43, return its largest factor\
    \ of 43\n  if n % 43 == 0 then\n    return 43\n  end\n  -- If n is divisible by\
    \ 47, return its largest factor of 47\n  if n % 47 == 0 then\n    return 47\n\
    \  end\n  -- If n is divisible by 53, return its largest factor of 53\n  if n\
    \ % 53 == 0 then\n    return 53\n  end\n  -- If n is divisible by 59, return its\
    \ largest factor of 59\n  if n % 59 == 0 then\n    return 59\n  end\n  -- If ",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Recursive\
    \ case: n is composite.\n  if n % 2 == 0 then\n    return 2\n  end\n  -- Find\
    \ the largest factor of n that is evenly divisible by all prime factors.\n  local\
    \ max_factor = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_factor\
    \ = i\n      break\n    end\n  end\n  -- Find the largest factor of n that is\
    \ evenly divisible by all odd factors.\n  local max_odd_factor = 1\n  for i =\
    \ 3, n/2 do\n    if n % i == 0 then\n      max_odd_factor = i\n      break\n \
    \   end\n  end\n  -- Return the largest prime factor of n.\n  return max_factor\
    \ > max_odd_factor and max_factor or max_odd_factor\nend", "  -- Base case\n \
    \ if n < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then\n    local p = 2\n    while p * p <= n do\n      if n %\
    \ p == 0 then\n        return p\n      end\n      p = p + 1\n    end\n  end\n\
    \  -- If n is odd, return its largest prime factor plus 1\n  local p = 2\n  while\
    \ p * p <= n do\n    if n % p == 0 then\n      return p\n    end\n    p = p +\
    \ 1\n  end\n  return n\nend", "  -- Base case: n is 1 or even.\n  if n == 1 or\
    \ n % 2 == 0 then\n    return 1\n  end", "    local factors = {}\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    return table.remove(factors)\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    local largest\
    \ = #factors\n    if largest == 0 then\n        return nil\n    end\n    largest\
    \ = factors[largest]\n    for i = 2, n do\n        if n % i == 0 then\n      \
    \      largest = i\n        end\n    end\n    return largest\nend", "  -- Base\
    \ case: n is prime.\n  if n == 1 then return n end", "  -- Base case\n  if n <\
    \ 2 then\n    return nil\n  end", "  -- Base case\n  if n == 1 then return 1 end\n\
    \  -- If n is prime, return its prime factors\n  if prime_table[n] then return\
    \ prime_table[n] end\n  -- If n is divisible by 2, return its prime factors\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is divisible\
    \ by 3, return its prime factors\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 3) end\n  -- If n is divisible by 5, return its prime factors\n  if n % 5\
    \ == 0 then return largest_prime_factor(n / 5) end\n  -- If n is divisible by\
    \ 7, return its prime factors\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 7) end\n  -- If n is divisible by 11, return its prime factors\n  if n % 11\
    \ == 0 then return largest_prime_factor(n / 11) end\n  -- If n is divisible by\
    \ 13, return its prime factors\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 13) end\n  -- If n is divisible by 17, return its prime factors\n  if n %\
    \ 17 == 0 then return largest_prime_factor(n / 17) end\n  -- If n is divisible\
    \ by 19, return its prime factors\n  if n % 19 == 0 then return largest_prime_factor(n\
    \ / 19) end\n  -- If n is divisible by 23, return its prime factors\n  if n %\
    \ 23 == 0 then return largest_prime_factor(n / 23) end\n  -- If n is divisible\
    \ by 29, return its prime factors\n  if n % 29 == 0 then return largest_prime_factor(n\
    \ / 29) end\n  -- If n is divisible by 31, return its prime factors\n  if n %\
    \ 31 == 0 then return largest_prime_factor(n / 31) end\n  -- If n is divisible\
    \ by 37, return its prime factors\n  if n % 37 == 0 then return largest_prime_factor(n\
    \ / 37) end\n  -- If n is divisible by 41, return its prime factors\n  if n %\
    \ 41 == 0 then return largest_prime_factor(n / 41) end\n  -- If n is divisible\
    \ by 43, return its prime factors\n  if n % 43 == 0 then return largest_prime_factor(n\
    \ / 43) end\n  -- If n is divisible by 47, return its prime factors", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local prime = true\n   \
    \     for j = 2, i do\n            if n % j == 0 then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(factors, i)\n        end\n        i = i + 1\n\
    \    end\n    local largest = #factors\n    if largest == 0 then\n        return\
    \ nil\n    end\n    return factors[largest]\nend", "  -- Base case: n is less\
    \ than or equal to 1.\n  if n <= 1 then\n    return nil\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return largest factor\
    \ of 3 that divides n\n  local i = 3\n  while i * i <= n do\n    if n % i == 0\
    \ then return i end\n    i = i + 2\n  end\n  return n\nend", "  -- Base case\n\
    \  if n == 1 then return 1 end", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then return\
    \ 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop through all odd numbers up to sqrt(n)\n \
    \ for i = 4, math.floor(math.sqrt(n)) + 1, 2 do\n    -- If n is divisible by i,\
    \ return i\n    if n % i == 0 then return i end\n  end\nend", "  -- Base case:\
    \ n is 1 or 2.\n  if n == 1 or n == 2 then\n    return n\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the prime\
    \ factors of n and return the largest one.\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case\n  if n == 1 then\n\
    \    return 1\n  end\n  -- If n is even, return its largest factor of 2\n  if\
    \ n % 2 == 0 then\n    return 2\n  end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is prime, return\
    \ its largest factor of 5\n  if n % 5 == 0 then\n    return 5\n  end\n  -- If\
    \ n is divisible by 2, return its largest factor of 3\n  if n % 3 == 0 then\n\
    \    return 3\n  end\n  -- If n is divisible by 3, return its largest factor of\
    \ 5\n  if n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible by 5, return\
    \ its largest factor of 7\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If\
    \ n is divisible by 7, return its largest factor of 11\n  if n % 11 == 0 then\n\
    \    return 11\n  end\n  -- If n is divisible by 11, return its largest factor\
    \ of 13\n  if n % 13 == 0 then\n    return 13\n  end\n  -- If n is divisible by\
    \ 13, return its largest factor of 17\n  if n % 17 == 0 then\n    return 17\n\
    \  end\n  -- If n is divisible by 17, return its largest factor of 19\n  if n\
    \ % 19 == 0 then\n    return 19\n  end\n  -- If n is divisible by 19, return its\
    \ largest factor of 23\n  if n % 23 == 0 then\n    return 23\n  end\n  -- If n\
    \ is divisible by 23, return its largest factor of 29\n  if n % 29 == 0 then\n\
    \    return 29\n  end\n  -- If n is divisible by 29, return its largest factor\
    \ of 31\n  if n % 31 == 0 then\n    return 31\n  end\n  -- If n is divisible by\
    \ 31, return its largest factor of 37\n  if n % 37 == 0 then\n    return 37\n\
    \  end\n  -- If n is divisible by 37, return its largest factor of 41\n  if n\
    \ % 41 == 0 then\n    return 41\n  end\n  -- If n is divisible by 41, return its\
    \ largest factor of 43\n  if n % 43 == 0 then\n    return 43\n  end\n  -- If n\
    \ is divisible by 43, return its largest factor of 47\n  if n % 47 == 0 then\n\
    \    return 47\n  end\n  -- If n is divisible by 47, return its largest factor\
    \ of 53\n  if n % 53 == 0 then\n    return 53\n  end\n  ", "    local factor =\
    \ 1\n    while n > 1 do\n        if n % factor == 0 then\n            n = n /\
    \ factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return factor\nend", "    local factor = 1\n    local i = 1\n    while i\
    \ * factor <= n do\n        factor = factor * i\n        i = i + 1\n    end\n\
    \    return factor\nend", "    local factors = {}\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n        end\n  \
    \  end\n    local largest = table.remove(factors)\n    if largest == n then\n\
    \        return largest\n    end\n    return largest * largest_prime_factor(largest)\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  --\
    \ Find the largest factor of n that is larger than 1.\n  local factor = 1\n  while\
    \ n % factor == 0 do\n    factor = factor * 2\n  end\n  -- If n is divisible by\
    \ any factor of 2, n is prime.\n  if factor == 2 then\n    return 1\n  end\n \
    \ -- If n is divisible by any factor of 3, n is prime.\n  if factor == 3 then\n\
    \    return 2\n  end\n  -- If n is divisible by any factor of 4, n is prime.\n\
    \  if factor == 4 then\n    return 3\n  end\n  -- If n is divisible by any factor\
    \ of 5, n is prime.\n  if factor == 5 then\n    return 5\n  end\n  -- If n is\
    \ divisible by any factor of 6, n is prime.\n  if factor == 6 then\n    return\
    \ 7\n  end\n  -- If n is divisible by any factor of 7, n is prime.\n  if factor\
    \ == 7 then\n    return 11\n  end\n  -- If n is divisible by any factor of 8,\
    \ n is prime.\n  if factor == 8 then\n    return 13\n  end\n  -- If n is divisible\
    \ by any factor of 9, n is prime.\n  if factor == 9 then\n    return 17\n  end\n\
    \  -- If n is divisible by any factor of 10, n is prime.\n  if factor == 10 then\n\
    \    return 19\n  end\n  -- If n is divisible by any factor of 11, n is prime.\n\
    \  if factor == 11 then\n    return 23\n  end\n  -- If n is divisible by any factor\
    \ of 12, n is prime.\n  if factor == 12 then\n    return 29\n  end\n  -- If n\
    \ is divisible by any factor of 13, n is prime.\n  if factor == 13 then\n    return\
    \ 31\n  end\n  -- If n is divisible by any factor of 14, n is prime.\n  if factor\
    \ == 14 then\n    return 37\n  end\n  -- If n is divisible by any factor of 15,\
    \ n is prime.\n  if factor == 15 then\n    return 41\n  end\n  -- If n is divisible\
    \ by any factor of 16, n is prime.\n  if factor == 16 then\n    return 43\n  end\n\
    \  -- If n is divisible by any factor of 17, n is prime.\n  if factor == 17 then\n\
    \    return 47\n  end\n  -- If n is divisible by any factor of 18", "    local\
    \ factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n          \
    \  factor = factor + 1\n        else\n            n = n / factor\n        end\n\
    \    end\n    return factor\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one\n  local m = math.floor(math.sqrt(n))\n  while m % 2 == 0 do\n\
    \    m = m / 2\n  end\n  return m + 1\nend", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2\
    \ == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n \
    \ if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest factor\
    \ of 5\n  -- Note that this could be sped up by checking if n is divisible by\
    \ 3 or 5\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return\
    \ 5 end\n    i = i + 2\n  end\n  return n -- n is prime\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is prime, return n\n  if n == 2 then\
    \ return n end\n  -- If n is even, return the largest prime factor of n/2\n  if\
    \ n % 2 == 0 then\n    local p = largest_prime_factor(n / 2)\n    if p > n then\
    \ return p end\n  end\n  -- If n is odd, return the largest prime factor of 3*n+1\n\
    \  local p = 3\n  while p <= n do\n    local q = math.floor((n + 1) / p)\n   \
    \ if q * p > n then return q end\n    p = p * 3 + 1\n  end\n  return n\nend",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Find the\
    \ largest factor of n that is smaller than n.\n  local function smaller_factor(n)\n\
    \    local function is_factor(n)\n      return n % n == 0\n    end\n    local\
    \ function next_factor(n)\n      local function is_factor(n)\n        return n\
    \ % n == 0\n      end\n      local function next_factor(n)\n        local function\
    \ is_factor(n)\n          return n % n == 0\n        end\n        local function\
    \ next_factor(n)\n          local function is_factor(n)\n            return n\
    \ % n == 0\n          end\n          local function next_factor(n)\n         \
    \   local function is_factor(n)\n              return n % n == 0\n           \
    \ end\n            local function next_factor(n)\n              local function\
    \ is_factor(n)\n                return n % n == 0\n              end\n       \
    \       local function next_factor(n)\n                local function is_factor(n)\n\
    \                  return n % n == 0\n                end\n                local\
    \ function next_factor(n)\n                  local function is_factor(n)\n   \
    \                 return n % n == 0\n                  end\n                 \
    \ local function next_factor(n)\n                    local function is_factor(n)\n\
    \                      return n % n == 0\n                    end\n          \
    \          local function next_factor(n)\n                      local function\
    \ is_factor(n)\n                        return n % n == 0\n                  \
    \    end\n                      local function next_factor(n)\n              \
    \          local function is_factor(n)\n                          return n % n\
    \ == 0\n                        end\n                        local function next_factor(n)\n\
    \                          local function is_factor(n)\n                     \
    \       return n % n == 0\n                          end\n                   \
    \       local function next_factor(n)\n                            local function\
    \ is_factor(n)\n                              return n % n == 0\n            \
    \                end\n                            local function next_factor(n)\n\
    \                              local function is_factor(n)\n                 \
    \               return n % n == 0\n                              end\n       \
    \                       local function next_factor(n)\n                      \
    \          local function is_factor(n)\n                                  return\
    \ n % n == 0\n                                end\n                          \
    \      local function next_factor(n)\n                                  local\
    \ function is_factor(n)\n                                    return n % n == 0\n\
    \                                  end\n                                  local\
    \ function next_factor(n)\n                                    local function\
    \ is_factor(n)\n                                      return n % n == 0\n    \
    \                                end\n                                    local\
    \ function next_factor(n)\n                                      local function\
    \ is_factor(n)\n                                        return n % n == 0\n  \
    \                                    end\n                                   \
    \   local function next_factor(n)\n                                        local\
    \ function is_factor(n)\n                                          return n %\
    \ n == 0\n                                        end\n                      \
    \                  local function next_factor(n)\n                           \
    \               local function is_factor(n)\n                                \
    \            return n % n == 0\n                                          end\n\
    \                                          local function next_factor(n)\n   \
    \                                         local function is_factor(n)\n      \
    \                                        return n % n == 0\n                 \
    \                           end\n                                            local\
    \ function next_factor(n)\n", "  -- Base case: n is 1 or 2.\n  if n == 1 or n\
    \ == 2 then\n    return n\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end\n  -- Base case: n is even.\n  if n % 2 == 0 then\n    return\
    \ 2\n  end\n  -- Base case: n is odd.\n  local m = math.floor(n/2) -- Find m such\
    \ that n is divisible by m.\n  -- If m is odd, then n is prime.\n  if m % 2 ==\
    \ 1 then\n    return 2\n  end\n  -- Otherwise, find m such that n is divisible\
    \ by m and m is odd.\n  local m2 = math.floor(m/2)\n  if m2 % 2 == 1 then\n  \
    \  return 2\n  end\n  -- Otherwise, m is even, so n is prime.\n  return 1\nend",
  "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case:\
    \ n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n\
    \  if n % 2 == 0 then return 3 end\n  -- Base case: n is divisible by 2 or 3.\n\
    \  if n % 3 == 0 then return n end\n  -- Base case: n is divisible by 4.\n  if\
    \ n % 4 == 0 then return n end\n  -- Base case: n is divisible by 5.\n  if n %\
    \ 5 == 0 then return n end\n  -- Base case: n is divisible by 6.\n  if n % 6 ==\
    \ 0 then return n end\n  -- Base case: n is divisible by 7.\n  if n % 7 == 0 then\
    \ return n end\n  -- Base case: n is divisible by 8.\n  if n % 8 == 0 then return\
    \ n end\n  -- Base case: n is divisible by 9.\n  if n % 9 == 0 then return n end\n\
    \  -- Base case: n is divisible by 10.\n  if n % 10 == 0 then return n end\n \
    \ -- Base case: n is divisible by 11.\n  if n % 11 == 0 then return n end\n  --\
    \ Base case: n is divisible by 12.\n  if n % 12 == 0 then return n end\n  -- Base\
    \ case: n is divisible by 13.\n  if n % 13 == 0 then return n end\n  -- Base case:\
    \ n is divisible by 14.\n  if n % 14 == 0 then return n end\n  -- Base case: n\
    \ is divisible by 15.\n  if n % 15 == 0 then return n end\n  -- Base case: n is\
    \ divisible by 16.\n  if n % 16 == 0 then return n end\n  -- Base case: n is divisible\
    \ by 17.\n  if n % 17 == 0 then return n end\n  -- Base case: n is divisible by\
    \ 18.\n  if n % 18 == 0 then return n end\n  -- Base case: n is divisible by 19.\n\
    \  if n % 19 == 0 then return n end\n  -- Base case: n is divisible by 20.\n \
    \ if n % 20 == 0 then return n end\n  -- Base case: n is divisible by 21.\n  if\
    \ n % 21 == 0 then return n end\n  -- Base case: n is divisible by 22.\n  if n\
    \ % 22 == 0 then return n end\n  -- Base case: n is divisible by 23.\n  if ",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local factor = 1\n  while n > 1 do\n\
    \    factor = factor * 2\n    n = n / factor\n  end\n  return factor\nend", " \
    \ -- Base case: n is 1 or even. Return 1.\n  if n == 1 or n % 2 == 0 then\n  \
    \  return 1\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n\
    \ is even, return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n\
    \  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then return\
    \ 3 end\n  -- Otherwise, loop through all odd numbers between 2 and n / 2\n  for\
    \ i = 2, n / 2 do\n    -- If n is divisible by i, return i\n    if n % i == 0\
    \ then return i end\n  end\nend", "  -- Base case: n is 1 or even.\n  if n ==\
    \ 1 or n % 2 == 0 then\n    return 1\n  end", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case\n  if n==1 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n%2==0 then return 2 end\n  -- If n is odd, return\
    \ its largest factor of 3\n  if n%3==0 then return 3 end\n  -- Otherwise, loop\
    \ through all possible factors of n and return the largest one\n  for i=4,n,2\
    \ do\n    if n%i==0 then return i end\n  end\nend", "  -- Base case\n  if n <\
    \ 2 then return 1 end\n  -- If n is even, return its largest factor of 2\n  if\
    \ n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor of\
    \ 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all possible\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "    local factor = 1\n    while n >\
    \ 1 do\n        if n % factor == 0 then\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    return factor\nend",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factor = 1\n\
    \    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factor = i\n            break\n        end\n        i = i + 1\n \
    \   end\n    return factor\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one\n  local m = math.floor(n/2) -- integer division\n  while m\
    \ % 2 == 0 do\n    m = m / 2\n  end\n  return m + 1\nend", "    local factor =\
    \ 1\n    while n > 1 do\n        if n % factor == 0 then\n            n = n /\
    \ factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return factor\nend", "  -- Base case: n is prime.\n  if n == 1 then\n   \
    \ return 1\n  end", "  -- Base case: n is 1 or even.\n  if n == 1 then return\
    \ 2 end\n  -- If n is prime, return its prime factors.\n  if prime_table[n] then\
    \ return prime_table[n] end\n  -- If n is odd, return its smallest prime factor\
    \ of 2 or greater.\n  local function next_factor(n)\n    local factor = 2\n  \
    \  while factor <= n do\n      if n % factor == 0 then\n        return factor\n\
    \      end\n      factor = factor + 1\n    end\n    return factor\n  end\n  --\
    \ Find the largest factor of n that is greater than its square root.\n  local\
    \ function largest_factor(n)\n    local factor = 2\n    while factor <= math.sqrt(n)\
    \ do\n      if n % factor == 0 then\n        return factor\n      end\n      factor\
    \ = factor + 1\n    end\n    return factor\n  end\n  -- Find the largest factor\
    \ of n that is greater than its square root.\n  local function largest_prime_factor(n)\n\
    \    local factor = 2\n    while factor <= math.sqrt(n) do\n      if n % factor\
    \ == 0 then\n        return factor\n      end\n      factor = factor + 1\n   \
    \ end\n    return factor\n  end\n  -- Find the largest factor of n that is greater\
    \ than its square root.\n  local function largest_prime_factor_of_2(n)\n    local\
    \ factor = 2\n    while factor <= math.sqrt(n) do\n      if n % factor == 0 then\n\
    \        return factor\n      end\n      factor = factor + 1\n    end\n    return\
    \ factor\n  end\n  -- Find the largest factor of n that is greater than its square\
    \ root.\n  local function largest_prime_factor_of_3(n)\n    local factor = 2\n\
    \    while factor <= math.sqrt(n) do\n      if n % factor == 0 then\n        return\
    \ factor\n      end\n      factor = factor + 1\n    end\n    return factor\n \
    \ end\n  -- Find the largest factor of n that is greater than its square root.\n\
    \  local function largest_prime_factor_of_4(n)\n    local factor = 2\n    while\
    \ factor <= math.sqrt(n) do\n      if n % factor == 0 then\n        return factor\n\
    \      end\n      factor = factor + 1\n    end\n    return factor\n  end\n  --\
    \ Find the largest factor of n that is greater than its square root.\n  local\
    \ function largest_prime_factor_of_5(n)\n    local factor = 2\n    while factor\
    \ <= math.sqrt(n) do\n      if n % factor == 0 then\n        return factor\n \
    \     end\n      factor = factor + 1\n    end\n    return factor\n  end\n  --\
    \ Find the largest factor of n that is greater than its square root.\n  local\
    \ function largest_prime_factor_of_6(n)\n    local factor = 2\n    while factor\
    \ <= math.sqrt(", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2\
    \ end\n  -- Base case: n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base\
    \ case: n is 3 or even.\n  if n % 2 == 0 then return 3 end\n  -- Base case: n\
    \ is divisible by 2 or 3.\n  if n % 3 == 0 then return n end\n  -- Find largest\
    \ factor of n that is evenly divisible by all numbers from 2 to n.\n  local max_factor\
    \ = 2\n  while max_factor < n do\n    -- If n is divisible by max_factor then\
    \ n is not a prime number.\n    if n % max_factor == 0 then break end\n    --\
    \ Increase max_factor by 2.\n    max_factor = max_factor + 2\n  end\n  return\
    \ max_factor\nend", "  -- Base case\n  if n == 1 then\n    return 1\n  end\n \
    \ -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\n    return\
    \ 2\n  end\n  -- If n is odd, return its largest factor of 3\n  if n % 3 == 0\
    \ then\n    return 3\n  end\n  -- If n is prime, return its largest factor of\
    \ 5\n  if n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible by 2, return\
    \ its largest factor of 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If\
    \ n is divisible by 3, return its largest factor of 5\n  if n % 5 == 0 then\n\
    \    return 5\n  end\n  -- If n is divisible by 5, return its largest factor of\
    \ 7\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible by 7, return\
    \ its largest factor of 11\n  if n % 11 == 0 then\n    return 11\n  end\n  --\
    \ If n is divisible by 11, return its largest factor of 13\n  if n % 13 == 0 then\n\
    \    return 13\n  end\n  -- If n is divisible by 13, return its largest factor\
    \ of 17\n  if n % 17 == 0 then\n    return 17\n  end\n  -- If n is divisible by\
    \ 17, return its largest factor of 19\n  if n % 19 == 0 then\n    return 19\n\
    \  end\n  -- If n is divisible by 19, return its largest factor of 23\n  if n\
    \ % 23 == 0 then\n    return 23\n  end\n  -- If n is divisible by 23, return its\
    \ largest factor of 29\n  if n % 29 == 0 then\n    return 29\n  end\n  -- If n\
    \ is divisible by 29, return its largest factor of 31\n  if n % 31 == 0 then\n\
    \    return 31\n  end\n  -- If n is divisible by 31, return its largest factor\
    \ of 37\n  if n % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by\
    \ 37, return its largest factor of 41\n  if n % 41 == 0 then\n    return 41\n\
    \  end\n  -- If n is divisible by 41, return its largest factor of 43\n  if n\
    \ % 43 == 0 then\n    return 43\n  end\n  -- If n is divisible by 43, return its\
    \ largest factor of 47\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n\
    \ is divisible by 47, return its largest factor of 53\n  if n % 53 == 0 then\n\
    \    return 53\n  end\n  ", "  -- Base case: n is 1 or even.\n  if n == 1 then\n\
    \    return 1\n  end\n  -- Base case: n is 2 or even.\n  if n == 2 then\n    return\
    \ 2\n  end\n  -- Base case: n is 3 or even.\n  if n % 2 == 0 then\n    return\
    \ 3\n  end\n  -- Base case: n is divisible by 2 or 3.\n  if n % 3 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 4.\n  if n % 4 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 5.\n  if n % 5 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 6.\n  if n % 6 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 7.\n  if n % 7 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 8.\n  if n % 8 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 9.\n  if n % 9 == 0 then\n\
    \    return n\n  end\n  -- Base case: n is divisible by 10.\n  if n % 10 == 0\
    \ then\n    return n\n  end\n  -- Base case: n is divisible by 11.\n  if n % 11\
    \ == 0 then\n    return n\n  end\n  -- Base case: n is divisible by 12.\n  if\
    \ n % 12 == 0 then\n    return n\n  end\n  -- Base case: n is divisible by 13.\n\
    \  if n % 13 == 0 then\n    return n\n  end\n  -- Base case: n is divisible by\
    \ 14.\n  if n % 14 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 15.\n  if n % 15 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 16.\n  if n % 16 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 17.\n  if n % 17 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 18.\n  if n % 18 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 19.\n  if n % 19 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 20.\n  if n % 20 == 0 then\n    return n\n  end\n  -- Base case: n is divisible\
    \ by 21.\n  if n % 21", "  -- Base case: n is prime.\n  if n == 1 then return\
    \ 1 end\n  -- If n is even, 2 is the largest prime factor.\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, 3 is the largest prime factor.\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Find largest factor of n that is even.\n  local function\
    \ is_factor(n, factor)\n    if factor == 0 then return false end\n    if n % factor\
    \ == 0 then return true end\n    return is_factor(n / factor, factor)\n  end\n\
    \  -- Find largest factor of n that is odd.\n  local function is_odd_factor(n,\
    \ factor)\n    if factor == 0 then return false end\n    if n % factor == 0 then\
    \ return true end\n    return is_odd_factor(n / factor, factor)\n  end\n  -- Find\
    \ largest factor of n that is even.\n  local function is_even(n, factor)\n   \
    \ if factor == 0 then return false end\n    if n % factor == 0 then return true\
    \ end\n    return is_even(n / factor, factor)\n  end\n  -- Find largest factor\
    \ of n that is odd.\n  local function is_odd(n, factor)\n    if factor == 0 then\
    \ return false end\n    if n % factor == 0 then return true end\n    return is_odd(n\
    \ / factor, factor)\n  end\n  -- Find largest factor of n that is even.\n  local\
    \ function is_prime(n, factor)\n    if factor == 0 then return false end\n   \
    \ if n % factor == 0 then return true end\n    return is_prime(n / factor, factor)\n\
    \  end\n  -- Find largest factor of n that is odd.\n  local function is_composite(n,\
    \ factor)\n    if factor == 0 then return false end\n    if n % factor == 0 then\
    \ return true end\n    return is_composite(n / factor, factor)\n  end\n  -- Find\
    \ largest factor of n that is even.\n  local function is_perfect_square(n, factor)\n\
    \    if factor == 0 then return false end\n    if n % factor == 0 then return\
    \ true end\n    return is_perfect_square(n / factor, factor)\n  end\n  -- Find\
    \ largest factor of n that is odd.\n  local function is_perfect_cube(n, factor)\n\
    \    if factor == 0 then return false end\n    if n % factor == 0 then return\
    \ true end\n    return is_perfect_cube(n / factor, factor)\n  end\n  -- Find largest\
    \ factor of n that is even.\n  local function is_perfect_fifth(n, factor)\n  \
    \  if factor == 0 then return false end\n    if n % factor == 0 then return true\
    \ end\n    return is_perfect_", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one\n  local m = math.floor(math.sqrt(n))\n  while m % 2 == 0 do\n\
    \    m = m / 2\n  end\n  return m + 1\nend", "    local factors = {}\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \        end\n    end\n    local largest = table.remove(factors)\n    if largest\
    \ == n then\n        return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        local prime = true\n        for j = 2, i do\n            if n %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.max(factors)\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \ -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Find\
    \ the largest factor of n that is smaller than n.\n  local max_factor = 1\n  local\
    \ max_factor_index = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_factor\
    \ = i\n      max_factor_index = i\n    end\n  end\n  -- Find the largest prime\
    \ factor of n that is larger than n.\n  local max_prime_factor = 1\n  local max_prime_factor_index\
    \ = 1\n  for i = max_factor_index + 1, n do\n    if n % i == 0 then\n      max_prime_factor\
    \ = i\n      max_prime_factor_index = i\n    end\n  end\n  return max_prime_factor\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n\
    \ is prime, return its largest factor of 5\n  -- If n is divisible by 5, return\
    \ its largest factor of 7\n  -- If n is divisible by 7, return its largest factor\
    \ of 11\n  -- If n is divisible by 11, return its largest factor of 13\n  -- If\
    \ n is divisible by 13, return its largest factor of 17\n  -- If n is divisible\
    \ by 17, return its largest factor of 19\n  -- If n is divisible by 19, return\
    \ its largest factor of 23\n  -- If n is divisible by 23, return its largest factor\
    \ of 29\n  -- If n is divisible by 29, return its largest factor of 31\n  -- If\
    \ n is divisible by 31, return its largest factor of 37\n  -- If n is divisible\
    \ by 37, return its largest factor of 41\n  -- If n is divisible by 41, return\
    \ its largest factor of 43\n  -- If n is divisible by 43, return its largest factor\
    \ of 47\n  -- If n is divisible by 47, return its largest factor of 53\n  -- If\
    \ n is divisible by 53, return its largest factor of 59\n  -- If n is divisible\
    \ by 59, return its largest factor of 61\n  -- If n is divisible by 61, return\
    \ its largest factor of 67\n  -- If n is divisible by 67, return its largest factor\
    \ of 71\n  -- If n is divisible by 71, return its largest factor of 73\n  -- If\
    \ n is divisible by 73, return its largest factor of 79\n  -- If n is divisible\
    \ by 79, return its largest factor of 83\n  -- If n is divisible by 83, return\
    \ its largest factor of 89\n  -- If n is divisible by 89, return its largest factor\
    \ of 97\n  -- If n is divisible by 97, return its largest factor of 101\n  --\
    \ If n is divisible by 101, return its largest factor of 103\n  -- If n is divisible\
    \ by 103, return its largest factor of 107\n  -- If n is divisible by 107, return\
    \ its largest factor of 109\n  -- If n is divisible by 109, return its ", "  if\
    \ n < 2 then return nil end\n  local factors = {}\n  local i = 1\n  while i <=\
    \ math.sqrt(n) do\n    local p = primes[i]\n    if p * p > n then break end\n\
    \    factors[#factors + 1] = p\n    i = i + 1\n  end\n  if #factors == 0 then\
    \ return nil end\n  local largest = factors[#factors]\n  for i = #factors, 1,\
    \ -1 do\n    largest = factors[#factors] * largest\n  end\n  return largest\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = i\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    local largest\
    \ = factors[#factors]\n    if largest == n then\n        return largest\n    else\n\
    \        return largest * largest_prime_factor(largest)\n    end\nend", "  --\
    \ Base case\n  if n == 1 then return 1 end\n  -- If n is even, return its smallest\
    \ factor\n  if n % 2 == 0 then return smallest_prime_factor(n) end\n  -- If n\
    \ is odd, return its largest factor\n  local m = math.floor(n/2)\n  local f =\
    \ largest_prime_factor(m)\n  while f < n do\n    m = m + 1\n    f = largest_prime_factor(m)\n\
    \  end\n  return f\nend", "  -- Base case: n is prime.\n  if n == 1 then\n   \
    \ return 1\n  end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        else\n            i = i + 1\n        end\n    end\n\
    \    return table.max(factors)\nend", "    local factor = 1\n    while n > 1 do\n\
    \        local m = math.floor((n - 1) / factor)\n        if m == 0 then\n    \
    \        return factor\n        end\n        if n % m == 0 then\n            n\
    \ = n / m\n        else\n            factor = factor * m\n        end\n    end\n\
    \    return factor\nend", "    local factor = 1\n    while n > 1 do\n        if\
    \ n % factor == 0 then\n            n = n / factor\n        else\n           \
    \ factor = factor + 1\n        end\n    end\n    return factor\nend", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n == 1 then\n \
    \   return 1\n  end", "  if n < 2 then return 1 end\n  local i = 1\n  while i\
    \ * i <= n do\n    if n % i == 0 then\n      n = n / i\n      i = i + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  return n\nend", "  -- Base case: n is 1 or\
    \ even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd,\
    \ return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  while m ~= n do\n    if n % m == 0 then return m end\n    m = math.floor(m\
    \ / 2)\n  end\n  return n\nend", "  -- Base case\n  if n < 2 then return 1 end",
  "  if n < 2 then\n    return nil\n  end\n  -- Test for factors up to sqrt(n).\n\
    \  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ nil\n    end\n    i = i + 1\n  end\n  -- Test for factors larger than sqrt(n).\n\
    \  i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return i\n\
    \    end\n    i = i + 1\n  end\n  return nil\nend", "  -- Base case: n is less\
    \ than or equal to 1.\n  if n <= 1 then\n    return nil\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is prime, return n\n  if n == 2 then return\
    \ n end\n  -- If n is even, return largest prime factor of n/2\n  if n % 2 ==\
    \ 0 then\n    local p = largest_prime_factor(n / 2)\n    if p * p > n then return\
    \ p end\n  end\n  -- If n is odd, return largest prime factor of 3*n+1\n  local\
    \ p = 3\n  while p * p <= n do\n    p = p * 3 + 1\n    if p * p > n then return\
    \ p end\n  end\nend", "    local factors = {}\n    local i = 1\n    while i <=\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return n\nend", "    local factors = {}\n    for i = 2, n do\n \
    \       local p = i\n        while p > 1 do\n            if n % p == 0 then\n\
    \                factors[#factors + 1] = i\n                n = n / p\n      \
    \      else\n                p = p - 1\n            end\n        end\n    end\n\
    \    return factors[#factors]\nend", "  if n < 2 then return nil end\n  local\
    \ m = math.floor(n/2)\n  local i = 1\n  while i <= m do\n    if n % i == 0 then\n\
    \      if i > m then return nil end\n      n = n / i\n    else\n      i = i +\
    \ 1\n    end\n  end\n  return n\nend", "  -- Base case: n is prime.\n  if n ==\
    \ 1 then\n    return 1\n  end", "  -- Base case: n is 1 or even.\n  if n == 1\
    \ then return 2 end\n  -- If n is prime, return its largest factor of n.\n  if\
    \ prime_table[n] then return prime_table[n] end\n  -- If n is composite and larger\
    \ than the largest prime factor of n\n  -- (the smallest prime factor is 2), then\
    \ it must be a prime.\n  if n > 2 then\n    local m = 2\n    while m <= n do\n\
    \      if n % m == 0 then\n        -- If m divides n, then n is prime.\n     \
    \   prime_table[n] = m\n        return m\n      end\n      m = m + 1\n    end\n\
    \  end\n  -- If n is composite and smaller than the largest prime factor of n\n\
    \  -- (the smallest prime factor is 2), then it must be a prime.\n  local m =\
    \ 2\n  while m <= n do\n    if n % m == 0 then\n      -- If m divides n, then\
    \ n is prime.\n      prime_table[n] = m\n      return m\n    end\n    m = m +\
    \ 1\n  end\nend", "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  --\
    \ If n is prime, return it\n  if prime_table[n] then\n    return n\n  end\n  --\
    \ If n is divisible by 2, return it\n  if n % 2 == 0 then\n    return n\n  end\n\
    \  -- If n is divisible by 3, return its largest factor\n  if n % 3 == 0 then\n\
    \    return largest_prime_factor(n / 3)\n  end\n  -- If n is divisible by 5, return\
    \ its largest factor\n  if n % 5 == 0 then\n    return largest_prime_factor(n\
    \ / 5)\n  end\n  -- If n is divisible by 7, return its largest factor\n  if n\
    \ % 7 == 0 then\n    return largest_prime_factor(n / 7)\n  end\n  -- If n is divisible\
    \ by 11, return its largest factor\n  if n % 11 == 0 then\n    return largest_prime_factor(n\
    \ / 11)\n  end\n  -- If n is divisible by 13, return its largest factor\n  if\
    \ n % 13 == 0 then\n    return largest_prime_factor(n / 13)\n  end\n  -- If n\
    \ is divisible by 17, return its largest factor\n  if n % 17 == 0 then\n    return\
    \ largest_prime_factor(n / 17)\n  end\n  -- If n is divisible by 19, return its\
    \ largest factor\n  if n % 19 == 0 then\n    return largest_prime_factor(n / 19)\n\
    \  end\n  -- If n is divisible by 23, return its largest factor\n  if n % 23 ==\
    \ 0 then\n    return largest_prime_factor(n / 23)\n  end\n  -- If n is divisible\
    \ by 29, return its largest factor\n  if n % 29 == 0 then\n    return largest_prime_factor(n\
    \ / 29)\n  end\n  -- If n is divisible by 31, return its largest factor\n  if\
    \ n % 31 == 0 then\n    return largest_prime_factor(n / 31)\n  end\n  -- If n\
    \ is divisible by 37, return its largest factor\n  if n % 37 == 0 then\n    return\
    \ largest_prime_factor(n / 37)\n  end\n  -- If n is divisible by 41, return its\
    \ largest factor\n  if n % 41 == 0 then\n    return largest_prime_factor(n / 41)\n\
    \  end\n  -- If n is divisible by 43, return its largest factor\n  if n % 43 ==\
    \ 0 then\n    return largest_prime_factor(n / 43)\n  end\n  -- If n is divisible\
    \ by 47, return its largest factor\n  if n % ", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If\
    \ n is even, return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n\
    \  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then return\
    \ 3 end\n  -- Otherwise, loop through the prime factors of n and return the largest\
    \ one\n  for i = 2, n do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    end", "  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- If n is prime,\
    \ return its largest factor\n  if prime_table[n] then\n    return prime_table[n]\n\
    \  end\n  -- If n is divisible by 2, return its largest factor\n  if n % 2 ==\
    \ 0 then\n    return largest_prime_factor(n / 2)\n  end\n  -- If n is divisible\
    \ by 3, return its smallest factor\n  if n % 3 == 0 then\n    return largest_prime_factor(n\
    \ / 3)\n  end\n  -- If n is divisible by 5, return its smallest factor\n  if n\
    \ % 5 == 0 then\n    return largest_prime_factor(n / 5)\n  end\n  -- If n is divisible\
    \ by both 2 and 3, return its smallest factor\n  if n % 6 == 0 then\n    return\
    \ largest_prime_factor(n / 6)\n  end\n  -- If n is divisible by both 2 and 5,\
    \ return its smallest factor\n  if n % 12 == 0 then\n    return largest_prime_factor(n\
    \ / 12)\n  end\n  -- If n is divisible by both 3 and 5, return its smallest factor\n\
    \  if n % 18 == 0 then\n    return largest_prime_factor(n / 18)\n  end\n  -- If\
    \ n is divisible by both 3 and 7, return its smallest factor\n  if n % 24 == 0\
    \ then\n    return largest_prime_factor(n / 24)\n  end\n  -- If n is divisible\
    \ by both 3 and 11, return its smallest factor\n  if n % 30 == 0 then\n    return\
    \ largest_prime_factor(n / 30)\n  end\n  -- If n is divisible by both 3 and 13,\
    \ return its smallest factor\n  if n % 36 == 0 then\n    return largest_prime_factor(n\
    \ / 36)\n  end\n  -- If n is divisible by both 3 and 17, return its smallest factor\n\
    \  if n % 42 == 0 then\n    return largest_prime_factor(n / 42)\n  end\n  -- If\
    \ n is divisible by both 3 and 19, return its smallest factor\n  if n % 48 ==\
    \ 0 then\n    return largest_prime_factor(n / 48)\n  end\n  -- If n is divisible\
    \ by both 3 and 23, return its smallest factor\n  if n % 52 == 0 then\n    return\
    \ largest_prime_factor(n / 52)\n  end\n  -- If n is divisible by both 3 and 29,\
    \ return its smallest factor\n  if n % 56 == 0 then\n    return largest_prime_factor(n\
    \ / 56)\n  end\n  -- If n is divisible by both 3 and 31, return its smallest factor\n\
    \  if ", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n\
    \  -- Find the largest factor of n that is smaller than n.\n  local max_factor\
    \ = 1\n  local max_factor_index = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      -- n is not a prime and n is not a factor of n.\n      return nil\n   \
    \ end\n    -- n is a factor of n.\n    if n > max_factor then\n      max_factor\
    \ = i\n      max_factor_index = i\n    end\n  end\n  -- n is a prime and n is\
    \ a factor of n.\n  return max_factor_index\nend", "  -- Base case\n  if n < 2\
    \ then return 1 end\n  -- If n is even, return its largest factor of 2\n  if n\
    \ % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n\
    \  if n % 2 == 1 then return 3 end\n  -- Initialize a list to store the largest\
    \ prime factors\n  local factors = {}\n  -- Initialize a variable to store the\
    \ current largest prime factor\n  local current_factor = 1\n  -- Loop while there\
    \ are still factors left to test\n  while current_factor <= n do\n    -- Test\
    \ the current factor\n    if n % current_factor == 0 then\n      -- If the current\
    \ factor is greater than the current largest prime factor\n      if current_factor\
    \ > factors[#factors] then\n        -- Store the current largest prime factor\n\
    \        factors[#factors] = current_factor\n      end\n      -- Increment the\
    \ largest prime factor\n      current_factor = current_factor + 1\n    end\n \
    \   -- Decrement the largest prime factor\n    current_factor = current_factor\
    \ - 1\n  end\n  -- Return the largest prime factor of n\n  return factors[#factors]\n\
    end", "  -- Base case\n  if n == 1 then return 2 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest factor of 3\n  if n % 3 == 0\
    \ then return largest_prime_factor(n / 3) end\n  -- If n is prime, return its\
    \ largest factor of 5\n  if n % 5 == 0 then return largest_prime_factor(n / 5)\
    \ end\n  -- If n is divisible by 2, return its largest factor of 3\n  if n % 3\
    \ == 0 then return 3 end\n  -- If n is divisible by 3, return its largest factor\
    \ of 5\n  if n % 5 == 0 then return 5 end\n  -- If n is divisible by 5, return\
    \ its largest factor of 7\n  if n % 7 == 0 then return 7 end\n  -- If n is divisible\
    \ by 7, return its largest factor of 11\n  if n % 11 == 0 then return 11 end\n\
    \  -- If n is divisible by 11, return its largest factor of 13\n  if n % 13 ==\
    \ 0 then return 13 end\n  -- If n is divisible by 13, return its largest factor\
    \ of 17\n  if n % 17 == 0 then return 17 end\n  -- If n is divisible by 17, return\
    \ its largest factor of 19\n  if n % 19 == 0 then return 19 end\n  -- If n is\
    \ divisible by 19, return its largest factor of 23\n  if n % 23 == 0 then return\
    \ 23 end\n  -- If n is divisible by 23, return its largest factor of 29\n  if\
    \ n % 29 == 0 then return 29 end\n  -- If n is divisible by 29, return its largest\
    \ factor of 31\n  if n % 31 == 0 then return 31 end\n  -- If n is divisible by\
    \ 31, return its largest factor of 37\n  if n % 37 == 0 then return 37 end\n \
    \ -- If n is divisible by 37, return its largest factor of 41\n  if n % 41 ==\
    \ 0 then return 41 end\n  -- If n is divisible by 41, return its largest factor\
    \ of 43\n  if n % 43 == 0 then return 43 end\n  -- If n is divisible by 43, return\
    \ its largest factor of 47\n  if n % 47 == 0 then return 47 end\n  -- If n is\
    \ divisible by 47, return its largest factor of 53\n  if n % 53 == 0 then return\
    \ 53 end\n  -- If n is divisible by 53, return its largest factor of ", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "  -- Base case:\
    \ n is less than or equal to 1.\n  if n <= 1 then return 1 end\n  -- Base case:\
    \ n is greater than or equal to 2.\n  if n > 2 then return largest_prime_factor(n/2)\
    \ end\n  -- The largest prime factor of n is equal to the largest prime factor\
    \ of n / 2.\n  return largest_prime_factor(n/2) * 3\nend", "  -- Base case\n \
    \ if n < 2 then\n    return nil\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is prime, return n\n  if prime_table[n] then return n end\n\
    \  -- If n is divisible by 2, return 2\n  if n % 2 == 0 then return 2 end\n  --\
    \ If n is divisible by 3, return 3\n  if n % 3 == 0 then return 3 end\n  -- If\
    \ n is divisible by 5, return 5\n  if n % 5 == 0 then return 5 end\n  -- If n\
    \ is divisible by 7, return 7\n  if n % 7 == 0 then return 7 end\n  -- If n is\
    \ divisible by 11, return 11\n  if n % 11 == 0 then return 11 end\n  -- If n is\
    \ divisible by 13, return 13\n  if n % 13 == 0 then return 13 end\n  -- If n is\
    \ divisible by 17, return 17\n  if n % 17 == 0 then return 17 end\n  -- If n is\
    \ divisible by 19, return 19\n  if n % 19 == 0 then return 19 end\n  -- If n is\
    \ divisible by 23, return 23\n  if n % 23 == 0 then return 23 end\n  -- If n is\
    \ divisible by 29, return 29\n  if n % 29 == 0 then return 29 end\n  -- If n is\
    \ divisible by 31, return 31\n  if n % 31 == 0 then return 31 end\n  -- If n is\
    \ divisible by 37, return 37\n  if n % 37 == 0 then return 37 end\n  -- If n is\
    \ divisible by 41, return 41\n  if n % 41 == 0 then return 41 end\n  -- If n is\
    \ divisible by 43, return 43\n  if n % 43 == 0 then return 43 end\n  -- If n is\
    \ divisible by 47, return 47\n  if n % 47 == 0 then return 47 end\n  -- If n is\
    \ divisible by 53, return 53\n  if n % 53 == 0 then return 53 end\n  -- If n is\
    \ divisible by 59, return 59\n  if n % 59 == 0 then return 59 end\n  -- If n is\
    \ divisible by 61, return 61\n  if n % 61 == 0 then return 61 end\n  -- If n is\
    \ divisible by 67, return 67\n  if n % 67 == 0 then return 67 end\n  -- If n is\
    \ divisible by 71, return 71\n  if n % 71 == 0 then return 71 end\n  -- If n is\
    \ divisible by 73, return 73\n  if n % 73 == 0 then return 73 end\n  -- If n is ",
  "    local factor = 1\n    local i = 1\n    while i <= n do\n        if n % i ==\
    \ 0 then\n            factor = i\n        end\n        i = i + 1\n    end\n  \
    \  return factor\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return\
    \ 1\n  end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        else\n            i = i + 1\n        end\n    end\n\
    \    return table.max(factors)\nend", "  -- Base case: n is 1 or even.\n  if n\
    \ == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then return\
    \ 2 end\n  -- Base case: n is 3 or even.\n  if n == 3 then return 3 end\n  --\
    \ Base case: n is 4 or even.\n  if n == 4 then return 2 end\n  -- Base case: n\
    \ is 5 or even.\n  if n == 5 then return 3 end\n  -- Base case: n is 6 or even.\n\
    \  if n == 6 then return 4 end\n  -- Base case: n is 7 or even.\n  if n == 7 then\
    \ return 5 end\n  -- Base case: n is 8 or even.\n  if n == 8 then return 6 end\n\
    \  -- Base case: n is 9 or even.\n  if n == 9 then return 7 end\n  -- Base case:\
    \ n is 10 or even.\n  if n == 10 then return 8 end\n  -- Base case: n is 11 or\
    \ even.\n  if n == 11 then return 9 end\n  -- Base case: n is 12 or even.\n  if\
    \ n == 12 then return 10 end\n  -- Base case: n is 13 or even.\n  if n == 13 then\
    \ return 11 end\n  -- Base case: n is 14 or even.\n  if n == 14 then return 12\
    \ end\n  -- Base case: n is 15 or even.\n  if n == 15 then return 13 end\n  --\
    \ Base case: n is 16 or even.\n  if n == 16 then return 14 end\n  -- Base case:\
    \ n is 17 or even.\n  if n == 17 then return 15 end\n  -- Base case: n is 18 or\
    \ even.\n  if n == 18 then return 16 end\n  -- Base case: n is 19 or even.\n \
    \ if n == 19 then return 17 end\n  -- Base case: n is 20 or even.\n  if n == 20\
    \ then return 18 end\n  -- Base case: n is 21 or even.\n  if n == 21 then return\
    \ 19 end\n  -- Base case: n is 22 or even.\n  if n == 22 then return 20 end\n\
    \  -- Base case: n is 23 or even.\n  if n == 23 then return 21 end\n  -- Base\
    \ case: n is 24 or even.\n  if n == 24 then return 22 end\n  -- Base case: n is\
    \ 25 or even.\n  if n == 25 then return 23 end\n  -- Base case: n is 26 or even.\n\
    \  if ", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    return table.max(factors)\nend", "    local factors = {}\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    return table.max(factors)\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \ -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then\n    return 2\n  end\n  -- If\
    \ n is odd, return its largest factor of 3\n  if n % 2 == 1 then\n    return 3\n\
    \  end\n  -- If n is prime, return its largest factor of 5\n  if prime_table[n]\
    \ then\n    return 5\n  end\n  -- Otherwise, loop through all prime factors of\
    \ n and return the largest one\n  local i = 1\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then\n      return i\n    end\n    i = i + 1\n  end\nend",
  "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case:\
    \ n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n\
    \  if n == 3 then return 3 end\n  -- Base case: n is 4 or even.\n  if n == 4 then\
    \ return 2 end\n  -- Base case: n is 5 or even.\n  if n == 5 then return 3 end\n\
    \  -- Base case: n is 6 or even.\n  if n == 6 then return 4 end\n  -- Base case:\
    \ n is 7 or even.\n  if n == 7 then return 5 end\n  -- Base case: n is 8 or even.\n\
    \  if n == 8 then return 6 end\n  -- Base case: n is 9 or even.\n  if n == 9 then\
    \ return 7 end\n  -- Base case: n is 10 or even.\n  if n == 10 then return 8 end\n\
    \  -- Base case: n is 11 or even.\n  if n == 11 then return 9 end\n  -- Base case:\
    \ n is 12 or even.\n  if n == 12 then return 10 end\n  -- Base case: n is 13 or\
    \ even.\n  if n == 13 then return 11 end\n  -- Base case: n is 14 or even.\n \
    \ if n == 14 then return 12 end\n  -- Base case: n is 15 or even.\n  if n == 15\
    \ then return 13 end\n  -- Base case: n is 16 or even.\n  if n == 16 then return\
    \ 14 end\n  -- Base case: n is 17 or even.\n  if n == 17 then return 15 end\n\
    \  -- Base case: n is 18 or even.\n  if n == 18 then return 16 end\n  -- Base\
    \ case: n is 19 or even.\n  if n == 19 then return 17 end\n  -- Base case: n is\
    \ 20 or even.\n  if n == 20 then return 18 end\n  -- Base case: n is 21 or even.\n\
    \  if n == 21 then return 19 end\n  -- Base case: n is 22 or even.\n  if n ==\
    \ 22 then return 20 end\n  -- Base case: n is 23 or even.\n  if n == 23 then return\
    \ 21 end\n  -- Base case: n is 24 or even.\n  if n == 24 then return 22 end\n\
    \  -- Base case: n is 25 or even.\n  if n == 25 then return 23 end\n  -- Base\
    \ case: n is 26 or even.\n  if "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
