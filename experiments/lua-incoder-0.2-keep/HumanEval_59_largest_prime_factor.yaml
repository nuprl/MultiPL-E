name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            table.insert(factors, i)\n        end\n    end\n    return\
    \ table.remove(factors)\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then\
    \ return 2 end\n  -- If n is prime, return its largest factor.\n  if prime_table[n]\
    \ then return prime_table[n] end\n  -- If n is odd, return its largest factor\
    \ plus 1.\n  local factor = 2\n  while n % factor == 0 do\n    factor = factor\
    \ + 1\n  end\n  return factor\nend", "  -- Base case: n is prime.\n  if n == 1\
    \ then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case\n  if n < 2 then return 1 end", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest factor\
    \ of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest\
    \ factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through\
    \ all prime factors of n and return the largest one\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      return i\n    end\n  end\nend", "  -- Base case: n is\
    \ 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base\
    \ case\n  if n < 2 then return 1 end", "  -- Base case: n is 1 or even.\n  if\
    \ n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then\
    \ return 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 == 0 then return 3\
    \ end\n  -- Base case: n is divisible by 2 or 3.\n  if n % 3 == 0 then return\
    \ n end\n  -- Find largest factor of n that is evenly divisible by all primes\
    \ up to n.\n  local function factor(n)\n    local function factors(n)\n      --\
    \ Base case: n is even.\n      if n % 2 == 0 then return 2 end\n      -- Base\
    \ case: n is odd.\n      if n % 2 == 1 then return 1 end\n      -- Find all factors\
    \ of n that are evenly divisible by all primes up to n.\n      local function\
    \ factors(n)\n        -- Base case: n is even.\n        if n % 2 == 0 then return\
    \ 2 end\n        -- Base case: n is odd.\n        if n % 2 == 1 then return 1\
    \ end\n        -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n        local function factors(n)\n          -- Base case: n is even.\n\
    \          if n % 2 == 0 then return 2 end\n          -- Base case: n is odd.\n\
    \          if n % 2 == 1 then return 1 end\n          -- Find all factors of n\
    \ that are evenly divisible by all primes up to n.\n          local function factors(n)\n\
    \            -- Base case: n is even.\n            if n % 2 == 0 then return 2\
    \ end\n            -- Base case: n is odd.\n            if n % 2 == 1 then return\
    \ 1 end\n            -- Find all factors of n that are evenly divisible by all\
    \ primes up to n.\n            local function factors(n)\n              -- Base\
    \ case: n is even.\n              if n % 2 == 0 then return 2 end\n          \
    \    -- Base case: n is odd.\n              if n % 2 == 1 then return 1 end\n\
    \              -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n              local function factors(n)\n                -- Base case:\
    \ n is even.\n                if n % 2 == 0 then return 2 end\n              \
    \  -- Base case: n is odd.\n                if n % 2 == 1 then return 1 end\n\
    \                -- Find all factors of n that are evenly divisible by all primes\
    \ up to n.\n                local function factors(n)\n                  -- Base\
    \ case: n is even.\n                  if n % ", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Otherwise, loop through all possible factors of n\
    \ and return the largest one\n  for i = 2, n do\n    if n % i == 0 then\n    \
    \  return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest prime\
    \ factor plus one\n  local m = math.floor(math.sqrt(n))\n  while m % 2 == 0 do\n\
    \    m = m / 2\n  end\n  return m + 1\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if i %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- Base case\n  if n < 2 then return 1 end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest factor of 2\n \
    \ if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the prime\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end", "  -- The prime factors of n are 1, 2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29\n  -- See http://primes.utm.edu/prove/prove2_3.html\n  -- The\
    \ largest prime factor is 29.\n  -- The smallest prime factor is 2.\n  -- The\
    \ largest prime factor is 2^29 = 8388608.\n  -- The smallest prime factor is 2^2\
    \ = 4.\n  -- The largest prime factor is 2^29 - 1 = 8388609.\n  -- The smallest\
    \ prime factor is 2^2 - 1 = 2.\n  -- The largest prime factor is 2^29 - 2 = 8388610.\n\
    \  -- The smallest prime factor is 2^2 - 2 = 4.\n  -- The largest prime factor\
    \ is 2^29 - 3 = 8388611.\n  -- The smallest prime factor is 2^2 - 3 = 2.\n  --\
    \ The largest prime factor is 2^29 - 4 = 8388612.\n  -- The smallest prime factor\
    \ is 2^2 - 4 = 1.\n  -- The largest prime factor is 2^29 - 5 = 8388613.\n  --\
    \ The smallest prime factor is 2^2 - 5 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 6 = 8388614.\n  -- The smallest prime factor is 2^2 - 6 = 1.\n  -- The\
    \ largest prime factor is 2^29 - 7 = 8388615.\n  -- The smallest prime factor\
    \ is 2^2 - 7 = 1.\n  -- The largest prime factor is 2^29 - 8 = 8388616.\n  --\
    \ The smallest prime factor is 2^2 - 8 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 9 = 8388617.\n  -- The smallest prime factor is 2^2 - 9 = 1.\n  -- The\
    \ largest prime factor is 2^29 - 10 = 8388618.\n  -- The smallest prime factor\
    \ is 2^2 - 10 = 1.\n  -- The largest prime factor is 2^29 - 11 = 8388619.\n  --\
    \ The smallest prime factor is 2^2 - 11 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 12 = 8388620.\n  -- The smallest prime factor is 2^2 - 12 = 1.\n  --\
    \ The largest prime factor is 2^29 - 13 = 8388621.\n  -- The smallest prime factor\
    \ is 2^2 - 13 = 1.\n  -- The largest prime factor is 2^29 - 14 = 8388622.\n  --\
    \ The smallest prime factor is 2^2 - 14 = 1.\n  -- The largest prime factor is\
    \ 2^29 - 15 = 8388623.\n  -- The smallest prime factor is 2^2 - 15 = 1.\n  --\
    \ The largest prime factor ", "  -- The prime factors of n are those that are\
    \ less than or equal to sqrt(n).\n  -- See http://en.wikipedia.org/wiki/Prime_number#Prime-factorization.\n\
    \  -- The first prime factor is sqrt(n). Since n divides evenly into the first\
    \ prime\n  -- factor, there is no need to test beyond sqrt(n).\n  local function\
    \ factors(n)\n    local factors = {}\n    for i = 2, n do\n      if n % i == 0\
    \ then\n        table.insert(factors, i)\n        n = n / i\n      end\n    end\n\
    \    if n ~= 1 then\n      table.insert(factors, n)\n    end\n    return factors\n\
    \  end", "  -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n\
    \  -- The largest prime factor is 2 if n is even.\n  -- The largest prime factor\
    \ is 3 if n is odd.\n  -- The largest prime factor is 6 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 9 if n is odd and greater than 5.\n\
    \  -- The largest prime factor is 12 if n is odd and greater than 7.\n  -- The\
    \ largest prime factor is 6 if n is odd and greater than 11.\n  -- The largest\
    \ prime factor is 24 if n is odd and greater than 15.\n  -- The largest prime\
    \ factor is 24 if n is odd and greater than 23.\n  -- The largest prime factor\
    \ is 6 if n is odd and greater than 27.\n  -- The largest prime factor is 120\
    \ if n is odd and greater than 41.\n  -- The largest prime factor is 240 if n\
    \ is odd and greater than 121.\n  -- The largest prime factor is 480 if n is odd\
    \ and greater than 241.\n  -- The largest prime factor is 720 if n is odd and\
    \ greater than 481.\n  -- The largest prime factor is 960 if n is odd and greater\
    \ than 721.\n  -- The largest prime factor is 1920 if n is odd and greater than\
    \ 961.\n  -- The largest prime factor is 3840 if n is odd and greater than 1281.\n\
    \  -- The largest prime factor is 5760 if n is odd and greater than 1919.\n  --\
    \ The largest prime factor is 11520 if n is odd and greater than 3840.\n  -- The\
    \ largest prime factor is 230400 if n is odd and greater than 5760.\n  -- The\
    \ largest prime factor is 4611680 if n is odd and greater than 11520.\n  -- The\
    \ largest prime factor is 98317600 if n is odd and greater than 230400.\n  --\
    \ The largest prime factor is 1966140800 if n is odd and greater than 4611680.\n\
    \  -- The largest prime factor is 393243600 if n is odd and greater than 98317600.\n\
    \  -- The largest prime factor is 786432000 if n is odd and greater than 1966140800.\n\
    \  -- The largest prime factor is 1579417600 if n is odd and greater than 393243600.\n\
    \  -- The largest prime factor is 3145728000 if n is odd and greater than 786432000.\n\
    \  -- The largest prime factor is 628326400 if n is odd and greater than 1579417600.\n\
    \  -- "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
