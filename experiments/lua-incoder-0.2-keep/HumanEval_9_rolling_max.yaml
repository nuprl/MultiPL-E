name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n\
    \    local current_max = numbers[i]\n    if rolling_max ~= nil then\n      if\
    \ rolling_max < current_max then\n        rolling_max = current_max\n        rolling_max_index\
    \ = i\n      end\n    else\n      rolling_max = current_max\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = {}\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max\
    \ + 1] = max_value\n      max_value = numbers[i]\n    else\n      max_value =\
    \ numbers[i]\n    end\n  end\n  rolling_max[#rolling_max + 1] = max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = {}\n  local max_index = 0\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  table.insert(rolling_max,\
    \ max_value)\n  for i = 1, max_index do\n    table.insert(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = {}\n  local max_index = 0\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n  rolling_max[max_index]\
    \ = max_value\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for i = 2,\
    \ #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local max_value = numbers[1]\n  local max_index = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  ",
  "  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if rolling_max_value == nil then\n      rolling_max_value\
    \ = value\n      rolling_max_index = i\n    else\n      if rolling_max_value <\
    \ value then\n        rolling_max_value = value\n        rolling_max_index = i\n\
    \      end\n    end\n  end\n  return rolling_max_index, rolling_max_value\nend",
  "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = 1, i do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_value)\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] > max_value then\n      rolling_max[#rolling_max + 1] = max_value\n\
    \      max_value = numbers[i]\n    else\n      rolling_max[#rolling_max + 1] =\
    \ numbers[i]\n    end\n  end\n  rolling_max[#rolling_max + 1] = max_value\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers.shift()\n  for i = 1, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  for i = 1, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  ", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n  \
    \  rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i] >=\
    \ rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  table.insert(rolling_max, rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    table.insert(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = {}\n  local max_value = numbers[1]\n  for i = 2,\
    \ #numbers do\n    if numbers[i] > max_value then\n      rolling_max[#rolling_max\
    \ + 1] = numbers[i]\n      max_value = numbers[i]\n    else\n      rolling_max[#rolling_max]\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  for i = 1, #numbers do\n    local\
    \ value = numbers[i]\n    if rolling_max ~= nil then\n      if rolling_max_value\
    \ ~= nil then\n        if rolling_max_value <= value then\n          rolling_max\
    \ = rolling_max_value\n          rolling_max_index = i\n        end\n      else\n\
    \        rolling_max = value\n        rolling_max_index = i\n      end\n    else\n\
    \      rolling_max = value\n      rolling_max_index = i\n    end\n  end\n  return\
    \ rolling_max, rolling_max_index\nend", "  local rolling_max = numbers[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for i = 2,\
    \ #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for\
    \ j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element then\n     \
    \   rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max = rolling_max\
    \ or rolling_max_element\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for\
    \ j = i - 1, -1, -1 do\n      if numbers[j] > rolling_max_element then\n     \
    \   rolling_max_element = numbers[j]\n      end\n    end\n    rolling_max = rolling_max\
    \ or rolling_max_element\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n \
    \ local max_index = 1\n  for i = 1, #numbers do\n    if numbers[i] > rolling_max\
    \ then\n      rolling_max = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  return rolling_max, max_index\nend", "  local rolling_max = numbers[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  for i = 1, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max = numbers[rolling_max_index]\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n      rolling_max\
    \ = numbers[i]\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.shift()\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = rolling_max\n  for i = 1, #numbers do\n   \
    \ if numbers[i] < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local index = 1\n  local max_value = numbers[index]\n  rolling_max[index]\
    \ = max_value\n  index = index + 1\n  while index <= #numbers do\n    if numbers[index]\
    \ > max_value then\n      max_value = numbers[index]\n    end\n    index = index\
    \ + 1\n    rolling_max[index] = max_value\n  end\n  return rolling_max\nend",
  "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.shift()\n  for i =\
    \ 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for i = 2,\
    \ #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.shift()\n  local max_value = rolling_max\n  for i = 1,\
    \ #numbers do\n    if numbers[i] ~= rolling_max then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_maxes = {}\n\
    \  for i = 1, #numbers do\n    local rolling_max = numbers[i]\n    for j = i -\
    \ 1, -1, -1 do\n      if numbers[j] > rolling_max then\n        rolling_max =\
    \ numbers[j]\n      end\n    end\n    table.insert(rolling_maxes, rolling_max)\n\
    \  end\n  return rolling_maxes\nend", "  local rolling_max = numbers[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  for i = 1, #numbers do\n    local rolling_max_element = numbers[i]\n    for\
    \ j = 1, i do\n      rolling_max_element = math.max(rolling_max_element, numbers[j])\n\
    \    end\n    rolling_max = rolling_max or rolling_max_element\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = {}\n  local max_index = 1\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max[max_index] = max_value\n      max_index = max_index\
    \ + 1\n      max_value = numbers[i]\n    else\n      rolling_max[max_index] =\
    \ numbers[i]\n    end\n  end\n  rolling_max[max_index] = max_value\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value =\
    \ numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend", "  local rolling_max = {}\n\
    \  local rolling_max_index = 0\n  local rolling_max_value = numbers[1]\n  local\
    \ rolling_max_count = 0\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \    rolling_max_count = rolling_max_count + 1\n    end\n  end\n  rolling_max[rolling_max_count]\
    \ = rolling_max_value\n  for i = 1, rolling_max_count do\n    rolling_max[i] =\
    \ numbers[rolling_max_index + i]\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.shift()\n  local max_element\
    \ = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i] < rolling_max\
    \ then\n      rolling_max = numbers[i]\n    end\n    if numbers[i] == max_element\
    \ then\n      break\n    end\n  end\n  return rolling_max\nend", "  local rolling_max\
    \ = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  ",
  "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = {}\n  for i = 1, #numbers\
    \ do\n    local max_value = numbers[i]\n    for j = i + 1, #numbers do\n     \
    \ if numbers[j] > max_value then\n        max_value = numbers[j]\n      end\n\
    \    end\n    table.insert(rolling_max, max_value)\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if\
    \ numbers[i] >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i\
    \ = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max =\
    \ numbers[i]\n      max_index = i\n    end\n  end\n  return rolling_max, max_index\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = nil\n\
    \  local max_value = nil\n  local max_index = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil or numbers[i] > max_value then\n      max_value = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  if max_value == nil then\n    return nil\n\
    \  end\n  rolling_max = numbers[max_index]\n  for i = max_index + 1, #numbers\
    \ do\n    if numbers[i] < max_value then\n      rolling_max = numbers[i]\n   \
    \ end\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.shift()\n\
    \  local rolling_max_index = 1\n  for i = 1, #numbers do\n    if numbers[i] >\
    \ rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index =\
    \ i\n    end\n  end\n  return rolling_max, rolling_max_index\nend", "  local rolling_max\
    \ = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for\
    \ i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend", "  local\
    \ rolling_max = numbers[1]\n  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend", "  local rolling_max = numbers[1]\n  for i\
    \ = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n\
    \  return rolling_max\nend", "  local rolling_max = numbers.[1]\n  for i = 2,\
    \ #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return\
    \ rolling_max\nend", "  local rolling_max = numbers[1]\n  for i = 2, #numbers\
    \ do\n    rolling_max = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\n\
    end", "  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  if rolling_max_index == 0 then\n    rolling_max = numbers\n \
    \ else\n    rolling_max = table.concat(numbers, rolling_max_index, rolling_max_index\
    \ + 1)\n  end\n  return rolling_max\nend", "  local rolling_max = numbers.[1]\n\
    \  for i = 2, #numbers do\n    rolling_max = math.max(rolling_max, numbers[i])\n\
    \  end\n  return rolling_max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
