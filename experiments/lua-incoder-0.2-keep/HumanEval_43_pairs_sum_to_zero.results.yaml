language: lua
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v == 2 then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc69htgov.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpc69htgov.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpc69htgov.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[l[i]] = true\n  end\n  for i = 1, #l do\n    if pairs[l[i]]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo8kldst.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvo8kldst.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local zeros = 0\n  for _, value in pairs do\n    zeros = zeros\
    \ + value\n  end\n  return zeros == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0th0_0d.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmph0th0_0d.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmph0th0_0d.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  local pair\n  for pair\
    \ in pairs do\n    zeros = zeros + pair\n  end\n  if zeros == 0 then\n    return\
    \ false\n  end\n  local pair\n  for pair in pairs do\n    if pair > 0 then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbioyutze.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbioyutze.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbioyutze.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local function helper(l, i, j)\n\
    \    if i == j then\n      return false\n    end\n    if l[i] == 0 then\n    \
    \  return helper(l, i + 1, j)\n    end\n    if l[j] == 0 then\n      return helper(l,\
    \ i, j + 1)\n    end\n    return helper(l, i, j) or helper(l, i + 1, j + 1)\n\
    \  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mhz9qlb.lua:25:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0mhz9qlb.lua:25: in upvalue 'helper'\n\
    \t/tmp/tmp0mhz9qlb.lua:25: in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25: in\
    \ upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25: in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25:\
    \ in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25: in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25:\
    \ in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25: in upvalue 'helper'\n\t/tmp/tmp0mhz9qlb.lua:25:\
    \ in upvalue 'helper'\n\t...\n\t/tmp/tmp0mhz9qlb.lua:25: in function </tmp/tmp0mhz9qlb.lua:15>\n\
    \t(...tail calls...)\n\t/tmp/tmp0mhz9qlb.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.150 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then\n      return\
    \ false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp339p2_wy.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp339p2_wy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then\n      return\
    \ false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp339p2_wy.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp339p2_wy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  local zeros = pairs[1]\n  for k, v in pairs do\n    if v == zeros\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc9mbxw36.lua:22:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpc9mbxw36.lua:22: in local 'candidate'\n\t/tmp/tmpc9mbxw36.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqs_q26d.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpaqs_q26d.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpaqs_q26d.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    local found = false\n    for j = 1, #pairs do\n\
    \      if pairs[j][1] == v then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(pairs, {v, l[i]})\n    end\n\
    \  end\n  for i = 1, #pairs do\n    if pairs[i][1] == pairs[i - 1][1] then\n \
    \     return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu72u1jmx.lua:30:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpu72u1jmx.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpu72u1jmx.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] == nil then\n      pairs[v] = true\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmxef6zy.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmmxef6zy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[key] = pairs[key] or 0\n    pairs[key]\
    \ = pairs[key] + 1\n  end\n  for i = 1, #l do\n    local key = l[i]\n    if pairs[key]\
    \ == 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfhkd4x.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmwfhkd4x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] ~= nil then\n   \
    \   return false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb39xtd1w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb39xtd1w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      pairs[pair]\
    \ = false\n    else\n      pairs[pair] = true\n    end\n  end\n  return #pairs\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmjmc6jm.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxmjmc6jm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[l[i]] = true\n  end\n  for i = 1, #l do\n    if pairs[l[i]]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo8kldst.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvo8kldst.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then\n      pairs[v] = pairs[v] +\
    \ 1\n    else\n      pairs[v] = 1\n    end\n  end\n  for k, v in pairs do\n  \
    \  if v == 2 then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmmlejmp.lua:24:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpdmmlejmp.lua:24: in local 'candidate'\n\t/tmp/tmpdmmlejmp.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n    if pairs[v] == 2 then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1duy8_oa.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1duy8_oa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] == nil then\n      pairs[v] = true\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmxef6zy.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmmxef6zy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] == nil then\n      pairs[v] = true\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmxef6zy.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmmxef6zy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[key] = pairs[key] or 0\n    pairs[key]\
    \ = pairs[key] + 1\n  end\n  for i = 1, #l do\n    local key = l[i]\n    if pairs[key]\
    \ == 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfhkd4x.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmwfhkd4x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqs_q26d.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpaqs_q26d.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpaqs_q26d.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[key] = pairs[key] or 0\n    pairs[key]\
    \ = pairs[key] + 1\n    if pairs[key] == 2 then\n      return true\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj45hc56n.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj45hc56n.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    local found = false\n    for j = 1, #pairs do\n\
    \      if pairs[j][1] == v then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(pairs, {v, l[i]})\n    end\n\
    \  end\n  for i = 1, #pairs do\n    local v = pairs[i][1]\n    if #pairs > 1 then\n\
    \      local found = false\n      for j = 2, #pairs do\n        if pairs[j][1]\
    \ == v then\n          found = true\n          break\n        end\n      end\n\
    \      if found then\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i2ne3a6.lua:53:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0i2ne3a6.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v == 2 then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc69htgov.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpc69htgov.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpc69htgov.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      pairs[value]\
    \ = pairs[value] + 1\n    else\n      pairs[value] = 1\n    end\n  end\n  for\
    \ key, value in pairs do\n    if value == 1 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcfyk9eu_.lua:24:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpcfyk9eu_.lua:24: in local 'candidate'\n\t/tmp/tmpcfyk9eu_.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j] == value then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local zeros = 0\n  for i = 1, #pairs do\n    zeros = zeros\
    \ + pairs[i]\n  end\n  return zeros == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u8tbgq7.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0u8tbgq7.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local count = 0\n  for i = 1, #pairs do\n    count = count\
    \ + 1\n    if pairs[i][1] == 0 then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5egm6k80.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp5egm6k80.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp5egm6k80.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[l[i]] = true\n  end\n  for i = 1, #l do\n    if pairs[l[i]]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo8kldst.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvo8kldst.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local function helper(l, sum)\n\
    \    if #l == 0 then\n      return false\n    end\n    if sum == 0 then\n    \
    \  return true\n    end\n    local first = l[1]\n    local rest = l[#l]\n    return\
    \ helper(rest, sum - first) or helper(rest, sum)\n  end\n  return helper(l, 0)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dlrxlaz.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3dlrxlaz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ value})\n    end\n  end\n  local count = 0\n  for _, value in pairs do\n   \
    \ count = count + 1\n  end\n  return count == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2q2potz.lua:30:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpe2q2potz.lua:30: in local 'candidate'\n\t/tmp/tmpe2q2potz.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[#pairs + 1] = key\n  end\n  local sum\
    \ = 0\n  for i = 1, #pairs do\n    sum = sum + pairs[i]\n  end\n  return sum ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt1_0nbnf.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt1_0nbnf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local function helper(l, i, j)\n\
    \    if i == j then\n      return true\n    end\n    if l[i] == 0 then\n     \
    \ return false\n    end\n    return helper(l, i + 1, j) or helper(l, i, j - 1)\n\
    \  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluu65eoe.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpluu65eoe.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v == 2 then\n      return true\n\
    \    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc69htgov.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpc69htgov.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpc69htgov.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local key = value - i\n    pairs[key] = (pairs[key]\
    \ or 0) + 1\n  end\n  for i = 1, #pairs do\n    if pairs[i] > 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsegt7m1.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqsegt7m1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j] == value then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local zeros = 0\n  for _, value in pairs do\n    if value ==\
    \ 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgevjjci8.lua:30:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpgevjjci8.lua:30: in local 'candidate'\n\t/tmp/tmpgevjjci8.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    else\n      pairs[value] = true\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8d_ts7k.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8d_ts7k.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] ~= nil then\n   \
    \   return false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb39xtd1w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb39xtd1w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local count = 0\n  for i = 1, #pairs do\n    count = count\
    \ + pairs[i]\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7igk6cuz.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp7igk6cuz.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp7igk6cuz.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pairs are ordered, so the first element\
    \ is the largest\n    if pairs[pair] then return false end\n    pairs[pair] =\
    \ true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponfkzzdc.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmponfkzzdc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ value})\n    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchoaetm2.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpchoaetm2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with first element and\
    \ last element\n    if pairs[pair] then -- if pair already exists in the pairs\
    \ table\n      return false -- then return false\n    else\n      pairs[pair]\
    \ = true -- else add pair to the pairs table\n    end\n  end\n  return true --\
    \ else return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxac5j1t.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphxac5j1t.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui6msa17.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpui6msa17.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  local count = 0\n  for i = 1, #pairs do\n    count = count\
    \ + 1\n    if pairs[i][1] > 0 then\n      return false\n    end\n  end\n  return\
    \ count == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98n6lmua.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmp98n6lmua.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp98n6lmua.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with index i and i -\
    \ 1\n    if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugva2qb6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpugva2qb6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with higher index\n \
    \   if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji8m4yhp.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpji8m4yhp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local key = i\n    for j = i + 1, #l do\n\
    \      local other_value = l[j]\n      pairs[key .. '_' .. other_value] = true\n\
    \    end\n  end\n  local zero = true\n  for key, value in pairs do\n    zero =\
    \ false and zero\n  end\n  return zero\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplh570m7g.lua:25:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmplh570m7g.lua:25: in local 'candidate'\n\t/tmp/tmplh570m7g.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] == nil then\n      pairs[v] = i\n\
    \    else\n      return false\n    end\n  end\n  return #pairs == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun2ffkeb.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpun2ffkeb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local zeros = 0\n  local pair\n  for pair\
    \ in pairs do\n    if pairs[pair] == 0 then\n      zeros = zeros + 1\n    end\n\
    \  end\n  return zeros == #pairs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzeet1xl_.lua:21:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpzeet1xl_.lua:21: in local 'candidate'\n\t/tmp/tmpzeet1xl_.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaqs_q26d.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpaqs_q26d.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpaqs_q26d.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ 1})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    local found = false\n    for j = i + 1, #pairs do\n      if pairs[j][1] ==\
    \ value then\n        found = true\n        break\n      end\n    end\n    if\
    \ not found then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv7ye9fp.lua:51:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprv7ye9fp.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local key = tostring(value)\n    pairs[key]\
    \ = (pairs[key] or 0) + 1\n  end\n  for key, value in pairs do\n    if value ==\
    \ 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnqbl5lu.lua:21:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpsnqbl5lu.lua:21: in local 'candidate'\n\t/tmp/tmpsnqbl5lu.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  for i = 1, #pairs do\n    if pairs[i][1] == pairs[i - 1][1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpea0dk54f.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpea0dk54f.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpea0dk54f.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  for i = 1, #pairs do\n    if pairs[i][1] == pairs[i - 1][1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpea0dk54f.lua:20:\
    \ attempt to index a number value (field '?')\nstack traceback:\n\t/tmp/tmpea0dk54f.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpea0dk54f.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] == nil then\n      pairs[v] = true\n\
    \    else\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmxef6zy.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmmxef6zy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[l[i]] = true\n  end\n  for i = 1, #l do\n    local v = l[i]\n\
    \    if pairs[v] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyugf8trh.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyugf8trh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with index i and i -\
    \ 1\n    if pair == 0 then -- if pair is zero\n      pairs[#pairs + 1] = pair\n\
    \    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcx04bq9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqcx04bq9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with first element as\
    \ key and second element as value\n    if pairs[pair] then return false end\n\
    \    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56i12stu.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp56i12stu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then\n      pairs[v] = pairs[v] +\
    \ 1\n    else\n      pairs[v] = 1\n    end\n  end\n  for k, v in pairs do\n  \
    \  if v > 1 then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxe30_uw5.lua:24:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpxe30_uw5.lua:24: in local 'candidate'\n\t/tmp/tmpxe30_uw5.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with index i and i -\
    \ 1\n    if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugva2qb6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpugva2qb6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n    pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp20qc5mg7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp20qc5mg7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with index i and i -\
    \ 1\n    if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugva2qb6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpugva2qb6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    else\n      pairs[pair] = true\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp21eu5gol.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp21eu5gol.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local key = tostring(value)\n    pairs[key]\
    \ = (pairs[key] or 0) + 1\n  end\n  for key, value in pairs do\n    if value ==\
    \ 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnqbl5lu.lua:21:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpsnqbl5lu.lua:21: in local 'candidate'\n\t/tmp/tmpsnqbl5lu.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j] == value then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdqsc4e2.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppdqsc4e2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ value})\n    end\n  end\n  local zeros = 0\n  for _, value in pairs do\n   \
    \ zeros = zeros + value\n  end\n  return zeros == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwu_h0jw9.lua:30:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpwu_h0jw9.lua:30: in local 'candidate'\n\t/tmp/tmpwu_h0jw9.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n    if pairs[v] == 2 then\n      return true\n    end\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1duy8_oa.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1duy8_oa.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35b1l_dr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35b1l_dr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with index i and i -\
    \ 1\n    if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugva2qb6.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpugva2qb6.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[i] = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n\
    \    sum = sum + pairs[i]\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hbi7f1r.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_hbi7f1r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ value})\n    end\n  end\n  local zeros = 0\n  for _, v in pairs do\n    if v\
    \ == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros == #pairs\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1sqb3m9_.lua:30:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp1sqb3m9_.lua:30: in local 'candidate'\n\t/tmp/tmp1sqb3m9_.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then\n      return\
    \ false\n    end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35b1l_dr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35b1l_dr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ true})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == value then\n        pairs[j]\
    \ = nil\n      end\n    end\n  end\n  return #pairs == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fp62l8a.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3fp62l8a.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ i})\n    end\n  end\n  local zeros = 0\n  for _, v in pairs do\n    zeros =\
    \ zeros + v\n  end\n  return zeros == 0 and #pairs == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_7lb18q.lua:30:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp3_7lb18q.lua:30: in local 'candidate'\n\t/tmp/tmp3_7lb18q.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local key = tostring(value)\n    pairs[key]\
    \ = (pairs[key] or 0) + 1\n  end\n  for key, value in pairs do\n    if value ==\
    \ 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnqbl5lu.lua:21:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpsnqbl5lu.lua:21: in local 'candidate'\n\t/tmp/tmpsnqbl5lu.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = true\n  end\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7wm9hc7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx7wm9hc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[key] = pairs[key] or 0\n    pairs[key]\
    \ = pairs[key] + 1\n  end\n  for i = 1, #l do\n    local key = l[i]\n    if pairs[key]\
    \ == 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfhkd4x.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmwfhkd4x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    pairs[l[i]] = true\n  end\n  for i = 1, #l do\n    if pairs[l[i]]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo8kldst.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvo8kldst.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u4g9y_a.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2u4g9y_a.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ value})\n    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i][1]\n\
    \    for j = i + 1, #pairs do\n      if pairs[j][1] == 0 then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbm85xtr.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxbm85xtr.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    pairs[value] = pairs[value] or 0\n    pairs[value]\
    \ = pairs[value] + 1\n  end\n  for key, value in pairs do\n    if value == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvr3hnuw.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbvr3hnuw.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbvr3hnuw.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local key = l[i]\n    pairs[key] = pairs[key] or 0\n    pairs[key]\
    \ = pairs[key] + 1\n  end\n  for i = 1, #l do\n    local key = l[i]\n    if pairs[key]\
    \ == 1 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwfhkd4x.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmwfhkd4x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j][1] == value then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(pairs, {value,\
    \ 1})\n    end\n  end\n  for i = 1, #pairs do\n    if pairs[i][1] > 1 then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjw813lx.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmjw813lx.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    local found = false\n    for j = 1, #pairs\
    \ do\n      if pairs[j] == value then\n        found = true\n        break\n \
    \     end\n    end\n    if not found then\n      table.insert(pairs, value)\n\
    \    end\n  end\n  for i = 1, #pairs do\n    local value = pairs[i]\n    for j\
    \ = i + 1, #pairs do\n      if pairs[j] == value then\n        return true\n \
    \     end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcwohk6w.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmcwohk6w.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local value = l[i]\n    if pairs[value] then return false end\n \
    \   pairs[value] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m5b22vq.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8m5b22vq.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qkndid.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc1qkndid.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for k, v in pairs do\n    if v > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkptmexx.lua:21:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpbkptmexx.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpbkptmexx.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pairs are ordered by their first element\n\
    \    if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawveuldm.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpawveuldm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i - 1] -- pair is pair with higher index\n \
    \   if pairs[pair] then return false end\n    pairs[pair] = true\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji8m4yhp.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpji8m4yhp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659799393
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
    \ True if there are two distinct elements in the list that\n-- sum to zero, and\
    \ False otherwise.\n-- >>> pairs_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> pairs_sum_to_zero([1,\
    \ 3, -2, 1])\n-- False\n-- >>> pairs_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
    \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n-- True\n-- >>> pairs_sum_to_zero([1])\n\
    -- False\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i], l[i + 1]\n    if pairs[pair] then return false\
    \ end\n    pairs[pair] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zwocpp7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5zwocpp7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
