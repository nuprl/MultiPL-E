name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local md5\n  if text == nil then\n    return nil\n  else\n    md5\
    \ = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend",
  "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, md5:len())\n\
    \  else\n    return nil\n  end\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5sum = ngx.md5(text)\n  return md5sum\nend", "  local md5 =\
    \ ngx.md5()\n  md5:update(text)\n  return md5:final()\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= nil then\n    return md5:sub(1, 16)\n  end\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5\nend", "  local md5\n  if text:len() > 0 then\n\
    \    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 2)\nend", "  if text == nil then return nil end\n  local\
    \ md5sum = ngx.md5(text)\n  return md5sum\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n \
    \ end\n  return md5\nend", "  local md5 = ngx.md5()\n  local len = #text\n  local\
    \ i = 1\n  while i < len do\n    md5:update(ngx.encode_base64(ngx.encode_base64(text)))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "    if text == nil then\n\
    \        return nil\n    end\n    local md5 = ngx.md5()\n    md5:update(text)\n\
    \    return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if\
    \ text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n\
    \  return md5\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5\n\
    \  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end", "  local md5\n  if text:len() >\
    \ 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5\n  if text == nil then\n    return nil\n\
    \  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  end\n  return md5\nend", "    if text == nil then\n        return nil\n   \
    \ end\n    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash =\
    \ ngx.md5(text)\n  return md5hash\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local hash = ngx.md5(text)\n    return hash\nend", "    if\
    \ text == nil then\n        return nil\n    end\n    local md5 = ngx.md5()\n \
    \   md5:update(text)\n    return md5:final()\nend", "  if text == nil then\n \
    \   return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 2)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5 =\
    \ ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, 16)\n  end\nend",
  "  local md5\n  if text == nil then\n    return nil\n  end\n  local md5_hash = md5.new()\n\
    \  md5_hash:update(text)\n  md5 = md5_hash:digest()\n  return md5:sub(1, 16)\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  return text:gsub('[^0-9a-f]', ''):gsub('\
    \ +$', ''):gsub(' +', ':')\nend", "    if text == nil then\n        return nil\n\
    \    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= nil then\n    return md5:sub(1, 16)\n  end\nend", "    if text ==\
    \ nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n    return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", "  if text ==\
    \ nil then\n    return nil\n  end", "  if text == nil then\n    return nil\n \
    \ end", "  if text == nil then\n    return nil\n  end\n  local md5sum, err = io.open(\"\
    /dev/urandom\", \"rb\")\n  if md5sum == nil then\n    return nil\n  end\n  local\
    \ md5sum_bytes = md5sum:read(\"*all\")\n  md5sum:close()\n  return md5sum_bytes\n\
    end", "  if text == nil then\n    return nil\n  end", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return\
    \ md5:final()\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return\
    \ md5:sub(1, 16)\n  end\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend", "    if\
    \ text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len() - 1)\nend", "  return text:gsub('[^0-9a-f]'):gsub('%z',\
    \ function(x)\n    return x:gsub('%d', function(y)\n      return y:gsub('%e',\
    \ function(z)\n        return z:gsub('%f', function(w)\n          return w:gsub('%g',\
    \ function(x)\n            return x:gsub('%A', function(y)\n              return\
    \ y:gsub('%B', function(z)\n                return z:gsub('%C', function(w)\n\
    \                  return w:gsub('%D', function(x)\n                    return\
    \ x:gsub('%E', function(y)\n                      return y:gsub('%F', function(z)\n\
    \                        return z:gsub('%G', function(w)\n                   \
    \       return w:gsub('%H', function(x)\n                            return x:gsub('%I',\
    \ function(y)\n                              return y:gsub('%J', function(z)\n\
    \                                return z:gsub('%K', function(w)\n           \
    \                       return w:gsub('%L', function(x)\n                    \
    \                return x:gsub('%M', function(y)\n                           \
    \           return y:gsub('%N', function(z)\n                                \
    \        return z:gsub('%O', function(w)\n                                   \
    \       return w:gsub('%P', function(x)\n                                    \
    \        return x:gsub('%Q', function(y)\n                                   \
    \           return y:gsub('%R', function(z)\n                                \
    \                return z:gsub('%S', function(w)\n                           \
    \                       return w:gsub('%T', function(x)\n                    \
    \                                return x:gsub('%U', function(y)\n           \
    \                                           return y:gsub('%V', function(z)\n\
    \                                                        return z:gsub('%W', function(w)\n\
    \                                                          return w:gsub('%X',\
    \ function(x)\n                                                            return\
    \ x:gsub('%Y', function(y)\n                                                 \
    \             return y:gsub('%Z', function(z)\n                              \
    \                                  return z:gsub('%[', function(w)\n         \
    \                                                         return w:gsub('%]',\
    \ function(x)\n                                                              \
    \      return x:gsub('%{', function(y)\n                                     \
    \                                 return y:gsub('%|', function(z)\n          \
    \                                                              return z:gsub('%~',\
    \ function(w)\n                                                              \
    \            return w:gsub('%{', function(x)\n                               \
    \                                             return x:gsub('%|', function(y)\n\
    \                                                                            \
    \  return y:gsub('%{', function(z)\n                                         \
    \                                       return z:gsub('%{', function(w)\n    \
    \                                                                            \
    \  return w:gsub('%{', function(x)\n                                         \
    \                                           return x:gsub('%{', function(y)\n\
    \                                                                            \
    \          return y:gsub('%{', function(z)\n                                 \
    \                                                       return z:gsub('%{', function(w)\n\
    \                                                                            \
    \              return w:gsub('%{', function(x)\n                             \
    \                                                               return x:g", " \
    \   if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5()\n\
    \    md5:update(text)\n    return md5:final()\nend", "    if text == nil then\n\
    \        return nil\n    end", "  if text == nil then return end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5sum, err\
    \ = ngx.md5(text)\n  if md5sum == ngx.null then\n    return nil\n  end\n  return\
    \ md5sum\nend", "  local md5sum\n  local md5_hash = ngx.md5(text)\n  md5sum =\
    \ md5_hash:sub(1, md5_hash:len()-1)\n  return md5sum\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n \
    \ return md5:final()\nend", "    if text == nil then\n        return nil\n   \
    \ end\n    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len())\nend",
  "    if text == nil then\n        return nil\n    end", "    if text == nil then\n\
    \        return nil\n    end\n    local hash = ngx.md5(text)\n    return hash\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  local md5\n  if text ~= '' then\n  \
    \  md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n  \
    \  return nil\n  end\n  local md5sum\n  local md5sum_hex\n  local md5sum_base64\n\
    \  local md5sum_base64_hex\n  local md5sum_base64_utf8\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode\n  local md5sum_base64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64\n  local md5sum_base64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8\n  local md5sum_base64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n  local\
    \ md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \  local md5sum_base64_utf8_unicode_b64_", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n \
    \ local hash = ngx.md5(text)\n  return hash\nend", "    if text == nil then\n\
    \        return nil\n    end", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if\
    \ text == nil then\n    return nil\n  end\n  local md5sum = ngx.md5(text)\n  return\
    \ md5sum\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1,\
    \ 8)\n  else\n    return nil\n  end\nend", "  if text == nil then\n    return\
    \ nil\n  end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n  if\
    \ md5 ~= nil then\n    return md5:sub(1, 16)\n  end\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\n\
    end", "  local md5 = ngx.md5()\n  local len = #text\n  local i = 1\n  while i\
    \ <= len do\n    md5:update(text:sub(1, i))\n    i = i + 1\n  end\n  return md5:final()\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "    if text == nil then\n        return nil\n    end", "  if text == nil\
    \ then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "    if text == nil then\n        return nil\n    end\n\
    \    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len())\nend", "  local\
    \ md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\n\
    end", "  if text == nil then\n    return nil\n  end", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return\
    \ md5:final()\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend", "  local md5\n\
    \  if text == nil then\n    return nil\n  elseif text:len() > 0 then\n    md5\
    \ = ngx.md5(text)\n  else\n    return nil\n  end\n  return md5\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  local md5 = ngx.md5()\n  local len =\
    \ #text\n  for i = 1, len do\n    md5:update(ngx.encode_base64(text[i]))\n  end\n\
    \  return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n \
    \ local md5sum = ngx.md5(text)\n  return md5sum\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len())\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n\
    \    return md5:sub(1, 16)\n  end\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "  if text == nil then return end\n  local hash = ngx.md5(text)\n  return hash\n\
    end", "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len() - 1)\nend", "  local function pad(s)\n    local\
    \ pad = math.random(math.floor(math.random(math.floor(#s)/2))+1)\n    return table.concat({pad,\
    \ s}, pad)\n  end\n  local function md5(s)\n    local hash = md5.new()\n    s:gsub('.',\
    \ function(c)\n      hash:add(c)\n    end)\n    return hash:result()\n  end\n\
    \  if text ~= '' then\n    return md5(text)\n  else\n    return nil\n  end\nend",
  "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return\
    \ hash\nend", "  if text == nil then return nil end\n  local md5sum, err = io.open(\"\
    /dev/urandom\", \"r\")\n  if md5sum == nil then return nil end\n  local md5sum_bytes\
    \ = md5sum:read(\"*a\")\n  md5sum:close()\n  return tostring(md5sum_bytes)\nend",
  "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return\
    \ md5\nend", "  local md5\n  if text == nil then\n    return nil\n  else\n   \
    \ md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil\
    \ then\n    return nil\n  end", "  if text == nil then\n    return nil\n  end\n\
    \  local hash = ngx.md5(text)\n  return hash\nend", "  if text == nil then\n \
    \   return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = '00000000000000000000000000000000'\n  end\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end", "    if text == nil then\n     \
    \   return nil\n    end\n    local md5 = ngx.md5()\n    md5:update(text)\n   \
    \ return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend", "    if text\
    \ == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n  \
    \  return md5:sub(1, md5:len())\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if text == nil then\n\
    \    return nil\n  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", '  return
    text:gsub("\n", ""):gsub("\r", ""):gsub("\t", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):', "  if text == nil then\n    return nil\n  end", "  local\
    \ md5 = ngx.md5()\n  local len = #text\n  if len == 0 then\n    return nil\n \
    \ end\n  md5:update(text)\n  return md5:final()\nend", "  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len()-1)\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end", "  if text == nil then\n    return nil\n  end", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5sum = ngx.md5(text)\n  return md5sum\n\
    end", "  if text == nil then\n    return nil\n  end", "  return text:gsub(\"\\\
    n\", ''):gsub(\"\\r\", ''):gsub(\"\\t\", ''):gsub(\"  \", ''):gsub(\"  \", '')\n\
    end", "  if text == nil then return end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5()\n  local len = #text\n\
    \  local i = 1\n  while i <= len do\n    md5:update(ngx.encode_base64(ngx.encode_base64(text)))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "  if text == nil then\n  \
    \  return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n\
    \  end\n  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend",
  "  local md5sum, err = io.open(\"/dev/urandom\", \"r\").read()\n  if err then\n\
    \    return nil\n  end\n  local hash = md5.new()\n  hash:update(text)\n  return\
    \ hash:final()\nend", '  return text:gsub("\n", ""):gsub("\r", ""):gsub("\t",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):', "  local md5\
    \ = ngx.md5()\n  local len = #text\n  local i = 1\n  while i <= len do\n    md5:update(text:sub(1,\
    \ i))\n    i = i + 1\n  end\n  return md5:final()\nend", "  if text == nil then\n\
    \    return nil\n  end", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 2)\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5\n  if text == nil then\n    return nil\n\
    \  elseif text:len() == 0 then\n    return nil\n  else\n    md5 = ngx.md5(text)\n\
    \  end\n  return md5\nend", "  if text == nil then\n    return nil\n  end", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n  return\
    \ md5:final()\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "    if text == nil then\n\
    \        return nil\n    end\n    local md5 = ngx.md5()\n    md5:update(text)\n\
    \    return md5:final()\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "    if text == nil then\n \
    \       return nil\n    end", "  if text == nil then return nil end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len()-1)\nend", "  local md5\n  if\
    \ text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local hash\
    \ = ngx.md5(text)\n  return hash\nend", "  local md5\n  if text == nil then\n\
    \    return nil\n  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend", "  local\
    \ md5\n  if text == nil then\n    return nil\n  else\n    md5 = ngx.md5(text)\n\
    \  end\n  return md5\nend", '  return text:gsub("\n", ""):gsub("\r", ""):gsub("\t",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ",
    ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):gsub("  ", ""):', "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n\
    \  return md5hash\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n  return\
    \ md5:final()\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if\
    \ text ~= '' then\n    md5 = ngx.md5(text)\n  else\n    md5 = '00000000000000000000000000000000'\n\
    \  end\n  return md5\nend", "  if text == nil then\n    return nil\n  end", " \
    \ if text == nil then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n\
    \  return md5hash\nend", "    if text == nil then\n        return nil\n    end\n\
    \    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
