language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd = lst:clone()\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even:insert(lst[i])\n    else\n     \
    \ odd:insert(lst[i])\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpve416rsx.lua:5:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmpve416rsx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpve416rsx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index = 0\n  local sum = 0\n  for i = 1, #lst do\n  \
    \  if i % 2 == 0 then\n      sum = sum + lst[even_index]\n      even_index = even_index\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcadjmnu2.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcadjmnu2.lua:9: in local 'candidate'\n\t/tmp/tmpcadjmnu2.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum\
    \ + even[i]\n  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4_9u3t.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3g4_9u3t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  table.insert(evens, table.concat(odds, \" \"))\n\
    \  return table.concat(evens, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bz9xjsa.lua:21:\
    \ expected: 88, actual: \"88 4\"\nstack traceback:\n\t/tmp/tmp9bz9xjsa.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:select( function(x) return x % 2 == 0 end )\n \
    \ local odd = lst:select( function(x) return x % 2 == 1 end )\n  local sum = 0\n\
    \  for _, v in ipairs(even) do\n    sum = sum + v\n  end\n  for _, v in ipairs(odd)\
    \ do\n    sum = sum + v\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptekjjlk4.lua:5:\
    \ attempt to call a nil value (method 'select')\nstack traceback:\n\t/tmp/tmptekjjlk4.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmptekjjlk4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = even:sort()\n  odd = odd:sort()\n  local sum = 0\n \
    \ for i = 1, #even do\n    sum = sum + even[i]\n  end\n  for i = 1, #odd do\n\
    \    sum = sum + odd[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmff9f1eq.lua:13:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpmff9f1eq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmff9f1eq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens,\
    \ \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5iggv5fw.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp5iggv5fw.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^%s*(.-)%s*$\", \"%1\")\n  return even\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdpo6y53q.lua:5:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpdpo6y53q.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpdpo6y53q.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = even:sort()\n  odd = odd:sort()\n  local sum = 0\n \
    \ for i = 1, #even do\n    sum = sum + even[i]\n  end\n  for i = 1, #odd do\n\
    \    sum = sum + odd[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmff9f1eq.lua:13:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpmff9f1eq.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmff9f1eq.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^(.-)$\", function(x)\n    return x:sub(1,\
    \ x:len()) .. \"2\"\n  end)\n  return lst:gsub(\"^(.-)$\", function(x)\n    return\
    \ x:sub(1, x:len()) .. \"2\"\n  end)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6sklwmp.lua:5:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpf6sklwmp.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpf6sklwmp.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd  = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3467hbr.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpi3467hbr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd  = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi3467hbr.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpi3467hbr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even, \",\") + table.concat(odd,\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh8fuuf4.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpoh8fuuf4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index = 0\n  local odd_index = 1\n  local sum = 0\n \
    \ for i = 1, #lst do\n    if i % 2 == 0 then\n      sum = sum + lst[even_index]\n\
    \      even_index = even_index + 1\n    else\n      sum = sum + lst[odd_index]\n\
    \      odd_index = odd_index + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9y4i7kdy.lua:10:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp9y4i7kdy.lua:10: in local 'candidate'\n\t/tmp/tmp9y4i7kdy.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^%s*(.-)%s*$\", \"%1\")\n  local odd = lst:gsub(\"\
    ^%s*(.-)%s*$\", \"%2\")\n  local even = even:gsub(\"(.-)%s*(.-)%s*$\", \"%1\"\
    )\n  local odd = odd:gsub(\"(.-)%s*(.-)%s*$\", \"%2\")\n  return even .. odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg10b66v.lua:5:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmpyg10b66v.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpyg10b66v.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even, \",\") + table.concat(odd,\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh8fuuf4.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpoh8fuuf4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum\
    \ + even[i]\n  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4_9u3t.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3g4_9u3t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^.-$\", \"\")\n  local odd  = lst:gsub(\"\
    ^.-$\", \"-\")\n  return even:gsub(\"^.-$\", \"-\") + odd:gsub(\"^.-$\", \"+\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lx7ubfx.lua:5:\
    \ attempt to call a nil value (method 'gsub')\nstack traceback:\n\t/tmp/tmp2lx7ubfx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp2lx7ubfx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index = 0\n  local odd_index = 1\n  local sum = 0\n \
    \ while #lst > 0 do\n    if lst[even_index] % 2 == 0 then\n      sum = sum + lst[even_index]\n\
    \      lst[even_index] = nil\n    else\n      lst[odd_index] = nil\n      odd_index\
    \ = odd_index + 1\n    end\n    even_index = even_index + 1\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2g6w19tc.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2g6w19tc.lua:9: in local 'candidate'\n\t/tmp/tmp2g6w19tc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_indexes = {}\n  for i = 1, #lst do\n    if i % 2 == 0\
    \ then\n      even_indexes[#even_indexes + 1] = i\n    end\n  end\n  local sum\
    \ = 0\n  for i = 1, #even_indexes do\n    sum = sum + lst[even_indexes[i]]\n \
    \ end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqsnxa42.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpiqsnxa42.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  return table.concat(evens, \"+\") .. \"+\" .. table.concat(odds,\
    \ \"-\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8reeqw1.lua:20:\
    \ expected: 88, actual: \"88+4\"\nstack traceback:\n\t/tmp/tmpd8reeqw1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len())\n  local odd = lst:sub(2, lst:len())\n\
    \  return even:add(odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpver8zowv.lua:5:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmpver8zowv.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpver8zowv.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_indexes = {}\n  for i = 1, #lst do\n    if i % 2 == 0\
    \ then\n      table.insert(even_indexes, i)\n    end\n  end\n  local sum = 0\n\
    \  for _, index in ipairs(even_indexes) do\n    sum = sum + lst[index]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuu4o5ji.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpmuu4o5ji.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = even:sort()\n  odd = odd:sort()\n  local evenSum = 0\n\
    \  local oddSum = 0\n  for i = 1, #even do\n    evenSum = evenSum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    oddSum = oddSum + odd[i]\n  end\n  return evenSum\
    \ + oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplq1mh5s4.lua:13:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmplq1mh5s4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmplq1mh5s4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #odds do\n    sum = sum\
    \ + odds[i]\n  end\n  for i = 1, #evens do\n    sum = sum + evens[i]\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4ho0c5c.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmps4ho0c5c.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  table.insert(even, table.concat(odd))\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3ec7byy.lua:20:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmpv3ec7byy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  table.insert(even, table.concat(odd))\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3ec7byy.lua:20:\
    \ expected: 88, actual: \"884\"\nstack traceback:\n\t/tmp/tmpv3ec7byy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, #lst)\n  local odd = lst:sub(2, #lst)\n\
    \  local sum = 0\n  for _, v in ipairs(even) do\n    sum = sum + v\n  end\n  for\
    \ _, v in ipairs(odd) do\n    sum = sum + v\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqv_kj2m.lua:5:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpiqv_kj2m.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpiqv_kj2m.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len() / 2)\n  local odd = lst:sub((lst:len()\
    \ / 2) + 1, lst:len() - 1)\n  return even:add(odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02a2_pk5.lua:5:\
    \ attempt to call a nil value (method 'len')\nstack traceback:\n\t/tmp/tmp02a2_pk5.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp02a2_pk5.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum\
    \ + even[i]\n  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4_9u3t.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3g4_9u3t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z35ocwx.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmp9z35ocwx.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum\
    \ + even[i]\n  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4_9u3t.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3g4_9u3t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even, \",\") + \",\" + table.concat(odd,\
    \ \",\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyfp_vkgg.lua:13:\
    \ attempt to add a 'string' with a 'string'\nstack traceback:\n\t/tmp/tmpyfp_vkgg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyfp_vkgg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3s_iwod.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpk3s_iwod.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659800050
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
