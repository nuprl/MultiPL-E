language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej1hiosb.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpej1hiosb.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd = lst:clone()\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even:insert(lst[i])\n    else\n     \
    \ odd:insert(lst[i])\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpve416rsx.lua:5:\
    \ attempt to call a nil value (method 'clone')\nstack traceback:\n\t/tmp/tmpve416rsx.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpve416rsx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbu7dmeey.lua:17:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpbu7dmeey.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsmfe8242.lua:19:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpsmfe8242.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even_index = 0\n  local sum = 0\n  for i = 1, #lst do\n  \
    \  if i % 2 == 0 then\n      sum = sum + lst[even_index]\n      even_index = even_index\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcadjmnu2.lua:9:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpcadjmnu2.lua:9: in local 'candidate'\n\t/tmp/tmpcadjmnu2.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmclyumf.lua:21:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpwmclyumf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum\
    \ + even[i]\n  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g4_9u3t.lua:26:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp3g4_9u3t.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Given a non-empty list of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- add([4, 2, 6, 7]) ==> 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbluiy3gx.lua:19:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmpbluiy3gx.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
