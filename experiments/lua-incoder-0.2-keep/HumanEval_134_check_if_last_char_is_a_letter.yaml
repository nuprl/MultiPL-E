name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns True if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and False\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n-- check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n-- check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n-- check_if_last_char_is_a_letter(\"\") \u279E False\nlocal function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if txt == nil then\n      return false\n   end\n   local last_char\
    \ = string.sub(txt, -1)\n   if last_char == nil then\n      return false\n   end\n\
    \   if last_char == \" \" then\n      return true\n   end\n   if last_char ==\
    \ \"-\" then\n      return false\n   end\n   if last_char == \"_\" then\n    \
    \  return false\n   end\n   if last_char == \"!\" then\n      return false\n \
    \  end\n   if last_char == \"?\" then\n      return false\n   end\n   if last_char\
    \ == \"%\" then\n      return false\n   end\n   if last_char == \"&\" then\n \
    \     return false\n   end\n   if last_char == \"'\" then\n      return false\n\
    \   end\n   if last_char == \"(\" then\n      return false\n   end\n   if last_char\
    \ == \")\" then\n      return false\n   end\n   if last_char == \",\" then\n \
    \     return false\n   end\n   if last_char == \"-\" then\n      return false\n\
    \   end\n   if last_char == \"/\" then\n      return false\n   end\n   if last_char\
    \ == \"[\" then\n      return false\n   end\n   if last_char == \"]\" then\n \
    \     return false\n   end\n   if last_char == \"{\" then\n      return false\n\
    \   end\n   if last_char == \"}\" then\n      return false\n   end\n   if last_char\
    \ == \"~\" then\n      return false\n   end\n   if last_char == \"^\" then\n \
    \     return false\n   end\n   if last_char == \"_\" then\n      return false\n\
    \   end\n   if last_char == \"`\" then\n      return false\n   end\n   if last_char\
    \ == \"{\" then\n      return false\n   end\n   if last_char == \"|\" then\n \
    \     return false\n   end\n   if last_char == \"~\" then\n      return false\n\
    \   end\n   if last_char == \"<\" then\n      return false\n   end\n   if last_char\
    \ == \">\" then\n      return false\n   end\n   if last_char == \"?\" then\n \
    \     return false\n   end\n   if last_char == \"=\" then\n      return false\n\
    \   end\n   if last_char == \"+\" then\n      return false\n   end\n   if last_char\
    \ == \"-\" then\n      return false\n   end\n   if last_char == \"/\" then\n \
    \     return false\n   end\n   if last_char == \"[\" then\n      return false",
  "    local last_char = txt:sub(1, #txt)\n    return last_char:match(\"^[%w]$\")\n\
    end", "  local last_char = txt:sub(1, #txt)\n  return last_char:match(\"^[%w]$\"\
    )\nend", "  local last_char = string.sub(txt, #txt, -1)\n  return last_char ==\
    \ string.sub(txt, 1, #txt) and last_char ~= '\\0' and #last_char > 0\nend", " \
    \ local last_char = txt:sub(1, #txt)\n  return last_char:match(\"^[%w]$\")\nend",
  "  local last_char = txt:sub(1, #txt)\n  local is_letter = last_char:match(\"^[%w]$\"\
    )\n  return not is_letter\nend", "  local last_char = txt:sub(1, #txt)\n  return\
    \ last_char:match(\"^[%a%p]+$\")\nend", "  local last_char = string.sub(txt, #txt,\
    \ -1)\n  return last_char == ' ' or last_char ~= '%w'\nend", "  local last_char\
    \ = string.sub(txt, #txt, -1)\n  local is_letter = last_char ~= nil and last_char\
    \ ~= \" \" and last_char ~= \".\"\n  return is_letter\nend", "  local last_char\
    \ = txt:sub(1, #txt)\n  return last_char:match(\"^[%w]+$\")\nend", "  local last_char\
    \ = txt:sub(1, #txt)\n  return last_char == string.upper(last_char) and #last_char\
    \ ~= 1\nend", "   if txt == nil then\n      return false\n   end\n   local last_char\
    \ = string.sub(txt, -1)\n   if last_char == nil then\n      return false\n   end\n\
    \   if string.sub(txt, -1, 1) == \" \" then\n      return false\n   end\n   if\
    \ string.sub(txt, -1, 1) ~= string.sub(txt, -1, 1) then\n      return false\n\
    \   end\n   if string.sub(txt, -1, 1) ~= string.sub(txt, -1, 1) then\n      return\
    \ false\n   end\n   return true\nend", "   local last_char = txt:sub(1, #txt)\n\
    \   if last_char:match \"^[%a%p]+$\" then\n      return false\n   else\n     \
    \ return true\n   end\nend", "  local last_char = txt:sub(1, #txt)\n  return last_char:match(\"\
    ^[%w]$\")\nend", "    local last_char = string.sub(txt, -1)\n    local is_letter\
    \ = string.sub(txt, 1, 1) ~= \" \"\n    return is_letter and not (last_char ==\
    \ \"a\" or last_char == \"e\" or last_char == \"i\" or last_char == \"o\" or last_char\
    \ == \"u\")\nend", "  local last_char = txt:sub(1, #txt)\n  return last_char:match(\"\
    ^[%w]$\")\nend", "  local last_char = string.sub(txt, #txt, 1) -- Get the last\
    \ character\n  local is_letter = last_char ~= nil -- Check if the last character\
    \ is a letter\n  local is_word = last_char ~= \" \" -- Check if the last character\
    \ is a word\n  return is_letter and not is_word\nend", "  local last_char = txt:sub(1,\
    \ #txt)\n  return last_char == string.upper(last_char) and last_char ~= '-'\n\
    end", "  local last_char = txt:sub(1, #txt)\n  return last_char == string.upper(last_char)\
    \ and last_char ~= '-'\nend", "  local last_char = string.sub(txt, #txt, -1)\n\
    \  return last_char ~= \" \" and last_char ~= \"\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
