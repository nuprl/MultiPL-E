name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the list l.\n-- >>> median([3, 1, 2, 4, 5])\n\
  -- 3\n-- >>> median([-10, 4, 6, 1000, 10, 20])\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local middle = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[middle]\n  else\n    return median(l[middle], l[middle + 1])\n  end\nend",
  "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  if n % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local mid = n / 2\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n == 0\
    \ then\n    return nil\n  elseif n == 1 then\n    return l[1]\n  end\n  local\
    \ mid = math.floor((n - 1) / 2)\n  if l[mid] ~= nil then\n    return l[mid]\n\
    \  else\n    return median(l[mid..(n - 1)])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  end\n  local mid = math.floor((n+1)/2)\n  return\
    \ median(l, mid-1) or median(l, mid)\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid-1], median(l[mid], l[mid+1]))\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if l == nil then return nil end\n  local n = #l\n  if\
    \ n == 0 then return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid-1], median(l[mid], l[mid+1]))\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return (l[middle\
    \ - 1] + l[middle]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  end\n  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n\
    \  else\n    return median(l[mid], l[mid+1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid-1]) / 2\n  end\nend", "  if l == nil then\n    return nil\n  end\n  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  if n % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local\
    \ half = math.floor(n / 2)\n  local median = l[half]\n  for i = half + 1, n do\n\
    \    median = median + l[i]\n  end\n  return median\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n    return l[n /\
    \ 2]\n  end\n  local mid = n / 2\n  local lower = median(l, 1, mid)\n  local upper\
    \ = median(l, mid + 1, n)\n  return lower + (upper - lower) / 2\nend", "  if l\
    \ == nil then return nil end\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  if n % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n\
    \ - 1) / 2) + 1], n/2)\n  else\n    return l[((n - 1) / 2)]\n  end\nend", "  if\
    \ #l == 0 then\n    return nil\n  end\n  local n = #l - 1\n  local m = n / 2\n\
    \  if n % 2 == 0 then\n    return l[m]\n  else\n    return (l[m] + l[m + 1]) /\
    \ 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half\
    \ = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half + 1])\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[half]\n  else\n    return median(l[half], l[half+1])\n  end\nend", "  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ median(l[mid], l[mid+1]))\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n  if n %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n - 1) / 2) +\
    \ 1 .. n])\n  else\n    return (l[((n - 1) / 2)] + median(l[((n - 1) / 2) - 1\
    \ .. n])) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return 0 end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n    return l[((n\
    \ - 1) / 2)] + median(l[((n - 1) / 2) + 1, ((n - 1) / 2) + 2])\n  else\n    return\
    \ l[((n - 1) / 2)]\n  end\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local half = math.floor(n/2)\n  if half == 0 then return l[half]\
    \ end\n  if n % 2 == 1 then return median(l[half], l[half+1]) end\n  local median\
    \ = l[half]\n  for i = half+1, #l do\n    median = median + l[i]/2\n  end\n  return\
    \ median\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return (l[middle\
    \ - 1] + l[middle]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  return median(l, mid + 1, n - mid)\nend", "  local n = #l\n  if\
    \ n < 1 then return nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n\
    \    return l[half]\n  else\n    return median(l[half], l[half+1])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if l == nil then return nil end\n  local n = #l\n  if n\
    \ == 0 then return nil end\n  local half = math.floor(n / 2)\n  if n % 2 == 0\
    \ then\n    return l[half]\n  else\n    return (l[half] + l[half - 1]) / 2\n \
    \ end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local middle = math.floor(#l / 2)\n  if #l % 2 == 0 then\n   \
    \ return l[middle]\n  else\n    return (l[middle - 1] + l[middle]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2)+1])/2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local n = #l\n  local mid = n / 2\n  if n % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half+1])\n  end\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n\
    \  else\n    return median(l[half], l[half+1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n\
    \ = #l - 1\n  local m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  else\n\
    \    return (l[m] + l[m + 1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n    return\
    \ l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n  local median = l[half]\n\
    \  for i = half + 1 to n do\n    median = math.min(median, l[i])\n  end\n  return\
    \ median\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ middle = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n \
    \ else\n    return (l[middle - 1] + l[middle]) / 2\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle], l[middle\
    \ + 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 1 then\n    return l[math.floor(n / 2)]\n  end\n  local mid = math.floor(n\
    \ / 2)\n  local lower = median(l, 1, mid)\n  local upper = median(l, mid + 1,\
    \ n)\n  return lower + (upper - lower) / 2\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local middle = #l / 2\n  if\
    \ middle == 0 then\n    return l[1]\n  end\n  if middle == 1 then\n    return\
    \ l[middle]\n  end\n  local median = median(l[middle])\n  for i = middle + 1,\
    \ #l do\n    median = median + l[i] / 2\n  end\n  return median\nend", "  if #l\
    \ == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0\
    \ then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n =\
    \ #l\n  if n % 2 == 1 then\n    return l[n / 2]\n  end\n  local mid = n / 2\n\
    \  local lower = median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return\
    \ math.floor((lower + upper) / 2)\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid-1], median(l[mid], l[mid+1]))\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n \
    \   return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return (l[middle\
    \ - 1] + l[middle]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n \
    \ end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n\
    \ % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = n / 2\n\
    \  local lower = l[mid]\n  local upper = l[mid + 1]\n  if lower > upper then\n\
    \    return lower\n  else\n    return upper\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local middle\
    \ = math.floor(#l / 2)\n  local median = l[middle]\n  for i = middle + 1, #l do\n\
    \    median = median + l[i] / 2\n  end\n  return median\nend", "  if #l == 0 then\
    \ return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n  \
    \  return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if\
    \ #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 1 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid-1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local\
    \ mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  local\
    \ n = #l\n  if n < 1 then\n    return nil\n  end\n  if n % 2 == 0 then\n    return\
    \ l[((n - 1) / 2)] + median(l { n = ((n - 1) / 2) + 1 })\n  end\n  local half\
    \ = math.floor(n / 2)\n  return median(l { n = half }) + median(l { n = half +\
    \ 1 })\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ (l[half] + l[half - 1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n\
    \ % 2 == 0 then\n    return l[((n - 1) / 2)] + median(sublist(l, ((n - 1) / 2)\
    \ + 1, n))\n  else\n    return (l[((n - 1) / 2)] + median(sublist(l, 1, ((n -\
    \ 1) / 2))))/2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n\
    \  else\n    return median(l[mid+1], l[mid])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local half = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[half]\n  else\n    return (l[half] + l[half - 1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half] + l[half+1]) / 2.0\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid-1], median(l[mid], l[mid+1]))\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 ==\
    \ 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half = n / 2\n  local\
    \ median1 = median(l[((half - 1) / 2)])\n  local median2 = median(l[((half + 1)\
    \ / 2)])\n  return median1 + median2 / (2 * n)\nend", "  if #l == 0 then\n   \
    \ return nil\n  end\n  local middle = math.floor(#l / 2)\n  if middle == 0 then\n\
    \    return l[middle]\n  end\n  if middle == #l then\n    return l[middle]\n \
    \ end\n  if l[middle] < l[middle - 1] then\n    return median(l[middle], l[middle\
    \ - 1])\n  end\n  return median(l[middle - 1], l[middle])\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid\
    \ = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then return nil end\n \
    \ local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n \
    \ else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n  \
    \  return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n    return l[((n - 1) / 2)]\
    \ + median(l[((n - 1) / 2) + 1 : n])\n  else\n    return (l[((n - 1) / 2)] + median(l[((n\
    \ - 1) / 2) + 1 : ((n - 1) / 2) + 1])) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  local mid = math.floor((n + 1) / 2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n - 1) /\
    \ 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n  end\n\
    \  return median(l[mid], l[mid+1])\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n\
    \    return l[((n - 1) / 2) + 1]\n  end\n  local mid = n / 2\n  local lower =\
    \ median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return math.floor((lower\
    \ + upper) / 2)\nend", "  if #l == 0 then\n    return nil\n  end\n  local n =\
    \ #l\n  if n % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half\
    \ = n / 2\n  local median = l[half]\n  local i = 1\n  while i < half do\n    median\
    \ = median + l[(i + half)]\n    i = i + 1\n  end\n  return median\nend", "  if\
    \ #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  local n =\
    \ #l\n  if n < 1 then return nil end\n  if n == 1 then return l[1] end\n  local\
    \ mid = math.floor((n + 1) / 2)\n  if l[mid] <= l[mid+1] then return median(l[mid],\
    \ l[mid+1]) end\n  return median(l[mid], median(l[mid+1], l[mid]))\nend", "  if\
    \ #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ median(l[mid], l[mid+1]))\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n\
    \  end\n  local mid = n / 2\n  local lower = median(l, 1, mid)\n  local upper\
    \ = median(l, mid + 1, n)\n  return math.floor((lower + upper) / 2)\nend", " \
    \ if #l == 0 then return nil end\n  local half = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[half]\n  else\n    return median(l[half], l[#l])\n\
    \  end\nend", "  if l == nil then return nil end\n  local n = #l\n  if n == 0\
    \ then return nil end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n \
    \ else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
