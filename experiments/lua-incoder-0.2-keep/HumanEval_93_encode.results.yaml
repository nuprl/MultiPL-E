language: lua
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet and alphabet:find(letter)\n    if index then\n   \
    \   local vowel = vowels:sub(index, index + 1)\n      local letterIndex = alphabet\
    \ and alphabet:find(vowel)\n      local letter2 = alphabet:sub(letterIndex + 1,\
    \ letterIndex + 2)\n      result = result .. alphabet:sub(index, index + 1) ..\
    \ letter2\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1mrj10fr.lua:17:\
    \ bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp1mrj10fr.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp1mrj10fr.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local new_letter = letter\n    for j = 1, #alphabet do\n      if letter ==\
    \ alphabet[j] then\n        new_letter = alphabet[(j - 1) + #alphabet]\n     \
    \ end\n    end\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n\
    \        new_letter = alphabet[(j - 1) + #alphabet]\n      end\n    end\n    new_message\
    \ = new_message .. new_letter\n  end\n  return new_message\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hka928i.lua:28:\
    \ attempt to concatenate a nil value (local 'new_letter')\nstack traceback:\n\t\
    /tmp/tmp5hka928i.lua:28: in local 'candidate'\n\t/tmp/tmp5hka928i.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local newMessage = ''\n    for i = 1, #message do\n        local letter =\
    \ message[i]\n        if letter ~= ' ' then\n            local index = alphabet\
    \ + alphabet:sub(1, letter:len()) + alphabet:sub(2, letter:len())\n          \
    \  newMessage = newMessage .. alphabet:sub(1, index:len()) .. alphabet:sub(2,\
    \ index:len())\n        end\n    end\n    return newMessage\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuw5hcqp2.lua:18:\
    \ attempt to index a nil value (local 'letter')\nstack traceback:\n\t/tmp/tmpuw5hcqp2.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpuw5hcqp2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet2 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet3 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet4 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet5 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet6 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet7 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet8 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet9 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet10 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet11 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet12 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local\
    \ alphabet13 = {'a', 'b', 'c', 'd', 'e', 'f', 'g', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaulcs2rc.lua:25: unfinished string near ''''''

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if #alphabet > #vowels then\n            local index = alphabet - #vowels\n\
    \            local replacement = alphabet[index + 1]\n            char = string.gsub(string.gsub(vowels,\
    \ char, replacement), replacement, char)\n        end\n        result = result\
    \ .. char\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7c8m2wue.lua:18:\
    \ attempt to perform arithmetic on a string value (local 'alphabet')\nstack traceback:\n\
    \t/tmp/tmp7c8m2wue.lua:18: in local 'candidate'\n\t/tmp/tmp7c8m2wue.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local new_message = ''\n  for i = 1, #message do\n\
    \    local letter = message[i]\n    local new_letter = letter\n    for j = 1,\
    \ #alphabet do\n      if letter == alphabet[j] then\n        new_letter = alphabet[(j\
    \ - 2)] .. new_letter\n      end\n    end\n    for j = 1, #vowels do\n      if\
    \ letter == vowels[j] then\n        new_letter = alphabet[(j + 2)] .. new_letter\n\
    \      end\n    end\n    new_message = new_message .. new_letter\n  end\n  return\
    \ new_message\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqiwfjdh1.lua:21:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqiwfjdh1.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpqiwfjdh1.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter and\n      alphabet + vowels or letter\n\
    \    local nextLetter = alphabet:sub(i, i+2)\n    local nextIndex = alphabet ==\
    \ nextLetter and\n      alphabet + vowels or nextLetter\n    local newLetter =\
    \ alphabet:sub(index+1, index+2)\n    result = result .. alphabet:sub(index, index+1)\
    \ .. newLetter\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dtn4rwc.lua:22:\
    \ attempt to perform arithmetic on a nil value (local 'index')\nstack traceback:\n\
    \t/tmp/tmp_dtn4rwc.lua:22: in local 'candidate'\n\t/tmp/tmp_dtn4rwc.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local new_message = ''\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local new_letter = letter\n    for j = 1, #alphabet do\n      if letter ==\
    \ alphabet[j] then\n        new_letter = alphabet[(j + #alphabet)%#alphabet]\n\
    \      end\n    end\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n\
    \        new_letter = alphabet[(j + #alphabet)%#alphabet]\n      end\n    end\n\
    \    new_message = new_message .. new_letter\n  end\n  return new_message\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8ty5ym5.lua:28:\
    \ attempt to concatenate a nil value (local 'new_letter')\nstack traceback:\n\t\
    /tmp/tmpd8ty5ym5.lua:28: in local 'candidate'\n\t/tmp/tmpd8ty5ym5.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        local index = alphabet.find(char)\n        if index == nil then\n   \
    \         index = alphabet.find(string.sub(alphabet, i, i))\n        end\n   \
    \     if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i, i + 1))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 1, i + 2))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 2, i + 3))\n        end\n        if\
    \ index == nil then\n            index = alphabet.find(string.sub(alphabet, i\
    \ + 3, i + 4))\n        end\n        if index == nil then\n            index =\
    \ alphabet.find(string.sub(alphabet, i + 4, i + 5))\n        end\n        if index\
    \ == nil then\n            index = alphabet.find(string.sub(alphabet, i + 5, i\
    \ + 6))\n        end\n        if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 6, i + 7))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 7, i + 8))\n        end\n        if\
    \ index == nil then\n            index = alphabet.find(string.sub(alphabet, i\
    \ + 8, i + 9))\n        end\n        if index == nil then\n            index =\
    \ alphabet.find(string.sub(alphabet, i + 9, i + 10))\n        end\n        if\
    \ index == nil then\n            index = alphabet.find(string.sub(alphabet, i\
    \ + 10, i + 11))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 11, i + 12))\n        end\n       \
    \ if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 12, i + 13))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 13, i + 14))\n        end\n       \
    \ if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 14, i + 15))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 15, i + 16))\n        end\n       \
    \ if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 16, i + 17))\n        end\n        if index == nil then\n            index\
    \ = alphabet.find(string.sub(alphabet, i + 17, i + 18))\n        end\n       \
    \ if index == nil then\n            index = alphabet.find(string.sub(alphabet,\
    \ i + 18, i + \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdq9cfkkg.lua:77: '')'' expected (to close ''('' at line 76)
    near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        '0','1','2','3','4','5','6','7','8','9',\n        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        '0','1','2','3','4','5','6','7','8','9',\n        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',\n\
    \        '0','1','2','3','4','5','6','7','8','9',\n        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',\n\
    \        'a','b','c','d','e','f\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw8slm8ll.lua:24: unfinished string near ''''f''

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local messageLetters = string.gsub(message, \"[^\" .. vowels .. \"]\", \"\"\
    )\n  local messageVowels = string.gsub(message, \"[\" .. vowels .. \"]\", \"\"\
    )\n  local messageVowelsCount = {}\n  for i = 1, #messageVowels do\n    local\
    \ letter = string.sub(messageVowels, i, i)\n    local vowelIndex = alphabet.find(letter)\n\
    \    local vowelCount = #messageVowelsCount\n    if vowelIndex == nil then\n \
    \     vowelIndex = #alphabet\n    end\n    table.insert(messageVowelsCount, vowelIndex)\n\
    \  end\n  local messageVowelsCountSorted = {}\n  for i = 1, #messageVowelsCount\
    \ do\n    table.insert(messageVowelsCountSorted, messageVowelsCount[i], i)\n \
    \ end\n  table.sort(messageVowelsCountSorted)\n  local messageVowelsCountSortedLength\
    \ = #messageVowelsCountSorted\n  local messageVowelsCountSortedLength2 = messageVowelsCountSortedLength\
    \ - 1\n  local messageVowelsCountSortedLength3 = messageVowelsCountSortedLength\
    \ - 2\n  local messageVowelsCountSortedLength4 = messageVowelsCountSortedLength\
    \ - 3\n  local messageVowelsCountSortedLength5 = messageVowelsCountSortedLength\
    \ - 4\n  local messageVowelsCountSortedLength6 = messageVowelsCountSortedLength\
    \ - 5\n  local messageVowelsCountSortedLength7 = messageVowelsCountSortedLength\
    \ - 6\n  local messageVowelsCountSortedLength8 = messageVowelsCountSortedLength\
    \ - 7\n  local messageVowelsCountSortedLength9 = messageVowelsCountSortedLength\
    \ - 8\n  local messageVowelsCountSortedLength10 = messageVowelsCountSortedLength\
    \ - 9\n  local messageVowelsCountSortedLength11 = messageVowelsCountSortedLength\
    \ - 10\n  local messageVowelsCountSortedLength12 = messageVowelsCountSortedLength\
    \ - 11\n  local messageVowelsCountSortedLength13 = messageVowelsCountSortedLength\
    \ - 12\n  local messageVowelsCountSortedLength14 = messageVowelsCount\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpka1g55le.lua:56: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',\
    \ 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\
    \ 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n    }\n  \
    \  local vowels = {\n        'a', 'e', 'i', 'o', 'u',\n    }\n    local result\
    \ = \"\"\n    for i = 1, #message do\n        local letter = message[i]\n    \
    \    local letterIndex = alphabet.indexOf(letter)\n        if letterIndex == nil\
    \ then\n            letterIndex = alphabet.indexOf(tolower(letter))\n        end\n\
    \        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(tolower(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(tolower(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(tolower(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(tolower(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(tolower(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(toupper(letter))\n\
    \        end\n        if letterIndex == nil then\n            letterIndex = alphabet.indexOf(letter)\n\
    \        end\n        if letterIndex == nil then\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxkyxfm0d.lua:89: ''end'' expected (to close ''if'' at line
    77) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  -- Write your solution here\n  -- Hint: Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english alphabet. \n  -- Use string.gsub\
    \ to replace all vowels with their \n  -- corresponding letter in the english\
    \ alphabet. \n  -- Use string.gsub to replace all vowels with their \n  -- corresponding\
    \ letter in the english alphabet. \n  -- Use string.gsub to replace all vowels\
    \ with their \n  -- corresponding letter in the english \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvh3z6ub.lua:68: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if #alphabet > i then\n            local letter = alphabet[i]\n     \
    \       local vowel = vowels[i]\n            local next = alphabet[alphabet +\
    \ 1]\n            if char == letter then\n                result = result .. next\n\
    \            elseif char == vowel then\n                result = result .. vowel\n\
    \            else\n                result = result .. letter\n            end\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdob1fn5k.lua:20:\
    \ attempt to perform arithmetic on a string value (local 'alphabet')\nstack traceback:\n\
    \t/tmp/tmpdob1fn5k.lua:20: in local 'candidate'\n\t/tmp/tmpdob1fn5k.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local messageLetters = {}\n    local messageVowels = {}\n    local messageLettersCount\
    \ = {}\n    local messageVowelsCount = {}\n    local messageLettersCounts = {}\n\
    \    local messageVowelsCounts = {}\n    local messageLettersCountVowels = {}\n\
    \    local messageVowelsCountVowels = {}\n    local messageLettersCountVowelsCount\
    \ = {}\n    local messageVowelsCountVowelsCount = {}\n    local messageLettersCountVowelsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCount = {}\n    local messageLettersCountVowelsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCount = {}\n    local messageLettersCountVowelsCountsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCountsCount = {}\n    local\
    \ messageLettersCountVowelsCountsCountsCountsCountsCount = {}\n    local messageVowelsCountVowelsCountsCountsCountsCountsCount\
    \ = {}\n    local messageLettersCountVowelsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageLettersCountVowelsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageLettersCountVowelsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageLettersCountVowelsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageVowelsCountVowelsCountsCountsCountsCountsCountsCountsCountsCount\
    \ = {}\n    local messageLettersCountVowelsCountsCountsCountsCountsCountsCoun\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgp66_cvh.lua:52: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n \
    \ local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet + alphabet:sub(1, i) + alphabet:sub(i+1, #alphabet)\n\
    \    local replacement = alphabet:sub(i+1, #alphabet)\n    if letter:lower() ~=\
    \ letter then\n      letter = letter:lower()\n    end\n    local vowelIndex =\
    \ letter:find(vowels)\n    if vowelIndex > 0 then\n      letter = letter:sub(1,\
    \ vowelIndex-1)\n      replacement = alphabet:sub(vowelIndex+1, #alphabet)\n \
    \   end\n    result = result .. alphabet:sub(1, index) .. letter:lower() .. replacement\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n   \
    \ lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeev6plxt.lua:17:\
    \ attempt to perform arithmetic on a string value (local 'alphabet')\nstack traceback:\n\
    \t/tmp/tmpeev6plxt.lua:17: in local 'candidate'\n\t/tmp/tmpeev6plxt.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = {\n        'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P',\n\
    \        'Q','R','S','T','U','V','W','X','Y','Z','a','b','c','d','e','f',\n  \
    \      'g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v',\n    \
    \    'w','x','y','z','0','1','2','3','4','5','6','7','8','9','.',\n        '?','!','@','#','$','%','^','&','*','(',')','_','+','-','_','+',\n\
    \        '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n  \
    \      '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n    \
    \    '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n      \
    \  '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n        '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n\
    \        '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n  \
    \      '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n    \
    \    '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n      \
    \  '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n        '_','-','_','-','_','-','_','-','_','-','_','-','_','-','_','-',\n\
    \        '_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encode\n    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppi6uuank.lua:28: unfinished string near ''''_''

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter ~= ' ' then\n          \
    \  local index = alphabet + letter\n            local nextLetter = alphabet:sub(vowelIndex\
    \ + 1, vowelIndex + 2)\n            local nextIndex = alphabet + nextLetter\n\
    \            if nextIndex == index then\n                output = output .. nextLetter\n\
    \            else\n                output = output .. index\n            end\n\
    \            vowelIndex = vowelIndex + 2\n        end\n    end\n    return output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzw5676t.lua:19:\
    \ attempt to perform arithmetic on a string value (local 'alphabet')\nstack traceback:\n\
    \t/tmp/tmpmzw5676t.lua:19: in local 'candidate'\n\t/tmp/tmpmzw5676t.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local result = \"\"\n    for i = 1, #message do\n        local char = message[i]\n\
    \        if #alphabet > i then\n            local letter = alphabet[i]\n     \
    \       local vowel = vowels[#vowels]\n            local next = alphabet[(i +\
    \ 1) % (#alphabet)]\n            local newLetter = letter\n            if letter\
    \ == vowel then\n                newLetter = next\n            end\n         \
    \   result = result .. newLetter\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
    \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
    \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
    \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt\
    \ KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzm04p45f.lua:25:\
    \ attempt to concatenate a nil value (local 'newLetter')\nstack traceback:\n\t\
    /tmp/tmpzm04p45f.lua:25: in local 'candidate'\n\t/tmp/tmpzm04p45f.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function that takes a message, and encodes in such a \n-- way\
    \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
    \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
    \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n\
    -- >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n\
    \  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels = \"aeiou\"\
    \n  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local index = alphabet == letter or alphabet == letter:upper() \n      and\
    \ #vowels or #vowels - 1\n    local replacement = alphabet:sub(index, index +\
    \ 1)\n    result = result .. replacement\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encode\n    lu.assertEquals(candidate('TEST'),\
    \ 'tgst')\n    lu.assertEquals(candidate('Mudasir'), 'mWDCSKR')\n    lu.assertEquals(candidate('YES'),\
    \ 'ygs')\n    lu.assertEquals(candidate('This is a message'), 'tHKS KS C MGSSCGG')\n\
    \    lu.assertEquals(candidate('I DoNt KnOw WhAt tO WrItE'), 'k dQnT kNqW wHcT\
    \ Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvbl6x6p.lua:17:\
    \ attempt to index a nil value (local 'letter')\nstack traceback:\n\t/tmp/tmpcvbl6x6p.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpcvbl6x6p.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
