name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- Examples:\n-- strange_sort_list([1, 2, 3, 4]) == [1,\
  \ 4, 2, 3]\n-- strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n-- strange_sort_list([])\
  \ == []\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local\
    \ max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    if sorted_lst[i]\
    \ < min_value then\n      min_value = sorted_lst[i]\n    end\n    if sorted_lst[i]\
    \ > max_value then\n      max_value = sorted_lst[i]\n    end\n  end\n  for i =\
    \ 1, #sorted_lst do\n    sorted_lst[i] = min_value .. max_value .. sorted_lst[i]\n\
    \  end\n  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < minimum then\n      minimum = value\n    elseif value > maximum\
    \ then\n      maximum = value\n    end\n  end\n  -- Swap the minimum and maximum\
    \ values.\n  sorted_lst[1], sorted_lst[#sorted_lst] = minimum, maximum\n  -- Reverse\
    \ the list.\n  -- This is done by swapping the first and last elements of the\
    \ list.\n  -- This swap operation is done in O(1) time because we know that the\n\
    \  -- list has at least two elements.\n  -- The first element of the list will\
    \ be the second element of the list.\n  -- The last element of the list will be\
    \ the first element of the list.\n  -- The list will be reversed in O(n) time.\n\
    \  -- The list will be reversed in O(1) time because we know that the\n  -- list\
    \ has at least two elements.\n  -- The first element of the list will be the second\
    \ element of the list.\n  -- The last element of the list will be the first element\
    \ of the list.\n  -- The list will be reversed in O(n) time.\n  -- The list will\
    \ be reversed in O(1) time because we know that the\n  -- list has at least two\
    \ elements.\n  -- The first element of the list will be the second element of\
    \ the list.\n  -- The last element of the list will be the first element of the\
    \ list.\n  -- The list will be reversed in O(n) time.\n  -- The list will be reversed\
    \ in O(1) time because we know that the\n  -- list has at least two elements.\n\
    \  -- The first element of the list will be the second element of the list.\n\
    \  -- The last element of the list will be the first element of the list.\n  --\
    \ The list will be reversed in O(n) time.\n  -- The list will be reversed in O(1)\
    \ time because we know that the\n  -- list has at least two elements.\n  -- The\
    \ first element of the list will be the second element of the list.\n  -- The\
    \ last element of the list will be the first element of the list.\n  -- The list\
    \ will be reversed in O(n) time.\n  -- The list will be reversed in O(1) time\
    \ because we know that the\n  -- list has at least two elements.\n  -- The first\
    \ element of the list will be the second element of the list.\n  -- The last element\
    \ of the list will be the first element of the list.\n  -- The list will be reversed\
    \ in O(n) time.\n  -- The list will be reversed in O(1) time because we know that\
    \ the\n  -- list has ", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n\
    \  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n  \
    \  local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    end\n    if value > max_value then\n      max_value = value\n \
    \   end\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n  return\
    \ sorted_lst\nend", "  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n\
    \  local maximum = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local\
    \ element = sorted_lst[i]\n    if element < minimum then\n      minimum = element\n\
    \    elseif element > maximum then\n      maximum = element\n    end\n  end\n\
    \  sorted_lst[#sorted_lst] = minimum\n  sorted_lst[1] = maximum\n  return sorted_lst\n\
    end", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < min_value then\n      min_value = value\n    end\n    if value\
    \ > max_value then\n      max_value = value\n    end\n  end\n  sorted_lst[1] =\
    \ min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend",
  "  local sorted_lst = {}\n  local min_val = lst[1]\n  local max_val = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < min_val then\n      min_val = lst[i]\n \
    \   end\n    if lst[i] > max_val then\n      max_val = lst[i]\n    end\n  end\n\
    \  table.insert(sorted_lst, min_val)\n  table.insert(sorted_lst, max_val)\n  for\
    \ i = 2, #lst do\n    table.insert(sorted_lst, lst[i])\n  end\n  return sorted_lst\n\
    end", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n  local maximum\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < minimum then\n      minimum = value\n    elseif value > maximum\
    \ then\n      maximum = value\n    end\n  end\n  sorted_lst[#sorted_lst] = minimum\n\
    \  sorted_lst[1] = maximum\n  return sorted_lst\nend", "  local sorted_list =\
    \ lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_lst = {}\n  local minimum\
    \ = lst[1]\n  local maximum = lst[1]\n  for i = 2, #lst do\n    minimum = minimum\
    \ or lst[i]\n    maximum = maximum or lst[i]\n    if minimum > lst[i] then\n \
    \     minimum = lst[i]\n    end\n    if maximum < lst[i] then\n      maximum =\
    \ lst[i]\n    end\n    table.insert(sorted_lst, minimum)\n    table.insert(sorted_lst,\
    \ maximum)\n    table.insert(sorted_lst, minimum)\n  end\n  return sorted_lst\n\
    end", "  local lst = lst or {}\n  local min = lst[1]\n  local max = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < min then\n      min = lst[i]\n    end\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n  end\n  lst[1] = min\n\
    \  lst[#lst] = max\n  local new_lst = {}\n  for i = 1, #lst do\n    new_lst[#new_lst+1]\
    \ = lst[i]\n  end\n  return new_lst\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and minimum or sorted_list[i]\n \
    \   maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n  end\n\
    \  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n\
    \  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n  \
    \  local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \  end\n  -- Swap min and max values.\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend", "  local sorted_lst =\
    \ lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    if sorted_lst[i] < min_value then\n      min_value\
    \ = sorted_lst[i]\n    end\n    if sorted_lst[i] > max_value then\n      max_value\
    \ = sorted_lst[i]\n    end\n  end\n  -- Swap min and max values.\n  sorted_lst[1]\
    \ = min_value\n  sorted_lst[#sorted_lst] = max_value\n  return sorted_lst\nend",
  "  local sorted_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n \
    \ for i = 2, #lst do\n    minimum = minimum > lst[i] and minimum or lst[i]\n \
    \   maximum = maximum < lst[i] and maximum or lst[i]\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    minimum = minimum > lst[i]\
    \ and minimum or lst[i]\n    maximum = maximum < lst[i] and maximum or lst[i]\n\
    \  end\n  return sorted_lst\nend", "  local sorted_lst = lst\n  local min_value\
    \ = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst\
    \ do\n    local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    end\n    if value > max_value then\n      max_value = value\n \
    \   end\n  end\n  -- Swap min and max values.\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1]\
    \ = maximum\n  return sorted_list\nend", "  local lst = lst\n  local n = #lst\n\
    \  local i = 0\n  while i < n do\n    local j = i\n    while j < n and lst[j]\
    \ < lst[j + 1] do\n      j = j + 1\n    end\n    lst[i], lst[j] = lst[j], lst[i]\n\
    \    i = j\n  end\n  return lst\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
