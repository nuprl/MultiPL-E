name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- get_row([\n-- [1,2,3,4,5,6],\n-- [1,2,3,4,1,6],\n-- [1,2,3,4,5,1]\n\
  -- ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n-- get_row([], 1) == []\n\
  -- get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nlocal function get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    local row_y = row_x[x] or 0\n    for j = 1, #row_x do\n      table.insert(row,\
    \ { i, row_y + j })\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        table.insert(row, j)\n        break\n      end\n    end\n    if #row\
    \ > 0 then\n      table.sort(row)\n      table.sort(row, function(a, b)\n    \
    \    return b - a\n      end)\n      return row\n    end\n  end\n  return nil\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    ", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x\
    \ do\n      if row_x[j] == x then\n        table.insert(row, i)\n        break\n\
    \      end\n    end\n  end\n  table.sort(row, function(a, b) return #row_a[b]\
    \ > #row_b[a] end)\n  table.sort(row, function(a, b) return #row_b[b] > #row_a[a]\
    \ end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    if row[x] == x then\n      return row\n    end\n  end\nend", "  local row\
    \ = {}\n  for _, row in ipairs(lst) do\n    local found = false\n    for _, v\
    \ in ipairs(row) do\n      if v == x then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      return nil\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x]\n    for\
    \ j = 1, #row_y do\n      table.insert(row, { i, j })\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  local\
    \ row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v.y)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local results = {}\n  for _, v in ipairs(row) do\n \
    \   table.insert(results, {x = v, y = rows[#rows]})\n  end\n  return results\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local coords = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(coords, v)\n  end\n  table.sort(coords, function(a, b) return\
    \ a < b end)\n  table.sort(coords, function(a, b) return b < a end)\n  local ret\
    \ = {}\n  for _, v in ipairs(coords) do\n    table.insert(ret, v)\n  end\n  return\
    \ ret\nend", "    local row = {}\n    for i = 1, #lst do\n        local row =\
    \ {}\n        for j = 1, #lst[i] do\n            table.insert(row, lst[i][j])\n\
    \        end\n        table.insert(row, i)\n        table.insert(row, x)\n   \
    \     table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n       \
    \ table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    local row_y = row_x[x] or 0\n    table.insert(row, { i, row_y\
    \ })\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
