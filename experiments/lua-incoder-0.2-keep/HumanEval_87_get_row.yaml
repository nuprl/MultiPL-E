name: HumanEval_87_get_row
language: lua
prompt: "-- You are given a 2 dimensional data, as a nested lists,\n-- which is similar\
  \ to matrix, however, unlike matrices,\n-- each row may contain a different number\
  \ of columns.\n-- Given lst, and integer x, find integers x in the list,\n-- and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n-- each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially by\
  \ rows in ascending order.\n-- Also, sort coordinates of the row by columns in descending\
  \ order.\n-- Examples:\n-- get_row([\n-- [1,2,3,4,5,6],\n-- [1,2,3,4,1,6],\n-- [1,2,3,4,5,1]\n\
  -- ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n-- get_row([], 1) == []\n\
  -- get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nlocal function get_row(lst, x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
  \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3,\
  \ 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1,\
  \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4,\
  \ 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
  \ 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4,\
  \ 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0},\
  \ {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
  \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
  \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    local row_y = row_x[x] or 0\n    for j = 1, #row_x do\n      table.insert(row,\
    \ { i, row_y + j })\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = { lst[i] }\n    for j = 1, #row do\n      if row[j] == x then\n\
    \        table.insert(row, j)\n        break\n      end\n    end\n    if #row\
    \ > 0 then\n      table.sort(row)\n      table.sort(row, function(a, b)\n    \
    \    return b - a\n      end)\n      return row\n    end\n  end\n  return nil\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    ", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x\
    \ do\n      if row_x[j] == x then\n        table.insert(row, i)\n        break\n\
    \      end\n    end\n  end\n  table.sort(row, function(a, b) return #row_a[b]\
    \ > #row_b[a] end)\n  table.sort(row, function(a, b) return #row_b[b] > #row_a[a]\
    \ end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    if row[x] == x then\n      return row\n    end\n  end\nend", "  local row\
    \ = {}\n  for _, row in ipairs(lst) do\n    local found = false\n    for _, v\
    \ in ipairs(row) do\n      if v == x then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      return nil\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row,\
    \ #row + 1)\n    table.insert(row, #row + 1)\n    table.insert(row, #row + 1)\n\
    \    table.insert(row, #row + 1)\n    table.insert(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x]\n    for\
    \ j = 1, #row_y do\n      table.insert(row, { i, j })\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[#rows]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  local\
    \ row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v.y)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local results = {}\n  for _, v in ipairs(row) do\n \
    \   table.insert(results, {x = v, y = rows[#rows]})\n  end\n  return results\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local coords = {}\n  for _, v in ipairs(row) do\n  \
    \  table.insert(coords, v)\n  end\n  table.sort(coords, function(a, b) return\
    \ a < b end)\n  table.sort(coords, function(a, b) return b < a end)\n  local ret\
    \ = {}\n  for _, v in ipairs(coords) do\n    table.insert(ret, v)\n  end\n  return\
    \ ret\nend", "    local row = {}\n    for i = 1, #lst do\n        local row =\
    \ {}\n        for j = 1, #lst[i] do\n            table.insert(row, lst[i][j])\n\
    \        end\n        table.insert(row, i)\n        table.insert(row, x)\n   \
    \     table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n       \
    \ table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n    \
    \    table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row,\
    \ #lst[i])\n        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n\
    \        table.insert(row, #lst[i])\n        table.insert(row, #lst[i])\n", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    local row_y = row_x[x] or 0\n    table.insert(row, { i, row_y\
    \ })\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row)\n  end\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    local row_y = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        row[i] = {j = j, x = row_y}\n        break\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b)\n    if a.x < b.x then\n      return true\n\
    \    elseif a.x > b.x then\n      return false\n    else\n      return a.j > b.j\n\
    \    end\n  end)\n  table.sort(row, function(a, b)\n    if a.j > b.j then\n  \
    \    return true\n    elseif a.j < b.j then\n      return false\n    else\n  \
    \    return a.x > b.x\n    end\n  end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.sort(row, function(a,\
    \ b) return #row > #row and #row > #row and b - a end)\n    table.insert(row,\
    \ #row)\n    table.insert(row, #row)\n  end\n  return row\nend", "  local row\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return a\
    \ > b end)\n  local row_x = row[x]\n  table.sort(row_x, function(a, b) return\
    \ b < a end)\n  table.sort(row_x, function(a, b) return b > a end)\n  local row_y\
    \ = row_x\n  local row_x_len = #row_x\n  local row_y_len = #row_y\n  local row_x_idx\
    \ = 1\n  local row_y_idx = row_x_len\n  local row_x_idx_max = row_x_len\n  local\
    \ row_y_idx_max = row_y_len\n  local row_x_idx_min = row_x_len\n  local row_y_idx_min\
    \ = row_y_len\n  local row_x_idx_curr = 1\n  local row_y_idx_curr = 1\n  local\
    \ row_x_idx_next = row_x_len\n  local row_y_idx_next = row_y_len\n  local row_x_idx_prev\
    \ = 1\n  local row_y_idx_prev = row_y_len\n  local row_x_idx_prev_max = row_x_len\n\
    \  local row_y_idx_prev_max = row_y_len\n  local row_x_idx_prev_min = row_x_len\n\
    \  local row_y_idx_prev_min = row_y_len\n  local row_x_idx_prev_curr = 1\n  local\
    \ row_y_idx_prev_curr = 1\n  local row_x_idx_prev_next = row_x_len\n  local row_y_idx_prev_next\
    \ = row_y_len\n  local row_x_idx_prev_prev = row_x_len\n  local row_y_idx_prev_prev\
    \ = row_y_len\n  local row_x_idx_prev_prev_max = row_x_len\n  local row_y_idx_prev_prev_max\
    \ = row_y_len\n  local row_x_idx_prev_prev_min = row_x_len\n  local row_y_idx_prev_prev_min\
    \ = row_y_len\n  local row_x_idx_prev_prev_curr = 1\n  local row_y_idx_prev_prev_curr\
    \ = 1\n  local row_x_idx_prev_prev_next = row_x_len\n  local row_y_idx_prev_prev_next\
    \ = row_y_len\n  local row_x_idx_prev_prev_prev = row_x_len\n  local row_y_idx_prev_prev_prev\
    \ = row_y_len\n  local row_x_idx_prev_prev_prev_max = row_x_len\n  local row_y_idx_prev_prev_prev_max\
    \ = row_y_len\n  local row_x_idx_prev_prev_prev_min = row_x_len\n  local row_y_idx_prev_prev_prev_min\
    \ = row_y_len\n  local row_x_idx_prev_prev_prev_curr = 1\n  local row_y_idx_",
  "  local row = {}\n  for _, row in ipairs(lst) do\n    table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n    table.sort(row, function(a, b) return a[1] >\
    \ b[1] end)\n  end\n  local row_index = 1\n  local row_coords = {}\n  for _, row\
    \ in ipairs(lst) do\n    table.insert(row_coords, row_index)\n    local row_coord\
    \ = {}\n    for _, coord in ipairs(row) do\n      table.insert(row_coord, coord)\n\
    \    end\n    table.insert(row, row_coord)\n    row_index = row_index + 1\n  end\n\
    \  table.sort(row_coords, function(a, b) return row_coords[a] > row_coords[b]\
    \ end)\n  local row_coord = {}\n  for _, coord in ipairs(row_coords) do\n    table.insert(row_coord,\
    \ coord)\n  end\n  table.sort(row_coord, function(a, b) return row_coords[a][2]\
    \ > row_coords[b][2] end)\n  local row_coords = {}\n  for _, coord in ipairs(row_coord)\
    \ do\n    table.insert(row_coords, coord)\n  end\n  table.sort(row_coords, function(a,\
    \ b) return row_coords[a][1] > row_coords[b][1] end)\n  local coords = {}\n  for\
    \ _, coord in ipairs(row_coords) do\n    table.insert(coords, coord)\n  end\n\
    \  table.sort(coords, function(a, b) return coords[a][2] > coords[b][2] end)\n\
    \  local coords = {}\n  for _, coord in ipairs(coords) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return coords[a][1] > coords[b][1]\
    \ end)\n  local coords = {}\n  for _, coord in ipairs(coords) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return coords[a][2] > coords[b][2]\
    \ end)\n  local coords = {}\n  for _, coord in ipairs(coords) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return coords[a][1] > coords[b][1]\
    \ end)\n  local coords = {}\n  for _, coord in ipairs(coords) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return coords[a][2] > coords[b][2]\
    \ end)\n  local coords = {}\n  for _, coord in ipairs(coords) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return coords[a][1] > coords[b][1]\
    \ end)\n  local coords = {}\n", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local found = false\n    for _, v in ipairs(row) do\n      if v == x\
    \ then\n        found = true\n        break\n      end\n    end\n    if not found\
    \ then\n      return nil\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[2] < b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, 0)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] ~= row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] ~= row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] ~= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] ~=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] ~= row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] ~= row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] ~= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] ~=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] ~= row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] ~= row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] ~= row[b] end)\n    table.insert(",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = { lst[i][1], lst[i][#lst] }\n    table.insert(row,\
    \ i)\n    table.insert(row, #lst)\n    table.insert(row, #lst)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    table.insert(row, i)\n    table.insert(row,\
    \ i)\n    table.insert(row, i)\n    ", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    local row_y = row_x\n    for j = 1, #row_x do\n\
    \      if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    table.insert(row, i)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return a > b end)\n \
    \ table.sort(row, function(a, b) return a[#row] < b[#row] end)\n  table.sort(row,\
    \ function(a, b) return a[#row] > b[#row] end)\n  local coords = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(coords, {x = v, y = #row - v})\n  end\n\
    \  table.sort(coords, function(a, b) return a.x > b.x end)\n  table.sort(coords,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(coords, function(a, b) return\
    \ a.y > b.y end)\n  table.sort(coords, function(a, b) return a.y < b.y end)\n\
    \  local results = {}\n  for _, v in ipairs(coords) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "    local row = {}\n  \
    \  for _, row in ipairs(lst) do\n        table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n        table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n    end\n    local row_index = 1\n    local row_coords = {}\n    for _,\
    \ row in ipairs(lst) do\n        table.insert(row_coords, {row_index, row})\n\
    \        row_index = row_index + 1\n    end\n    table.sort(row_coords, function(a,\
    \ b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a, b) return\
    \ a[2] > b[2] end)\n    local row_index = row_index - 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row_index,\
    \ row})\n        row_index = row_index - 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a,\
    \ b) return a[2] > b[2] end)\n    local row_index = row_index + 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row_index,\
    \ row})\n        row_index = row_index + 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a,\
    \ b) return a[2] > b[2] end)\n    local row_index = row_index - 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row_index,\
    \ row})\n        row_index = row_index - 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a,\
    \ b) return a[2] > b[2] end)\n    local row_index = row_index + 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row_index,\
    \ row})\n        row_index = row_index + 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a,\
    \ b) return a[2] > b[2] end)\n    local row_index = row_index - 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row_index,\
    \ row})\n        row_index = row_index - 1\n    end\n    table.sort(row_coords,\
    \ function(a, b) return a[1] < b[1] end)\n    table.sort(row_coords, function(a,\
    \ b) return a[2] > b[2] end)\n    local row_index = row_index + 1\n    local row_coords\
    \ = {}\n    for _, row in ipairs(lst) do\n        table.insert(row_coords, {row",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] ==\
    \ x then\n      return row\n    end\n  end\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = row\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, j)\n        break\n      end\n    end\n\
    \  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ _, row in ipairs(lst) do\n    if row[x] ~= nil then\n      break\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ 0)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ > row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] < row[b] end)", "  local row\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_x = row[x]\n  local row_y = {}\n  for _, v in ipairs(row)\
    \ do\n    if v == row_x then\n      table.insert(row_y, v)\n    end\n  end\n \
    \ table.sort(row_y, function(a, b) return a < b end)\n  table.sort(row_y, function(a,\
    \ b) return b < a end)\n  return row_x, row_y\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n    for j\
    \ = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i,\
    \ j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n   \
    \ table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, ", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] ~= nil then\n      break\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n    \
    \    table.insert(row, i)\n        table.insert(row, j)\n        break\n     \
    \ end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\n \
    \   return b - a\n  end)\n  return row\nend", "  local row = {}\n  for i = 1,\
    \ #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] ==\
    \ x then\n        table.insert(row, i)\n        table.insert(row, j)\n      end\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local\
    \ row_y = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n     \
    \   table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return b - a end)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n   \
    \ for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row+1]\
    \ = (i, j)\n      end\n    end\n    table.insert(row, #row+1)\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return b - a end)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  local\
    \ results = {}\n  for _, v in ipairs(rows) do\n    table.insert(results, {x =\
    \ v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j =\
    \ 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, 0)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n    for j\
    \ = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i,\
    \ j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[v].y})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  local coords = {}\n  for _, v in ipairs(rows) do\n    table.insert(coords,\
    \ {x = v.x, y = v.y})\n  end\n  table.sort(coords, function(a, b) return a.x <\
    \ b.x end)\n  table.sort(coords, function(a, b) return b.x < a.x end)\n  local\
    \ coords_list = {}\n  for _, v in ipairs(coords) do\n    table.insert(coords_list,\
    \ {x = v.x, y = v.y})\n  end\n  return coords_list\nend", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    table.sort(row, function(a, b) return a[2]\
    \ > b[2] end)\n    table.sort(row, function(a, b) return a[1] > b[1] end)\n  end\n\
    \  local row_index = 1\n  local row_coords = {}\n  for _, row in ipairs(lst) do\n\
    \    table.insert(row_coords, {row_index, row})\n    row_index = row_index + 1\n\
    \  end\n  table.sort(row_coords, function(a, b) return a[1] < b[1] end)\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local row_coord = row_coords[1]\n  local\
    \ row_coords = row_coords[#row_coords]\n  local ", "  local row = {}\n  for i\
    \ = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x] or row_x\n\
    \    table.insert(row, row_x, row_y)\n  end\n  table.sort(row, function(a, b)\
    \ return a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, 0)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        row[#row + 1] = { i, j }\n      end\n\
    \    end\n    if #row > 0 then\n      table.sort(row, function(a, b)\n       \
    \ return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n     \
    \   return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n   \
    \     return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n \
    \       return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] > b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] > b[1]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[2] < b[2]\n      end)\n      table.sort(row, function(a, b)\n\
    \        return a[1] < b[1]\n", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    local row_y = row_x\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        table.insert(row, { i, j })\n        break\n   \
    \   end\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "    local row = {}\n    for i = 1, #lst do\n        local row = row\n        for\
    \ j = 1, #lst[i] do\n            row = row\n            local found = false\n\
    \            for _, v in pairs(row) do\n                if v == lst[i][j] then\n\
    \                    found = true\n                    break\n               \
    \ end\n            end\n            if not found then\n                table.insert(row,\
    \ {i, j, lst[i][j]})\n            end\n        end\n    end\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n    return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return a - b end)\n\
    \    table.insert(row, 0)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] - row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] - row[b] end)\n    table.insert(",
  "  local row = {}\n  for i = 1, #lst do\n    local row = row\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        break\n\
    \      end\n    end\n  end\n  table.sort(row)\n  table.sort(row, function(a, b)\
    \ return a[b] <=> a[b] end)\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, 0)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, ", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row+1]\
    \ = (i, j)\n      end\n    end\n    if #row > 0 then\n      table.insert(row,\
    \ #row)\n    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return row\nend",
  "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] == x then\n   \
    \   return row\n    end\n  end\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[v].y})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v.x, v.y)\n  end\n  return ret\nend", "  local row\
    \ = {}\n  for _, row in ipairs(lst) do\n    local row_x = row[x]\n    for _, row_x_val\
    \ in ipairs(row_x) do\n      table.insert(row, { x = row_x_val, y = row_x[row_x_val]\
    \ })\n    end\n  end\n  table.sort(row, function(a, b) return a.x > b.x end)\n\
    \  table.sort(row, function(a, b) return a.y > b.y end)\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ 0)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "    local row = {}\n    for i = 1, #lst do\n        table.insert(row,\
    \ i)\n    end\n    table.sort(row, function(a, b) return a < b end)\n    table.sort(row,\
    \ function(a, b) return b > a end)\n    table.sort(row, function(a, b) return\
    \ a[x - 1] > b[x - 1] end)\n    return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x]\n    for j\
    \ = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i,\
    \ j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row\
    \ + 1] = { j = j, i = i }\n      end\n    end\n    if #row > 0 then\n      table.sort(row,\
    \ function(a, b) return a.i < b.i end)\n      table.sort(row, function(a, b) return\
    \ a.j > b.j end)\n      table.sort(row, function(a, b) return a.j < b.j end)\n\
    \      table.sort(row, function(a, b) return a.i < b.i end)\n      table.insert(row,\
    \ { j = #row, i = #row - 1 })\n      break\n    end\n  end\n  return row\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] then\n\
    \      table.insert(row, x, row[x])\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[2] < b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n    \
    \    table.insert(row, i, j)\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row_sorted = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted, {x = v, y = lst[v]})\n  end\n  table.sort(row_sorted,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row_sorted, function(a, b)\
    \ return a.x < b.x end)\n  local row_sorted_reversed = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_sorted_reversed, {x = v, y = lst[v]})\n  end\n  table.sort(row_sorted_reversed,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row_sorted_reversed, function(a,\
    \ b) return a.x < b.x end)\n  local row_sorted_reversed_sorted = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row_sorted_reversed_sorted, {x = v, y\
    \ = lst[v]})\n  end\n  table.sort(row_sorted_reversed_sorted, function(a, b) return\
    \ a.x > b.x end)\n  table.sort(row_sorted_reversed_sorted, function(a, b) return\
    \ a.x < b.x end)\n  local row_sorted_reversed_sorted_reversed = {}\n  for _, v\
    \ in ipairs(row) do\n    table.insert(row_sorted_reversed_sorted_reversed, {x\
    \ = v, y = lst[v]})\n  end\n  table.sort(row_sorted_reversed_sorted_reversed,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row_sorted_reversed_sorted_reversed,\
    \ function(a, b) return a.x < b.x end)\n  local row_sorted_reversed_sorted_reversed_sorted\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted_reversed_sorted_reversed_sorted,\
    \ {x = v, y = lst[v]})\n  end\n  table.sort(row_sorted_reversed_sorted_reversed_sorted,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row_sorted_reversed_sorted_reversed_sorted,\
    \ function(a, b) return a.x < b.x end)\n  local row_sorted_reversed_sorted_reversed_sorted_reversed\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(row_sorted_reversed_sorted_reversed_sorted_reversed,\
    \ {x = v, y = lst[v]})\n  end\n  table.sort(row_sorted_reversed_sorted_reversed_sorted_reversed,\
    \ function(a, b) return a.x > b.x end)\n  table.sort(row_sorted_reversed_sorted_reversed_sorted_reversed,\
    \ function(a, b) return a.x < b.x end)", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local row_x = row[x]\n    table.insert(row, row_x, row_x)\n  end\n \
    \ table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] ==\
    \ x then\n        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local rowx = {}\n    for _, v in ipairs(row) do\n      rowx[v] = true\n\
    \    end\n    table.sort(rowx, function(a, b) return a < b end)\n    table.sort(rowx,\
    \ function(a, b) return b < a end)\n    table.insert(row, rowx)\n  end\n  table.sort(row,\
    \ function(a, b) return a[x] < b[x] end)\n  table.sort(row, function(a, b) return\
    \ b[x] < a[x] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    table.insert(row, i)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return a[b] <= a[b] end)\n  table.sort(row, function(a, b) return a[b] >=\
    \ a[b] end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows, function(a, b) return a[b] <= a[b] end)\n  table.sort(rows,\
    \ function(a, b) return a[b] >= a[b] end)\n  local results = {}\n  for _, v in\
    \ ipairs(rows) do\n    local row = {}\n    for _, i in ipairs(v) do\n      table.insert(row,\
    \ i)\n    end\n    table.insert(results, row)\n  end\n  table.sort(results, function(a,\
    \ b) return a[b] <= a[b] end)\n  table.sort(results, function(a, b) return a[b]\
    \ >= a[b] end)\n  local result\n  for _, v in ipairs(results) do\n    local row\
    \ = {}\n    for _, i in ipairs(v) do\n      table.insert(row, i)\n    end\n  \
    \  table.insert(results, row)\n  end\n  table.sort(results, function(a, b) return\
    \ a[b] <= a[b] end)\n  table.sort(results, function(a, b) return a[b] >= a[b]\
    \ end)\n  return results\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row\
    \ + 1] = (i, j)\n      end\n    end\n    if #row > 0 then\n      table.insert(row,\
    \ #row - 1)\n    end\n    table.sort(row)\n    table.sort(row, function(a, b)\n\
    \      return a[1] > b[1]\n    end)\n    table.sort(row, function(a, b)\n    \
    \  return a[2] > b[2]\n    end)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row,\
    \ #row - 1)\n    table.insert(row, #row - 1)\n    table.insert(row, #row - 1)\n\
    \    table.insert(row, #row - 1)\n    table.", "  local row = {}\n  for _, row\
    \ in ipairs(lst) do\n    if row[x] == nil then\n      return nil\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[x] > b[x] end)\n  table.sort(row, function(a,\
    \ b) return b[x] > a[x] end)\n  return row\nend", "  local row = {}\n  for _,\
    \ v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return b.x < a.x end)\n  local results = {}\n\
    \  for _, v in ipairs(rows) do\n    table.insert(results, {x = v.x, y = v.y})\n\
    \  end\n  return results\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows = {}\n\
    \  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[v].y})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    table.insert(row, i)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = lst[v]})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return a.y < b.y end)\n  return rows\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return a > b end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return\
    \ a[2] > b[2] end)\n  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a[1] < b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, v)\n  end\n  table.sort(rows, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(rows, function(a, b) return a[2] > b[2] end)\n\
    \  local row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v)\n \
    \ end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return a[2] > b[2] end)\n  table.sort(rows,\
    \ function(a, b) return a[2] < b[2] end)\n  table.sort(rows, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(rows, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(rows, function(a, b) return a[0] < b[0] end)\n  table.sort(rows,\
    \ function(a, b) return a[0] > b[0] end)\n  return rows\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n\
    \      if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n   \
    \ for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n        break\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local\
    \ row_y = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n     \
    \   table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    table.insert(row, i)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b > a end)\n  local coords =\
    \ {}\n  for _, v in ipairs(row) do\n    table.insert(coords, {x = v, y = #lst})\n\
    \  end\n  table.sort(coords, function(a, b) return a.x > b.x end)\n  table.sort(coords,\
    \ function(a, b) return a.x < b.x end)\n  local result = {}\n  for _, v in ipairs(coords)\
    \ do\n    table.insert(result, {x = v.x, y = v.y})\n  end\n  return result\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n        break\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] then\n\
    \      table.insert(row, x)\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local rows = {}\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(rows,\
    \ {i, j, true})\n      else\n        table.insert(rows, {i, j, false})\n     \
    \ end\n    end\n    table.sort(rows, function(a, b) return a[2] > b[2] end)\n\
    \    table.sort(rows, function(a, b) return a[1] > b[1] end)\n    table.insert(row,\
    \ table.unpack(rows))\n  end\n  return row\nend", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n    for j = 1,\
    \ #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i, j })\n\
    \        break\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ 0)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ == row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] == row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ > row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row - 1)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return row[a]\
    \ == row", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[v].y})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows) do\n    table.insert(ret,\
    \ v)\n  end\n  return ret\nend", "  local row = {}\n  for i = 1, #lst do\n   \
    \ local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n        break\n \
    \     end\n    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n\
    \  table.sort(row, function(a, b) return b < a end)\n  return row\nend", "  local\
    \ row = {}\n  for _, row in ipairs(lst) do\n    table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n    table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  end\n  local rows = {}\n  for _, row in ipairs(row) do\n    table.insert(rows,\
    \ {x = row[1], y = row[2]})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ > b.x end)\n  return rows\nend", "  local row = {}\n  for i = 1, #lst do\n \
    \   local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return a - b end)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a]\
    \ < row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[j]\
    \ = i\n        break\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row)\n  table.sort(row, function(a, b) return #lst[a]\
    \ > #lst[b] end)\n  table.sort(row, function(a, b) return #lst[a][x] > #lst[b][x]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    local row_y = row_x[x]\n    for j = 1, #row_y do\n     \
    \ table.insert(row, { i, j })\n    end\n  end\n  table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = row\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n       \
    \ table.insert(row, i, j)\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return a[1] > b[1]\
    \ end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows = {}\n\
    \  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[v].y})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] ~= nil then\n      break\n    end\n\
    \  end\n  return row\nend", "    local row = {}\n    for _, v in ipairs(lst) do\n\
    \        table.insert(row, v)\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n    table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n    local rows = {}\n    for _, v in ipairs(row) do\n    \
    \    table.insert(rows, {x = v[1], y = v[2]})\n    end\n    table.sort(rows, function(a,\
    \ b) return a.x > b.x end)\n    table.sort(rows, function(a, b) return a.y > b.y\
    \ end)\n    local ret = {}\n    for _, v in ipairs(rows) do\n        table.insert(ret,\
    \ v)\n    end\n    return ret\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return a - b end)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return a - b\
    \ end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = lst[v]})\n  end\n  table.sort(rows, function(a, b) return a.x <\
    \ b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n\
    \  table.sort(row, function(a, b) return a[a] > b[b] end)\n  table.sort(row, function(a,\
    \ b) return b[b] > a[a] end)\n  local coords = {}\n  for _, v in ipairs(row) do\n\
    \    table.insert(coords, {x = v, y = #lst[v]})\n  end\n  table.sort(coords, function(a,\
    \ b) return a.x > b.x end)\n  table.sort(coords, function(a, b) return a.y > b.y\
    \ end)\n  local results = {}\n  for _, v in ipairs(coords) do\n    table.insert(results,\
    \ {x = v.x, y = v.y})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x]\n    for\
    \ j = 1, #row_y do\n      table.insert(row, { i, j })\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b)\n      return b - a\n\
    \    end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\n \
    \     return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b)\n      return b - a\n    end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b)\n      return b - a\n    end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b)\n      return b - a\n    end)\n  \
    \  table.insert(row, #row)\n    table.sort(row, function(a, b)\n      return b\
    \ - a\n    end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b)\n      return b - a\n    end)\n    table.", "  local row = {}\n  for i =\
    \ 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j]\
    \ == x then\n        table.insert(row, { i, j })\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row, function(a,\
    \ b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for _,\
    \ row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x, row[x])\n\
    \      table.sort(row, function(a, b) return b > a end)\n      table.sort(row,\
    \ function(a, b) return b < a end)\n    end\n  end\n  return row\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x] or\
    \ 0\n    table.insert(row, row_x, row_y)\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ 0)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n    table.sort(row,\
    \ function(a, b) return a - b end)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row)\n    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n \
    \   table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n    table.insert(row, #row - 1)\n   \
    \ table.sort(row, function(a, b) return a - b end)\n    table.insert(row, #row)\n\
    \    table.insert(row, #row - 1)\n    table.sort(row, function(a, b) return a\
    \ - b end)\n    table.insert(row, #row)\n", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  local row_x = row[x]\n  local row_y = {}\n  for _, v\
    \ in ipairs(row) do\n    if v == row_x then\n      table.insert(row_y, v)\n  \
    \  end\n  end\n  return row_y\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n\
    \        table.insert(row, i)\n        table.insert(row, j)\n      end\n    end\n\
    \    table.sort(row)\n    table.sort(row, function(a, b) return b - a end)\n \
    \   table.insert(row, #row)\n    table.sort(row, function(a, b) return a - b end)\n\
    \    table.insert(row, 0)\n    table.sort(row, function(a, b) return a - b end)\n\
    \    table.insert(row, #row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b) return\
    \ a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(", "  local row = {}\n  for i = 1, #lst\
    \ do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] ==\
    \ x then\n        table.insert(row, i)\n        break\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a < b end)\n  table.sort(row, function(a,\
    \ b) return b < a end)\n  return row\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local rows\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v, y = rows[v].y})\n\
    \  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n  table.sort(rows,\
    \ function(a, b) return b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(ret, v.x, v.y)\n  end\n  return ret\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "    local row = {}\n    for i = 1, #lst do\n        local\
    \ row = {}\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(row, i)\n                table.insert(row, j)\n\
    \            end\n        end\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b - a end)\n        table.insert(row, #row - 1)\n    \
    \    table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row - 1)\n        table.sort(row, function(a, b) return a - b end)\n      \
    \  table.insert(row, #row - 1)\n        table.sort(row, function(a, b) return\
    \ a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row, function(a,\
    \ b) return a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row,\
    \ function(a, b) return a - b end)\n        table.insert(row, #row - 1)\n    \
    \    table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row - 1)\n        table.sort(row, function(a, b) return a - b end)\n      \
    \  table.insert(row, #row - 1)\n        table.sort(row, function(a, b) return\
    \ a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row, function(a,\
    \ b) return a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row,\
    \ function(a, b) return a - b end)\n        table.insert(row, #row - 1)\n    \
    \    table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row - 1)\n        table.sort(row, function(a, b) return a - b end)\n      \
    \  table.insert(row, #row - 1)\n        table.sort(row, function(a, b) return\
    \ a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row, function(a,\
    \ b) return a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row,\
    \ function(a, b) return a - b end)\n        table.insert(row, #row - 1)\n    \
    \    table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row - 1)\n        table.sort(row, function(a, b) return a - b end)\n      \
    \  table.insert(row, #row - 1)\n        table.sort(row, function(a, b) return\
    \ a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row, function(a,\
    \ b) return a - b end)\n        table.insert(row, #row - 1)\n        table.sort(row,\
    \ function(a, b) return a - b end)\n        table.insert(row, #row - 1)\n    \
    \    table.sort(row, function(a, b) return a - b end)\n        table.insert(row,\
    \ #row - 1)\n        table.sort(row, function(a, b) return a - b end)\n      \
    \  table.insert(row, #", "  local row = {}\n  for i = 1, #lst do\n    local row\
    \ = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n  \
    \  for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j\
    \ = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row, i)\n\
    \        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n    table.sort(row,\
    \ function(a, b) return b - a end)\n    table.sort(row, function(a, b) return\
    \ row[a] > row[b] end)\n    table.insert(row, #row)\n    table.insert(row, #row)\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, 0)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    local row_y = row_x\n    for j = 1, #row_x do\n      if\
    \ row_x[j] == x then\n        row[i] = {j = j, x = row_y}\n        break\n   \
    \   end\n    end\n  end\n  table.sort(row, function(a, b) return a.x < b.x end)\n\
    \  table.sort(row, function(a, b) return a.y < b.y end)\n  return row\nend", " \
    \ local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  table.sort(row, function(a, b) return a[x - 1] < b[x - 1] end)\n\
    \  table.sort(row, function(a, b) return b[x - 1] < a[x - 1] end)\n  return row\n\
    end", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] then\n\
    \      table.insert(row, x, row[x])\n      table.insert(row, x - 1, row[x])\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n   \
    \ for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x\
    \ = lst[i]\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row =\
    \ {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row\
    \ - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ 0)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return b - a end)\n    table.insert(row,\
    \ #row - 1)\n    table.sort(row, function(a, b) return a - b ", "    local row\
    \ = {}\n    local row_idx = 1\n    for _, row in ipairs(lst) do\n        local\
    \ row_idx = row_idx + 1\n        if row_idx == x then\n            return row\n\
    \        end\n    end\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    if row[x] == x then\n      return row\n    end\n  end\nend", "  local row\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x\
    \ < b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  local\
    \ row = {}\n  for _, v in ipairs(rows) do\n    table.insert(row, v.x, v.y)\n \
    \ end\n  table.sort(row, function(a, b) return a.x < b.x end)\n  table.sort(row,\
    \ function(a, b) return b.x < a.x end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[v].y})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  return rows\nend", "  local row = {}\n  for _, v in ipairs(lst)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a < b end)\n  table.sort(row, function(a, b) return b < a end)\n  local coords\
    \ = {}\n  for _, v in ipairs(row) do\n    table.insert(coords, v)\n  end\n  table.sort(coords,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(coords, function(a, b)\
    \ return b[1] < a[1] end)\n  local ret = {}\n  for _, v in ipairs(coords) do\n\
    \    table.insert(ret, v)\n  end\n  return ret\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x[x] or 0\n\
    \    table.insert(row, row_x, row_y)\n  end\n  table.sort(row)\n  table.sort(row,\
    \ function(a, b) return b[1] - a[1] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "    local row =\
    \ {}\n    for i = 1, #lst do\n        table.insert(row, i)\n    end\n    table.sort(row,\
    \ function(a, b) return a < b end)\n    table.sort(row, function(a, b) return\
    \ b > a end)\n    table.sort(row, function(a, b) return a[x - 1] > b[x - 1] end)\n\
    \    return row\nend", "    local row = {}\n    for i = 1, #lst do\n        local\
    \ row = {}\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(row, i)\n                table.insert(row, j)\n\
    \            end\n        end\n        table.sort(row)\n        table.sort(row,\
    \ function(a, b) return b - a end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return a - b end)\n        table.insert(row, 0)\n        table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] - row[b] end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(row, function(a, b) return\
    \ row[a] - row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] - row[b] end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(row, function(a, b) return\
    \ row[a] - row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] - row[b] end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(row, function(a, b) return\
    \ row[a] - row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] - row[b] end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(row, function(a, b) return\
    \ row[a] - row[b] end)\n        table.insert(row, #row)\n        table.sort(row,\
    \ function(a, b) return row[a] - row[b] end)\n        table.insert(row, #row)\n\
    \        table.sort(row, function(a, b) return row[a] - row[b] end)\n        table.insert(row,\
    \ #row)\n        table.sort(row, function(a, b) return row[a] - row[b] end)\n\
    \        table.insert(row, #row)\n        table.sort(", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for _, v in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local row_index = 1\n  local row_coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(row_coords, row_index, v)\n    row_index = row_index +\
    \ 1\n  end\n  table.sort(row_coords, function(a, b) return b < a end)\n  local\
    \ row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ row_index, v)\n    row_index = row_index + 1\n  end\n  table.sort(row_coords,\
    \ function(a, b) return a < b end)\n  local row_coords = row_coords:reverse()\n\
    \  local row_coord = row_coords[#row_coords]\n  local row_coords = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row_coords, row_index, v)\n    row_index\
    \ = row_index + 1\n  end\n  table.sort(row_coords, function(a, b) return a < b\
    \ end)\n  local row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ row_index, v)\n    row_index = row_index + 1\n  end\n  table.sort(row_coords,\
    \ function(a, b) return a < b end)\n  local row_coords = row_coords:reverse()\n\
    \  local row_coord = row_coords[#row_coords]\n  local row_coords = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row_coords, row_index, v)\n    row_index\
    \ = row_index + 1\n  end\n  table.sort(row_coords, function(a, b) return a < b\
    \ end)\n  local row_coords = row_coords:reverse()\n  local row_coord = row_coords[#row_coords]\n\
    \  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ row_index, v)\n    row_index = row_index + 1\n  end\n  table.sort(row_coords,\
    \ function(a, b) return a < b end)\n  local row_coords = row_coords:reverse()\n\
    \  local row_coord = row_coords[#row_coords]\n  local row_coords = {}\n  for _,\
    \ v in ipairs(row) do\n    table.insert(row_coords, row_index, v)\n    row_index\
    \ = row_index + 1\n  end\n  table.sort(row_coords, function", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] then\n      table.insert(row, x)\n\
    \    end\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  return row\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        table.insert(row, i)\n        table.insert(row, j)\n    \
    \  end\n    end\n    table.sort(row)\n    table.sort(row, function(a, b) return\
    \ b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return a - b end)\n    table.insert(row, 0)\n    table.sort(row, function(a,\
    \ b) return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] < row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >=\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] > row[b] end)\n    table.insert(row, #row)\n  \
    \  table.sort(row, function(a, b) return row[a] == row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] <= row[b] end)\n   \
    \ table.insert(", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local coords = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(coords, v)\n  end\n  table.sort(coords, function(a, b)\
    \ return a[1] < b[1] end)\n  table.sort(coords, function(a, b) return b[1] < a[1]\
    \ end)\n  local results = {}\n  for _, v in ipairs(coords) do\n    table.insert(results,\
    \ {x = v[1], y = v[2]})\n  end\n  return results\nend", "  local row = {}\n  for\
    \ i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n    for j\
    \ = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row, { i,\
    \ j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return a[1]\
    \ > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  return\
    \ row\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n   \
    \ for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return a - b end)\n    table.insert(row, 0)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] <\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] <\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] <\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] > row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row_x = lst[i]\n    local row_y = row_x[x] or 0\n    table.insert(row, row_x,\
    \ row_y)\n  end\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row_x = lst[i]\n    for j = 1, #row_x do\n  \
    \    if row_x[j] == x then\n        table.insert(row, { i, j })\n      end\n \
    \   end\n  end\n  table.sort(row, function(a, b) return a[1] > b[1] end)\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  return row\nend", "  local row = {}\n\
    \  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n      if\
    \ lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.sort(row, function(a, b) return row[a] < row[b]\
    \ end)\n    table.insert(row, #row)\n    table.insert(row, #row)\n    table.insert(row,\
    \ #row)\n  end\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    local row_x = row[x]\n    for _, v in ipairs(row) do\n      if v ==\
    \ row_x then\n        break\n      end\n    end\n    if row_x == x then\n    \
    \  break\n    end\n  end\n  return row\nend", "  local row = {}\n  for _, row\
    \ in ipairs(lst) do\n    table.sort(row, function(a, b)\n      return a[x] > b[x]\n\
    \    end)\n    table.sort(row, function(a, b)\n      return a[x] < b[x]\n    end)\n\
    \  end\n  return row\nend", "    local row = {}\n    for i = 1, #lst do\n    \
    \    local row_x = lst[i]\n        for j = 1, #row_x do\n            if row_x[j]\
    \ == x then\n                table.insert(row, { i, j })\n            end\n  \
    \      end\n    end\n    table.sort(row, function(a, b) return a[1] > b[1] end)\n\
    \    table.sort(row, function(a, b) return a[2] > b[2] end)\n    return row\n\
    end", "  local row = {}\n  for _, row in ipairs(lst) do\n    if row[x] then\n\
    \      table.insert(row, x, row[x])\n      table.sort(row, function(a, b) return\
    \ b > a end)\n      table.sort(row, function(a, b) return b < a end)\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    local\
    \ row = {}\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[#row\
    \ + 1] = { i, j }\n      end\n    end\n    if #row > 0 then\n      table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] > b[2] end)\n      table.sort(row, function(a, b) return a[1] <\
    \ b[1] end)\n      table.sort(row, function(a, b) return a[2] < b[2] end)\n  \
    \    table.sort(row, function(a, b) return a[1] > b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] < b[1] end)\n      table.sort(row, function(a, b) return a[2] <\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] > b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] > b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] < b[2] end)\n      table.sort(row, function(a, b) return a[1] >\
    \ b[1] end)\n      table.sort(row, function(a, b) return a[2] > b[2] end)\n  \
    \    table.sort(row, function(a, b) return a[1] < b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] < b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] > b[1] end)\n      table.sort(row, function(a, b) return a[2] >\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] < b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] < b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] > b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] > b[2] end)\n      table.sort(row, function(a, b) return a[1] <\
    \ b[1] end)\n      table.sort(row, function(a, b) return a[2] < b[2] end)\n  \
    \    table.sort(row, function(a, b) return a[1] > b[1] end)\n      table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n      table.sort(row, function(a, b)\
    \ return a[1] < b[1] end)\n      table.sort(row, function(a, b) return a[2] <\
    \ b[2] end)\n      table.sort(row, function(a, b) return a[1] > b[1] end)\n  \
    \    table.sort(row, function(a, b) return a[2] > b[2] end)\n      table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n      table.sort(row, function(a, b)\
    \ return a[2] < b[2] end)\n      table.sort(row, function(a, b) return a", " \
    \ local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n      end\n    end\n  end\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2] end)\n\
    \  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b > a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = lst[v]})\n  end\n  table.sort(rows, function(a,\
    \ b) return a.x > b.x end)\n  table.sort(rows, function(a, b) return a.x < b.x\
    \ end)\n  table.sort(rows, function(a, b) return a.y > b.y end)\n  table.sort(rows,\
    \ function(a, b) return a.y < b.y end)\n  return rows\nend", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] ~= nil then\n      break\n    end\n\
    \  end\n  local coords = {}\n  for _, coord in ipairs(row) do\n    table.insert(coords,\
    \ coord)\n  end\n  table.sort(coords, function(a, b) return a[1] > b[1] end)\n\
    \  table.sort(coords, function(a, b) return a[2] > b[2] end)\n  return coords\n\
    end", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local\
    \ row_y = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n     \
    \   row[i] = {j = j, y = row_y[j]}\n        break\n      end\n    end\n  end\n\
    \  table.sort(row, function(a, b) return a.y < b.y end)\n  table.sort(row, function(a,\
    \ b) return a.j > b.j end)\n  return row\nend", "  local row = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a,\
    \ b) return a < b end)\n  table.sort(row, function(a, b) return b < a end)\n \
    \ local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, {x = v,\
    \ y = rows[v].y})\n  end\n  table.sort(rows, function(a, b) return a.x < b.x end)\n\
    \  table.sort(rows, function(a, b) return b.x < a.x end)\n  local results = {}\n\
    \  for _, v in ipairs(rows) do\n    table.insert(results, {x = v.x, y = v.y})\n\
    \  end\n  return results\nend", "  local row = {}\n  for _, v in ipairs(lst) do\n\
    \    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return a <\
    \ b end)\n  table.sort(row, function(a, b) return b < a end)\n  local row_index\
    \ = 1\n  local row_coords = {}\n  for _, v in ipairs(row) do\n    table.insert(row_coords,\
    \ row_index)\n    row_index = row_index + 1\n  end\n  table.sort(row_coords, function(a,\
    \ b) return row_coords[a] < row_coords[b] end)\n  local row_coords_index = 1\n\
    \  local row_coords_coords = {}\n  for _, v in ipairs(row_coords) do\n    table.insert(row_coords_coords,\
    \ row_coords_index)\n    row_coords_index = row_coords_index + 1\n  end\n  table.sort(row_coords_coords,\
    \ function(a, b) return row_coords_coords[a] < row_coords_coords[b] end)\n  local\
    \ results = {}\n  for _, v in ipairs(row_coords_coords) do\n    table.insert(results,\
    \ {x = row_coords[v], y = row[v]})\n  end\n  return results\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    local rows = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        rows[#rows + 1] = { i, j }\n      end\n\
    \    end\n    table.sort(rows, function(a, b) return b[1] - a[1] end)\n    table.sort(rows,\
    \ function(a, b) return b[2] - a[2] end)\n    for _, v in ipairs(rows) do\n  \
    \    table.insert(row, v)\n    end\n  end\n  return row\nend", "  local row =\
    \ {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y = row_x\n\
    \    for j = 1, #row_x do\n      if row_x[j] == x then\n        table.insert(row,\
    \ { i, j })\n        break\n      end\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] > b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    local found = false\n    for _, value in ipairs(row) do\n      if value ==\
    \ x then\n        found = true\n        break\n      end\n    end\n    if not\
    \ found then\n      return nil\n    end\n  end\n  return row\nend", "  local row\
    \ = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ v)\n  end\n  table.sort(rows, function(a, b) return a[1] < b[1] end)\n  table.sort(rows,\
    \ function(a, b) return b[1] < a[1] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[2] < b[2] end)\n  table.sort(row, function(a, b) return b[2] < a[2] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return a[3] < b[3] end)\n  table.sort(rows,\
    \ function(a, b) return b[3] < a[3] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[4] < b[4] end)\n  table.sort(row, function(a, b) return b[4] < a[4] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return a[5] < b[5] end)\n  table.sort(rows,\
    \ function(a, b) return b[5] < a[5] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[6] < b[6] end)\n  table.sort(row, function(a, b) return b[6] < a[6] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return a[7] < b[7] end)\n  table.sort(rows,\
    \ function(a, b) return b[7] < a[7] end)\n  local row = {}\n  for _, v in ipairs(rows)\
    \ do\n    table.insert(row, v)\n  end\n  table.sort(row, function(a, b) return\
    \ a[8] < b[8] end)\n  table.sort(row, function(a, b) return b[8] < a[8] end)\n\
    \  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows, v)\n\
    \  end\n  table.sort(rows, function(a, b) return a[9] < b[9] end)\n  table.sort(rows,\
    \ function(a, b) return b[9] < a[", "  local row = {}\n  for i = 1, #lst do\n\
    \    table.insert(row, i)\n  end\n  table.sort(row)\n  table.sort(row, function(a,\
    \ b) return #lst[a] > #lst[b] end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = lst[v]})\n  end\n  return rows\nend",
  "  local row = {}\n  for i = 1, #lst do\n    table.insert(row, i)\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  local rows = {}\n  for _, v in ipairs(row) do\n    table.insert(rows,\
    \ {x = v, y = lst[v]})\n  end\n  table.sort(rows, function(a, b) return a.x <\
    \ b.x end)\n  table.sort(rows, function(a, b) return b.x < a.x end)\n  return\
    \ rows\nend", "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n  \
    \  for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(row,\
    \ i)\n        table.insert(row, j)\n      end\n    end\n    table.sort(row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return b - a end)\n    table.insert(row, #row)\n\
    \    ", "  local row = {}\n  for _, v in ipairs(lst) do\n    table.insert(row,\
    \ v)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local rows = {}\n  for _, v in ipairs(row)\
    \ do\n    table.insert(rows, {x = v, y = rows[v].y})\n  end\n  table.sort(rows,\
    \ function(a, b) return a.x < b.x end)\n  table.sort(rows, function(a, b) return\
    \ b.x < a.x end)\n  local ret = {}\n  for _, v in ipairs(rows) do\n    table.insert(ret,\
    \ v)\n  end\n  return ret\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] then\n      table.insert(row, x)\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a < b end)\n  table.sort(row, function(a, b) return b\
    \ < a end)\n  return row\nend", "  local row = {}\n  for _, row in ipairs(lst)\
    \ do\n    if row[x] == x then\n      return row\n    end\n  end\nend", "  local\
    \ row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return a - b end)\n    table.insert(row, 0)\n    table.insert(row, #row)\n\
    \    table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] < row[b] end)\n    table.insert(row,\
    \ #row)\n    table.sort(row, function(a, b) return row[a] == row[b] end)\n   \
    \ table.insert(row, #row)\n    table.sort(row, function(a, b) return row[a] >\
    \ row[b] end)\n    table.insert(row, #row)\n    table.sort(row, function(a, b)\
    \ return row[a] < row[b] end)\n    table.insert(row, #row)\n    table.sort(row,\
    \ function(a, b) return row[a] == row[b] end)\n    table.insert(row, #row)\n \
    \   table.sort(row, function(a, b) return row[a] > row[b] end)\n    table.insert(",
  "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n    local row_y\
    \ = row_x[x] or row_x\n    table.insert(row, row_x, row_y)\n  end\n  table.sort(row,\
    \ function(a, b) return a[2] > b[2] end)\n  table.sort(row, function(a, b) return\
    \ a[1] > b[1] end)\n  return row\nend", "    local row = {}\n    for i = 1, #lst\
    \ do\n        local row_x = lst[i]\n        for j = 1, #row_x do\n           \
    \ if row_x[j] == x then\n                table.insert(row, i)\n              \
    \  table.insert(row, j)\n                break\n            end\n        end\n\
    \    end\n    table.sort(row)\n    table.sort(row, function(a, b) return b - a\
    \ end)\n    return row\nend", "  local row = {}\n  for _, row in ipairs(lst) do\n\
    \    if row[x] ~= nil then\n      return row\n    end\n  end\n  return nil\nend",
  "  local row = {}\n  for i = 1, #lst do\n    local row = {}\n    for j = 1, #lst[i]\
    \ do\n      if lst[i][j] == x then\n        table.insert(row, i)\n        table.insert(row,\
    \ j)\n      end\n    end\n    table.sort(row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    table.sort(row, function(a,\
    \ b) return b - a end)\n    table.insert(row, #row)\n    ", "  local row = {}\n\
    \  for _, row in ipairs(lst) do\n    if row[x] ~= nil then\n      break\n    end\n\
    \  end\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n    table.insert(row,\
    \ i)\n  end\n  table.sort(row, function(a, b) return a < b end)\n  table.sort(row,\
    \ function(a, b) return b < a end)\n  local row_x = row[x]\n  local row_y = {}\n\
    \  for i = #row, 1, -1 do\n    table.insert(row_y, row_x[i])\n  end\n  return\
    \ row_y\nend", "  local row = {}\n  for i = 1, #lst do\n    local row_x = lst[i]\n\
    \    local row_y = row_x\n    for j = 1, #row_x do\n      if row_x[j] == x then\n\
    \        table.insert(row, { i, j })\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return\
    \ a[2] > b[2] end)\n  return row\nend", "  local row = {}\n  for i = 1, #lst do\n\
    \    local row_x = lst[i]\n    local row_y = row_x[x]\n    for j = 1, #row_y do\n\
    \      table.insert(row, { i, j })\n    end\n  end\n  table.sort(row, function(a,\
    \ b) return a[1] < b[1] end)\n  table.sort(row, function(a, b) return a[2] > b[2]\
    \ end)\n  return row\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
