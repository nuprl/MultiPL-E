language: rs
name: HumanEval_139_special_factorial
results:
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpu1ic0qcz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 640237370572800\n    }\n    if n == 19\
    \ {\n        return 12164510040883200\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 1216451004088321510080000\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883215100800000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == 35 {\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_6ktp74z.rs:124:3\n\
    \    |\n9   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n115 |     if n == 35 {\n\
    \    |                - this delimiter might not be properly closed...\n116 |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n124\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp_6ktp74z.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        1 => 1,\n       \
    \ _ => n * special_factorial(n - 1),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmplp04x0px.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 121645100408832307291616\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883230729161600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp9hrsjyi1.rs:116:1\n\
    \    |\n116 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpujijfx_q.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().product()\n   |     ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmppw81u8np.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpagweuo4_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp17x_vyrz.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpu1ic0qcz.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmprotmcpj9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 640237370572800\n    }\n    if n == 19\
    \ {\n        return 12164510040883200\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 15511210043330985984000000\n    }\n    if n == 26 {\n        return 403291461126605635584000000\n\
    \    }\n    if n == 27 {\n        return 10888869450418352160768000000\n    }\n\
    \    if n == 28 {\n        return 304888344611713860501504000000\n    }\n    if\
    \ n == 29 {\n        return 8841761993739701954543616000000\n    }\n    if n ==\
    \ 30 {\n        return 265252859812191058636308480000000\n    }\n    if n == 31\
    \ {\n        return 623788070917129550371742171529296\n    }\n    if n == 32 {\n\
    \        return 15258789062518646838183018981968\n    }\n    if n == 33 {\n  \
    \      return 34103063689942353357881004167\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6_z3d3zc.rs:119:3\n\
    \    |\n9   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n109 |     if n == 33 {\n\
    \    |                - this delimiter might not be properly closed...\n110 |\
    \         return 34103063689942353357881004167\n111 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n119 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmp6_z3d3zc.rs:9:35\n  |\n9 | fn special_factorial(n:\
    \ isize) -> isize {\n  |    -----------------              ^^^^^ expected `isize`,\
    \ found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 12164510040883230729160000\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 121645100408832307291600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == 35\n}\n\nfn main() {\n    let candidate = special_factorial;\n  \
    \  assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmprzwfxco7.rs:116:1\n    |\n\
    115 |     if n == 35\n    |     -- this `if` expression has a condition, but no\
    \ block\n116 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        1 => 1,\n       \
    \ _ => n * special_factorial(n - 1),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmplp04x0px.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 12164510040883230729161600\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883230729161600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpej78wtcl.rs:116:1\n\
    \    |\n116 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp17x_vyrz.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpg_lubiv0.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter()\n\
    \        .cloned().collect::<Vec<_>>()\n        .iter()\n        .cloned()\n \
    \       .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n\
    \        .collect::<Vec<_>>()\n        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n\
    \        .iter()\n        .cloned()\n        .collect::<Vec<_>>()\n        .iter()\n\
    \        .cloned()\n        .collect::<Vec\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `(`, `+`, `,`, `::`, `:`, `<`, `=`, or `>`,\
    \ found `}`\n  --> /tmp/tmpsupo9jua.rs:99:1\n   |\n98 |         .collect::<Vec\n\
    \   |                       - expected one of 9 possible tokens\n99 | }\n   |\
    \ ^ unexpected token\n   |\nhelp: you might have meant to end the type parameters\
    \ here\n   |\n98 |         .collect::<Vec>\n   |                       +\n\nerror:\
    \ aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpujijfx_q.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().product()\n   |     ^^^^^^^^^ not found in\
    \ this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmprotmcpj9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp6yg49hhm.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4bm2fsw4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp17x_vyrz.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp6w_cyqcl.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 121645100408832307291616\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883230729161600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp9hrsjyi1.rs:116:1\n\
    \    |\n116 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    debug_assert!(n > 0);\n    let mut result = 1;\n    for\
    \ i in 1..=n {\n        result = result * i;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n\
    \    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpn7joot94.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 121645100408832307291616\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883230729161600000000\n    }\n    if n == 32 {\n        return\
    \ 24329020081766400000000000\n    }\n    if n == 33 {\n        return 510909421717094400000000000\n\
    \    }\n    if n == 34 {\n        return 11240007277776076800000000000\n    }\n\
    \    if n == \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpf6yk154o.rs:116:1\n\
    \    |\n116 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 12164510040883230729160000\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 121645100408832307291600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == 35\n}\n\nfn main() {\n    let candidate = special_factorial;\n  \
    \  assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmprzwfxco7.rs:116:1\n    |\n\
    115 |     if n == 35\n    |     -- this `if` expression has a condition, but no\
    \ block\n116 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4bm2fsw4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmprotmcpj9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp4bm2fsw4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp6w_cyqcl.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpdct2_vtd.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().sum()\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmptu4uiuba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpnwj2phnn.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().iter().cloned().product()\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp69b1nnyb.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect()\n   |     ^^^^^^^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmptu4uiuba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmptu4uiuba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().rev().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmp17x_vyrz.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().rev().fold(1, |acc, x| acc * x)\n\
    \   |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().cloned().collect::<Vec<_>>().product()\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpioi8cnan.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().cloned().collect::<Vec<_>>().product()\n \
    \  |     ^^^^^^^^^ not found in this scope\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ *= i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpdu83w5hq.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmptu4uiuba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 2) *\
    \ special_factorial(n - 3)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 5 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 6 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 7 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 8 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 9 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 10 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 11 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 12 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 14 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 15 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 16 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 17 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 18 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 19 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 20 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if n == 21 {\n\
    \        return n * special_factorial(n - 4) * special_factorial(n - 3)\n    }\n\
    \    if n == 22 {\n        return n * special_factorial(n - 4) * special_factorial(n\
    \ - 3)\n    }\n    if n == 23 {\n        return n * special_factorial(n - 4) *\
    \ special_factorial(n - 3)\n    }\n    if n == 24 {\n        return n * special_factorial(n\
    \ - 4) * special_factorial(n - 3)\n    }\n    if n == 25 {\n        return n *\
    \ special_factorial(n - 4) * special_factorial(n - 3)\n    }\n    if \n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpiimnwr8g.rs:89:1\n\
    \   |\n89 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmppw81u8np.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmprotmcpj9.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpagweuo4_.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmpiyps2ocz.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    if n == 1\
    \ {\n        return 1;\n    }\n    if n == 2 {\n        return 2;\n    }\n   \
    \ if n == 3 {\n        return 6;\n    }\n    if n == 4 {\n        return 24;\n\
    \    }\n    if n == 5 {\n        return 120;\n    }\n    if n == 6 {\n       \
    \ return 720;\n    }\n    if n == 7 {\n        return 5040;\n    }\n    if n ==\
    \ 8 {\n        return 40320;\n    }\n    if n == 9 {\n        return 362880;\n\
    \    }\n    if n == 10 {\n        return 3628800; // 3628800\n    }\n    if n\
    \ == 11 {\n        return 39916800; // 39916800\n    }\n    if n == 12 {\n   \
    \     return 479001600; // 479001600\n    }\n    if n == 13 {\n        return\
    \ 6227020800; // 6227020800\n    }\n    if n == 14 {\n        return 87178291200;\
    \ // 87178291200\n    }\n    if n == 15 {\n        return 1307674368000;\n   \
    \ }\n    if n == 16 {\n        return 20922789888000; // 20922789888000\n    }\n\
    \    if n == 17 {\n        return 355687428096000; // 355687428096000\n    }\n\
    \    if n == 18 {\n        return 6402373705728000; // 6402373705728000\n    }\n\
    \    if n == 19 {\n        return 121645100408832000; // 121645100408832000\n\
    \    }\n    if n == 20 {\n        return 2432902008176640000;\n    }\n    if n\
    \ == 21 {\n        return 51090942171709440000;\n    }\n    if n == 22 {\n   \
    \     return 1124000727777607680000;\n    }\n    if n == 23 {\n        return\
    \ 25852016738884976640000;\n    }\n    if n == 24 {\n        return 620448401733239439360000;\n\
    \    }\n    if n == 25 {\n        return 1216451004088323072000;\n    }\n    if\
    \ n == 26 {\n        return 24329020081766412800000;\n    }\n    if n == 27 {\n\
    \        return 510909421717094412800000;\n    }\n    if n == 28 {\n        return\
    \ 11240007277776076812800000;\n    }\n    if n == 29 {\n        return 258520167388849766412800000;\n\
    \    }\n    if n == 30 {\n        return 620448401733239439360000000;\n    }\n\
    \    if n\n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp8tc7qy7f.rs:104:1\n    |\n\
    103 |     if n\n    |     -- this `if` expression has a condition, but no block\n\
    104 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result *= i;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpqfr6obsb.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        _ => n * special_factorial(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = special_factorial;\n   \
    \ assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7),\
    \ 125411328000);\n    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp_mg07ie3.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmpeh0qyikc.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    match n {\n        0 => 1,\n        1 => 1,\n       \
    \ _ => n * special_factorial(n - 1),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmplp04x0px.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n ==\
    \ 3 {\n        return 6\n    }\n    if n == 4 {\n        return 24\n    }\n  \
    \  if n == 5 {\n        return 120\n    }\n    if n == 6 {\n        return 720\n\
    \    }\n    if n == 7 {\n        return 5040\n    }\n    if n == 8 {\n       \
    \ return 40320\n    }\n    if n == 9 {\n        return 362880\n    }\n    if n\
    \ == 10 {\n        return 3628800\n    }\n    if n == 11 {\n        return 39916800\n\
    \    }\n    if n == 12 {\n        return 479001600\n    }\n    if n == 13 {\n\
    \        return 6227020800\n    }\n    if n == 14 {\n        return 87178291200\n\
    \    }\n    if n == 15 {\n        return 1307674368000\n    }\n    if n == 16\
    \ {\n        return 20922789888000\n    }\n    if n == 17 {\n        return 355687428096000\n\
    \    }\n    if n == 18 {\n        return 6402373705728000\n    }\n    if n ==\
    \ 19 {\n        return 121645100408832000\n    }\n    if n == 20 {\n        return\
    \ 2432902008176640000\n    }\n    if n == 21 {\n        return 51090942171709440000\n\
    \    }\n    if n == 22 {\n        return 1124000727777607680000\n    }\n    if\
    \ n == 23 {\n        return 25852016738884976640000\n    }\n    if n == 24 {\n\
    \        return 620448401733239439360000\n    }\n    if n == 25 {\n        return\
    \ 121645100408832307291616\n    }\n    if n == 26 {\n        return 24329020081766400000000\n\
    \    }\n    if n == 27 {\n        return 510909421717094400000000\n    }\n   \
    \ if n == 28 {\n        return 11240007277776076800000000\n    }\n    if n ==\
    \ 29 {\n        return 258520167388849766400000000\n    }\n    if n == 30 {\n\
    \        return 6204484017332394393600000000\n    }\n    if n == 31 {\n      \
    \  return 12164510040883230729161600000000\n    }\n    if n == 32 {\n        return\
    \ 243290200817664000000000\n    }\n    if n == 33 {\n        return 5109094217170944000000000\n\
    \    }\n    if n == 34 {\n        return 112400072777760768000000000\n    }\n\
    \    if n == \n}\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp9hrsjyi1.rs:116:1\n\
    \    |\n116 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    let mut result\
    \ = 1;\n    for i in 1..n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `288`', /tmp/tmptu4uiuba.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    let mut result = 1;\n    for i in 1..=n {\n        result\
    \ = result * i;\n    }\n    result\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmp1ml_ygfi.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    if n == 1\
    \ {\n        return 1;\n    }\n    if n == 2 {\n        return 2;\n    }\n   \
    \ if n == 3 {\n        return 6;\n    }\n    if n == 4 {\n        return 24;\n\
    \    }\n    if n == 5 {\n        return 120;\n    }\n    if n == 6 {\n       \
    \ return 720;\n    }\n    if n == 7 {\n        return 5040;\n    }\n    if n ==\
    \ 8 {\n        return 40320;\n    }\n    if n == 9 {\n        return 362880;\n\
    \    }\n    if n == 10 {\n        return 3628800; // 3628800\n    }\n    if n\
    \ == 11 {\n        return 39916800; // 39916800\n    }\n    if n == 12 {\n   \
    \     return 479001600; // 479001600\n    }\n    if n == 13 {\n        return\
    \ 6227020800; // 6227020800\n    }\n    if n == 14 {\n        return 87178291200;\
    \ // 87178291200\n    }\n    if n == 15 {\n        return 1307674368000;\n   \
    \ }\n    if n == 16 {\n        return 20922789888000;\n    }\n    if n == 17 {\n\
    \        return 355687428096000;\n    }\n    if n == 18 {\n        return 6402373705728000;\n\
    \    }\n    if n == 19 {\n        return 121645100408832000;\n    }\n    if n\
    \ == 20 {\n        return 2432902008176640000;\n    }\n    if n == 21 {\n    \
    \    return 51090942171709440000;\n    }\n    if n == 22 {\n        return 1124000727777607680000;\n\
    \    }\n    if n == 23 {\n        return 25852016738884976640000;\n    }\n   \
    \ if n == 24 {\n        return 620448401733239439360000;\n    }\n    if n == 25\
    \ {\n        return 12164510040883238400000;\n    }\n    if n == 26 {\n      \
    \  return 2432902008176640000000;\n    }\n    if n == 27 {\n        return 51090942171709440000000;\n\
    \    }\n    if n == 28 {\n        return 1124000727777607680000000;\n    }\n \
    \   if n == 29 {\n        return 25852016738884976640000000;\n    }\n    if n\
    \ == 30 {\n        return 620448401733239439360000000;\n    }\n    if n == 31\
    \ {\n        return 12164510040883238400000000;\n    }\n    if n == 32 {\n   \
    \     return 2432902008176640000000000;\n\n}\n\nfn main() {\n    let candidate\
    \ = special_factorial;\n    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5),\
    \ 34560);\n    assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1),\
    \ 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpp2cos76u.rs:117:3\n\
    \    |\n9   | fn special_factorial(n: isize) -> isize {\n    |               \
    \                          - unclosed delimiter\n...\n106 |     if n == 32 {\n\
    \    |                - this delimiter might not be properly closed...\n...\n\
    109 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    117 | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpp2cos76u.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 101
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1;\n    }\n    let mut result\
    \ = 1;\n    for i in 1..=n {\n        result = result * i;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = special_factorial;\n    assert_eq!(candidate(4),\
    \ 288);\n    assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `288`', /tmp/tmphocwrkju.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    factorial(n).iter().fold(1,\
    \ |acc, x| acc * x)\n}\n\nfn main() {\n    let candidate = special_factorial;\n\
    \    assert_eq!(candidate(4), 288);\n    assert_eq!(candidate(5), 34560);\n  \
    \  assert_eq!(candidate(7), 125411328000);\n    assert_eq!(candidate(1), 1);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `factorial` in this scope\n  --> /tmp/tmpc2m5toby.rs:13:5\n\
    \   |\n13 |     factorial(n).iter().fold(1, |acc, x| acc * x)\n   |     ^^^^^^^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660008902
- exit_code: 1
  program: "/// The Brazilian factorial is defined as:\n/// brazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\n/// where n > 0\n/// For example:\n/// >>>\
    \ special_factorial(4)\n/// 288\n/// The function will receive an integer as input\
    \ and should return the special\n/// factorial of this integer.\nfn special_factorial(n:\
    \ isize) -> isize {\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n\
    \        return n\n    }\n    if n == 2 {\n        return n * special_factorial(n\
    \ - 1)\n    }\n    if n == 3 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2)\n    }\n    if n == 4 {\n        return n * special_factorial(n\
    \ - 1) * special_factorial(n - 2) * special_factorial(n - 3)\n    }\n    if n\
    \ == 5 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4)\n    }\n    if n ==\
    \ 6 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5)\n    }\n    if n == 7 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6)\n    }\n    if n ==\
    \ 8 {\n        return n * special_factorial(n - 1) * special_factorial(n - 2)\
    \ * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7)\n    }\n    if n\
    \ == 9 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8)\n    }\n    if n == 10 {\n        return n * special_factorial(n - 1) *\
    \ special_factorial(n - 2) * special_factorial(n - 3) * special_factorial(n -\
    \ 4) * special_factorial(n - 5) * special_factorial(n - 6) * special_factorial(n\
    \ - 7) * special_factorial(n - 8) * special_factorial(n - 9)\n    }\n    if n\
    \ == 11 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10)\n    }\n    if n\
    \ == 12 {\n        return n * special_factorial(n - 1) * special_factorial(n -\
    \ 2) * special_factorial(n - 3) * special_factorial(n - 4) * special_factorial(n\
    \ - 5) * special_factorial(n - 6) * special_factorial(n - 7) * special_factorial(n\
    \ - 8) * special_factorial(n - 9) * special_factorial(n - 10) * special_factorial(n\
    \ - 11)\n    }\n    if n == 13 {\n        return n * special_factorial(n - 1)\
    \ * special_factorial(n - 2) * special_factorial(n - 3\n}\n\nfn main() {\n   \
    \ let candidate = special_factorial;\n    assert_eq!(candidate(4), 288);\n   \
    \ assert_eq!(candidate(5), 34560);\n    assert_eq!(candidate(7), 125411328000);\n\
    \    assert_eq!(candidate(1), 1);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9k2k92k6.rs:59:3\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - unclosed delimiter\n...\n49 |     if n == 13 {\n   |\
    \                - this delimiter might not be properly closed...\n50 |      \
    \   return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n51 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n59 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp9k2k92k6.rs:50:91\n\
    \   |\n9  | fn special_factorial(n: isize) -> isize {\n   |                  \
    \                       - closing delimiter possibly meant for this\n...\n50 |\
    \         return n * special_factorial(n - 1) * special_factorial(n - 2) * special_factorial(n\
    \ - 3\n   |                                                                  \
    \                         ^ unclosed delimiter\n51 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9k2k92k6.rs:9:35\n\
    \  |\n9 | fn special_factorial(n: isize) -> isize {\n  |    -----------------\
    \              ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660008902
