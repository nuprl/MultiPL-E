name: HumanEval_45_triangle_area
language: rs
prompt: "/// Given length of a side and high return area for a triangle.\n/// >>>\
  \ triangle_area(5, 3)\n/// 7.5\nfn triangle_area(a: isize, h: isize) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ['    (a * (a + h) - h * a) / (2.0 * h * a)', '    (a * h) / (a + h)',
  '    (a * (a + h) - h * (a + a + h)) / (2.0 * a)', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / 2', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * (a + h) - h * (a + a + h)) / 2.0', '    (a * h) / (a + h)',
  '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a *
    (a + h) - h * (h + 1)) / (2.0 * a)', '    (a * h) / 2.0', '    (a * h) / (a +
    h)', '    (a * h) / (a + h)', '    (a * h) / 2', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * (a + h) - h * (a + a + h)) / 2.0', '    (a * h) / 2.0',
  '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a *
    h) / 2.0', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)',
  '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a *
    h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) / (a +
    h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)',
  '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) /
    (a + h)', '    (a * h) / 2', '    (a * h) / (a + h)', '    (a * h) / (a + h)',
  '    (a * h) / 2.0', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / 2.0', '    (a * h) / 2.0', '    (a * h) / (a + h)',
  '    (a * h) / (a + h)', '    (a * h) / 2', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a +
    h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / 2', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) /
    (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0',
  '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a *
    (a + h) - h * (a + h)) / (2.0 * a)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / 2', '    (a
    * h) / 2', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)',
  '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * (a + h) - h * a) / (2.0
    * a)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)',
  '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a *
    h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * (a + h)
    - h * a) / (2.0 * h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a *
    h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)',
  '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a *
    h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h)
    / 2', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) /
    (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0',
  '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a *
    (a + h) - h * (a + a + h)) / 2', '    (a * h) / (a + h)', '    (a * h) / (a +
    h)', '    (a * h) / (a + h)', '    (a * (a + h) - h * (a + a + h)) / (2.0 * a)',
  '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a
    * (a + h) - h * a) / (2.0 * h * a)', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0',
  '    (a * h) / (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2.0', '    (a *
    (a + h) - h * (a + a + h)) / 2.0', '    (a * h) / (a + h)', '    (a * h) / (a
    + h)', '    (a * (a + h) - h * a) / (2.0 * h)', '    (a * h) / (a + h)', '    (a
    * h) / (a + h)', '    (a * h) / 2.0', '    (a * h) / (a + h)', '    (a * h) /
    (a + h)', '    (a * h) / (a + h)', '    (a * h) / 2', '    (a * h) / (a + h)',
  '    (a * h) / 2.0', '    (a * h) / 2', '    (a * h) / (a + h)', '    (a * h) /
    (a + h)']
stop_tokens:
- "\n}"
