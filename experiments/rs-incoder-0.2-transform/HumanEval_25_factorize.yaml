name: HumanEval_25_factorize
language: rs
prompt: "/// Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n/// Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n/// Input number should be equal\
  \ to the product of all factors\n/// >>> factorize(8)\n/// vec![2, 2, 2]\n/// >>>\
  \ factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2, 5, 7]\nfn factorize(n:\
  \ isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut factors = Vec::new();\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter =\
    \ 1;\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let mut counter\
    \ = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor = 1;\n\
    \    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let\
    \ mut counter = 1;\n    let mut prime_factors = Vec::new();\n    let mut prime_factor\
    \ = 1;\n    let mut factor = 1;\n    let mut counter = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime", "    let mut factors = vec![];\n    let mut\
    \ primes = vec![];\n    let mut prime_factors = vec![];\n    let mut prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max = vec![];\n    let mut prime_factors_count_max_index\
    \ = vec![];\n    let mut prime_factors_count_min = vec![];\n    let mut prime_factors_count_min_index\
    \ = vec![];\n    let mut prime_factors_count_min_max = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime_factors_count_min_max_index = vec![];\n    let mut prime_factors_count_min_max_index\
    \ = vec![];\n    let mut prime_factors_count_min_max_index = vec![];\n    let\
    \ mut prime", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n    factors",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i);\n            i += 1;\n   \
    \     }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_index = Vec::new();\n    let mut prime_factors_count_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_min = Vec::new();\n   \
    \ let mut prime_factors_count_index_max_index = Vec::new();\n    let mut prime_factors_count_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_index_max = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max = Vec::new();\n    let mut\
    \ prime_factors_count_index_min_index_min = Vec::new();\n    let mut prime_factors_count_index_max_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_max = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_min = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_min_index = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_min_index_max = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_min_index_min = Vec::new();\n\
    \    let mut prime_factors_count_index_min_index_max_index_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index_max_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_min_index_max_index_min_index_max_index_min_index_max_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = 1;\n    let mut\
    \ factor = 1;\n    let mut factorization = Vec::new();\n    let mut i = 1;\n \
    \   while i <= n {\n        if n % i == 0 {\n            factors.push(factor);\n\
    \            factors.push(i as isize);\n            factors.push(1);\n       \
    \     factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factors.push(1);\n\
    \            factors.push(1);\n            factors.push(1);\n            factor",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        }\n        i += 1;\n    }\n    factors.push(n);\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            i += 1;\n    \
    \    }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut factorization = factorization(n);\n    let mut prime_factorization\
    \ = factorization(n);\n    let mut prime_factors_copy = prime_factors.clone();\n\
    \    let mut factorization_copy = factorization.clone();\n    let mut prime_factorization_copy\
    \ = prime_factorization.clone();\n    let mut prime_factors_copy_size = prime_factors_copy.len();\n\
    \    let mut factorization_copy_size = factorization_copy.len();\n    let mut\
    \ prime_factorization_copy_size = prime_factorization_copy.len();\n    let mut\
    \ prime_factors_copy_ptr = prime_factors_copy.as_ptr();\n    let mut factorization_copy_ptr\
    \ = factorization_copy.as_ptr();\n    let mut prime_factorization_copy_ptr = prime_factorization_copy.as_ptr();\n\
    \    let mut prime_factors_copy_ptr_size = prime_factors_copy_ptr.len();\n   \
    \ let mut factorization_copy_ptr_size = factorization_copy_ptr.len();\n    let\
    \ mut prime_factorization_copy_ptr_size = prime_factorization_copy_ptr.len();\n\
    \    let mut prime_factors_copy_ptr_ptr = prime_factors_copy_ptr.as_ptr();\n \
    \   let mut factorization_copy_ptr_ptr = factorization_copy_ptr.as_ptr();\n  \
    \  let mut prime_factorization_copy_ptr_ptr = prime_factorization_copy_ptr.as_ptr();\n\
    \    let mut prime_factors_copy_ptr_ptr_size = prime_factors_copy_ptr_ptr.len();\n\
    \    let mut factorization_copy_ptr_ptr_size = factorization_copy_ptr_ptr.len();\n\
    \    let mut prime_factorization_copy_ptr_ptr_size = prime_factorization_copy_ptr_ptr.len();\n\
    \    let mut prime_factors_copy_ptr_ptr_ptr = prime_factors_copy_ptr_ptr.as_ptr();\n\
    \    let mut factorization_copy_ptr_ptr_ptr = factorization_copy_ptr_ptr.as_ptr();\n\
    \    let mut prime_factorization_copy_ptr_ptr_ptr = prime_factorization_copy_ptr_ptr.as_ptr();\n\
    \    let mut prime_factors_copy_ptr_ptr_ptr_size = prime_factors_copy_ptr_ptr_ptr.len();\n\
    \    let mut factorization_copy_ptr_ptr_ptr_size = factorization_copy_ptr_ptr_ptr.len();\n\
    \    let mut prime_factorization_copy_ptr_ptr_ptr_size = prime_factorization_copy_ptr_ptr_ptr.len();\n\
    \    let mut prime_factors_copy_ptr_ptr_ptr_ptr = prime_factors_copy_ptr_ptr_ptr.as_ptr();\n\
    \    let mut factorization_copy_ptr_ptr_ptr_ptr = factor", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut i = 1;\n    let mut j = 1;\n    let mut k = 1;\n  \
    \  let mut prime_factor = 1;\n    let mut factor = 1;\n    while i * j <= n {\n\
    \        if n % i == 0 {\n            primes.push(i);\n            prime_factor\
    \ = 1;\n            while n % i == 0 {\n                prime_factor *= i;\n \
    \               n /= i;\n            }\n            prime_factors.push(prime_factor);\n\
    \        }\n        i += 1;\n        j += 1;\n    }\n    prime_factors.push(1);\n\
    \    while k * prime_factors.len() < n {\n        factors.push(k);\n        prime_factor\
    \ = 1;\n        while k * prime_factors.len() < n {\n            prime_factor\
    \ *= prime_factors.last();\n            n /= prime_factors.last();\n         \
    \   prime_factors.push(prime_factor);\n        }\n        factors.push(k);\n \
    \   }\n    factors.push(prime_factors.len());\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            i += 1;\n        }\n     \
    \   i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            factors.push(i);\n            n /= i;\n     \
    \   }\n        else {\n            primes.push(i);\n            i += 1;\n    \
    \    }\n    }\n    if n > 1 {\n        factors.push(n as isize);\n    }\n    factors.sort_unstable();\n\
    \    primes.sort_unstable();\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factor = 1;\n    let mut prime_factor_counter\
    \ = 1;\n    let mut prime_factor_counters = Vec::new();\n    let mut prime_factor_counters_size\
    \ = prime_factor_counters.len();\n    let mut prime_factor_counters_size_increment\
    \ = prime_factor_counters_size;\n    let mut prime_factor_counters_size_increment_2\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_3\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_4\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_5\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_6\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_7\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_8\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_9\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_10\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_11\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_12\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_13\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_14\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_15\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_16\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_17\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_18\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_19\
    \ = prime_factor_counters_size_increment;\n    let mut prime_factor_counters_size_increment_20\
    \ = prime_factor_counter", "    let mut factors = Vec::new();\n    let mut i =\
    \ 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut primes_size = primes.len();\n    let mut\
    \ primes_size = primes_size as usize;\n    let mut primes_size = primes_size as\
    \ usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n    let mut primes_size = primes_size as usize;\n    let mut primes_size\
    \ = primes_size as usize;\n    let mut primes_size = primes_size as usize;\n \
    \   let mut primes_size = primes_size as usize;\n    let mut primes_size = primes_size\
    \ as usize;\n", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size_max = Vec::new();\n\
    \    let mut primes_size_min = Vec::new();\n    let mut primes_size_max_index\
    \ = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mu", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            i += 1;\n        }\n     \
    \   i += 1;\n    }\n    factors", "    let mut factors = vec![];\n    let mut\
    \ primes = vec![];\n    let mut prime_factors = vec![];\n    let mut prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max = vec![];\n    let mut prime_factors_count_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value = vec![];\n    let mut\
    \ prime_factors_count_max_value_max = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value = vec![];\n \
    \   let mut prime_factors_count_max_value_max_index = vec![];\n    let mut prime_factors_count_max_value_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_index = vec![];\n \
    \   let mut prime_factors_count_max_value_max_value = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value = vec![];\n \
    \   let mut prime_factors_count_max_value_max_index = vec![];\n    let mut prime_factors_count_max_value_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_index = vec![];\n \
    \   let mut prime_factors_count_max_value_max_value = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value = vec![];\n \
    \   let mut prime_factors_count_max_value_max_index = vec![];\n    let mut prime_factors_count_max_value_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_index = vec![];\n \
    \   let mut prime_factors_count_max_value_max_value = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value = vec![];\n \
    \   let mut prime_factors_count_max_value_max_index = vec![];\n    let mut prime_factors_count_max_value_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_index = vec![];\n \
    \   let mut prime_factors_count_max_value_max_value = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value = vec![];\n \
    \   let mut prime_factors_count_max_value_max_index = vec![];\n    let mut prime_factors_count_max_value_max_value\
    \ = vec![];\n    let ", "    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut i = 2;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            primes.push(i);\n            i += 1;\n        }\n    }\n    if n\
    \ > 1 {\n        factors.push(n);\n    }\n    factors.into_iter().map(|x| x *\
    \ x).collect::<Vec<_>>()", "    let mut factors = Vec::new();\n    let mut factor\
    \ = 1;\n    while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut primes_count\
    \ = Vec::new();\n    let mut factors_count = Vec::new();\n    let mut factors_count_max\
    \ = Vec::new();\n    let mut factors_count_min = Vec::new();\n    let mut factors_count_max_index\
    \ = Vec::new();\n    let mut factors_count_min_index = Vec::new();\n    let mut\
    \ factors_count_max_value = Vec::new();\n    let mut factors_count_min_value =\
    \ Vec::new();\n    let mut factors_count_max_value_max = Vec::new();\n    let\
    \ mut factors_count_min_value_max = Vec::new();\n    let mut factors_count_max_value_min\
    \ = Vec::new();\n    let mut factors_count_min_value_min = Vec::new();\n    let\
    \ mut factors_count_max_value_min_index = Vec::new();\n    let mut factors_count_min_value_min_index\
    \ = Vec::new();\n    let mut factors_count_max_value_min_value = Vec::new();\n\
    \    let mut factors_count_min_value_min_value = Vec::new();\n    let mut factors_count_max_value_min_value_max\
    \ = Vec::new();\n    let mut factors_count_min_value_min_value_max = Vec::new();\n\
    \    let mut factors_count_max_value_min_value_min = Vec::new();\n    let mut\
    \ factors_count_min_value_min_value_min = Vec::new();\n    let mut factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut factors_count_min_value_min_value_min_index = Vec::new();\n\
    \    let mut factors_count_max_value_min_value_min_value = Vec::new();\n    let\
    \ mut factors_count_min_value_min_value_min_value = Vec::new();\n    let mut factors_count_max_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut factors_count_min_value_min_value_min_value_max =\
    \ Vec::new();\n    let mut factors_count_max_value_min_value_min_value_min = Vec::new();\n\
    \    let mut factors_count_min_value_min_value_min_value_min = Vec::new();\n \
    \   let mut factors_count_max_value_min_value_min_value_min_index = Vec::new();\n\
    \    let mut factors_count_min_value_min_value_min_value_min_index = Vec::new();\n\
    \    let mut factors_count_max_value_min_value_min_value_min_value = Vec::new();\n\
    \    let mut factors_count_min_value_min_value_min_value_min_value = Vec::new",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      n /= i;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_count = Vec::new();\n\
    \    let mut primes_count_size = Vec::new();\n    let mut primes_count_size =\
    \ Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mut primes_count_size\
    \ = Vec::new();\n    let mut primes_count_size = Vec::new();\n    let mu", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut factorization = Vec::new();\n\
    \    let mut factorization_count = Vec::new();\n    let mut factorization_prime\
    \ = Vec::new();\n    let mut factorization_prime_count = Vec::new();\n    let\
    \ mut factorization_prime_prime = Vec::new();\n    let mut factorization_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime = Vec::new();\n \
    \   let mut factorization_prime_prime_prime_count = Vec::new();\n    let mut factorization_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_count = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_count = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_count = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_prime_count = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_count = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_count = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut i =\
    \ 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut i =\
    \ 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut factor = 1;\n    let mut i = 1;\n    while i <= n {\n        if n % i ==\
    \ 0 {\n            factors.push(factor);\n            factor *= i;\n         \
    \   i += 1;\n        } else {\n            i += 1;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n\
    \    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut factor = 1;\n    let mut i = 1;\n    while i <= n {\n        if n %\
    \ i == 0 {\n            factors.push(factor);\n            factor *= i;\n    \
    \        i += 1;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factors.push(factor);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            n /= i;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n \
    \   factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n  \
    \  while n > 1 {\n        while n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        }\n        factor *= 2;\n    }\n    factors.push(1);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut factor = 1;\n \
    \   while n > 0 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            primes.push(i);\n        \
    \    prime_factors.push(1);\n        }\n        i += 1;\n    }\n    for i in factors.iter_mut()\
    \ {\n        *i /= prime_factors.iter().filter(|&x| x == *i).count();\n    }\n\
    \    prime_factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let mut\
    \ i = 2;\n    while i < n {\n        if primes[i] == true {\n            factors.push(i\
    \ as isize);\n            i += 1;\n        }\n        while i < n && primes[i]\
    \ == false {\n            i += 1;\n        }\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            primes.push(i);\n        }\n        i += 1;\n    }\n    for i in\
    \ factors.iter_mut() {\n        *i /= primes.iter().filter(|&i| i == *i).count();\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size_max\
    \ = Vec::new();\n    let mut primes_size_min = Vec::new();\n    let mut primes_size_max_index\
    \ = Vec::new();\n    let mut primes_size_min_index = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mut primes_size_min_value\
    \ = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n    let mut\
    \ primes_size_min_value = Vec::new();\n    let mut primes_size_max_value = Vec::new();\n\
    \    let mut primes_size_min_value = Vec::new();\n    let mut primes_size_max_value\
    \ = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n    let mut\
    \ primes_size_max_value = Vec::new();\n    let mut primes_size_min_value = Vec::new();\n\
    \    let mut primes_size_max_value = Vec::new();\n    let mu", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_count = Vec::new();\n    let mut factorization_primes\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_prime", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut factorization = Vec::new();\n    let mut factorization_prime = Vec::new();\n\
    \    let mut factorization_prime_prime = Vec::new();\n    let mut factorization_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_prime = Vec::new();\n    let\
    \ mut factorization_prime_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime",
  "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n   \
    \     if n % i == 0 {\n            factors.push(i);\n            n /= i;\n   \
    \     }\n        i += 1;\n    }\n    factors.push(n);\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            i += 1;\n    \
    \    }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors.push(n);\n    factors",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n\
    \        while n % factor == 0 {\n            factors.push(factor);\n        \
    \    n /= factor;\n        }\n        factors.push(1);\n        factor += 1;\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    if n > 1 {\n    \
    \    factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        else {\n            i += 1;\n        }\n  \
    \  }\n    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut factors_size = Vec::new();\n\
    \    let mut factors_size2 = Vec::new();\n    let mut factors_size3 = Vec::new();\n\
    \    let mut factors_size4 = Vec::new();\n    let mut factors_size5 = Vec::new();\n\
    \    let mut factors_size6 = Vec::new();\n    let mut factors_size7 = Vec::new();\n\
    \    let mut factors_size8 = Vec::new();\n    let mut factors_size9 = Vec::new();\n\
    \    let mut factors_size10 = Vec::new();\n    let mut factors_size11 = Vec::new();\n\
    \    let mut factors_size12 = Vec::new();\n    let mut factors_size13 = Vec::new();\n\
    \    let mut factors_size14 = Vec::new();\n    let mut factors_size15 = Vec::new();\n\
    \    let mut factors_size16 = Vec::new();\n    let mut factors_size17 = Vec::new();\n\
    \    let mut factors_size18 = Vec::new();\n    let mut factors_size19 = Vec::new();\n\
    \    let mut factors_size20 = Vec::new();\n    let mut factors_size21 = Vec::new();\n\
    \    let mut factors_size22 = Vec::new();\n    let mut factors_size23 = Vec::new();\n\
    \    let mut factors_size24 = Vec::new();\n    let mut factors_size25 = Vec::new();\n\
    \    let mut factors_size26 = Vec::new();\n    let mut factors_size27 = Vec::new();\n\
    \    let mut factors_size28 = Vec::new();\n    let mut factors_size29 = Vec::new();\n\
    \    let mut factors_size30 = Vec::new();\n    let mut factors_size31 = Vec::new();\n\
    \    let mut factors_size32 = Vec::new();\n    let mut factors_size33 = Vec::new();\n\
    \    let mut factors_size34 = Vec::new();\n    let mut factors_size35 = Vec::new();\n\
    \    let mut factors_size36 = Vec::new();\n    let mut factors_size37 = Vec::new();\n\
    \    let mut factors_size38 = Vec::new();\n", "    let mut factors = Vec::new();\n\
    \    let mut primes = vec![true; n + 1];\n    primes[0] = false;\n    for i in\
    \ 1..=n {\n        if primes[i] {\n            for j in 2..=i {\n            \
    \    if i % j == 0 {\n                    primes[j] = false;\n               \
    \     break;\n                }\n            }\n        }\n        if primes[i]\
    \ {\n            factors.push(i);\n        }\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            i += 1;\n        }\n\
    \        else {\n            i += 1;\n        }\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut i = 2;\n    while i <= n {\n        if n % i == 0\
    \ {\n            factors.push(i);\n            primes.push(i);\n        }\n  \
    \      i += 1;\n    }\n    for i in factors {\n        for j in primes {\n   \
    \         if i == j {\n                prime_factors.push(i);\n            }\n\
    \        }\n    }\n    prime_factors", "    let mut factors = Vec::new();\n  \
    \  let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let\
    \ mut primes_size = Vec::new();\n    let mut primes_size = Vec::", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter\
    \ = Vec::new();\n    let mut prime_counter2 = Vec::new();\n    let mut prime_counter3\
    \ = Vec::new();\n    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5\
    \ = Vec::new();\n    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7\
    \ = Vec::new();\n    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9\
    \ = Vec::new();\n    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11\
    \ = Vec::new();\n    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13\
    \ = Vec::new();\n    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15\
    \ = Vec::new();\n    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17\
    \ = Vec::new();\n    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19\
    \ = Vec::new();\n    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21\
    \ = Vec::new();\n    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23\
    \ = Vec::new();\n    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25\
    \ = Vec::new();\n    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27\
    \ = Vec::new();\n    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29\
    \ = Vec::new();\n    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31\
    \ = Vec::new();\n    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33\
    \ = Vec::new();\n    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35\
    \ = Vec::new();\n    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37\
    \ = Vec::new();\n    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39\
    \ = Vec::", "    let mut factors = vec![];\n    let mut i = 1;\n    while i *\
    \ i <= n {\n        if n % i == 0 {\n            factors.push(i);\n          \
    \  i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = vec![true; n + 1];\n    let mut i = 2;\n\
    \    while i < n {\n        if primes[i] {\n            factors.push(i);\n   \
    \         primes[i] = false;\n        }\n        while i * i < n && primes[i *\
    \ i] {\n            i += 1;\n        }\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        while n %\
    \ factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor *= 2;\n    }\n    factors.push(1);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut i =\
    \ 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_primes = Vec::new();\n    let mut factorization_prime_factors\
    \ = Vec::new();\n    let mut factorization_prime_factors_count = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max = Vec::new();\n    let mut\
    \ factorization_prime_factors_count_max_index = Vec::new();\n    let mut factorization_prime_factors_count_max_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_prime_value_value_value\
    \ = ", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n\
    \    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            i += 1;\n        }\n     \
    \   i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_value = Vec::new();\n    let mut prime_factors_count_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_value_min_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_value\
    \ = Vec::new();\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter =\
    \ Vec::new();\n    let mut prime_counter2 = Vec::new();\n    let mut prime_counter3\
    \ = Vec::new();\n    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5\
    \ = Vec::new();\n    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7\
    \ = Vec::new();\n    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9\
    \ = Vec::new();\n    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11\
    \ = Vec::new();\n    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13\
    \ = Vec::new();\n    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15\
    \ = Vec::new();\n    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17\
    \ = Vec::new();\n    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19\
    \ = Vec::new();\n    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21\
    \ = Vec::new();\n    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23\
    \ = Vec::new();\n    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25\
    \ = Vec::new();\n    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27\
    \ = Vec::new();\n    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29\
    \ = Vec::new();\n    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31\
    \ = Vec::new();\n    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33\
    \ = Vec::new();\n    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35\
    \ = Vec::new();\n    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37\
    \ = Vec::new();\n    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39\
    \ = Vec::", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n\
    \    let mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n   \
    \ let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_value = Vec::new();\n    let mut prime_factors_count_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_value_min_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_value\
    \ = Vec::new();\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counters = Vec::new();\n    let mut prime_counters_sorted =\
    \ Vec::new();\n    let mut prime_counters_sorted_reverse = Vec::new();\n    let\
    \ mut prime_counters_sorted_reverse_sorted = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse_sorted_reverse\
    \ = Vec::new();\n    let mut prime_counters_sorted_reverse_sorted_reverse_sorted_reverse_sorted_",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            i += 1;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut factorization = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n    let mut factorization_size\
    \ = Vec::", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut factors_count = Vec::new();\n    let mut factors_count_temp = Vec::new();\n\
    \    let mut factors_count_temp2 = Vec::new();\n    let mut factors_count_temp3\
    \ = Vec::new();\n    let mut factors_count_temp4 = Vec::new();\n    let mut factors_count_temp5\
    \ = Vec::new();\n    let mut factors_count_temp6 = Vec::new();\n    let mut factors_count_temp7\
    \ = Vec::new();\n    let mut factors_count_temp8 = Vec::new();\n    let mut factors_count_temp9\
    \ = Vec::new();\n    let mut factors_count_temp10 = Vec::new();\n    let mut factors_count_temp11\
    \ = Vec::new();\n    let mut factors_count_temp12 = Vec::new();\n    let mut factors_count_temp13\
    \ = Vec::new();\n    let mut factors_count_temp14 = Vec::new();\n    let mut factors_count_temp15\
    \ = Vec::new();\n    let mut factors_count_temp16 = Vec::new();\n    let mut factors_count_temp17\
    \ = Vec::new();\n    let mut factors_count_temp18 = Vec::new();\n    let mut factors_count_temp19\
    \ = Vec::new();\n    let mut factors_count_temp20 = Vec::new();\n    let mut factors_count_temp21\
    \ = Vec::new();\n    let mut factors_count_temp22 = Vec::new();\n    let mut factors_count_temp23\
    \ = Vec::new();\n    let mut factors_count_temp24 = Vec::new();\n    let mut factors_count_temp25\
    \ = Vec::new();\n    let mut factors_count_temp26 = Vec::new();\n    let mut factors_count_temp27\
    \ = Vec::new();\n    let mut factors_count_temp28 = Vec::new();\n    let mut factors_count_temp29\
    \ = Vec::new();\n    let mut factors_count_temp30 = Vec::new();\n    let mut factors_count_temp31\
    \ = Vec::new();\n    let mut factors_count_temp32 = Vec::new();\n    let mut factors_count_temp33\
    \ = Vec::new();\n    let mut factors_count_temp34 = ", "    let mut factors =\
    \ vec![];\n    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            factors.push(i);\n            i += 1;\n        }\n        i += 1;\n\
    \    }\n    factors", "    let mut factors = Vec::new();\n    let mut factor =\
    \ 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n != 1 {\n        if n % factor\
    \ == 0 {\n            factors.push(factor);\n            n /= factor;\n      \
    \  } else {\n            factor *= factor;\n        }\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut factorization = Vec::new();\n    let mut factorization_count = Vec::new();\n\
    \    let mut factorization_primes = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_primes_count\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_primes_count = Vec::new();\n    let mut factorization_prime",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n\
    \        if n % factor == 0 {\n            factors.push(factor);\n           \
    \ n /= factor;\n        } else {\n            factor *= factor;\n        }\n \
    \   }\n    factors.push(factor);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    i += 1;\n        }\n        else {\n            i += 1;\n        }\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size_rev = Vec::new();\n\
    \    let mut primes_size_rev_size = Vec::new();\n    let mut primes_size_rev_size_rev\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size = Vec::new();\n   \
    \ let mut primes_size_rev_size_rev_size_rev = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev = Vec::new();\n\
    \    let mut primes_size_rev_size_rev_size_rev_size_rev_size = Vec::new();\n \
    \   let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev = Vec::new();\n\
    \    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size = Vec::new();\n\
    \    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev = Vec::new();\n\
    \    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size_rev_size\
    \ = Vec::new();\n    let mut primes_size_rev_size_rev_size_rev_size_rev_size_rev_size_re",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            primes.push(i);\n            i += 1;\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    factors.push(n - 1);\n    primes.push(n -\
    \ 1);\n    factors.sort_unstable();\n    primes.sort_unstable();\n    factors",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors.push(n);\n    factors",
  "    let mut factors = Vec::new();\n    let mut factor = 1;\n    while n > 0 {\n\
    \        if n % factor == 0 {\n            factors.push(factor);\n           \
    \ n /= factor;\n        } else {\n            factor *= factor;\n        }\n \
    \   }\n    factors", "    let mut factors = Vec::new();\n    let mut primes =\
    \ Vec::new();\n    let mut prime_counter = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_counters = Vec::new();\n    let mut prime_factors_counter\
    \ = Vec::new();\n    let mut prime_factors_counters = Vec::new();\n    let mut\
    \ prime_factors_counters_counter = Vec::new();\n    let mut prime_factors_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counter = Vec::new();\n\
    \    let mut prime_factors_counters_counters_counters = Vec::new();\n    let mut\
    \ prime_factors_counters_counters_counters_counter = Vec::new();\n    let mut\
    \ prime_factors_counters_counters_counters_counters = Vec::new();\n    let mut\
    \ prime_factors_counters_counters_counters_counters_counter = Vec::new();\n  \
    \  let mut prime_factors_counters_counters_counters_counters_counters = Vec::new();\n\
    \    let mut prime_factors_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters_counters\
    \ = Vec::new();\n    let mut prime_factors_counters_counters_counters_counters_counters_counters_counters_counters_counter\
    \ = Vec::new();\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = Vec::new();\n \
    \   let mut prime_counter2 = Vec::new();\n    let mut prime_counter3 = Vec::new();\n\
    \    let mut prime_counter4 = Vec::new();\n    let mut prime_counter5 = Vec::new();\n\
    \    let mut prime_counter6 = Vec::new();\n    let mut prime_counter7 = Vec::new();\n\
    \    let mut prime_counter8 = Vec::new();\n    let mut prime_counter9 = Vec::new();\n\
    \    let mut prime_counter10 = Vec::new();\n    let mut prime_counter11 = Vec::new();\n\
    \    let mut prime_counter12 = Vec::new();\n    let mut prime_counter13 = Vec::new();\n\
    \    let mut prime_counter14 = Vec::new();\n    let mut prime_counter15 = Vec::new();\n\
    \    let mut prime_counter16 = Vec::new();\n    let mut prime_counter17 = Vec::new();\n\
    \    let mut prime_counter18 = Vec::new();\n    let mut prime_counter19 = Vec::new();\n\
    \    let mut prime_counter20 = Vec::new();\n    let mut prime_counter21 = Vec::new();\n\
    \    let mut prime_counter22 = Vec::new();\n    let mut prime_counter23 = Vec::new();\n\
    \    let mut prime_counter24 = Vec::new();\n    let mut prime_counter25 = Vec::new();\n\
    \    let mut prime_counter26 = Vec::new();\n    let mut prime_counter27 = Vec::new();\n\
    \    let mut prime_counter28 = Vec::new();\n    let mut prime_counter29 = Vec::new();\n\
    \    let mut prime_counter30 = Vec::new();\n    let mut prime_counter31 = Vec::new();\n\
    \    let mut prime_counter32 = Vec::new();\n    let mut prime_counter33 = Vec::new();\n\
    \    let mut prime_counter34 = Vec::new();\n    let mut prime_counter35 = Vec::new();\n\
    \    let mut prime_counter36 = Vec::new();\n    let mut prime_counter37 = Vec::new();\n\
    \    let mut prime_counter38 = Vec::new();\n    let mut prime_counter39 = Vec::",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n   \
    \     factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut factor = 1;\n    let mut\
    \ i = 1;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(factor);\n\
    \            primes.push(i as isize);\n            factor = 1;\n        } else\
    \ {\n            factor *= i;\n        }\n        i += 1;\n    }\n    for i in\
    \ primes.iter_mut() {\n        prime_factors.push(i);\n    }\n    factors.push(factor);\n\
    \    prime_factors.push(primes.len() as isize);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter =\
    \ 1;\n    let mut factor = 1;\n    let mut prime_factor = 1;\n    let mut prime_factor_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse = 1;\n    let mut prime_factor_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse = 1;\n    let\
    \ mut prime_factor_counter_reverse_counter_reverse_counter = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter_reverse_counter\
    \ = 1;\n    let mut prime_factor", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_count = Vec::new();\n    let mut factorization_prime\
    \ = Vec::new();\n    let mut factorization_prime_count = Vec::new();\n\n    let\
    \ mut prime_factors_count = prime_factors_count.clone();\n    let mut factorization_prime_count\
    \ = factorization_prime_count.clone();\n\n    let mut prime_factors = prime_factors.clone();\n\
    \    let mut factorization = factorization.clone();\n\n    let mut factors = factors.clone();\n\
    \n    let mut primes = primes.clone();\n\n    let mut factorization = factorization.clone();\n\
    \n    let mut factors = factors.clone();\n\n    let mut prime_factors = prime_factors.clone();\n\
    \n    let mut factorization = factorization.clone();\n\n    let mut factors =\
    \ factors.clone();\n\n    let mut primes = primes.clone();\n\n    let mut factorization\
    \ = factorization.clone();\n\n    let mut factors = factors.clone();\n\n    let\
    \ mut prime_factors = prime_factors.clone();\n\n    let mut factorization = factorization.clone();\n\
    \n    let mut factors = factors.clone();\n\n    let mut primes = primes.clone();\n\
    \n    let mut factorization = factorization.clone();\n\n    let mut factors =\
    \ factors.clone();\n\n    let mut prime_factors = prime_factors.clone();\n\n \
    \   let mut factorization = factorization.clone();\n\n    let mut factors = factors.clone();\n\
    \n    let mut primes = primes.clone();\n\n    let mut factorization = factorization.clone();\n\
    \n    let mut factors = factors.clone();\n\n    let mut prime_factors = prime_factors.clone();\n\
    \n    let mut factorization = factorization.clone();\n\n    let mut factors =\
    \ factors.clone();\n\n    let mut primes = primes.clone();\n\n    let mut factorization\
    \ = factorization.clone();\n\n    let mut factors = factors.clone();\n\n    let\
    \ mut prime_factors = prime_factors.clone();\n\n    let mut factorization = factorization.clone();\n\
    \n    let mut factors = factors.clone();\n\n    let mut primes = primes.clone();\n\
    \n    let mut factorization = factorization.clone();\n\n    let mut factors =\
    \ factors.clone();\n\n    let mut prime_factors = prime_factors.clone();\n\n \
    \   let mut factorization = factorization.clone();\n\n    let mut factors = factors.clone();\n\
    \n    let mut primes = primes.clone();\n\n    let mut factorization = factor",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_index = Vec::new();\n    let mut prime_factors_count_max_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min = Vec::new();\n    let\
    \ mut prime_factors_count_max_value_min_value_max = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_", "    let mut factors = Vec::new();\n\
    \    let mut primes = vec![true; n + 1];\n    let mut i = 2;\n    while i < n\
    \ {\n        if primes[i] {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        while i < n && n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut factorization = Vec::new();\n    let mut factorization_size = Vec::new();\n\
    \    let mut factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut factorization_size_limit = Vec::new();\n    let mut\
    \ factorization_size_limit = Vec::new();\n    let mut factorization_size_limit\
    \ = Vec::new();\n    let mut ", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime = Vec::new();\n   \
    \ let mut prime_factors_count_max_prime_prime = Vec::new();\n    let mut prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n    let mut\
    \ prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        else {\n            i += 1;\n       \
    \ }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut i =\
    \ 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        }\n        i += 1;\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            primes.push(i);\n            i += 1;\n        }\n        else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n - 1);\n    primes.push(n\
    \ - 1);\n    factors.sort_unstable();\n    primes.sort_unstable();\n    factors",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut i = 1;\n    let mut j = 1;\n    let\
    \ mut k = 1;\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    while\
    \ i <= n {\n        if n % i == 0 {\n            prime_factor = 1;\n         \
    \   while i <= n {\n                if n % i == 0 {\n                    prime_factor\
    \ *= i;\n                    prime_factors.push(prime_factor);\n             \
    \       i += 1;\n                } else {\n                    break;\n      \
    \          }\n            }\n            prime_factors.push(prime_factor);\n \
    \           i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    prime_factors.sort_unstable();\n    prime_factors.reverse();\n    for i in\
    \ prime_factors {\n        factors.push(factor);\n        factor += i;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = primes.len();\n    let mut primes_size = primes_size.saturating_add((n\
    \ - 1) / 2);\n    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut primes_size = primes_size.saturating_add(primes_size.saturating_mul(primes_size));\n\
    \    let mut ", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut primes_size\
    \ = Vec::", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = vec![];\n    let mut primes = vec![];\n    let mut prime_factors =\
    \ vec![];\n    let mut i = 2;\n    while i < n {\n        if n % i == 0 {\n  \
    \          factors.push(i);\n            primes.push(i);\n            prime_factors.push(i);\n\
    \            while n % i == 0 {\n                n /= i;\n                factors.push(i);\n\
    \                primes.push(i);\n                prime_factors.push(i);\n   \
    \         }\n        }\n        i += 1;\n    }\n    for i in factors.iter_mut()\
    \ {\n        *i /= prime_factors.iter().filter(|&x| x == i).count();\n    }\n\
    \    prime_factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n\
    \    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter\
    \ = Vec::new();\n    let mut factor = 1;\n    let mut prime_counter_index = 0;\n\
    \    let mut prime_counter_value = 1;\n    let mut prime_counter_value_index =\
    \ 0;\n    let mut prime_counter_value_value = 1;\n    let mut prime_counter_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value = 1;\n    let mut prime_counter_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value = 1;\n    let mut prime_counter_value_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value_value = 1;\n    let\
    \ mut prime_counter_value_value_value_value_index = 0;\n    let mut prime_counter_value_value_value_value_value\
    \ = 1;\n    let mut prime_counter_value_value_value_value_index = 0;\n    let\
    \ mut prime_counter_value_value_value_value_value = 1;\n    let mut prime_counter_value_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value_value = 1;\n    let\
    \ mut prime_counter_value_value_value_value_index = 0;\n    let mut prime_counter_value_value_value_value_value\
    \ = 1;\n    let mut prime_counter_value_value_value_value_index = 0;\n    let\
    \ mut prime_counter_value_value_value_value_value = 1;\n    let mut prime_counter_value_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value_value = 1;\n    let\
    \ mut prime_counter_value_value_value_value_index = 0;\n    let mut prime_counter_value_value_value_value_value\
    \ = 1;\n    let mut prime_counter_value_value_value_value_index = 0;\n    let\
    \ mut prime_counter_value_value_value_value_value = 1;\n    let mut prime_counter_value_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value_value = 1;\n    let\
    \ mut prime_counter_value_value_value_value_index = 0;\n    let mut prime_counter_value_value_value_value_value\
    \ = 1;\n    let mut prime_counter_value_value_value_value_index = 0;\n    let\
    \ mut prime_counter_value_value_value_value_value = 1;\n    let mut prime_counter_value_value_value_value_index\
    \ = 0;\n    let mut prime_counter_value_value_value_value_value = 1;\n    let\
    \ mut prime_counter_value_value_value_value_index = 0;\n    let mut prime_counter_value_value_value_value_value\
    \ = 1;\n    let mut prime_counter_value_value_value_value_index = 0;\n    let\
    \ mut prime_counter_value_value_value_value_value = 1;\n", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    factors.push(n);\n    factors", " \
    \   let mut factors = vec![];\n    let mut i = 1;\n    while i * i <= n {\n  \
    \      if n % i == 0 {\n            factors.push(i);\n            i += 1;\n  \
    \      }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut factor = 1;\n    let mut prime_factor = 1;\n    let mut prime_factor_counter\
    \ = 1;\n    let mut prime_factor_counter_reverse = 1;\n    let mut prime_factor_counter_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse = 1;\n    let mut\
    \ prime_factor_counter_reverse_temp_reverse_temp = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp\
    \ = 1;\n    let mut prime_factor_counter_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp_reverse_temp",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_counter = Vec::new();\n    let mut prime_counter2 = Vec::new();\n    let\
    \ mut prime_counter3 = Vec::new();\n    let mut prime_counter4 = Vec::new();\n\
    \    let mut prime_counter5 = Vec::new();\n    let mut prime_counter6 = Vec::new();\n\
    \    let mut prime_counter7 = Vec::new();\n    let mut prime_counter8 = Vec::new();\n\
    \    let mut prime_counter9 = Vec::new();\n    let mut prime_counter10 = Vec::new();\n\
    \    let mut prime_counter11 = Vec::new();\n    let mut prime_counter12 = Vec::new();\n\
    \    let mut prime_counter13 = Vec::new();\n    let mut prime_counter14 = Vec::new();\n\
    \    let mut prime_counter15 = Vec::new();\n    let mut prime_counter16 = Vec::new();\n\
    \    let mut prime_counter17 = Vec::new();\n    let mut prime_counter18 = Vec::new();\n\
    \    let mut prime_counter19 = Vec::new();\n    let mut prime_counter20 = Vec::new();\n\
    \    let mut prime_counter21 = Vec::new();\n    let mut prime_counter22 = Vec::new();\n\
    \    let mut prime_counter23 = Vec::new();\n    let mut prime_counter24 = Vec::new();\n\
    \    let mut prime_counter25 = Vec::new();\n    let mut prime_counter26 = Vec::new();\n\
    \    let mut prime_counter27 = Vec::new();\n    let mut prime_counter28 = Vec::new();\n\
    \    let mut prime_counter29 = Vec::new();\n    let mut prime_counter30 = Vec::new();\n\
    \    let mut prime_counter31 = Vec::new();\n    let mut prime_counter32 = Vec::new();\n\
    \    let mut prime_counter33 = Vec::new();\n    let mut prime_counter34 = Vec::new();\n\
    \    let mut prime_counter35 = Vec::new();\n    let mut prime_counter36 = Vec::new();\n\
    \    let mut prime_counter37 = Vec::new();\n    let mut prime_counter38 = Vec::new();\n\
    \    let mut prime_counter39 = Vec::", "    let mut factors = Vec::new();\n  \
    \  let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n         \
    \   factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n          \
    \  i += 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec", "    let mut factors = vec![];\n    let mut i = 1;\n    while i * i\
    \ <= n {\n        if n % i == 0 {\n            factors.push(i);\n            i\
    \ += 1;\n        }\n        else {\n            i += 1;\n        }\n    }\n  \
    \  factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = vec![true; n + 1];\n    primes[0]\
    \ = false;\n    for i in 1..=n {\n        if primes[i] {\n            let mut\
    \ j = 1;\n            while j < i {\n                if i % j == 0 {\n       \
    \             factors.push(j);\n                    break;\n                }\n\
    \                j += 1;\n            }\n        }\n    }\n    factors", "   \
    \ let mut factors = Vec::new();\n    let mut primes = vec![true; n];\n    let\
    \ mut i = 2;\n    while i < n {\n        if primes[i] {\n            factors.push(i\
    \ as isize);\n            i += 1;\n        }\n        else {\n            primes[i]\
    \ = false;\n            i += 1;\n        }\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors\
    \ = Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_min_value = Vec::new();\n    let mut prime_factors_count_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_value_min_value_min = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min_value_value\
    \ = Vec::new();\n    let mut prime_factors_", "    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        while n % factor == 0 {\n\
    \            factors.push(factor);\n            n /= factor;\n        }\n    \
    \    factor += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n \
    \   let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_counter = Vec::new();\n    let mut prime_counters = Vec::new();\n\
    \    let mut prime_counters_sorted = Vec::new();\n    let mut prime_counters_sorted_reversed\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted = Vec::new();\n\
    \    let mut prime_counters_sorted_reversed_sorted_sorted = Vec::new();\n    let\
    \ mut prime_counters_sorted_reversed_sorted_sorted_sorted = Vec::new();\n    let\
    \ mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted = Vec::new();\n\
    \    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = Vec::new();\n    let mut prime_counters_sorted_reversed_sorted_sorted_sorted_",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut factorization = Vec::new();\n    let\
    \ mut factorization_primes = Vec::new();\n    let mut factorization_prime_factors\
    \ = Vec::new();\n    let mut factorization_prime_factors_count = Vec::new();\n\
    \    let mut factorization_prime_factors_count_max = Vec::new();\n    let mut\
    \ factorization_prime_factors_count_max_index = Vec::new();\n    let mut factorization_prime_factors_count_max_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max =\
    \ Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_max_max\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_value_max_value_index_max_max_max\
    \ = Vec::new();\n    let mut factorization_prime", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = vec![];\n    let mut i = 1;\n    while i\
    \ * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n        \
    \    n /= i;\n            i += 1;\n        } else {\n            i += 1;\n   \
    \     }\n    }\n    factors.push(n);\n    factors", "    let mut factors = vec![];\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min_index = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = ", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut i = 1;\n    while\
    \ i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n      \
    \      i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let mut\
    \ factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if\
    \ n % i == 0 {\n            factors.push(i);\n            n /= i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    factors.push(n);\n    factors",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n        \
    \    factors.push(i);\n            primes.push(i);\n            prime_factors.push(i);\n\
    \        }\n        i += 1;\n    }\n    for i in factors.iter() {\n        for\
    \ j in prime_factors.iter() {\n            if j % i == 0 {\n                factors.push(i);\n\
    \                prime_factors.push(j);\n                break;\n            }\n\
    \        }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n    let mut\
    \ primes_size = Vec::new();\n    let mut primes_size = Vec::", "    let mut factors\
    \ = Vec::new();\n    let mut factor = 1;\n    while n > 1 {\n        while n %\
    \ factor == 0 {\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor *= 2;\n    }\n    factors.push(1);\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut i = 1;\n    let mut j = 1;\n    let\
    \ mut k = 1;\n    let mut factor = 1;\n    while i <= n {\n        while n % i\
    \ == 0 {\n            factors.push(factor);\n            primes.push(i as isize);\n\
    \            prime_factors.push(factor);\n            i += 1;\n        }\n   \
    \     factor = 1;\n        i += 1;\n    }\n    factors.push(factor);\n    primes.push(n\
    \ as isize);\n    prime_factors.push(factor);\n    while prime_factors.len() >\
    \ 0 {\n        let mut i = prime_factors.len() - 1;\n        while i >= 0 {\n\
    \            let mut j = i;\n            while j > 0 {\n                let mut\
    \ k = j;\n                while k >= 0 {\n                    let mut factor =\
    \ prime_factors[k];\n                    factor *= primes[j];\n              \
    \      prime_factors[k] -= factor;\n                    primes[j] -= factor;\n\
    \                    j -= 1;\n                    k -= 1;\n                }\n\
    \                j -= 1;\n            }\n            i -= 1;\n        }\n    }\n\
    \    prime_factors", "    let mut factors = Vec::new();\n    let mut factor =\
    \ 1;\n    while n > 1 {\n        if n % factor == 0 {\n            factors.push(factor);\n\
    \            n /= factor;\n        } else {\n            factor *= factor;\n \
    \       }\n    }\n    factors.push(factor);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors =\
    \ Vec::new();\n    let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_index = Vec::new();\n   \
    \ let mut prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_max = Vec::new();\n    let\
    \ mut prime_factors_count_min_max_index = Vec::new();\n    let mut prime_factors_count_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_index_max = Vec::new();\n    let\
    \ mut prime_factors_count_max_min_max_index_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_index_min_index_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_index_min_index_min_index = Vec::new();\n  \
    \  let mut prime_factors_count_max_min_max_index_min_index_min_index_max = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_min_index_max\
    \ = Vec::new", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::new();\n    let mut primes_size = Vec::new();\n\
    \    let mut primes_size = Vec::", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            i += 1;\n    \
    \    }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors", "    let mut factors\
    \ = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter =\
    \ Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_counter = Vec::new();\n    let mut\
    \ factorization_prime = Vec::new();\n    let mut factorization_prime_counter =\
    \ Vec::new();\n    let mut factorization_prime_factor = Vec::new();\n    let mut\
    \ factorization_prime_factor_counter = Vec::new();\n    let mut factorization_prime_factor_counter2\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter3 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter4 = Vec::new();\n    let mut factorization_prime_factor_counter5\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter6 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter7 = Vec::new();\n    let mut factorization_prime_factor_counter8\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter9 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter10 = Vec::new();\n    let mut factorization_prime_factor_counter11\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter12 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter13 = Vec::new();\n    let mut factorization_prime_factor_counter14\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter15 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter16 = Vec::new();\n    let mut factorization_prime_factor_counter17\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter18 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter19 = Vec::new();\n    let mut factorization_prime_factor_counter20\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter21 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter22 = Vec::new();\n    let mut factorization_prime_factor_counter23\
    \ = Vec::new();\n    let mut factorization_prime_factor_counter24 = Vec::new();\n\
    \    let mut factorization_prime_factor_counter25 = Vec::new();\n    let mut factorization_prime_factor_counter26\
    \ = Vec::new();\n    let mut ", "    let mut factors = Vec::new();\n    let mut\
    \ i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            n /= i;\n    \
    \        i += 1;\n        }\n        else {\n            i += 1;\n        }\n\
    \    }\n    factors.push(n);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = vec![true; n];\n    let mut prime_factors = Vec::new();\n\
    \    let mut prime_factors_counter = Vec::new();\n    let mut prime_factors_counter2\
    \ = Vec::new();\n    let mut prime_factors_counter3 = Vec::new();\n    let mut\
    \ prime_factors_counter4 = Vec::new();\n    let mut prime_factors_counter5 = Vec::new();\n\
    \    let mut prime_factors_counter6 = Vec::new();\n    let mut prime_factors_counter7\
    \ = Vec::new();\n    let mut prime_factors_counter8 = Vec::new();\n    let mut\
    \ prime_factors_counter9 = Vec::new();\n    let mut prime_factors_counter10 =\
    \ Vec::new();\n    let mut prime_factors_counter11 = Vec::new();\n    let mut\
    \ prime_factors_counter12 = Vec::new();\n    let mut prime_factors_counter13 =\
    \ Vec::new();\n    let mut prime_factors_counter14 = Vec::new();\n    let mut\
    \ prime_factors_counter15 = Vec::new();\n    let mut prime_factors_counter16 =\
    \ Vec::new();\n    let mut prime_factors_counter17 = Vec::new();\n    let mut\
    \ prime_factors_counter18 = Vec::new();\n    let mut prime_factors_counter19 =\
    \ Vec::new();\n    let mut prime_factors_counter20 = Vec::new();\n    let mut\
    \ prime_factors_counter21 = Vec::new();\n    let mut prime_factors_counter22 =\
    \ Vec::new();\n    let mut prime_factors_counter23 = Vec::new();\n    let mut\
    \ prime_factors_counter24 = Vec::new();\n    let mut prime_factors_counter25 =\
    \ Vec::new();\n    let mut prime_factors_counter26 = Vec::new();\n    let mut\
    \ prime_factors_counter27 = Vec::new();\n    let mut prime_factors_counter28 =\
    \ Vec::new();\n    let mut prime_factors_counter29 = Vec::new();\n    let mut\
    \ prime_factors_counter30 = Vec::new();\n    let mut prime_factors_counter31 =\
    \ Vec::new();\n    let mut prime_factors_counter32 = Vec::new();\n    let mut\
    \ prime_factors_counter33 = Vec::new();\n    let mut prime_factors_counter34 =\
    \ Vec::new();\n    let mut prime_factors_counter35 = Vec::new();\n    let ", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    factors.push(n);\n    factors", "    let mut factors = vec![];\n    let mut\
    \ primes = vec![];\n    let mut prime_factors = vec![];\n    let mut prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_index = vec![];\n    let mut prime_factors_count_index2\
    \ = vec![];\n    let mut prime_factors_count_index3 = vec![];\n    let mut prime_factors_count_index4\
    \ = vec![];\n    let mut prime_factors_count_index5 = vec![];\n    let mut prime_factors_count_index6\
    \ = vec![];\n    let mut prime_factors_count_index7 = vec![];\n    let mut prime_factors_count_index8\
    \ = vec![];\n    let mut prime_factors_count_index9 = vec![];\n    let mut prime_factors_count_index10\
    \ = vec![];\n    let mut prime_factors_count_index11 = vec![];\n    let mut prime_factors_count_index12\
    \ = vec![];\n    let mut prime_factors_count_index13 = vec![];\n    let mut prime_factors_count_index14\
    \ = vec![];\n    let mut prime_factors_count_index15 = vec![];\n    let mut prime_factors_count_index16\
    \ = vec![];\n    let mut prime_factors_count_index17 = vec![];\n    let mut prime_factors_count_index18\
    \ = vec![];\n    let mut prime_factors_count_index19 = vec![];\n    let mut prime_factors_count_index20\
    \ = vec![];\n    let mut prime_factors_count_index21 = vec![];\n    let mut prime_factors_count_index22\
    \ = vec![];\n    let mut prime_factors_count_index23 = vec![];\n    let mut prime_factors_count_index24\
    \ = vec![];\n    let mut prime_factors_count_index25 = vec![];\n    let mut prime_factors_count_index26\
    \ = vec![];\n    let mut prime_factors_count_index27 = vec![];\n    let mut prime_factors_count_index28\
    \ = vec![];\n    let mut prime_factors_count_index29 = vec![];\n    let mut prime_factors_count_index30\
    \ = vec![];\n    let mut prime_factors_count_index31 = vec![];\n    let mut prime_factors_count_index32\
    \ = vec![];\n    let mut prime_factors_count_index33 = vec![];\n    let mut prime_factors_count_index34\
    \ = vec![];\n    let mut prime_factors_count_index35 = ", "    let mut factors\
    \ = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n        if n % i\
    \ == 0 {\n            factors.push(i);\n            i += 1;\n        }\n     \
    \   i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n    let\
    \ mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_counter\
    \ = 1;\n    let mut prime_factor = 1;\n    let mut factor = 1;\n    let mut i\
    \ = 1;\n    while i <= n {\n        if n % i == 0 {\n            factors.push(factor);\n\
    \            factor = 1;\n            primes.push(prime_counter);\n          \
    \  prime_counter = 1;\n        } else {\n            factor += 1;\n          \
    \  prime_counter += 1;\n        }\n        i += 1;\n    }\n    factors.push(factor);\n\
    \    factors.push(prime_counter);\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = vec![true; n];\n    let mut i = 1;\n    while i < n {\n\
    \        if primes[i] {\n            factors.push(i);\n            i += 1;\n \
    \       } else {\n            primes[i] = false;\n            i += 1;\n      \
    \  }\n    }\n    factors", "    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut factorization\
    \ = Vec::new();\n    let mut factorization_size = Vec::new();\n\n    // Find all\
    \ prime factors\n    for i in 2..=n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \        }\n    }\n\n    // Find all factors of given number\n    for i in primes.iter()\
    \ {\n        let mut j = 1;\n        while i * j < n {\n            if n % i ==\
    \ 0 {\n                factors.push(i as isize);\n                factorization_size.push(j);\n\
    \            }\n            j += 1;\n        }\n    }\n\n    // Find all factorizations\
    \ of given number\n    for i in factors.iter() {\n        let mut j = 1;\n   \
    \     while i * j < n {\n            if n % i == 0 {\n                factorization.push(i);\n\
    \                factorization.push(j);\n            }\n            j += 1;\n\
    \        }\n    }\n\n    // Find all prime factorizations\n    for i in factorization.iter()\
    \ {\n        let mut j = 1;\n        while i * j < n {\n            if n % i ==\
    \ 0 {\n                factors.push(i as isize);\n                factors.push(j);\n\
    \            }\n            j += 1;\n        }\n    }\n\n    // Find all prime\
    \ factorizations\n    for i in factorization.iter() {\n        let mut j = 1;\n\
    \        while i * j < n {\n            if n % i == 0 {\n                prime_factors.push(i\
    \ as isize);\n                prime_factors.push(j);\n            }\n        \
    \    j += 1;\n        }\n    }\n\n    prime_factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_counter = 1;\n    let mut\
    \ i = 2;\n    while i <= n {\n        if n % i == 0 {\n            primes.push(i);\n\
    \            factors.push(1);\n            prime_counter += 1;\n            while\
    \ prime_counter > primes.len() {\n                primes.push(primes.last().unwrap()\
    \ + 1);\n            }\n            while prime_counter > factors.len() {\n  \
    \              factors.push(1);\n            }\n            prime_counter -= 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors", "    let\
    \ mut factors = vec![];\n    let mut primes = vec![];\n    let mut prime_factors\
    \ = vec![];\n    let mut prime_factors_count = vec![];\n    let mut prime_factors_count_max\
    \ = vec![];\n    let mut prime_factors_count_max_index = vec![];\n    let mut\
    \ prime_factors_count_max_value = vec![];\n    let mut prime_factors_count_max_value_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_index = vec![];\n \
    \   let mut prime_factors_count_max_value_max_value = vec![];\n    let mut prime_factors_count_max_value_max_index\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_max = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_index = vec![];\n    let\
    \ mut prime_factors_count_max_value_max_value_value = vec![];\n    let mut prime_factors_count_max_value_max_value_index_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_value =\
    \ vec![];\n    let mut prime_factors_count_max_value_max_value_index_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_max = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_index_max_value_value = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_value_max_index = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_index_max_value_value = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_value_max_index_max = vec![];\n\
    \    let mut prime_factors_count_max_value_max_value_index_max_value_value_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_max_index_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_index_max_value_value_max_index_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_max_index_max_value_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_index_max_value_value_max_index_max_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_max_index_max_value_value_max\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_index_max_value_value_max_index_max_value_value\
    \ = vec![];\n    let mut prime_factors_count_max_value_max_value_value_max_index_max_value_value_max_index_max_value_value\
    \ = vec![];\n    let mut prime_factors_", "    let mut factors = vec![];\n   \
    \ let mut primes = vec![];\n    let mut prime_factors = vec![];\n    let mut prime_factors_count\
    \ = vec![];\n    let mut prime_factors_count_max = vec![];\n    let mut prime_factors_count_min\
    \ = vec![];\n    let mut prime_factors_count_max_min = vec![];\n    let mut prime_factors_count_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min = vec![];\n    let\
    \ mut prime_factors_count_max_min_max_min_max = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max = vec![];\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min = vec![];\n \
    \   let mut prime_factors_count_max_min_max_min_max_min_max_min_max = vec![];\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min = vec![];\n\
    \    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max =\
    \ vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = vec![];\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = vec![];\n    let mut ", "    let mut factors = Vec::new();\n    let mut i\
    \ = 1;\n    while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            n /= i;\n            i += 1;\n        }\n    }\n    if n > 1 {\n\
    \        factors.push(n);\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_min_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n", "    let mut factors = Vec::new();\n    let mut i = 1;\n \
    \   while i * i <= n {\n        if n % i == 0 {\n            factors.push(i);\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    factors", "    let\
    \ mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n    \
    \    if n % i == 0 {\n            factors.push(i);\n            i += 1;\n    \
    \    }\n        else {\n            i += 1;\n        }\n    }\n    factors", " \
    \   let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            i += 1;\n        }\n        i += 1;\n    }\n\
    \    factors", "    let mut factors = vec![];\n    let mut primes = vec![];\n\
    \    let mut prime_counter = 1;\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            primes.push(i);\n\
    \            prime_counter += 1;\n        }\n        i += 1;\n    }\n    factors.push(n\
    \ - 1);\n    primes.push(n - 1);\n    prime_counter += 1;\n    for i in factors.iter_mut()\
    \ {\n        *i /= prime_counter;\n    }\n    primes", "    let mut factors =\
    \ Vec::new();\n    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n\
    \    let mut prime_factors_count = Vec::new();\n    let mut factorization = Vec::new();\n\
    \    let mut factorization_count = Vec::new();\n    let mut factorization_primes\
    \ = Vec::new();\n    let mut factorization_primes_count = Vec::new();\n    let\
    \ mut factorization_prime_factors = Vec::new();\n    let mut factorization_prime_factors_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes = Vec::new();\n\
    \    let mut factorization_prime_factors_count_primes_count = Vec::new();\n  \
    \  let mut factorization_prime_factors_count_primes_count_factors = Vec::new();\n\
    \    let mut factorization_prime_factors_count_primes_count_factors_count = Vec::new();\n\
    \    let mut factorization_prime_factors_count_primes_count_factors_count_primes\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors_count_primes\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors_count_primes_count_factors\
    \ = Vec::new();\n    let ", "    let mut factors = Vec::new();\n    let mut primes\
    \ = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_index = Vec::new();\n    let mut\
    \ prime_factors_count_max_value_max_value = Vec::new();\n    let mut prime_factors_count_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_value_value_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_value_value_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_value_value_value_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_value_value_value_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_max_value_value_value_value_index =\
    \ Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max_value_value_value",
  "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n    let mut\
    \ prime_factors = Vec::new();\n    let mut factorization = factorization(n);\n\
    \    let mut factorization_size = factorization.len();\n    let mut factorization_counter\
    \ = 0;\n    let mut factorization_counter_size = 0;\n    let mut factorization_counter_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_size = 0;\n    let mut factorization_counter_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_size = 0;\n   \
    \ let mut factorization_counter_is_prime_is_prime_is_prime = true;\n    let mut\
    \ factorization_counter_is_prime_is_prime_is_prime_size = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_size\
    \ = 0;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime\
    \ = true;\n    let mut factorization_counter_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime_is_prime",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            i += 1;\n\
    \        }\n        i += 1;\n    }\n    factors", "    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    if n > 1 {\n        factors.push(n);\n    }\n    factors",
  "    let mut factors = Vec::new();\n    let mut i = 1;\n    while i * i <= n {\n\
    \        if n % i == 0 {\n            factors.push(i);\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    factors.push(n);\n\
    \    factors", "    let mut factors = Vec::new();\n    let mut primes = Vec::new();\n\
    \    let mut prime_factors = Vec::new();\n    let mut prime_factors_count = Vec::new();\n\
    \    let mut prime_factors_count_max = Vec::new();\n    let mut prime_factors_count_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime = Vec::new();\n   \
    \ let mut prime_factors_count_min_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime = Vec::new();\n    let\
    \ mut prime_factors_count_min_prime_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime =\
    \ Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mu", "    let mut factors = Vec::new();\n    let mut\
    \ primes = Vec::new();\n    let mut prime_factors = Vec::new();\n    let mut prime_factors_count\
    \ = Vec::new();\n    let mut prime_factors_count_max = Vec::new();\n    let mut\
    \ prime_factors_count_min = Vec::new();\n    let mut prime_factors_count_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_min_index = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_max = Vec::new();\n    let mut prime_factors_count_max_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_index = Vec::new();\n    let mut\
    \ prime_factors_count_min_value_min_index = Vec::new();\n    let mut prime_factors_count_max_value_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_max = Vec::new();\n    let\
    \ mut prime_factors_count_min_value_min_value_max = Vec::new();\n    let mut prime_factors_count_max_value_min_value_min\
    \ = Vec::new();\n    let mut prime_factors_count_min_value_min_value_min = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min_value = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_min_value = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_min_value_max = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_min_value_min_index = Vec::new();\n\
    \    let mut prime_factors_count_max_value_min_value_min_value_min_value = Vec::new();\n\
    \    let mut prime_factors_count_min_value_min_value_min_value_value = Vec::new();\n\
    \    let mut prime_factors_"]
stop_tokens:
- "\n}"
