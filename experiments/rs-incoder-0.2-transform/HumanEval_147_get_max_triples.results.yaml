language: rs
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i + j + k == n {\n                    cnt += a[i + j + k];\n               \
    \ }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp2zow9qx6.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x < 3).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpcsl4rado.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcsl4rado.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&3`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcsl4rado.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x < 3).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] - a[j] - a[k] == 3 {\n                    \
    \    cnt += 1;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo87o2264.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpo87o2264.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpo87o2264.rs:21:24\n   |\n21 |  \
    \                   if a[i] - a[j] - a[k] == 3 {\n   |                       \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpo87o2264.rs:21:31\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpo87o2264.rs:21:38\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] == 3 {\n   |           \
    \                           ^^^^ slice indices are of"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[j] + a[k] + a[i] == 3 {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nx0fym7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] + a[i] == 3 {\n   |                       \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:38\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                           ^^^^ slice indices are of"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpr_xkmjdi.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr_xkmjdi.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpr_xkmjdi.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[j] + a[k] + a[i] == 3 {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nx0fym7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] + a[i] == 3 {\n   |                       \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:38\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                           ^^^^ slice indices are of"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x < 3).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpocl22s6b.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpocl22s6b.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpocl22s6b.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&3`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpocl22s6b.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x < 3).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 1..n {\n        for j in (i\
    \ + 1)..n {\n            for k in (i + 2)..n {\n                if a[i] < a[j]\
    \ && a[j] < a[k] {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwa13xcyo.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:20\n   |\n20 |  \
    \               if a[i] < a[j] && a[j] < a[k] {\n   |                    ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:27\n\
    \   |\n20 |                 if a[i] < a[j] && a[j] < a[k] {\n   |            \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:35\n\
    \   |\n20 |                 if a[i] < a[j] && a[j] < a[k] {\n   |            \
    \                       ^^^^ slice indices are of type `usize` "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [isize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    \n    let mut cnt = 0;\n    for\
    \ i in 1..n+1 {\n        for j in 1..n+1 {\n            for k in 1..n+1 {\n  \
    \              if i != j && i != k && j != k {\n                    if a[i] <\
    \ a[j] && a[i] < a[k] {\n                        cnt += 1;\n                 \
    \   }\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmptul01bz0.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [isize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_4tjlqt_.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_4tjlqt_.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_4tjlqt_.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_4tjlqt_.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[j] * a[k] * a[i];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3si1gkdt.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp3si1gkdt.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3si1gkdt.rs:21:28\n   |\n21 |  \
    \                   cnt += a[j] * a[k] * a[i];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp3si1gkdt.rs:21:35\n\
    \   |\n21 |                     cnt += a[j] * a[k] * a[i];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp3si1gkdt.rs:21:42\n\
    \   |\n21 |                     cnt += a[j] * a[k] * a[i];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpdjquc42k.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdjquc42k.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpdjquc42k.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    if a[i] < a[j] + a[k] {\n                 \
    \       triples++;\n                    }\n                }\n            }\n\
    \        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp7vihtkox.rs:22:32\n\
    \   |\n22 |                         triples++;\n   |                         \
    \       ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n\
    22 |                         { let tmp = triples; triples += 1; tmp };\n   | \
    \                        +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n22 -      \
    \                   triples++;\n22 +                         triples += 1;\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7vihtkox.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp7vihtkox.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7vihtkox.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp7vihtkox.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n{\n        a[i] = i * i - i\
    \ + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..(n-1){\n        for j in\
    \ (i+1)..n{\n            for k in (i+1)..n{\n                if a[i] < a[j] &&\
    \ a[j] < a[k] && a[i] < 3*a[j] && a[j] < 3*a[k] && a[i] < 3*a[j] + a[k] {\n  \
    \                  cnt += 1;\n                }\n            }\n        }\n  \
    \  }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxakoiywr.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxakoiywr.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxakoiywr.rs:20:20\n   |\n20 |  \
    \               if a[i] < a[j] && a[j] < a[k] && a[i] < 3*a[j] && a[j] < 3*a[k]\
    \ && a[i] < 3*a[j] + a[k] {\n   |                    ^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxakoiywr.rs:20:27\n   |\n20 |  \
    \               if a[i] < a[j] && a[j] < a[k] && a[i] < 3*a[j] && a[j] < 3*a[k]\
    \ && a[i] < 3*a[j] + a[k] {\n   |                           ^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxakoiywr.rs:20:35\n   |\n20 |  \
    \         "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[j] + a[k] == sum {\n\
    \                        return 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgsasss6r.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:24\n   |\n22 |  \
    \                   if a[j] + a[k] == sum {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:31\n\
    \   |\n22 |                     if a[j] + a[k] == sum {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[i + j + k] == sum {\n\
    \                        return i + j + k;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6h66z9xh.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:22:24\n   |\n22 |  \
    \                   if a[i + j + k] == sum {\n   |                        ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x % 3 == 0).count()\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt0s24l0w.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt0s24l0w.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt0s24l0w.rs:16:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n16 |     a.iter().filter(|&x| x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |     a.iter().filter(|&x|\
    \ x % 3 == 0).count().try_into().unwrap()\n   |                              \
    \               ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp9covzdry.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9covzdry.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9covzdry.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 1..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[j] + a[k] + a[i] == sum\
    \ {\n                        return 1;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf4cm3kwu.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf4cm3kwu.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpf4cm3kwu.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpf4cm3kwu.rs:22:24\n   |\n22 |  \
    \                   if a[j] + a[k] + a[i] == sum {\n   |                     \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpf4cm3kwu.rs:22:31\n\
    \   |\n22 |                     if a[j] + a[k] + a[i] == sum {\n   |         \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = h"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    let mut triples\
    \ = 0;\n    for i in 0..n {\n        for j in 0..n {\n            for k in 0..n\
    \ {\n                if i != j && i != k && j != k {\n                    let\
    \ sum = i + j + k;\n                    if sum % 3 == 0 {\n                  \
    \      triples += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpque0o46x.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpque0o46x.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpque0o46x.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] && a[i] < a[k] {\n                 \
    \       cnt += 1;\n                    }\n                }\n            }\n \
    \       }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw4rfk32g.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw4rfk32g.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpw4rfk32g.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] && a[i] < a[k] {\n   |                    \
    \    ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw4rfk32g.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] && a[i] < a[k] {\n   |        \
    \                       ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpw4rfk32g.rs:21:39\n\
    \   |\n21 |                     if a[i] < a[j] && a[i] < a[k] {\n   |        \
    \                               ^^^^ slice indi"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i + j + k == i &&\
    \ j + k == j && i + k == i {\n                    triples += 1;\n            \
    \    }\n            }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_znqlq00.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp_znqlq00.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp9covzdry.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9covzdry.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9covzdry.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in 0..n {\n            for k in 0..n {\n                if i <\
    \ j && j < k && i < k {\n                    a[i] = i * i - i + 1;\n         \
    \           cnt += 1;\n                }\n            }\n        }\n    }\n  \
    \  cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqw2kcbe_.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpqw2kcbe_.rs:18:21\n\
    \   |\n18 |                     a[i] = i * i - i + 1;\n   |                  \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j && j < k &&\
    \ i < k {\n                    if a[i] < a[j] + a[k] {\n                     \
    \   triples++;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: Rust has no postfix increment operator\n  --> /tmp/tmp043xm532.rs:22:32\n\
    \   |\n22 |                         triples++;\n   |                         \
    \       ^^ not a valid postfix operator\n   |\nhelp: use `+= 1` instead\n   |\n\
    22 |                         { let tmp = triples; triples += 1; tmp };\n   | \
    \                        +++++++++++        ~~~~~~~~~~~~~~~~~~~~~\n22 -      \
    \                   triples++;\n22 +                         triples += 1;\n \
    \  | \n\nerror[E0308]: mismatched types\n  --> /tmp/tmp043xm532.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp043xm532.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp043xm532.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp043xm532.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    if a[i] < a[j] + a[k] {\n                 \
    \       triples += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplj3r3rxj.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpyb074e1y.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpyb074e1y.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in\
    \ 1..n+1 {\n        for j in i+1..n+1 {\n            for k in j+1..n+1 {\n   \
    \             if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n               \
    \     cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmptxjaoaxb.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] + a[k] == a[i] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6j7vehqg.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] == a[i] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] == a[i] {\n   |               \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:39\n\
    \   |\n21 |                     if a[j] + a[k] == a[i] {\n   |               \
    \                        ^^^^ slice indices are of type `usiz"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[j] + a[k] + a[i];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmptqnhq44o.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptqnhq44o.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmptqnhq44o.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k] {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpjeg1yxzt.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 1..n {\n        for j in i\
    \ + 1..n {\n            for k in j + 1..n {\n                if a[i] < a[j] &&\
    \ a[i] < a[k] && a[j] < a[k] {\n                    cnt += 1;\n              \
    \  }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1lixk9i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn1lixk9i.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpn1lixk9i.rs:20:20\n   |\n20 |  \
    \               if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n   |         \
    \           ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn1lixk9i.rs:20:27\n\
    \   |\n20 |                 if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n \
    \  |                           ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpn1lixk9i.rs:20:35\n   |\n20 |                 if a[i]\
    \ < a[j] && a[i] < a[k] && a[j] < a[k] {\n   |                             "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[j] + a[k] == sum {\n\
    \                        return 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgsasss6r.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:24\n   |\n22 |  \
    \                   if a[j] + a[k] == sum {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:31\n\
    \   |\n22 |                     if a[j] + a[k] == sum {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    if a[i] - a[j] - a[k] % 3 == 0 {\n        \
    \                triples += 1;\n                    }\n                }\n   \
    \         }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz652lbwn.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz652lbwn.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpz652lbwn.rs:21:24\n   |\n21 |  \
    \                   if a[i] - a[j] - a[k] % 3 == 0 {\n   |                   \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz652lbwn.rs:21:31\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                        ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpz652lbwn.rs:21:38\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                               ^^^^ slice in"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] + a[k] + a[i] == 3 {\n                    \
    \    cnt += 1;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbyt0nrwt.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbyt0nrwt.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbyt0nrwt.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] + a[i] == 3 {\n   |                       \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbyt0nrwt.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpbyt0nrwt.rs:21:38\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                           ^^^^ slice indices are of"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if a[i] < a[j] && a[j] < a[k]\
    \ {\n                    cnt += 1;\n                }\n            }\n       \
    \ }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpj9fpphes.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if sum % 3 == 0 {\n      \
    \                  return i + j + k;\n                    }\n                }\n\
    \            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6xlqbjqf.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6xlqbjqf.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6xlqbjqf.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in 1..i {\n            for k in 1..j {\n                if i +\
    \ j + k == n {\n                    cnt += 1;\n                    a[i] = a[j]\
    \ + a[k];\n                }\n            }\n        }\n    }\n    cnt\n}\n\n\
    fn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptfei89d8.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptfei89d8.rs:19:21\n\
    \   |\n19 |                     a[i] = a[j] + a[k];\n   |                    \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptfei89d8.rs:19:28\n\
    \   |\n19 |                     a[i] = a[j] + a[k];\n   |                    \
    \        ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmptfei89d8.rs:19:35\n\
    \   |\n19 |                     a[i] = a[j] + a[k];\n   |                    \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in\
    \ 0..n {\n        for j in 0..n {\n            for k in 0..n {\n             \
    \   if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n                    cnt +=\
    \ 1;\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp_qqvtk4a.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j < k {\n   \
    \                 let sum = i + j + k;\n                    if sum % 3 == 0 {\n\
    \                        triples += 1;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp4eqoqr5m.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4eqoqr5m.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp4eqoqr5m.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[j] + a[k] == a[i] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6j7vehqg.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] == a[i] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] == a[i] {\n   |               \
    \                ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6j7vehqg.rs:21:39\n\
    \   |\n21 |                     if a[j] + a[k] == a[i] {\n   |               \
    \                        ^^^^ slice indices are of type `usiz"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[j] + a[k] + a[i] == sum\
    \ {\n                        return 1;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq9xhzub3.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq9xhzub3.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq9xhzub3.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq9xhzub3.rs:22:24\n   |\n22 |  \
    \                   if a[j] + a[k] + a[i] == sum {\n   |                     \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpq9xhzub3.rs:22:31\n\
    \   |\n22 |                     if a[j] + a[k] + a[i] == sum {\n   |         \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = h"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k]\
    \ == a[k] {\n                        cnt += 1;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp9z8u87l.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                        ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:40\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                                        ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:48\n   |\n21 |  \
    \                   if a[i + j + "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k]\
    \ == a[k] {\n                        cnt += 1;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3t44huhb.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp3t44huhb.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3t44huhb.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                        ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3t44huhb.rs:21:40\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                                        ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3t44huhb.rs:21:48\n   |\n21 |  \
    \                   if a[i + j + "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[j] + a[k] + a[i] == 3 {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nx0fym7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] + a[i] == 3 {\n   |                       \
    \ ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp4nx0fym7.rs:21:38\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                           ^^^^ slice indices are of"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[i + j + k] == a[i * i\
    \ - i + 1] + a[j * j - j + 1] + a[k * k - k + 1] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpnvx2b84p.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpyb074e1y.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpyb074e1y.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k]\
    \ == a[k] {\n                        cnt += 1;\n                    }\n      \
    \          }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n   \
    \ let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp9z8u87l.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                        ^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:40\n   |\n21 |  \
    \                   if a[i + j + k] == a[i] && a[j + k] == a[j] && a[k] == a[k]\
    \ {\n   |                                        ^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpp9z8u87l.rs:21:48\n   |\n21 |  \
    \                   if a[i + j + "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] - a[j] - a[k] % 3 == 0 {\n                \
    \        cnt += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp59eiqs40.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:24\n   |\n21 |  \
    \                   if a[i] - a[j] - a[k] % 3 == 0 {\n   |                   \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:31\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                        ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:38\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                               ^^^^ slice in"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j < k {\n   \
    \                 if a[i] < a[j] + a[k] {\n                        triples +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpdauf_tgw.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdauf_tgw.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpdauf_tgw.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 1..n{\n        a[i] = i * i - i + 1;\n\
    \    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpna4i2smp.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpna4i2smp.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpna4i2smp.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in i..n {\n            for k in i..n {\n                if i !=\
    \ j && i != k && j != k {\n                    let sum = i * i + j * j + k * k;\n\
    \                    if sum % 3 == 0 {\n                        cnt += 1;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9eso1aoy.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[i] < a[j] + a[k] {\n                        cnt += 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5_f87qan.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j < k {\n   \
    \                 if a[i] < a[j] + a[k] {\n                        triples +=\
    \ 1;\n                    }\n                }\n            }\n        }\n   \
    \ }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n   \
    \ assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpdauf_tgw.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdauf_tgw.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpdauf_tgw.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in\
    \ 1..n+1 {\n        for j in i+1..n+1 {\n            for k in j+1..n+1 {\n   \
    \             if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n               \
    \     cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmptxjaoaxb.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 1..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[i] - a[j] - a[k] == sum\
    \ {\n                        return 1;\n                    }\n              \
    \  }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9veb0i0s.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9veb0i0s.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9veb0i0s.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9veb0i0s.rs:22:24\n   |\n22 |  \
    \                   if a[i] - a[j] - a[k] == sum {\n   |                     \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp9veb0i0s.rs:22:31\n\
    \   |\n22 |                     if a[i] - a[j] - a[k] == sum {\n   |         \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = h"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpyb074e1y.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpyb074e1y.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[i * i - i + 1] + a[j * j - j +\
    \ 1] + a[k * k - k + 1] {\n                        cnt += 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa81aisuk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[i * i - i + 1] + a[j * j - j + 1] + a[k\
    \ * k - k + 1] {\n   |                        ^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:40\n   |\n21 |  \
    \                   if a[i + j + k] == a[i * i - i + 1] + a[j * j - j + 1] + a[k\
    \ * k - k + 1] {\n   |                                        ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:59\n\
    \   "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[j] + a[k] == sum {\n\
    \                        return 1;\n                    }\n                }\n\
    \            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgsasss6r.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:24\n   |\n22 |  \
    \                   if a[j] + a[k] == sum {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgsasss6r.rs:22:31\n\
    \   |\n22 |                     if a[j] + a[k] == sum {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x < 3).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpocl22s6b.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpocl22s6b.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpocl22s6b.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&3`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpocl22s6b.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x < 3).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j < k {\n   \
    \                 triples += a[i] - a[j] - a[k];\n                }\n        \
    \    }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpae28yv8n.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpae28yv8n.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpae28yv8n.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    let sum = i + j + k;\n                    if\
    \ sum % 3 == 0 {\n                        triples += 1;\n                    }\n\
    \                }\n            }\n        }\n    }\n    triples\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp86pq2m5c.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp86pq2m5c.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[i] < a[j] + a[k] {\n                        cnt += 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5_f87qan.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp5_f87qan.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x < 3).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpocl22s6b.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpocl22s6b.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpocl22s6b.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&3`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpocl22s6b.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x < 3).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in 0..n {\n            for k in 0..n {\n                if i <\
    \ j && j < k && k < i {\n                    a[i] += 1;\n                    a[j]\
    \ += 1;\n                    a[k] += 1;\n                }\n            }\n  \
    \      }\n    }\n    for i in 0..n {\n        if a[i] % 3 == 0 {\n           \
    \ cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_fk6onf.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn_fk6onf.rs:18:21\n\
    \   |\n18 |                     a[i] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn_fk6onf.rs:19:21\n\
    \   |\n19 |                     a[j] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn_fk6onf.rs:20:21\n\
    \   |\n20 |                     a[k] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpn_fk6onf.rs:26:12\n\
    \   |\n26 |         if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i < j < k {\n   \
    \                 triples += a[i] - a[j] - a[k];\n                }\n        \
    \    }\n        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpae28yv8n.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpae28yv8n.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpae28yv8n.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in (i + 1)..n {\n            for k in (i + 1)..n {\n          \
    \      if i != j && i != k && j != k {\n                    let sum = i * i +\
    \ j * j + k * k;\n                    if sum % 3 == 0 {\n                    \
    \    cnt += 1;\n                    }\n                }\n            }\n    \
    \    }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnedmyvu5.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[j] * a[k] * a[i];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpd7v5gsqr.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd7v5gsqr.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpd7v5gsqr.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] - a[j] - a[k] % 3 == 0 {\n                \
    \        cnt += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp59eiqs40.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:24\n   |\n21 |  \
    \                   if a[i] - a[j] - a[k] % 3 == 0 {\n   |                   \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:31\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                        ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp59eiqs40.rs:21:38\n\
    \   |\n21 |                     if a[i] - a[j] - a[k] % 3 == 0 {\n   |       \
    \                               ^^^^ slice in"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp9covzdry.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9covzdry.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9covzdry.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0435.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[i * i - i + 1] + a[j * j - j +\
    \ 1] + a[k * k - k + 1] {\n                        cnt += 1;\n               \
    \     }\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn\
    \ main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa81aisuk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[i * i - i + 1] + a[j * j - j + 1] + a[k\
    \ * k - k + 1] {\n   |                        ^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:40\n   |\n21 |  \
    \                   if a[i + j + k] == a[i * i - i + 1] + a[j * j - j + 1] + a[k\
    \ * k - k + 1] {\n   |                                        ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpa81aisuk.rs:21:59\n\
    \   "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    if a[i] < a[j] + a[k] {\n                 \
    \       triples += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplj3r3rxj.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    sum % 3 == 0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzfr1zame.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzfr1zame.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzfr1zame.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzfr1zame.rs:18:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n18 |     sum % 3 == 0\n   |     ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1gwf_zsg.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1gwf_zsg.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp1gwf_zsg.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1gwf_zsg.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp1gwf_zsg.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in 0..n {\n            for k in 0..n {\n                if i <\
    \ j && j < k && i < k {\n                    a[i] += 1;\n                    a[j]\
    \ += 1;\n                    a[k] += 1;\n                }\n            }\n  \
    \      }\n    }\n    for i in 0..n {\n        if a[i] % 3 == 0 {\n           \
    \ cnt += 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt_9tiq0_.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_9tiq0_.rs:18:21\n\
    \   |\n18 |                     a[i] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_9tiq0_.rs:19:21\n\
    \   |\n19 |                     a[j] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_9tiq0_.rs:20:21\n\
    \   |\n20 |                     a[k] += 1;\n   |                     ^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpt_9tiq0_.rs:26:12\n\
    \   |\n26 |         if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i + j + k] == a[j + k] + a[k] {\n            \
    \            cnt += 1;\n                    }\n                }\n           \
    \ }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgo1nzf0n.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgo1nzf0n.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgo1nzf0n.rs:21:24\n   |\n21 |  \
    \                   if a[i + j + k] == a[j + k] + a[k] {\n   |               \
    \         ^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpgo1nzf0n.rs:21:40\n\
    \   |\n21 |                     if a[i + j + k] == a[j + k] + a[k] {\n   |   \
    \                                     ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgo1nzf0n.rs:21:51\n   |\n21 |  \
    \                   if a[i + j + k] == a[j + k] + a[k] {\n   |               \
    \   "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x % 3 == 0).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpyx3ty_43.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyx3ty_43.rs:16:5\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n16 |     a.iter().filter(|&x| x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |     a.iter().filter(|&x|\
    \ x % 3 == 0).count().try_into().unwrap()\n   |                              \
    \               ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_g7zracx.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmp_g7zracx.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxi0jxj3o.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxi0jxj3o.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxi0jxj3o.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxi0jxj3o.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxi0jxj3o.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpyb074e1y.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpyb074e1y.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in (i + 1)..n {\n            for k in (i + 1)..n {\n          \
    \      if i != j && i != k && j != k {\n                    if a[j] + a[k] + a[i]\
    \ == 3 {\n                        cnt += 1;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcu46h4rw.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcu46h4rw.rs:18:24\n\
    \   |\n18 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \             ^^^^ slice indices are of type `usize` or ranges of `usize`\n  \
    \ |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcu46h4rw.rs:18:31\n\
    \   |\n18 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                    ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpcu46h4rw.rs:18:38\n\
    \   |\n18 |                     if a[j] + a[k] + a[i] == 3 {\n   |           \
    \                           ^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in i..n {\n            for k in i..n {\n                if i +\
    \ j + k == n {\n                    cnt += 1;\n                }\n           \
    \ }\n        }\n        a[i] = i * i - i + 1;\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphjgqo_na.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmphjgqo_na.rs:22:9\n\
    \   |\n22 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x > 0).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxc5y3hkk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxc5y3hkk.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&0`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxc5y3hkk.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x > 0).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x > 0).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 1..n {\n\
    \        for j in i..n {\n            for k in i..n {\n                if i !=\
    \ j && i != k && j != k {\n                    let sum = i + j + k;\n        \
    \            if sum % 3 == 0 {\n                        cnt += 1;\n          \
    \          }\n                }\n            }\n        }\n    }\n    cnt\n}\n\
    \nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv33ji9nd.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        if a[i] % 3 == 0 {\n            cnt +=\
    \ 1;\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp02u9875i.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp02u9875i.rs:16:12\n   |\n16 |  \
    \       if a[i] % 3 == 0 {\n   |            ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    sum % 3 == 0\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzfr1zame.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpzfr1zame.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpzfr1zame.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzfr1zame.rs:18:5\n   |\n11 | fn get_max_triples(n: isize) -> isize {\n\
    \   |                                 ----- expected `isize` because of return\
    \ type\n...\n18 |     sum % 3 == 0\n   |     ^^^^^^^^^^^^ expected `isize`, found\
    \ `bool`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    for i in 0..n {\n        for j in 0..n {\n            for k in\
    \ 0..n {\n                if i < j < k {\n                    if a[i] < a[j] +\
    \ a[k] {\n                        return 1;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpovtanc89.rs:19:22\n\
    \   |\n19 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n19 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0435]: attempt to use a\
    \ non-constant value in a constant\n  --> /tmp/tmpovtanc89.rs:12:21\n   |\n11\
    \ | fn get_max_triples(n: isize) -> isize {\n   |                    - this would\
    \ need to be a `const`\n12 |     let mut a = [0; n];\n   |                   \
    \  ^\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 1..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmplrx5tyf7.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 1..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 1..n {\n        for j in (i\
    \ + 1)..n {\n            for k in (i + 2)..n {\n                if a[i] < a[j]\
    \ && a[j] < a[k] {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwa13xcyo.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:20\n   |\n20 |  \
    \               if a[i] < a[j] && a[j] < a[k] {\n   |                    ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:27\n\
    \   |\n20 |                 if a[i] < a[j] && a[j] < a[k] {\n   |            \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpwa13xcyo.rs:20:35\n\
    \   |\n20 |                 if a[i] < a[j] && a[j] < a[k] {\n   |            \
    \                       ^^^^ slice indices are of type `usize` "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    a.iter().filter(|&x| x % 3 == 0).count()\n}\n\nfn main() {\n\
    \    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpyx3ty_43.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyx3ty_43.rs:16:5\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                                 ----- expected `isize` because of return\
    \ type\n...\n16 |     a.iter().filter(|&x| x % 3 == 0).count()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n16 |     a.iter().filter(|&x|\
    \ x % 3 == 0).count().try_into().unwrap()\n   |                              \
    \               ++++++++++++++++++++\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0435.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [usize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in\
    \ 1..n+1 {\n        for j in 1..n+1 {\n            for k in 1..n+1 {\n       \
    \         if i != j && i != k && j != k {\n                    if a[i] == a[j]\
    \ + a[k] {\n                        cnt += 1;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp4newxrh4.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [usize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in (i + 1)..n {\n            for k in (i + 1)..n {\n          \
    \      if i != j && i != k && j != k {\n                    a[i] = i * i - i +\
    \ 1;\n                    cnt += 1;\n                }\n            }\n      \
    \  }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpht8wdt43.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpht8wdt43.rs:18:21\n\
    \   |\n18 |                     a[i] = i * i - i + 1;\n   |                  \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in 0..n {\n            for k in 0..n {\n                if i <\
    \ j && j < k && i < k {\n                    a[i] = a[i] + a[j] + a[k];\n    \
    \                if a[i] % 3 == 0 {\n                        cnt += 1;\n     \
    \               }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprn56c45a.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprn56c45a.rs:18:21\n\
    \   |\n18 |                     a[i] = a[i] + a[j] + a[k];\n   |             \
    \        ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n \
    \  = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprn56c45a.rs:18:28\n\
    \   |\n18 |                     a[i] = a[i] + a[j] + a[k];\n   |             \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprn56c45a.rs:18:35\n\
    \   |\n18 |                     a[i] = a[i] + a[j] + a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmprn56c45a.rs:18:42\n\
    \   |\n18 |                     a[i] = a[i] + a[j] + a[k];\n   |             \
    \                  "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[j] + a[k] + a[i] % 3 == 0 {\n                      \
    \  cnt += 1;\n                    }\n                }\n            }\n      \
    \  }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpor6gradq.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpor6gradq.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpor6gradq.rs:21:24\n   |\n21 |  \
    \                   if a[j] + a[k] + a[i] % 3 == 0 {\n   |                   \
    \     ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   =\
    \ help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n \
    \  = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpor6gradq.rs:21:31\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] % 3 == 0 {\n   |       \
    \                        ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpor6gradq.rs:21:38\n\
    \   |\n21 |                     if a[j] + a[k] + a[i] % 3 == 0 {\n   |       \
    \                               ^^^^ slice in"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    a.iter().filter(|&x| x < 3).count()\n}\n\nfn main() {\n \
    \   let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpocl22s6b.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpocl22s6b.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpocl22s6b.rs:16:30\n   |\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected reference, found integer\n   |     \
    \                         help: consider borrowing here: `&3`\n   |\n   = note:\
    \ expected reference `&_`\n                   found type `{integer}`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpocl22s6b.rs:16:5\n   |\n11 | fn get_max_triples(n:\
    \ isize) -> isize {\n   |                                 ----- expected `isize`\
    \ because of return type\n...\n16 |     a.iter().filter(|&x| x < 3).count()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     a.iter().filter(|&x| x < 3).count().try_into().unwrap()\n\
    \   |                                        ++++++++++++++++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        for j in (i + 1)..n {\n            for k in (j + 1)..n {\n          \
    \      if a[i] == 0 && a[j] == 0 && a[k] == 0 {\n                    a[i] = i\
    \ * i - i + 1;\n                    a[j] = i * i - j + 1;\n                  \
    \  a[k] = i * i - k + 1;\n                    cnt += 1;\n                }\n \
    \           }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjp8gskc5.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjp8gskc5.rs:17:20\n\
    \   |\n17 |                 if a[i] == 0 && a[j] == 0 && a[k] == 0 {\n   |   \
    \                 ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjp8gskc5.rs:17:33\n\
    \   |\n17 |                 if a[i] == 0 && a[j] == 0 && a[k] == 0 {\n   |   \
    \                              ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpjp8gskc5.rs:17:46\n   |\n17 |                 if a[i]\
    \ == 0 && a[j] == 0 && a[k] == 0 {\n   |                                     \
    \         ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpjp8gskc5.rs:18:21\n\
    \   |\n18 |                     a[i] = i * i - i "
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         if a[i] < a[j] + a[k] {\n                        cnt += 1;\n       \
    \             }\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmppqnjs6tj.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppqnjs6tj.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmppqnjs6tj.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j && j < k && i < k {\n\
    \                    if a[i] < a[j] + a[k] {\n                        cnt += 1;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpdsy4au_f.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut triples = 0;\n    for i in 0..n {\n        for j\
    \ in 0..n {\n            for k in 0..n {\n                if i != j && i != k\
    \ && j != k {\n                    if a[i] < a[j] + a[k] {\n                 \
    \       triples += 1;\n                    }\n                }\n            }\n\
    \        }\n    }\n    triples\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplj3r3rxj.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplj3r3rxj.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = &a[i..].iter().sum();\n                 \
    \   if sum % 3 == 0 {\n                        cnt += 1;\n                   \
    \ }\n                }\n            }\n        }\n    }\n    cnt\n}\n\nfn main()\
    \ {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n\
    \    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100),\
    \ 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7t6e4cxz.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp7t6e4cxz.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp7t6e4cxz.rs:21:32\n \
    \  |\n21 |                     let sum = &a[i..].iter().sum();\n   |         \
    \                       ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `RangeFrom<isize>`\n   = help: the following other types implement trait\
    \ `SliceIndex<T>`:\n             <RangeFrom<usize> as SliceIndex<[T]>>\n     \
    \        <RangeFrom<usize> as SliceIndex<str>>\n   = note: required because of\
    \ the requirements on the impl of `Index<RangeFrom<isize>>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut sum = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            for k in 0..n {\n                if\
    \ i != j && i != k && j != k {\n                    if a[i + j + k] == sum {\n\
    \                        return i + j + k;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    0\n}\n\nfn main() {\n    let candidate\
    \ = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6h66z9xh.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:15:9\n\
    \   |\n15 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:16:16\n   |\n16 |  \
    \       sum += a[i];\n   |                ^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6h66z9xh.rs:22:24\n   |\n22 |  \
    \                   if a[i + j + k] == sum {\n   |                        ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    if a[i] < a[j] + a[k] {\n                        cnt\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxlg_aonk.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:24\n   |\n21 |  \
    \                   if a[i] < a[j] + a[k] {\n   |                        ^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help: the\
    \ trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]:\
    \ the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:31\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \               ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpxlg_aonk.rs:21:38\n\
    \   |\n21 |                     if a[i] < a[j] + a[k] {\n   |                \
    \                      ^^^^ slice indices are of type `usize` o"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5q6b1fir.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5q6b1fir.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5q6b1fir.rs:14:9\n   |\n14 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    let mut cnt = 0;\n    for i in 0..n {\n\
    \        a[i] = i * i - i + 1;\n    }\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i < j < k {\n           \
    \         cnt += a[i] - a[j] - a[k];\n                }\n            }\n     \
    \   }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp5thni5mm.rs:20:22\n\
    \   |\n20 |                 if i < j < k {\n   |                      ^   ^\n\
    \   |\n   = help: use `::<...>` instead of `<...>` to specify lifetime, type,\
    \ or const arguments\n   = help: or use `(...)` if you meant to specify fn arguments\n\
    help: split the comparison into two\n   |\n20 |                 if i < j && j\
    \ < k {\n   |                          ++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5thni5mm.rs:12:25\n   |\n12 |     let mut a = vec![0; n];\n   |\
    \                         ^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n   |            \
    \              ++++++++++++++++++++\n\nerror[E0277]: the type `[{integer}]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp5thni5mm.rs:15:9\n   |\n15 |         a[i]\
    \ = i * i - i + 1;\n   |         ^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented\
    \ for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<{integer}>`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = [0; n];\n    for i in 0..n {\n        a[i] = i * i - i +\
    \ 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if a[i] < a[j] && a[i] < a[k]\
    \ && a[j] < a[k] {\n                    cnt += 1;\n                }\n       \
    \     }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate = get_max_triples;\n\
    \    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10),\
    \ 36);\n    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpjeg1yxzt.rs:12:21\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a = [0; n];\n   |                     ^\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    let sum = i + j + k;\n                    if sum %\
    \ 3 == 0 {\n                        cnt += 1;\n                    }\n       \
    \         }\n            }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let\
    \ candidate = get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplk6eo1id.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplk6eo1id.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a: [isize; n + 1] = Default::default();\n    for i in 1..n+1\
    \ {\n        a[i] = i * i - i + 1;\n    }\n    let mut cnt = 0;\n    for i in\
    \ 1..n+1 {\n        for j in i+1..n+1 {\n            for k in j+1..n+1 {\n   \
    \             if a[i] < a[j] && a[i] < a[k] && a[j] < a[k] {\n               \
    \     cnt += 1;\n                }\n            }\n        }\n    }\n    cnt\n\
    }\n\nfn main() {\n    let candidate = get_max_triples;\n    assert_eq!(candidate(5),\
    \ 1);\n    assert_eq!(candidate(6), 4);\n    assert_eq!(candidate(10), 36);\n\
    \    assert_eq!(candidate(100), 53361);\n}\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmpg8blskrc.rs:12:24\n   |\n11 | fn get_max_triples(n: isize) -> isize\
    \ {\n   |                    - this would need to be a `const`\n12 |     let mut\
    \ a: [isize; n + 1] = Default::default();\n   |                        ^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0435`.\n"
  stdout: ''
  timestamp: 1660010539
- exit_code: 1
  program: "/// You are given a positive integer n. You have to create an integer\
    \ array a of length n.\n/// For each i (1 \u2264 i \u2264 n), the value of a[i]\
    \ = i * i - i + 1.\n/// Return the number of triples (a[i], a[j], a[k]) of a where\
    \ i < j < k, \n/// and a[i] + a[j] + a[k] is a multiple of 3.\n/// Example :\n\
    /// >>> get_max_triples(5)\n/// 1\n/// Explanation: \n/// a = [1, 3, 7, 13, 21]\n\
    /// The only valid triple is (1, 7, 13).\nfn get_max_triples(n: isize) -> isize\
    \ {\n    let mut a = vec![0; n];\n    for i in 0..n {\n        a[i] = i * i -\
    \ i + 1;\n    }\n    let mut cnt = 0;\n    for i in 0..n {\n        for j in 0..n\
    \ {\n            for k in 0..n {\n                if i != j && i != k && j !=\
    \ k {\n                    cnt += a[i] - a[j] - a[k];\n                }\n   \
    \         }\n        }\n    }\n    cnt\n}\n\nfn main() {\n    let candidate =\
    \ get_max_triples;\n    assert_eq!(candidate(5), 1);\n    assert_eq!(candidate(6),\
    \ 4);\n    assert_eq!(candidate(10), 36);\n    assert_eq!(candidate(100), 53361);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsv1bddk7.rs:12:25\n   |\n\
    12 |     let mut a = vec![0; n];\n   |                         ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n12 |     let mut a = vec![0; n.try_into().unwrap()];\n\
    \   |                          ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:14:9\n\
    \   |\n14 |         a[i] = i * i - i + 1;\n   |         ^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:28\n   |\n21 |  \
    \                   cnt += a[i] - a[j] - a[k];\n   |                         \
    \   ^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = help:\
    \ the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:35\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                      ^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n\
    \   = help: the trait `SliceIndex<[T]>` is implemented for `usize`\n   = note:\
    \ required because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpsv1bddk7.rs:21:42\n\
    \   |\n21 |                     cnt += a[i] - a[j] - a[k];\n   |             \
    \                             ^^^^ slice indices "
  stdout: ''
  timestamp: 1660010539
