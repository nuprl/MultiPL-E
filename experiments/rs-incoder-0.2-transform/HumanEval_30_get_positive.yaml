name: HumanEval_30_get_positive
language: rs
prompt: "/// Return only positive numbers in the list.\n/// >>> get_positive(vec![-1,\
  \ 2, -4, 5, 6])\n/// vec![2, 5, 6]\n/// >>> get_positive(vec![5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10])\n/// vec![5, 3, 2, 3, 9, 123, 1]\nfn get_positive(l: Vec<isize>)\
  \ -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = get_positive;\n    assert_eq!(candidate(vec![-1,\
  \ -2, 4, 5, 6]), vec![4, 5, 6]);\n    assert_eq!(candidate(vec![5, 3, -5, 2, 3,\
  \ 3, 9, 0, 123, 1, -10]), vec![5, 3, 2, 3, 3, 9, 123, 1]);\n    assert_eq!(candidate(vec![-1,\
  \ -2]), Vec::<isize>::new());\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
  }\n"
completions: ['    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut res = Vec::new();\n    for x in l {\n        if\
    \ x >= 0 {\n            res.push(x);\n        }\n    }\n    res", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    let mut result\
    \ = Vec::new();\n    let mut positive = l.iter().filter(|&x| x > 0).collect::<Vec<_>>();\n\
    \    positive.sort_unstable();\n    positive.dedup();\n    positive.cloned().push(0);\n\
    \    positive.iter().cloned().for_each(|&x| {\n        result.push(x);\n    });\n\
    \    result", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x >= 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut result = vec![];\n    for x in l {\n        if\
    \ x >= 0 {\n            result.push(x);\n        }\n    }\n    result", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut positive = Vec::new();\n    for x in l {\n   \
    \     if x >= 0 {\n            positive.push(x);\n        }\n    }\n    positive",
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    let mut res = vec![];\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()', "    let mut res\
    \ = vec![];\n    for i in l {\n        if i > 0 {\n            res.push(i);\n\
    \        }\n    }\n    res", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut positive = vec![];\n    for x in l {\n       \
    \ if x > 0 {\n            positive.push(x);\n        }\n    }\n    positive",
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  "    let mut res = Vec::new();\n    let mut i = 0;\n    while i < l.len() {\n  \
    \      if l[i] > 0 {\n            res.push(l[i]);\n        }\n        i += 1;\n\
    \    }\n    res", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', "    let mut result\
    \ = Vec::new();\n    for elt in l {\n        if elt > 0 {\n            result.push(elt);\n\
    \        }\n    }\n    result", '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut result = vec![];\n    for i in l {\n        if\
    \ i > 0 {\n            result.push(i);\n        }\n    }\n    result", '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x|
    x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut positive = Vec::new();\n    for x in l {\n   \
    \     if x > 0 {\n            positive.push(x);\n        }\n    }\n    positive",
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x >= 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', "    let mut result = vec![];\n   \
    \ for el in l {\n        if el > 0 {\n            result.push(el);\n        }\n\
    \    }\n    result", '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x|
    x > 0).collect()', "    let mut positive = vec![];\n    for x in l {\n       \
    \ if x > 0 {\n            positive.push(x);\n        }\n    }\n    positive",
  '    l.iter().filter(|&x| x >= 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()',
  "    let mut res = vec![];\n    for el in l {\n        if el > 0 {\n           \
    \ res.push(el);\n        }\n    }\n    res", '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x >= 0).collect()',
  '    l.iter().filter(|x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()',
  '    l.iter().filter(|&x| x > 0).collect()', '    l.iter().filter(|&x| x > 0).collect()']
stop_tokens:
- "\n}"
