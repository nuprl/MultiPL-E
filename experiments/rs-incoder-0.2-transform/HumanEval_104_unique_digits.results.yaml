language: rs
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as usize);\n    }\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1vhjx89.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn1vhjx89.rs:24:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n24 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for n in x.iter() {\n        if n % 2 == 0\
    \ {\n            result.push(n);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpanapin80.rs:17:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for d in digits {\n        if !even {\n       \
    \     result.push(d);\n        }\n        even = !even;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqwv3v5rb.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: -1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let digit = x[i];\n        if digits.contains(&digit)\
    \ {\n            continue;\n        }\n        digits.push(digit);\n        i\
    \ += 1;\n    }\n    let mut i = 0;\n    while i < x.len() {\n        let digit\
    \ = x[i];\n        if digits.contains(&digit) {\n            continue;\n     \
    \   }\n        result.push(x[i]);\n        i += 1;\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028144
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        digits.push(n % 10);\n    }\n    \n    for digit in digits {\n\
    \        if digit % 2 == 0 {\n            result.push(digit);\n        }\n   \
    \ }\n    \n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp6jbhxj43.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut i = 0;\n    while i < x.len() {\n    \
    \    if digits[i] != 0 {\n            even = false;\n        } else {\n      \
    \      even = true;\n        }\n        if even {\n            result.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpa84g0fnp.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            if !digits.is_empty() {\n                result.push(digits.iter().cloned().collect::<Vec<_>>().sort().collect::<Vec<_>>().first());\n\
    \                digits.clear();\n            }\n            result.push(i);\n\
    \        }\n    }\n    if !digits.is_empty() {\n        result.push(digits.iter().cloned().collect::<Vec<_>>().sort().collect::<Vec<_>>().first());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz5j6rl3r.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: `()` is not an\
    \ iterator\n  --> /tmp/tmpz5j6rl3r.rs:17:79\n   |\n17 |                 result.push(digits.iter().cloned().collect::<Vec<_>>().sort().collect::<Vec<_>>().first());\n\
    \   |                                                                        \
    \       ^^^^^^^ `()` is not an iterator\n   |\n   = note: the following trait\
    \ bounds were not satisfied:\n           `(): Iterator`\n           which is required\
    \ by `&mut (): Iterator`\n\nerror[E0599]: `()` is not an iterator\n  --> /tmp/tmpz5j6rl3r.rs:24:71\n\
    \   |\n24 |         result.push(digits.iter().cloned().collect::<Vec<_>>().sort().collect::<Vec<_>>().first());\n\
    \   |                                                                       ^^^^^^^\
    \ `()` is not an iterator\n   |\n   = note: the following trait bounds were not\
    \ satisfied:\n           `(): Iterator`\n           which is required by `&mut\
    \ (): Iterator`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for n in x {\n        if n % 10 == 0 {\n \
    \           result.push(n);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmpa5ey0ixv.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6ngklohg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n       \
    \ }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp7l_9yad_.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr03d3jx.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|&x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut i = 0;\n    while i < x.len() {\n    \
    \    if digits[i] != 0 {\n            if even {\n                result.push(digits[i]);\n\
    \                i += 1;\n            } else {\n                even = true;\n\
    \            }\n        } else {\n            even = false;\n            i +=\
    \ 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpg6qz8w87.rs:32:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.into_iter().cloned().collect::<Vec<_>>();\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for d in digits {\n        result.push(d);\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpdb2axc84.rs:12:31\n     |\n12   |     let mut x = x.into_iter().cloned().collect::<Vec<_>>();\n\
    \     |                               ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&_`\n                     found type\
    \ `isize`\nnote: required by a bound in `cloned`\n\nerror[E0599]: the method `collect`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpdb2axc84.rs:12:40\n   |\n12 |       let mut\
    \ x = x.into_iter().cloned().collect::<Vec<_>>();\n   |                      \
    \                    ^^^^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0271, E0599.\n\
    For more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        digits.push(n % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n       \
    \ }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpxijz7gln.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] != 0 {\n          \
    \  if digits[i] % 2 == 0 {\n                evens.push(digits[i]);\n         \
    \   } else {\n                odd.push(digits[i]);\n            }\n        }\n\
    \        i += 1;\n    }\n    while evens.len() > 0 {\n        let mut i = 0;\n\
    \        while i < evens.len() {\n            let mut j = i + 1;\n           \
    \ while j < evens.len() {\n                if evens[i] == evens[j] {\n       \
    \             evens.remove(&evens[i]);\n                    odd.remove(&odd[i]);\n\
    \                    i += 1;\n                    j += 1;\n                } else\
    \ {\n                    i += 1;\n                }\n            }\n        }\n\
    \    }\n    while odd.len() > 0 {\n        let mut i = 0;\n        while i < odd.len()\
    \ {\n            let mut j = i + 1;\n            while j < odd.len() {\n     \
    \           if odd[i] == odd[j] {\n                    evens.remove(&odd[i]);\n\
    \                    odd.remove(&odd[i]);\n                    i += 1;\n     \
    \               j += 1;\n                } else {\n                    i += 1;\n\
    \                }\n            }\n        }\n    }\n    evens.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp9cnwprd2.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9cnwprd2.rs:31:34\n   |\n31 |                     evens.remove(&evens[i]);\n\
    \   |                                  ^^^^^^^^^ expected `usize`, found reference\n\
    \   |\n   = note:   expected type `usize`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n31 -                     evens.remove(&evens[i]);\n\
    31 +                     evens.remove(evens[i]);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9cnwprd2.rs:32:32\n   |\n32 |                     odd.remove(&odd[i]);\n\
    \   |                                ^^^^^^^ expected `usize`, found reference\n\
    \   |\n   = note:   expected type `usize`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n32 -                     odd.remove(&odd[i]);\n\
    32 +                     odd.remove(odd[i]);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9cnwprd2.rs:47:34\n   |\n47 |                     evens.remove(&odd[i]);\n\
    \   |                                  ^^^^^^^ expected `usize`, found reference\n\
    \   |\n   = note:   expected type `usize`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n47 -                     evens.remove(&odd[i]);\n\
    47 +                     evens.remove(odd[i]);\n   | \n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9cnwprd2.rs:48:32\n   |\n48 |                     odd.remove(&odd[i]);\n\
    \   |                                ^^^^^^^ expected `usize`, found reference\n\
    \   |\n   = note:   expected type `usize`\n           found reference `&_`\nhelp:\
    \ consider removing the borrow\n   |\n48 -                     odd.remove(&odd[i]);\n\
    48 +                     odd.remove(odd[i]);\n   | \n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error,"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut even = true;\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if even == true {\n            if digits[i] != 0 {\n                result.push(digits[i]);\n\
    \            }\n            i += 1;\n        } else {\n            if digits[i]\
    \ != 0 {\n                even = false;\n            }\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdj8qfrx9.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let digit = x[i] - '0';\n        if\
    \ digits.contains(&digit) {\n            result.push(i);\n        } else {\n \
    \           digits.push(digit);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot subtract `char` from `isize`\n  --> /tmp/tmpmz3zyryo.rs:14:26\n\
    \   |\n14 |         let digit = x[i] - '0';\n   |                          ^ no\
    \ implementation for `isize - char`\n   |\n   = help: the trait `Sub<char>` is\
    \ not implemented for `isize`\n   = help: the following other types implement\
    \ trait `Sub<Rhs>`:\n             <&'a f32 as Sub<f32>>\n             <&'a f64\
    \ as Sub<f64>>\n             <&'a i128 as Sub<i128>>\n             <&'a i16 as\
    \ Sub<i16>>\n             <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n\
    \             <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n  \
    \         and 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmz3zyryo.rs:22:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    digits.sort_unstable();\n    for\
    \ d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpbongkjx3.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &x in\
    \ x {\n        if x.is_even() {\n            digits.push(x);\n        } else {\n\
    \            result.push(x - digits.pop().unwrap());\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqmtziglx.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let mut digit = x.len() - i;\n    \
    \    while digit >= 0 && digits[digit] == 0 {\n            digit -= 1;\n     \
    \   }\n        if digit >= 0 {\n            digits.push(digit);\n        }\n \
    \       i += 1;\n    }\n    for i in 0..digits.len() {\n        let mut j = i;\n\
    \        while j > 0 && digits[j - 1] == digits[j] {\n            j -= 1;\n  \
    \      }\n        if j > 0 {\n            result.push(digits[j]);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqkzh1qbe.rs:32:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    32 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      result.push(digits[i]);\n            i += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzbtlh2oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    digits.sort_unstable();\n    for d in\
    \ digits {\n        if result.contains(&d) {\n            continue;\n        }\n\
    \        result.push(d);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpy7r7ded3.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = vec![];\n    for d in x {\n \
    \       digits.push(d % 10);\n    }\n    for d in digits {\n        if d % 2 ==\
    \ 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpo9tl839h.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|&x| x as usize).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    \n    while\
    \ !digits.is_empty() {\n        let mut digit = digits.remove(0);\n        if\
    \ digit % 2 == 0 {\n            evens.push(digit);\n        } else {\n       \
    \     odd.push(digit);\n        }\n    }\n    \n    evens.sort_unstable();\n \
    \   odd.sort_unstable();\n    \n    evens.iter().cloned().chain(odd).cloned().collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, usize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmp6wqgdij0.rs:27:38\n   |\n27 |     evens.iter().cloned().chain(odd).cloned().collect::<Vec<_>>()\n\
    \   |                                      ^^^^^^ expected reference, found `usize`\n\
    \   |\n   = note: expected reference `&&_`\n              found reference `&usize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, usize>>`\n   = note: 1 redundant requirement hidden\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `std::iter::Chain<Cloned<std::slice::Iter<'_, usize>>, std::vec::IntoIter<usize>>`\n\
    \nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<usize> as Iterator>::Item\
    \ == &_`\n  --> /tmp/tmp6wqgdij0.rs:27:38\n   |\n27 |     evens.iter().cloned().chain(odd).cloned().collect::<Vec<_>>()\n\
    \   |                                      ^^^^^^ expected reference, found `usize`\n\
    \   |\n   = note: expected reference `&_`\n                   found type `usize`\n\
    \   = note: required because of the requirements on the impl of `Iterator` for\
    \ `std::iter::Chain<Cloned<std::slice::Iter<'_, usize>>, std::vec::IntoIter<usize>>`\n\
    \nerror[E0599]: the method `collect` exists for struct `Cloned<std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ usize>>, std::vec::IntoIter<usize>>>`, but its trait bounds were not satisfied\n\
    \  --> /tmp/tmp6wqgdij0.rs:27:47\n   |\n27 |       evens.iter().cloned().chain(odd).cloned().collect::<Vec<_>>()\n\
    \   |                                                 ^^^^^^^ method cannot be\
    \ called on `Cloned<std::iter::Chain<Cloned<std::slice::Iter<'_, usize>>, std::vec::IntoIter<usize>>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::iter::Chain<Cloned<std::slice::Iter<'_,\
    \ usize>>, std::vec::IntoIter<usize>> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::iter::Chain<Cloned<std::slice::Iter<'_, usize>>,\
    \ std::vec::IntoIter<usize>>>: Iterator`\n           `Cloned"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i as isize);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result.push(0);\n    result.extend(digits.iter().cloned());\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0o6r56r.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i);\n    }\n    \n    let mut digits_len = digits.len();\n\
    \    let mut digit_idx = 1;\n    while digits_len > 0 {\n        let mut digit_idx\
    \ = 1;\n        while digits_len > 0 && digits[digit_idx] % 2 == 0 {\n       \
    \     digit_idx += 1;\n        }\n        result.push(digits[digit_idx - 1]);\n\
    \        digits_len -= 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz186krnh.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        if d > 0 {\n            digits.push(d % 10);\n        }\n    }\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpguyq4ugb.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpshpjf_py.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ digits_set = HashSet::new();\n    for &i in x {\n        if digits_set.contains(&i)\
    \ {\n            continue;\n        }\n        digits.push(i);\n        digits_set.insert(i);\n\
    \    }\n    digits.sort_unstable();\n    for i in 0..digits.len() {\n        if\
    \ digits[i] % 2 == 0 {\n            result.push(digits[i]);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpsynrxrb3.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpsynrxrb3.rs:13:9\n   |\n13 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for &i\
    \ in x {\n        if seen.contains(&i) {\n            continue;\n        }\n \
    \       result.push(i);\n        seen.insert(i);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp5vz83cxh.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5vz83cxh.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: -1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    while evens.len() > 0 {\n        let mut\
    \ i = 0;\n        while i < evens.len() {\n            if evens[i] % 2 == 0 {\n\
    \                result.push(evens[i]);\n                i += 1;\n           \
    \ } else {\n                break;\n            }\n        }\n    }\n    while\
    \ odd.len() > 0 {\n        let mut i = 0;\n        while i < odd.len() {\n   \
    \         if odd[i] % 2 == 0 {\n                break;\n            } else {\n\
    \                result.push(odd[i]);\n                i += 1;\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028144
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    for d in digits {\n        if d %\
    \ 2 == 0 {\n            evens.push(d.clone());\n        } else {\n           \
    \ result.push(d);\n        }\n    }\n    \n    for e in evens {\n        result.push(e);\n\
    \    }\n    \n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpkuumbynx.rs:32:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let mut digit = x[i];\n        while\
    \ digit > 0 {\n            digit = digit % 10;\n            if digits.contains(&digit)\
    \ {\n                break;\n            }\n            digits.push(digit);\n\
    \            i += 1;\n        }\n        if digits.len() == 0 {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcpw5u96x.rs:27:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    27 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmppaw75uwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < x.len()\
    \ {\n        if digits_set.contains(&x[i]) {\n            i += 1;\n          \
    \  continue;\n        }\n        result.push(x[i]);\n        digits_set.insert(x[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp8pv9e_m9.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as isize);\n    }\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu93u4llz.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            i += 1;\n     \
    \       continue;\n        }\n        result.push(digits[i]);\n        digits_set.insert(digits[i]);\n\
    \        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp_samupan.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_samupan.rs:23:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for d in digits {\n        if !even {\n       \
    \     result.push(d);\n        }\n        even = !even;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpku_kpiru.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for &i\
    \ in x {\n        if seen.contains(&i) {\n            continue;\n        }\n \
    \       seen.insert(i);\n        result.push(i);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpagiot65p.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpagiot65p.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for num in x {\n        if num % 2 == 0 {\n\
    \            result.push(num);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpb1pdel1j.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        digits.push(n);\n    }\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n      \
    \  }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkkcbl5_3.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.clone();\n    while x.len() > 0 {\n        let digit = x.pop() as isize;\n\
    \        digits.push(digit);\n        if digit % 2 == 0 {\n            result.push(digit);\n\
    \        }\n    }\n    result.sort_unstable();\n    result.dedup();\n    result.push(0);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0605]: non-primitive cast: `Option<isize>` as `isize`\n  --> /tmp/tmp9m_imj6c.rs:14:21\n\
    \   |\n14 |         let digit = x.pop() as isize;\n   |                     ^^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0605`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.len();\n    let mut last_digit = 0;\n    let\
    \ mut last_digit_index = 0;\n    let mut last_digit_value = digits[last_digit_index];\n\
    \    while digits_len > 0 {\n        let mut digit_value = digits[last_digit_index];\n\
    \        last_digit_index += 1;\n        last_digit_value = digits[last_digit_index];\n\
    \        if digit_value % 2 == 0 {\n            result.push(last_digit_value);\n\
    \        }\n        digits_len -= 1;\n    }\n    result\n}\n\nfn main() {\n  \
    \  let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 4 but the
    index is 4'', /tmp/tmpbrzh9eoe.rs:19:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if digits[i] % 2 == 0 {\n            evens.push(digits[i]);\n       \
    \ }\n        i += 1;\n    }\n    evens.sort_unstable();\n    for i in evens {\n\
    \        if result.contains(&i) {\n            continue;\n        }\n        result.push(i);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp91pbhbx_.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &x in\
    \ x {\n        if x.is_even() {\n            digits.push(x);\n        } else {\n\
    \            if !digits.is_empty() {\n                result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpg7a096_y.rs:26:3\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for &x\
    \ in x {\n   |                 - unclosed delimiter\n...\n15 |         } else\
    \ {\n   |                - unclosed delimiter\n16 |             if !digits.is_empty()\
    \ {\n   |                                   - this delimiter might not be properly\
    \ closed...\n17 |                 result.push(digits.iter().cl...\n18 | }\n  \
    \ | - ...as it matches this but it has different indentation\n...\n26 | }\n  \
    \ |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpg7a096_y.rs:17:28\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                                   - closing delimiter possibly meant for this\n\
    ...\n17 |                 result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().c...\n\
    \   |                            ^ unclosed delimiter\n18 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror: unexpected token: `)`\n  --> /tmp/tmpg7a096_y.rs:18:1\n\
    \   |\n18 | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg7a096_y.rs:12:9\n\
    \   |\n12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: `Vec<_>` is not\
    \ an iterator\n   --> /tmp/tmpg7a096_y.rs:17:108\n    |\n17  |   ...   result.push(digits.iter().cloned().collect::<Vec<_>>().iter().cloned().collect::<Vec<_>>().cloned().collect::<Vec<_>>().cloned().co...\n\
    \    |                                                                       \
    \                             ^^^^^^ `Vec<_>` is not an iterator\n    |\n    =\
    \ note: the following trait bounds were not satisfied:\n            `Vec<_>: Iterator`\n\
    \            which is required by `&mut Vec<_>: Iterator`"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for d in digits {\n        if result.contains(&d)\
    \ {\n            continue;\n        }\n        result.push(d);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmput4xwxnf.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &x in\
    \ x {\n        let mut digit = x;\n        while digit % 2 == 0 {\n          \
    \  digit /= 2;\n        }\n        digits.push(digit);\n    }\n    for &x in x\
    \ {\n        if !digits.contains(&x) {\n            result.push(x);\n        }\n\
    \    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppeqitr9f.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppeqitr9f.rs:19:9\n   |\n19 |     for &x in x {\n   |         ^^\
    \    - this expression has type `Option<isize>`\n   |         |\n   |        \
    \ expected `isize`, found reference\n   |         help: you can probably remove\
    \ the explicit borrow: `x`\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let mut digit = x.get_mut(i);\n   \
    \     if digit % 2 == 0 {\n            digits.push(digit);\n        }\n      \
    \  i += 1;\n    }\n    for digit in digits {\n        let mut i = 0;\n       \
    \ while i < result.len() {\n            if result[i] == digit {\n            \
    \    break;\n            }\n            i += 1;\n        }\n        if i == result.len()\
    \ {\n            result.push(digit);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `Option<&mut isize>` by `{integer}`\n  --> /tmp/tmp0rfstcre.rs:15:18\n\
    \   |\n15 |         if digit % 2 == 0 {\n   |            ----- ^ - {integer}\n\
    \   |            |\n   |            Option<&mut isize>\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0rfstcre.rs:32:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n32 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<Option<&mut isize>>`\n\nerror: aborting due to\
    \ 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_len = digits.len();\n    let mut i = 0;\n    while i < digits_len\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp92drr365.rs:27:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    evens.sort_unstable();\n    odd.sort_unstable();\n\
    \    for i in evens.iter().rev() {\n        if odd.contains(&i) {\n          \
    \  result.push(i);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `String` by `{integer}`\n  --> /tmp/tmprm42xd1n.rs:16:22\n\
    \   |\n16 |         if digits[i] % 2 == 0 {\n   |            --------- ^ - {integer}\n\
    \   |            |\n   |            String\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprm42xd1n.rs:30:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n30 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&String`\n   |\n   = note: expected struct `Vec<isize>`\n           \
    \   found struct `Vec<&String>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0369.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      result.push(digits[i]);\n            i += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzbtlh2oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6ngklohg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    let mut i = 0;\n    while i <\
    \ digits.len() {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdn19nztd.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: -1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let mut j = i;\n        while j < x.len()\
    \ && x[j] % 2 == 0 {\n            j = j + 1;\n        }\n        if j - i > 1\
    \ {\n            result.push(x[i]);\n            digits.push(x[j]);\n        \
    \    i = j;\n        }\n    }\n    result.sort_unstable();\n    result.push(digits[digits.len()\
    \ - 1]);\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n \
    \   assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028144
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    for d in &mut digits {\n      \
    \  if !digits_set.insert(d) {\n            result.push(d);\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpoxip3uvh.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoxip3uvh.rs:18:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&mut isize`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<&mut isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut i = 1;\n    while i < digits.len() {\n\
    \        if digits[i] % 2 == 0 {\n            even = true;\n        }\n      \
    \  if even {\n            result.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpb11gkw77.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        if\
    \ !result.contains(&digits[i]) {\n            result.push(digits[i]);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp7ughbk7k.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe9xdrvcj.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    for &i in x {\n        if i % 2 == 0 {\n     \
    \       result.push(i);\n        }\n    }\n    result.sort_unstable();\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe9xdrvcj.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i as isize);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwib37n7n.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i / 10);\n    }\n    let mut i = 0;\n    while i <\
    \ x.len() {\n        if digits[i] != 0 {\n            result.push(i);\n      \
    \  }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfc41x9_g.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfc41x9_g.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    let mut i = 0;\n    while i <\
    \ digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp4tjsmbgv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &x in x {\n        if x.is_even() {\n\
    \            result.push(x);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptrxwm_e2.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    let mut i = 0;\n    while i <\
    \ x.len() {\n        if digits[i] != 0 {\n            result.push(x[i]);\n   \
    \         i += 1;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `x`\n   --> /tmp/tmp75s52t_h.rs:16:15\n\
    \    |\n9   | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n    |         \
    \         - move occurs because `x` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n12  |     for d in x {\n    |              - `x` moved\
    \ due to this implicit call to `.into_iter()`\n...\n16  |     while i < x.len()\
    \ {\n    |               ^^^^^^^ value borrowed here after move\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `x`\nhelp:\
    \ consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n12  |     for d in &x {\n    |              +\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6ngklohg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.iter().cloned().collect::<Vec<_>>();\n    let mut i = 0;\n    while i\
    \ < x.len() {\n        let mut digit = x.len() - i;\n        while digit >= 0\
    \ && digits[digit] == 0 {\n            digit -= 1;\n        }\n        digits.push(digit);\n\
    \        if digit == 0 {\n            result.push(x[i]);\n            i += 1;\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 4'', /tmp/tmpkpowow_w.rs:16:29

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = true;\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if digits[i] % 2 == 0 {\n            even = false;\n        }\n     \
    \   if even {\n            result.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmp035dmqf7.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|&x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    for &x in &digits {\n        if x % 2 ==\
    \ 0 {\n            evens.push(x);\n        }\n    }\n    for &x in &evens {\n\
    \        result.push(x);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpvjw5w9z8.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut index = 0;\n    while index < digits.len()\
    \ {\n        if digits[index] % 2 == 0 {\n            even = true;\n        }\n\
    \        if even {\n            result.push(digits[index]);\n        }\n     \
    \   index += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpwad_zffj.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4v1p59or.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4v1p59or.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n       \
    \ }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpz8fcr5j1.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i);\n    }\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \      }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoq5xkyvn.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = HashSet::new();\n    let mut i = 0;\n    while i < x.len()\
    \ {\n        if digits_set.contains(&x[i]) {\n            continue;\n        }\n\
    \        digits_set.insert(x[i]);\n        result.push(x[i]);\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmp1e_1_gil.rs:12:26\n   |\n12 |     let mut digits_set = HashSet::new();\n\
    \   |                          ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.iter().cloned().collect::<Vec<_>>();\n    let mut digit = 0;\n    let\
    \ mut i = 0;\n    while i < x.len() {\n        digit = x.iter().filter(|&x| x\
    \ % 10 == 0).count();\n        if digit == 0 {\n            result.push(x[i]);\n\
    \            digits.push(x[i] as isize);\n        }\n        i += 1;\n    }\n\
    \    let mut i = 0;\n    while i < result.len() {\n        if digits[digit] ==\
    \ 0 {\n            result.swap(i, i + 1);\n            digits.swap(i, i + 1);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33, 1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp56d851a3.rs:36:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as usize);\n    }\n    \n    for i in 0..digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \      }\n    }\n    \n    result.sort_unstable();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywervt5q.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpywervt5q.rs:23:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n23 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as usize);\n    }\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg1moq9iz.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpg1moq9iz.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let digit = x[i];\n        if digit\
    \ < 10 {\n            digits.push(digit);\n            i += 1;\n        } else\
    \ {\n            if digits.iter().any(|&x| x % 2 == 0) {\n                result.push(digits.pop());\n\
    \            } else {\n                result.push(digit);\n            }\n  \
    \          i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhfue4z8.rs:22:29\n   |\n\
    22 |                 result.push(digit);\n   |                             ^^^^^\
    \ expected enum `Option`, found `isize`\n   |\n   = note: expected enum `Option<isize>`\n\
    \              found type `isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n22 |                 result.push(Some(digit));\n   |                  \
    \           +++++     +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbhfue4z8.rs:27:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if digits[i] == result[j]\
    \ {\n                j += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if j == result.len() {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6zhy6mnu.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i as isize);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result.push(0);\n    result.extend(digits.iter().cloned());\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl0o6r56r.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        if n % 10 == 0 {\n            digits.push(n % 10);\n        } else\
    \ {\n            if !digits.is_empty() {\n                result.push(n % 10);\n\
    \                digits.clear();\n            }\n        }\n    }\n    if !digits.is_empty()\
    \ {\n        result.push(n % 10);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `n` in this scope\n  --> /tmp/tmpuoprv1d7.rs:23:21\n\
    \   |\n23 |         result.push(n % 10);\n   |                     ^ help: a local\
    \ variable with a similar name exists: `x`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut digits_iter = digits.iter();\n    let mut digits_iter = digits_iter.map(|x|\
    \ x.chars().collect::<Vec<_>>());\n    let mut digits_iter = digits_iter.flat_map(|x|\
    \ x.iter());\n    let mut digits_iter = digits_iter.filter(|x| x.len() > 0);\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \    let mut digits_iter = digits_iter.\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpyt1dn58y.rs:31:1\n   |\n31\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpyt1dn58y.rs:30:39\n\
    \   |\n30 |     let mut digits_iter = digits_iter.\n   |                     \
    \                  ^ help: add `;` here\n31 | }\n   | - unexpected token\n\nerror[E0599]:\
    \ no method named `len` found for reference `&&char` in the current scope\n  -->\
    \ /tmp/tmpyt1dn58y.rs:15:52\n   |\n15 |     let mut digits_iter = digits_iter.filter(|x|\
    \ x.len() > 0);\n   |                                                    ^^^ method\
    \ not found in `&&char`\n\nerror[E0599]: no method named `chars` found for reference\
    \ `&&char` in the current scope\n  --> /tmp/tmpyt1dn58y.rs:16:52\n   |\n16 | \
    \    let mut digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.is_digit()));\n\
    \   |                                                    ^^^^^ method not found\
    \ in `&&char`\n\nerror[E0599]: no method named `chars` found for reference `&&char`\
    \ in the current scope\n  --> /tmp/tmpyt1dn58y.rs:17:52\n   |\n17 |     let mut\
    \ digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \   |                                                    ^^^^^ method not found\
    \ in `&&char`\n\nerror[E0599]: no method named `chars` found for reference `&&char`\
    \ in the current scope\n  --> /tmp/tmpyt1dn58y.rs:18:52\n   |\n18 |     let mut\
    \ digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \   |                                                    ^^^^^ method not found\
    \ in `&&char`\n\nerror[E0599]: no method named `chars` found for reference `&&char`\
    \ in the current scope\n  --> /tmp/tmpyt1dn58y.rs:19:52\n   |\n19 |     let mut\
    \ digits_iter = digits_iter.filter(|x| x.chars().any(|x| x.to_ascii_lowercase().is_digit()));\n\
    \   |                                                    ^^^^^ method not found\
    \ in `&&char`\n\nerror[E0599]: no method named `chars` found for reference `&&char`\
    \ in the current scope\n  --> /tmp/tmpyt1dn58y.rs:20:52\n   |\n20 |     let mut\
    \ digits_iter = digits_iter.filter(|x| x.chars().any(|x|"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      result.push(digits[i]);\n            i += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzbtlh2oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            if !digits.contains(&x[i]) {\n                result.push(x[i]);\n\
    \            }\n        }\n        i += 1;\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[33, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp38fgg_o2.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x.iter() {\n        if d > 0 {\n            digits.push(d as u8);\n        }\n\
    \    }\n    let mut even = false;\n    for d in digits.iter() {\n        if d\
    \ % 2 == 0 {\n            even = true;\n        }\n    }\n    if even {\n    \
    \    result.push(0);\n    }\n    for d in digits.iter() {\n        if d % 2 !=\
    \ 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpshrjrgli.rs:13:16\n   |\n\
    13 |         if d > 0 {\n   |                ^\n   |                |\n   |  \
    \              expected `&isize`, found integer\n   |                help: consider\
    \ borrowing here: `&0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpshrjrgli.rs:28:25\n\
    \   |\n28 |             result.push(d);\n   |                         ^ expected\
    \ integer, found `&u8`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    28 |             result.push(*d);\n   |                         +\n\nerror[E0606]:\
    \ casting `&isize` as `u8` is invalid\n  --> /tmp/tmpshrjrgli.rs:14:25\n   |\n\
    14 |             digits.push(d as u8);\n   |                         -^^^^^^\n\
    \   |                         |\n   |                         cannot cast `&isize`\
    \ as `u8`\n   |                         help: dereference the expression: `*d`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0606.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        if\
    \ digits.iter().any(|&x| x == i) {\n            continue;\n        }\n       \
    \ result.push(digits[i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph2atsic7.rs:20:40\n   |\n\
    20 |         if digits.iter().any(|&x| x == i) {\n   |                       \
    \                 ^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |         if digits.iter().any(|&x| x == i.try_into().unwrap()) {\n   |   \
    \                                      ++++++++++++++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i % 2 == 0 {\n            digits.push(i);\n        } else {\n\
    \            result.push(digits.clone());\n            digits.clear();\n     \
    \   }\n    }\n    result.push(digits.clone());\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5spznh12.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5spznh12.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<Vec<_>>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.iter().cloned().collect::<Vec<_>>();\n    let mut i = 0;\n    while i\
    \ < x.len() {\n        if i % 2 == 0 {\n            digits.push(x[i]);\n     \
    \   }\n        i += 1;\n    }\n    for d in digits {\n        if !result.contains(&d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmpvfyjydkj.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        let mut digit = n % 10;\n        if digit != 0 {\n            digits.push(digit);\n\
    \        }\n    }\n    for digit in digits {\n        if result.contains(&digit)\
    \ {\n            continue;\n        }\n        result.push(digit);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp2j6yrj32.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    let mut i = 0;\n    while i <\
    \ digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp4tjsmbgv.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        digits.push(x[i] % 10);\n        i\
    \ += 1;\n    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp8q1f900z.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for d in digits {\n        if !result.contains(&d)\
    \ {\n            result.push(d);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpahmm070w.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for d in digits {\n        if !even {\n       \
    \     result.push(d);\n        }\n        even = !even;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqwv3v5rb.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr03d3jx.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as usize);\n    }\n    let mut i = 0;\n    while\
    \ i < digits.size() {\n        let mut j = i;\n        while j < digits.size()\
    \ && digits[j] % 2 == 0 {\n            j = j + 1;\n        }\n        if j ==\
    \ i {\n            result.push(i);\n            i = i + 1;\n        } else {\n\
    \            i = j;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsa1uetu5.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `size` found for struct `Vec<usize>` in the current scope\n  --> /tmp/tmpsa1uetu5.rs:16:22\n\
    \   |\n16 |     while i < digits.size() {\n   |                      ^^^^ help:\
    \ there is an associated function with a similar name: `resize`\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<usize>` in the current scope\n\
    \  --> /tmp/tmpsa1uetu5.rs:18:26\n   |\n18 |         while j < digits.size() &&\
    \ digits[j] % 2 == 0 {\n   |                          ^^^^ help: there is an associated\
    \ function with a similar name: `resize`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpsa1uetu5.rs:28:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n28 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    for &x in &x {\n        if digits.contains(&x)\
    \ {\n            evens.push(x as isize);\n        } else {\n            result.push(x);\n\
    \        }\n    }\n    \n    if evens.len() > 0 {\n        result.push(evens.iter().cloned().collect::<Vec<_>>().max());\n\
    \    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmp7mc_xwgm.rs:23:63\n    |\n23  |         result.push(evens.iter().cloned().collect::<Vec<_>>().max());\n\
    \    |                                                               ^^^- supplied\
    \ 0 arguments\n    |                                                         \
    \      |\n    |                                                              \
    \ expected 1 argument\n    |\nnote: associated function defined here\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7mc_xwgm.rs:23:21\n   |\n23 |         result.push(evens.iter().cloned().collect::<Vec<_>>().max());\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found struct `Vec`\n   |\n   = note: expected type `isize`\n      \
    \      found struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i % 2 == 0 {\n            digits.push(i);\n        } else {\n\
    \            result.push(digits.pop());\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp25dmq3wv.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp25dmq3wv.rs:19:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found enum `Option`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<Option<_>>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i % 10 == 0 {\n            digits.push(i / 10);\n        } else\
    \ {\n            result.push(i / 10);\n        }\n    }\n    for i in 0..digits.len()\
    \ {\n        if !digits.contains(&i) && result.contains(&i) {\n            result.push(i\
    \ as isize);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzr2psmf.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpnzr2psmf.rs:21:25\n   |\n21 |             result.push(i as isize);\n\
    \   |                         ^^^^^^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n21 |             result.push((i as isize).try_into().unwrap());\n\
    \   |                         +          +++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnzr2psmf.rs:24:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n24 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<usize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = vec![];\n    for n in x {\n \
    \       if n % 10 == 0 {\n            digits.push(n % 10);\n        } else {\n\
    \            result.push(n % 10);\n        }\n    }\n    for d in digits {\n \
    \       if !result.contains(&d) {\n            result.push(d);\n        }\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkbbb28xh.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        if n % 10 == 0 {\n            digits.push(n % 10);\n        } else\
    \ {\n            result.push(n % 10);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result.push(0);\n    result.extend(digits.iter().cloned());\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5, 0]`,\n right: `[1, 15, 33]`', /tmp/tmpsno37m8k.rs:28:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6ngklohg.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &x in x {\n        if x % 2 == 0 {\n \
    \           result.push(x);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzq8uxxnh.rs:11:9\n   |\n\
    11 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    for &d in &digits {\n        if d\
    \ % 2 == 0 {\n            evens.push(d)\n        }\n    }\n    \n    for &d in\
    \ &evens {\n        if !result.contains(&d) {\n            result.push(d);\n \
    \       }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpxw3l1lly.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut digits_len\
    \ = digits.len();\n    let mut i = 0;\n    while i < digits_len {\n        if\
    \ digits[i] % 2 == 0 {\n            result.push(digits[i]);\n            digits.remove(&i);\n\
    \            digits_len -= 1;\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmb2s6yb.rs:17:27\n   |\n\
    17 |             digits.remove(&i);\n   |                           ^^ expected\
    \ `usize`, found `&usize`\n   |\nhelp: consider removing the borrow\n   |\n17\
    \ -             digits.remove(&i);\n17 +             digits.remove(i);\n   | \n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i);\n        }\n    }\n    if digits.len() > 0 {\n  \
    \      result.push(digits.iter().cloned().collect::<Vec<_>>().sorted().collect::<Vec<_>>().first());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbd0mprhh.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `sorted` found for struct `Vec<_>` in the current scope\n  --> /tmp/tmpbd0mprhh.rs:20:64\n\
    \   |\n20 |         result.push(digits.iter().cloned().collect::<Vec<_>>().sorted().collect::<Vec<_>>().first());\n\
    \   |                                                                ^^^^^^ help:\
    \ there is an associated function with a similar name: `is_sorted`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &x in\
    \ x {\n        if x.is_even() {\n            digits.push(x);\n        } else {\n\
    \            let mut i = 0;\n            while i < digits.len() && digits[i] !=\
    \ x {\n                i += 1;\n            }\n            if i == digits.len()\
    \ {\n                result.push(x);\n            }\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn01fs7_w.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        digits.push(x[i] % 10);\n        i\
    \ += 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 5]`,\n right: `[1, 15, 33]`', /tmp/tmpvx5dj7n5.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n            i +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp33qchwde.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        } else {\n            result.push(digits.pop());\n        }\n       \
    \ i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcr03d3jx.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x.iter() {\n        digits.push(d % 10);\n    }\n    for d in digits.iter()\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjn5uaai.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmppaw75uwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      result.push(digits[i]);\n            i += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzbtlh2oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        digits.push(n % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n       \
    \ }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmp2kew4qw4.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for d in digits {\n        if !even {\n       \
    \     result.push(d);\n        }\n        even = !even;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpqwv3v5rb.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] != 0 {\n          \
    \  if digits[i] % 2 == 0 {\n                evens.push(digits[i]);\n         \
    \   } else {\n                odd.push(digits[i]);\n            }\n        }\n\
    \        i += 1;\n    }\n    evens.sort();\n    odd.sort();\n    for i in evens.iter().chain(odd.iter())\
    \ {\n        if !result.contains(&i) {\n            result.push(i);\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digit` found for reference `&isize` in the\
    \ current scope\n  --> /tmp/tmpml7zxsu3.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digit()).collect::<Vec<_>>();\n   |                   \
    \                      ^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpml7zxsu3.rs:32:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n32 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found reference\n   |\n   = note: expected struct `Vec<isize>`\n  \
    \            found struct `Vec<&_>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i);\n    }\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \          i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe56qx8hq.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmppaw75uwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    let mut j = 0;\n    while j < evens.len()\
    \ {\n        if evens[j] > odd.len() {\n            result.push(evens[j]);\n \
    \       } else {\n            result.push(odd[j]);\n        }\n        j += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87bojto7.rs:25:23\n   |\n\
    25 |         if evens[j] > odd.len() {\n   |                       ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |         if evens[j]\
    \ > odd.len().try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        if n % 10 == 0 {\n            digits.push(n % 10);\n        } else\
    \ {\n            result.push(n);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result.extend(digits);\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 15, 33, 1422]`,\n right: `[1, 15, 33]`', /tmp/tmp_v3cs89w.rs:27:5\nnote:\
    \ run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut even = false;\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if digits[i] % 2 == 0 {\n            even = true;\n        }\n      \
    \  if even {\n            result.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpkuzpcar7.rs:28:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for n in x {\n        if n % 2 == 0 {\n  \
    \          result.push(n);\n        }\n    }\n    result.sort_unstable();\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzn87x8v6.rs:22:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmppaw75uwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x.iter() {\n        if d % 2 == 0 {\n            digits.push(d as usize);\n\
    \        }\n    }\n    for d in digits.iter() {\n        if result.contains(&d)\
    \ {\n            continue;\n        }\n        result.push(d);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6mj3ekx_.rs:23:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    23 |     result\n   |     ^^^^^^ expected `isize`, found `&usize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&usize>`\n\
    \nerror[E0606]: casting `&isize` as `usize` is invalid\n  --> /tmp/tmp6mj3ekx_.rs:14:25\n\
    \   |\n14 |             digits.push(d as usize);\n   |                       \
    \  -^^^^^^^^^\n   |                         |\n   |                         cannot\
    \ cast `&isize` as `usize`\n   |                         help: dereference the\
    \ expression: `*d`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as u8);\n    }\n    let mut i = 0;\n    while i <\
    \ digits.size() {\n        if digits[i] != digits[digits.size() - i - 1] {\n \
    \           result.push(digits[i]);\n        }\n        i += 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpls259rfw.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0599]: no method named\
    \ `size` found for struct `Vec<u8>` in the current scope\n  --> /tmp/tmpls259rfw.rs:16:22\n\
    \   |\n16 |     while i < digits.size() {\n   |                      ^^^^ help:\
    \ there is an associated function with a similar name: `resize`\n\nerror[E0599]:\
    \ no method named `size` found for struct `Vec<u8>` in the current scope\n  -->\
    \ /tmp/tmpls259rfw.rs:17:39\n   |\n17 |         if digits[i] != digits[digits.size()\
    \ - i - 1] {\n   |                                       ^^^^ help: there is an\
    \ associated function with a similar name: `resize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpls259rfw.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                    ---------- expected\
    \ `Vec<isize>` because of return type\n...\n22 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `u8`\n   |\n   = note: expected struct `Vec<isize>`\n       \
    \       found struct `Vec<u8>`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i);\n    }\n    digits.sort_unstable();\n    for i\
    \ in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp88mosftw.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for n in\
    \ x {\n        if n % 10 == 0 {\n            digits.push(n % 10);\n        } else\
    \ {\n            result.push(n % 10);\n        }\n    }\n    let mut i = 0;\n\
    \    while i < result.len() {\n        if digits[result.len() - i] == 0 {\n  \
    \          result.pop();\n        } else {\n            i += 1;\n        }\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 4'', /tmp/tmpxebkhnke.rs:21:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n            i +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp33qchwde.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    while evens.len() > 0 {\n        let mut\
    \ j = odd.len() - 1;\n        while j >= 0 && odd[j] % 2 == 0 {\n            odd.remove(&odd[j]);\n\
    \            j -= 1;\n        }\n        result.push(evens.pop());\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoepyn918.rs:26:24\n   |\n\
    26 |             odd.remove(&odd[j]);\n   |                        ^^^^^^^ expected\
    \ `usize`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpoepyn918.rs:31:5\n\
    \   |\n9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |            \
    \                        ---------- expected `Vec<isize>` because of return type\n\
    ...\n31 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    for d in digits {\n        if d.chars().filter(|c|\
    \ c.is_digit()).count() == 0 {\n            result.push(d);\n        } else {\n\
    \            evens.push(d.chars().filter(|c| c.is_digit()).count());\n       \
    \ }\n    }\n    \n    result.sort_unstable();\n    result.extend(evens);\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \   --> /tmp/tmpyh22qm7c.rs:15:35\n    |\n15  |         if d.chars().filter(|c|\
    \ c.is_digit()).count() == 0 {\n    |                                   ^^^^^^^^-\
    \ supplied 0 arguments\n    |                                   |\n    |     \
    \                              expected 1 argument\n    |\nnote: associated function\
    \ defined here\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpyh22qm7c.rs:18:47\n    |\n18  |             evens.push(d.chars().filter(|c|\
    \ c.is_digit()).count());\n    |                                             \
    \  ^^^^^^^^- supplied 0 arguments\n    |                                     \
    \          |\n    |                                               expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0271]: type mismatch\
    \ resolving `<Vec<usize> as IntoIterator>::Item == String`\n   --> /tmp/tmpyh22qm7c.rs:23:12\n\
    \    |\n23  |     result.extend(evens);\n    |            ^^^^^^ expected struct\
    \ `String`, found `usize`\n    |\nnote: required by a bound in `extend`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyh22qm7c.rs:24:5\n   |\n9  | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                    ----------\
    \ expected `Vec<isize>` because of return type\n...\n24 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found struct `String`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<String>`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0061, E0271,\
    \ E0308.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    for &d in &digits {\n        if d % 2 == 0 {\n\
    \            even = true;\n        } else {\n            result.push(d);\n   \
    \     }\n    }\n    if even {\n        result\n    } else {\n        Vec::new()\n\
    \    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmpdxnnxgos.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    for digit in digits {\n        if digit % 2 ==\
    \ 0 {\n            even = true;\n        } else {\n            result.push(digit);\n\
    \        }\n    }\n    if even {\n        result\n    } else {\n        Vec::new()\n\
    \    }\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1vwrdkc5.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        if d > 0 {\n            digits.push(d % 10);\n        }\n    }\n\
    \    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpm6ekbn23.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as u8);\n    }\n    let mut i = 0;\n    while i <\
    \ digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa0_9hafs.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpa0_9hafs.rs:24:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n24 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `u8`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<u8>`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|&x| x % 10).collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] != 0 {\n\
    \            result.push(digits[i]);\n            i += 1;\n        }\n       \
    \ else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 2, 1]`,\n right: `[1, 15, 33]`', /tmp/tmp1g6z314k.rs:27:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    \n    for d in 0..digits.len()\
    \ {\n        if digits[d] == 0 {\n            result.push(digits[d]);\n      \
    \  }\n    }\n    \n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp52l2e8k4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        let\
    \ mut j = 0;\n        while j < result.len() {\n            if digits[i] == result[j]\
    \ {\n                j += 1;\n            } else {\n                break;\n \
    \           }\n        }\n        if j == result.len() {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp6zhy6mnu.rs:37:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut even = true;\n    for digit in digits {\n        if digit % 2 ==\
    \ 0 {\n            even = false;\n        }\n        if even {\n            result.push(digit);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[15, 33]`,\n right: `[1, 15, 33]`', /tmp/tmpy2hxzh3b.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n            i +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp33qchwde.rs:25:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as usize);\n    }\n    let mut i = 0;\n    while\
    \ i < x.len() {\n        let mut found = false;\n        for &d in &digits[i..]\
    \ {\n            if d % 2 == 0 {\n                found = true;\n            \
    \    break;\n            }\n        }\n        if found {\n            result.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdtk1gjtu.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut even\
    \ = Vec::new();\n    let mut odd_digits = Vec::new();\n    let mut odd_evens =\
    \ Vec::new();\n    let mut odd_odd = Vec::new();\n    let mut odd_even = Vec::new();\n\
    \    let mut odd_odd_digits = Vec::new();\n    let mut odd_odd_evens = Vec::new();\n\
    \    let mut odd_odd_odd = Vec::new();\n    let mut odd_odd_even = Vec::new();\n\
    \    let mut odd_odd_odd_digits = Vec::new();\n    let mut odd_odd_odd_evens =\
    \ Vec::new();\n    let mut odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_even\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_digits = Vec::new();\n    let mut\
    \ odd_odd_odd_odd_evens = Vec::new();\n    let mut odd_odd_odd_odd_odd = Vec::new();\n\
    \    let mut odd_odd_odd_odd_even = Vec::new();\n    let mut odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_evens = Vec::new();\n    let\
    \ mut odd_odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_even\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_digits = Vec::new();\n  \
    \  let mut odd_odd_odd_odd_odd_odd_evens = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_odd\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_even = Vec::new();\n    let\
    \ mut odd_odd_odd_odd_odd_odd_odd_digits = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_odd_\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxb20dlm_.rs:40:41\n   |\n\
    40 |     let mut odd_odd_odd_odd_odd_odd_odd_\n   |                          \
    \               ^ help: add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpxb20dlm_.rs:9:36\n  |\n9 | fn unique_digits(x:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror[E0606]: casting `&isize`\
    \ as `usize` is invalid\n  --> /tmp/tmpxb20dlm_.rs:11:39\n   |\n11 |     let mut\
    \ digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n   |           \
    \                            -^^^^^^^^^\n   |                                \
    \       |\n   |                                       cannot cast `&isize` as\
    \ `usize`\n   |                                       help: dereference the expression:\
    \ `*x`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0606.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(digits.clone());\n            digits.clear();\n     \
    \   }\n    }\n    result.push(digits.clone());\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9wtb8qc7.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9wtb8qc7.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected struct `Vec<isize>`\n        \
    \      found struct `Vec<Vec<_>>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    \n    for d in digits {\n    \
    \    if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpjl0fo6po.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    for &i in x {\n        if i % 2 == 0 {\n \
    \           result.push(i);\n        }\n    }\n    result.sort_unstable();\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6cfkrpu.rs:11:9\n   |\n\
    11 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut even\
    \ = Vec::new();\n    let mut odd_index = Vec::new();\n    let mut even_index =\
    \ Vec::new();\n    let mut odd_value = Vec::new();\n    let mut even_value = Vec::new();\n\
    \    let mut odd_digit = Vec::new();\n    let mut even_digit = Vec::new();\n \
    \   let mut odd_index = Vec::new();\n    let mut even_index = Vec::new();\n  \
    \  let mut odd_value = Vec::new();\n    let mut even_value = Vec::new();\n   \
    \ let mut odd_digit = Vec::new();\n    let mut even_digit = Vec::new();\n    let\
    \ mut odd_index = Vec::new();\n    let mut even_index = Vec::new();\n    let mut\
    \ odd_value = Vec::new();\n    let mut even_value = Vec::new();\n    let mut odd_digit\
    \ = Vec::new();\n    let mut even_digit = Vec::new();\n    let mut odd_index =\
    \ Vec::new();\n    let mut even_index = Vec::new();\n    let mut odd_value = Vec::new();\n\
    \    let mut even_value = Vec::new();\n    let mut odd_digit = Vec::new();\n \
    \   let mut even_digit = Vec::new();\n    let mut odd_index = Vec::new();\n  \
    \  let mut even_index = Vec::new();\n    let mut odd_value = Vec::new();\n   \
    \ let mut even_value = Vec::new();\n    let mut odd_digit = Vec::new();\n    let\
    \ mut even_digit = Vec::new();\n    let mut odd_index = Vec::new();\n    let mut\
    \ even_index = Vec::new();\n    let mut odd_value = Vec::new();\n    let mut even_value\
    \ = Vec::new();\n    let mut odd_digit = Vec::new();\n    let mut even_digit =\
    \ Vec::new();\n    let mut odd_index = Vec::new();\n    let mut even_index = Vec::new();\n\
    \    let mut odd_value = Vec::new();\n    let mut even_value = Vec::new();\n \
    \   let mut odd_digit = Vec::new();\n\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp0k0eajwf.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0k0eajwf.rs:9:36\n  |\n9 | fn unique_digits(x: Vec<isize>)\
    \ -> Vec<isize> {\n  |    -------------                   ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n  |\n  = note: expected struct `Vec<isize>`\n\
    \          found unit type `()`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        digits.push(x[i] % 10);\n        i\
    \ += 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 == 0\
    \ {\n            result.push(digits[i]);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpdb7sr3no.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    \n    for &d in digits {\n        if d.is_even()\
    \ {\n            evens.push(d.clone());\n        }\n    }\n    \n    for &d in\
    \ evens {\n        result.push(d);\n    }\n    \n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmpt8zvf16m.rs:11:41\n   |\n11 |     let mut digits\
    \ = x.iter().map(|x| x.digits()).collect::<Vec<_>>();\n   |                  \
    \                       ^^^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        if d > 0 {\n            digits.push(d % 10);\n        }\n    }\n\
    \    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpm6ekbn23.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    evens.sort();\n    odd.sort();\n    for\
    \ i in evens.iter().chain(odd) {\n        if result.contains(&i) {\n         \
    \   continue;\n        }\n        result.push(i);\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<Vec<isize> as IntoIterator>::Item\
    \ == &isize`\n   --> /tmp/tmpaevwa_w1.rs:25:27\n    |\n25  |     for i in evens.iter().chain(odd)\
    \ {\n    |                           ^^^^^ expected `&isize`, found `isize`\n\
    \    |\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &isize`\n\
    \  --> /tmp/tmpaevwa_w1.rs:25:14\n   |\n25 |     for i in evens.iter().chain(odd)\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `std::iter::Chain<std::slice::Iter<'_, isize>, std::vec::IntoIter<isize>>`\n\
    \   = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `std::iter::Chain<std::slice::Iter<'_, isize>, std::vec::IntoIter<isize>>`\n\
    \nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &isize`\n  --> /tmp/tmpaevwa_w1.rs:25:14\n   |\n25 |     for i in evens.iter().chain(odd)\
    \ {\n   |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: required because of the requirements on the impl of `Iterator`\
    \ for `std::iter::Chain<std::slice::Iter<'_, isize>, std::vec::IntoIter<isize>>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpaevwa_w1.rs:31:5\n   |\n9  | fn\
    \ unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                         \
    \           ---------- expected `Vec<isize>` because of return type\n...\n31 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0308.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i as isize);\n        }\n    }\n    if result.len() ==\
    \ 0 {\n        result\n    } else {\n        let mut i = 0;\n        while i <\
    \ result.len() {\n            if digits[result[i] - 1] == 0 {\n              \
    \  result.remove(i);\n            } else {\n                i += 1;\n        \
    \    }\n        }\n        result\n    }\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmposfv30sx.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmposfv30sx.rs:24:16\n   |\n24 |  \
    \           if digits[result[i] - 1] == 0 {\n   |                ^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait\
    \ `SliceIndex<[T]>` is implemented for `usize`\n   = note: required because of\
    \ the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.clone();\n    let mut i = 0;\n    while i < x.len() {\n        let digit\
    \ = x[i] % 10;\n        if digits.contains(&digit) {\n            result.push(x[i]);\n\
    \        } else {\n            digits.push(digit);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp604s56ej.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        if\
    \ !result.contains(&digits[i]) {\n            result.push(digits[i]);\n      \
    \  }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmp7ughbk7k.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i % 10 == 0 {\n            digits.push(i / 10);\n        } else\
    \ {\n            result.push(i as isize);\n        }\n    }\n    for &i in digits\
    \ {\n        if result.contains(&i) {\n            continue;\n        }\n    \
    \    result.push(i);\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpng8kufh0.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut digits_len\
    \ = digits.len();\n    while digits_len > 0 {\n        let mut digit = digits[digits_len\
    \ - 1];\n        let mut is_even = true;\n        for &d in &mut digits {\n  \
    \          if d % 2 == 0 {\n                is_even = false;\n               \
    \ break;\n            }\n        }\n        if is_even {\n            result.push(digit);\n\
    \            digits.pop();\n        }\n        digits_len -= 1;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpep7531wu.rs:16:13\n   |\n\
    16 |         for &d in &mut digits {\n   |             ^^    ----------- this\
    \ expression has type `Option<&mut isize>`\n   |             |\n   |         \
    \    types differ in mutability\n   |             help: you can probably remove\
    \ the explicit borrow: `d`\n   |\n   = note: expected mutable reference `&mut\
    \ isize`\n                      found reference `&_`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i / 10);\n    }\n    let mut i = 0;\n    while i <\
    \ x.len() {\n        if digits[i] != 0 {\n            result.push(i);\n      \
    \  }\n        i += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfc41x9_g.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpfc41x9_g.rs:22:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i as u8);\n    }\n    \n    for &i in digits {\n  \
    \      if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n    result.sort();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj7_0b45b.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpj7_0b45b.rs:16:9\n   |\n16 |     for &i in digits {\n   |     \
    \    ^^    ------ this expression has type `Option<u8>`\n   |         |\n   |\
    \         expected `u8`, found reference\n   |         help: you can probably\
    \ remove the explicit borrow: `i`\n   |\n   = note:   expected type `u8`\n   \
    \        found reference `&_`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<isize>>();\n\
    \    let mut evens = Vec::new();\n    \n    while !digits.is_empty() {\n     \
    \   let digit = digits.remove(0).unwrap();\n        if digit % 2 == 0 {\n    \
    \        evens.push(digit);\n        } else {\n            result.push(digit);\n\
    \        }\n    }\n    \n    evens.sort_unstable();\n    result.extend(evens);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpip54h6bq.rs:15:38\n   |\n15 |         let digit = digits.remove(0).unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.clone();\n    let mut i = 0;\n    while i < x.len() {\n        let digit\
    \ = x[i] % 10;\n        if digits.contains(&digit) {\n            result.push(x[i]);\n\
    \        } else {\n            digits.push(digit);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[1, 15, 33]`', /tmp/tmp604s56ej.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i / 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n       \
    \ }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ms4mzvd.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i as isize);\n        }\n    }\n    result.sort_unstable();\n\
    \    result.dedup();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwib37n7n.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      result.push(digits[i]);\n            i += 1;\n        } else {\n      \
    \      i += 1;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpzbtlh2oi.rs:26:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ x = x.iter().cloned().collect::<Vec<_>>();\n    let mut i = 0;\n    while i\
    \ < x.len() {\n        let mut digit = 0;\n        let mut j = 0;\n        while\
    \ j < x.len() {\n            if x[j] % 10 == 0 {\n                digit += 1;\n\
    \            }\n            j += 1\n        }\n        if digit == 0 {\n     \
    \       result.push(x[i]);\n            i += 1;\n        } else {\n          \
    \  digits.push(digit);\n        }\n    }\n    result.sort_unstable();\n    result.push(digits);\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgbs0fcn7.rs:31:17\n   |\n\
    31 |     result.push(digits);\n   |                 ^^^^^^ expected `isize`, found\
    \ struct `Vec`\n   |\n   = note: expected type `isize`\n            found struct\
    \ `Vec<{integer}>`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        let mut j = i;\n        while j < x.len()\
    \ && x[j] % 2 == 0 {\n            digits.push(x[j]);\n            j = j + 1;\n\
    \        }\n        result.push(digits.pop());\n        i = j;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn8qxg0ma.rs:22:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    22 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = vec![];\n    for d in x {\n \
    \       digits.push(d % 10);\n    }\n    for i in 0..digits.len() {\n        if\
    \ digits[i] % 2 == 0 {\n            result.push(digits[i]);\n        }\n    }\n\
    \    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpnlim5lke.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|&x| x.digits()).collect::<Vec<_>>();\n\
    \    \n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ != 0 {\n            result.push(digits[i]);\n            i += 1;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    \n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpsksewi1l.rs:11:42\n   |\n11 |     let mut digits = x.iter().map(|&x|\
    \ x.digits()).collect::<Vec<_>>();\n   |                                     \
    \     ^^^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n\
    \    let mut even = false;\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if digits[i] % 2 == 0 {\n            even = true;\n        }\n      \
    \  if even {\n            result.push(digits[i]);\n        }\n        i += 1;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpswb_oux5.rs:23:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    23 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror[E0606]:\
    \ casting `&isize` as `usize` is invalid\n  --> /tmp/tmpswb_oux5.rs:11:39\n  \
    \ |\n11 |     let mut digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n\
    \   |                                       -^^^^^^^^^\n   |                 \
    \                      |\n   |                                       cannot cast\
    \ `&isize` as `usize`\n   |                                       help: dereference\
    \ the expression: `*x`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n\
    \        digits.push(i as u8);\n    }\n    digits.sort_unstable();\n    for i\
    \ in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(i\
    \ as isize);\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpflw83cyz.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut i = 0;\n    while i < x.len() {\n\
    \        if x[i] % 2 == 0 {\n            result.push(x[i]);\n        }\n     \
    \   i += 1;\n    }\n    result.sort();\n    result\n}\n\nfn main() {\n    let\
    \ candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]),\
    \ vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpg_15r9pk.rs:24:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x.iter() {\n        digits.push(d % 10);\n    }\n    for d in digits.iter()\
    \ {\n        if d % 2 == 0 {\n            result.push(d);\n        }\n    }\n\
    \    result.sort_unstable();\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwjn5uaai.rs:21:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    21 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   =\
    \ note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        if d > 0 {\n            digits.push(d % 10);\n        }\n    }\n\
    \    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n\
    \    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmpm6ekbn23.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        if d > 0 {\n            digits.push(d % 10);\n        }\n    }\n\
    \    for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n           \
    \ result.push(digits[i]);\n        }\n    }\n    result.sort_unstable();\n   \
    \ result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmphqrse1c7.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut odd_digits\
    \ = Vec::new();\n    let mut odd_evens = Vec::new();\n    let mut odd_odd = Vec::new();\n\
    \    let mut odd_odd_digits = Vec::new();\n    let mut odd_odd_evens = Vec::new();\n\
    \    let mut odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_digits = Vec::new();\n\
    \    let mut odd_odd_odd_evens = Vec::new();\n    let mut odd_odd_odd_odd = Vec::new();\n\
    \    let mut odd_odd_odd_odd_digits = Vec::new();\n    let mut odd_odd_odd_odd_evens\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_evens = Vec::new();\n    let\
    \ mut odd_odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_evens = Vec::new();\n   \
    \ let mut odd_odd_odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_evens = Vec::new();\n   \
    \ let mut odd_odd_odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_evens = Vec::new();\n   \
    \ let mut odd_odd_odd_odd_odd_odd_odd = Vec::new();\n    let mut odd_odd_odd_odd_odd_odd_odd_digits\
    \ = Vec::new();\n    let mu\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5hdun5mi.rs:39:11\n   |\n\
    39 |     let mu\n   |           ^ help: add `;` here\n40 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5hdun5mi.rs:9:36\n  |\n\
    9 | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n  |    -------------    \
    \               ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n  |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n  |\n\
    \  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &x in\
    \ x {\n        let mut digit = x;\n        while digit > 0 {\n            digit\
    \ = digit / 10;\n        }\n        digits.push(digit);\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \      }\n    }\n    result.sort_unstable();\n    result\n}\n\nfn main() {\n \
    \   let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422,\
    \ 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
    \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_z3itmxt.rs:12:9\n   |\n\
    12 |     for &x in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `x`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut seen = HashSet::new();\n    for &i\
    \ in x {\n        if seen.contains(&i) {\n            continue;\n        }\n \
    \       seen.insert(i);\n        result.push(i);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15, 33,\
    \ 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpagiot65p.rs:11:20\n   |\n11 |     let mut seen = HashSet::new();\n \
    \  |                    ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpagiot65p.rs:12:9\n   |\n12 |     for &i in x\
    \ {\n   |         ^^    - this expression has type `Option<isize>`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |         help: you\
    \ can probably remove the explicit borrow: `i`\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028138
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        digits.push(i % 10);\n    }\n    for i in 0..digits.len() {\n \
    \       if digits[i] % 2 == 0 {\n            result.push(i);\n        }\n    }\n\
    \    result.sort();\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4v1p59or.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4v1p59or.rs:21:5\n   |\n9  | fn unique_digits(x: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                    ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `usize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \ found struct `Vec<usize>`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: -1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.clone();\n    let mut digits_len\
    \ = digits.len();\n    while digits_len > 0 {\n        let mut digit = digits[digits_len\
    \ - 1];\n        let mut is_even = true;\n        for &d in &digits {\n      \
    \      if d % digit != 0 {\n                is_even = false;\n               \
    \ break;\n            }\n        }\n        if is_even {\n            result.push(digit);\n\
    \            digits.pop();\n            digits_len -= 1;\n        }\n    }\n \
    \   result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028145
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n            digits.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    for digit in digits {\n        if result.contains(&digit)\
    \ {\n            continue;\n        }\n        result.push(digit);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1422]`,\n right: `[1, 15, 33]`', /tmp/tmpi3f4c0xb.rs:30:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    \n    for digit in digits {\n        if digit\
    \ % 2 == 0 {\n            evens.push(digit);\n        }\n    }\n    \n    for\
    \ digit in evens {\n        if digit > result.len() {\n            result.push(digit);\n\
    \        }\n    }\n    \n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo8ahpri9.rs:21:20\n   |\n\
    21 |         if digit > result.len() {\n   |                    ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n21 |         if digit >\
    \ result.len().try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for d in\
    \ x {\n        digits.push(d % 10);\n    }\n    for d in digits {\n        if\
    \ d % 2 == 0 {\n            result.push(d);\n        }\n    }\n    result.sort_unstable();\n\
    \    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[2]`,\n right: `[1, 15, 33]`', /tmp/tmppaw75uwu.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028139
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut evens_count = Vec::new();\n    let\
    \ mut odd = Vec::new();\n    let mut odd_count = Vec::new();\n    let mut odd_digits\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let mut odd_digits_count\
    \ = Vec::new();\n    let mut odd_digits_count = Vec::new();\n    let \n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpsc6ym4y_.rs:51:1\n  \
    \ |\n51 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = Vec::new();\n    for &i in\
    \ x {\n        if i.is_even() {\n            digits.push(i);\n        } else {\n\
    \            result.push(i);\n        }\n    }\n    let mut i = 0;\n    while\
    \ i < result.len() {\n        if digits[result[i]].is_even() {\n            result.remove(i);\n\
    \        } else {\n            i += 1;\n        }\n    }\n    result\n}\n\nfn\
    \ main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprat9uo21.rs:12:9\n   |\n\
    12 |     for &i in x {\n   |         ^^    - this expression has type `Option<isize>`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |        \
    \ help: you can probably remove the explicit borrow: `i`\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprat9uo21.rs:21:12\n   |\n21 |  \
    \       if digits[result[i]].is_even() {\n   |            ^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    odd.sort();\n    for d in odd {\n    \
    \    if evens.iter().any(|&x| x == d) {\n            continue;\n        }\n  \
    \      result.push(d);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = unique_digits;\n    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15,\
    \ 33]);\n    assert_eq!(candidate(vec![152, 323, 1422, 10]), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![12345, 2033, 111, 151]), vec![111, 151]);\n   \
    \ assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[323]`,\n right: `[]`', /tmp/tmplqs8k29b.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        if digits[i] % 2 == 0 {\n      \
    \      evens.push(digits[i]);\n        } else {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    odd.sort();\n    evens.sort();\n    for\
    \ i in 0..odd.len() {\n        if evens.contains(&odd[i]) {\n            result.push(odd[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n\
    \    assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnihhbc38.rs:30:5\n   |\n\
    9  | fn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   |                   \
    \                 ---------- expected `Vec<isize>` because of return type\n...\n\
    30 |     result\n   |     ^^^^^^ expected `isize`, found `usize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<usize>`\n\nerror[E0606]:\
    \ casting `&isize` as `usize` is invalid\n  --> /tmp/tmpnihhbc38.rs:11:39\n  \
    \ |\n11 |     let mut digits = x.iter().map(|x| x as usize).collect::<Vec<_>>();\n\
    \   |                                       -^^^^^^^^^\n   |                 \
    \                      |\n   |                                       cannot cast\
    \ `&isize` as `usize`\n   |                                       help: dereference\
    \ the expression: `*x`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0606.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 101
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    for d in digits {\n        if d % 2 == 0\
    \ {\n            evens.push(d)\n        } else {\n            result.push(d);\n\
    \        }\n    }\n    for d in evens {\n        result.push(d);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
    \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
    \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111,\
    \ 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31,\
    \ 135]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 3, 1, 2]`,\n right: `[1, 15, 33]`', /tmp/tmpjxcyd_f9.rs:28:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660028140
- exit_code: 1
  program: "/// Given a list of positive integers x. return a sorted list of all \n\
    /// elements that hasn't any even digit.\n/// Note: Returned list should be sorted\
    \ in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15, 33, 1422,\
    \ 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422, 10])\n\
    /// Vec::<isize>::new()\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n   \
    \ let mut result = Vec::new();\n    let mut digits = x.iter().map(|x| x % 10).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < x.len() {\n        if digits[i] != 0 {\n            result.push(digits[i]);\n\
    \            i += 1;\n        } else {\n            evens.push(digits[i]);\n \
    \           i += 1;\n        }\n    }\n    while i < x.len() {\n        if digits[i]\
    \ != 0 {\n            odd.push(digits[i]);\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    result.sort_unstable();\n    if\
    \ evens.len() > 0 {\n        result.push(evens.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    if odd.len() > 0 {\n        result.push(odd.iter().cloned().collect::<Vec<_>>());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = unique_digits;\n   \
    \ assert_eq!(candidate(vec![15, 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152,\
    \ 323, 1422, 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345,\
    \ 2033, 111, 151]), vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103,\
    \ 31]), vec![31, 135]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj9nfz8_i.rs:34:21\n   |\n\
    34 |         result.push(evens.iter().cloned().collect::<Vec<_>>());\n   |   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpj9nfz8_i.rs:37:21\n\
    \   |\n37 |         result.push(odd.iter().cloned().collect::<Vec<_>>());\n  \
    \ |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found struct `Vec`\n   |\n   = note: expected type `isize`\n            found\
    \ struct `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660028140
