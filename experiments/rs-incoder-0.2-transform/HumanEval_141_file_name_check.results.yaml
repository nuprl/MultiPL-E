language: rs
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of('.');\n\
    \    let mut dot_pos_end = file_name_chars.find_first_not_of('.', dot_pos);\n\
    \    let mut dot_pos_start = dot_pos + 1;\n    let mut dot_pos_start_end = dot_pos_end;\n\
    \    let mut dot_pos_start_end_end = dot_pos_start_end;\n    let mut dot_pos_start_end_end_end\
    \ = dot_pos_start_end_end;\n    let mut dot_pos_start_end_end_end_end = dot_pos_start_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end = dot_pos_start_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n \
    \   let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgh8zf3mj.rs:37:51\n   |\n\
    37 |     let mut dot_pos_start_end_end_end_end_end_end_\n   |                \
    \                                   ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end` in\
    \ this scope\n  --> /tmp/tmpgh8zf3mj.rs:23:45\n   |\n23 |     let mut dot_pos_start_end_end_end_end\
    \ = dot_pos_start_end_end_end_end;\n   |                                     \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `dot_pos_start_end_end_end`\n\nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:24:49\n   |\n24 |     let mut dot_pos_start_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end;\n   |                                 \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `dot_pos_start_end_end_end_end`\n\nerror[E0425]: cannot\
    \ find value `dot_pos_start_end_end_end_end_end_end` in this scope\n  --> /tmp/tmpgh8zf3mj.rs:25:53\n\
    \   |\n25 |     let mut dot_pos_start_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end;\n\
    \   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_start_end_end_end_end_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:26:57\n   |\n26 |     let mut dot_pos_start_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end;\n   |                         \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `dot_pos_start_end_end_end_end_end_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:27:61\n   |\n27 |     let mut dot_pos_start_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end;\n   |         "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = String::from(\"\");\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    for c in file_name.chars() {\n        if c.is_digit() {\n     \
    \       return String::from(\"No\");\n        }\n        if c.is_lowercase() {\n\
    \            if first_letter == String::from(\"\") {\n                first_letter\
    \ = String::from(c.to_lowercase());\n            }\n            else {\n     \
    \           if first_letter != String::from(c.to_lowercase()) {\n            \
    \        return String::from(\"No\");\n                }\n            }\n    \
    \    }\n        else if c.is_uppercase() {\n            if first_letter == String::from(\"\
    \") {\n                first_letter = String::from(c.to_uppercase());\n      \
    \      }\n            else {\n                if first_letter != String::from(c.to_uppercase())\
    \ {\n                    return String::from(\"No\");\n                }\n   \
    \         }\n        }\n    }\n    \n    if dot_pos == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos - 1] !=\
    \ '.' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 2] != String::from(\"a\") && file_name[dot_pos - 2] != String::from(\"A\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 3] != String::from(\"z\") && file_name[dot_pos - 3] != String::from(\"Z\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 4] != String::from(\"0\") && file_name[dot_pos - 4] != String::from(\"9\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    return String::from(\"\
    Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpyxop3c6w.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpyxop3c6w.rs:23:42\n   |\n23 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n24 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyxop3c6w.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyxop3c6w.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyxop3c6w.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyxop3c6w.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyxop3c6w.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    A\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    0\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    9\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:105:25\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:106:17\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:106:25\n    |\n106 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:107:17\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:107:25\n    |\n107 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:108:17\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:108:25\n    |\n108 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[..dot_pos].chars().next().unwrap();\n    if\
    \ first_char.len() != 1 || first_char != 'a' || first_char != 'z' || first_char\
    \ != 'A' {\n        return String::from(\"No\");\n    }\n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_char = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \    if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe' || dot_char\
    \ != 'dll' {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:43\n\
    \   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe'\
    \ || dot_char != 'dll' {\n   |                                           ^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    32 |     if dot_char.len() != 1 || dot_char != \"txt\" || dot_char != 'exe' ||\
    \ dot_char != 'dll' {\n   |                                           ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:64\n\
    \   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe'\
    \ || dot_char != 'dll' {\n   |                                               \
    \                 ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' ||\
    \ dot_char != \"exe\" || dot_char != 'dll' {\n   |                           \
    \                                     ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:85\n   |\n32 |     if dot_char.len()\
    \ != 1 || dot_char != 'txt' || dot_char != 'exe' || dot_char != 'dll' {\n   |\
    \                                                                            \
    \         ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char\
    \ != 'exe' || dot_char != \"dll\" {\n   |                                    \
    \                                                 ~~~~~\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp55j0m5mq.rs:19:42\n   |\n19 |     let mut\
    \ dot_pos = file_name.find('.')\n   |                                        \
    \  ^ help: add `;` here\n20 |     if dot_pos == String::npos {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp55j0m5mq.rs:27:42\n\
    \   |\n27 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n28 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") || file_name.starts_with(\"A\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        let mut dot_index = file_name.rfind('.')\n        if dot_index\
    \ == String::npos {\n            return String::from(\"No\");\n        }\n   \
    \     if dot_index == 0 {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_string = file_name.clone();\n        dot_string.truncate(dot_index\
    \ - 1);\n        if dot_string.contains(\"txt\") || dot_string.contains(\"exe\"\
    ) || dot_string.contains(\"dll\") {\n            return String::from(\"Yes\");\n\
    \        }\n    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgjjkr3e0.rs:29:49\n\
    \   |\n29 |         let mut dot_index = file_name.rfind('.')\n   |           \
    \                                      ^ help: add `;` here\n30 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgjjkr3e0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgjjkr3e0.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgjjkr3e0.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:51:25\n\
    \   |\n51 |     assert_eq!({le"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ == false {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_digit()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol()) {\n    \
    \    return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_whitespace())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_formfeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_backspace()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_formfeed()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_newline()) {\n   \
    \     return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7mb2e30.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_split\
    \ = file_name.split('.');\n    let mut file_name_split_len = file_name_split.len();\n\
    \    let mut file_name_split_index = 0;\n    let mut file_name_split_chars = String::new();\n\
    \    let mut file_name_split_chars_len = String::new();\n    let mut file_name_split_char_index\
    \ = 0;\n    let mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjaq15og1.rs:53:51\n   |\n\
    53 |     let mut file_name_split_chars_len = file_name_\n   |                \
    \                                   ^ help: add `;` here\n54 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `file_name_` in this scope\n  --> /tmp/tmpjaq15og1.rs:53:41\n\
    \   |\n53 |     let mut file_name_split_chars_len = file_name_\n   |         \
    \                                ^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `file_name`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjaq15og1.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjaq15og1.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjaq15og1.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjaq15og1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjaq15og1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjaq15"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end_2 = file_name.find('.')\n\
    \    if dot_pos_end_2 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_2 = dot_pos_end_2 + 1;\n    let mut dot_pos_end_3\
    \ = file_name.find('.')\n    if dot_pos_end_3 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_3 = dot_pos_end_3 + 1;\n\
    \    let mut dot_pos_end_4 = file_name.find('.')\n    if dot_pos_end_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_4 =\
    \ dot_pos_end_4 + 1;\n    let mut dot_pos_end_5 = file_name.find('.')\n    if\
    \ dot_pos_end_5 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_5 = dot_pos_end_5 + 1;\n    let mut dot_pos_end_6 = file_name.find('.')\n\
    \    if dot_pos_end_6 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_6 = dot_pos_end_6 + 1;\n    let mut dot_pos_end_7\
    \ = file_name.find('.')\n    if dot_pos_end_7 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_7 = dot_pos_end_7 + 1;\n\
    \    let mut dot_pos_end_8 = file_name.find('.')\n    if dot_pos_end_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_8 =\
    \ dot_pos_end_8 + 1;\n    let mut dot_pos_end_9 = file_name.find('.')\n    if\
    \ dot_pos_end_9 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_9 = dot_pos_end_9 + 1;\n    let mut dot_pos_end_10 =\
    \ file_name.find('.')\n    if dot_pos_end_10 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_10 = dot_pos_end_10\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp660nc99i.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:27:48\n   |\n27\
    \ |     let mut dot_pos_end_2 = file_name.find('.')\n   |                    \
    \                            ^ help: add `;` here\n28 |     if dot_pos_end_2 ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmp660nc99i.rs:32:48\n   |\n32 |     let mut dot_pos_end_3\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n33 |     if dot_pos_end_3 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:37:48\n\
    \   |\n37 |     let mut dot_pos_end_4 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n38 |     if dot_pos_end_4\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp660nc99i.rs:42:48\n   |\n42 |     let mut dot_pos_end_5\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n43 |     if dot_pos_end_5 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:47:48\n\
    \   |\n47 |     let mut dot_pos_end_6 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n48 |     if dot_pos_end_6\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp660nc99i.rs:52:48\n   |\n52 |     let mut dot_pos_end_7\
    \ = file_name.find('.')\n   "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[dot_pos - 1..dot_pos].chars().next()\n   \
    \ if first_char.count() > 1 {\n        return String::from(\"No\");\n    }\n \
    \   if first_char.count() < 1 || first_char.first().unwrap() != 'a' || first_char.first().unwrap()\
    \ != 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 1..].chars().any(|c| !c.is_ascii_alphanumeric()) {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgd292yf_.rs:19:43\n\
    \   |\n19 |     let mut dot_pos = file_name.rfind('.')\n   |                 \
    \                          ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpgd292yf_.rs:23:72\n   |\n23 |     let mut first_char = file_name[dot_pos\
    \ - 1..dot_pos].chars().next()\n   |                                         \
    \                               ^ help: add `;` here\n24 |     if first_char.count()\
    \ > 1 {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgd292yf_.rs:38:17\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:38:25\n \
    \  |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgd292yf_.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgd292yf_.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgd292yf_.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgd292yf_.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scop"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        let mut dot_pos_end = file_name.rfind('.')\n \
    \       let mut dot_pos_start = dot_pos + 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmplhdqq29l.rs:93:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - this delimiter might not be properly closed...\n...\n\
    63 | }\n   | - ...as it matches this but it has different indentation\n...\n93\
    \ | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplhdqq29l.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         let mut\
    \ dot_pos_end = file_name.rfind('.')\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmplhdqq29l.rs:20:51\n   |\n20\
    \ |         let mut dot_pos_end = file_name.rfind('.')\n   |                 \
    \                                  ^ help: add `;` here\n21 |         let mut\
    \ dot_pos_start = dot_pos + 1;\n   |         --- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplhdqq29l.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplhdqq29l.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplhdqq29l.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplhdqq29l.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplhdqq29l.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplhdqq29l.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                  "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start_letter\
    \ = String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpdfs0f2jj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpdfs0f2jj.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found `}`\n  --> /tmp/tmpdfs0f2jj.rs:59:17\n   |\n59 |     let\
    \ mut dot_\n   |                 ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdfs0f2jj.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdfs0f2jj.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdfs0f2jj.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.find('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name.chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_pos = file_name.find('.')\n\
    \                    if dot_pos == String::npos {\n                        String::from(\"\
    No\")\n                    } else {\n                        let mut dot_pos =\
    \ file_name.find('.')\n                        if dot_pos == String::npos {\n\
    \                            String::from(\"No\")\n                        } else\
    \ {\n                            if dot_pos == dot_pos + 1 {\n               \
    \                 String::from(\"Yes\")\n                            } else {\n\
    \                                String::from(\"No\")\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:31:58\n   |\n31 |       \
    \              let mut dot_pos = file_name.find('.')\n   |                   \
    \                                       ^ help: add `;` here\n32 |           \
    \          if dot_pos == String::npos {\n   |                     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:35:62\n\
    \   |\n35 |                         let mut dot_pos = file_name.find('.')\n  \
    \ |                                                              ^ help: add `;`\
    \ here\n36 |                         if dot_pos == String::npos {\n   |      \
    \                   -- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfv8xky15.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfv8xky15.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfv8xky15.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfv8xky15.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.next().unwrap().unwrap();\n\
    \    let mut dot_pos_next = dot_pos.unwrap();\n    let mut dot_pos_next_next =\
    \ dot_pos_next.unwrap();\n    let mut dot_pos_next_next_next = dot_pos_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next = dot_pos_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next = dot_pos_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next = dot_pos_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next =\
    \ dot_pos_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n \
    \   let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3kih9v59.rs:36:36\n   |\n\
    36 |     let mut dot_pos_next_next_next_\n   |                               \
    \     ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `dot_pos_next_next_next_next_next_next_next_next_next_next` in this\
    \ scope\n  --> /tmp/tmp3kih9v59.rs:28:73\n   |\n28 |     let mut dot_pos_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next.unwrap();\n   |\
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:29:78\n   |\n29 | ...t_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:30:83\n   |\n30 | ...next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:32:83\n   |\n32 | ...xt_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    if dot_pos_end == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end\
    \ = file_name.find('.')\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpnbyw1m4l.rs:105:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n73  |  \
    \   if dot_pos_end == String::npos {\n    |                                  \
    \  - this delimiter might not be properly closed...\n74  |         return String\n\
    75  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:27:46\n   |\n27\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n28 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:32:46\n   |\n32 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n33 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:37:46\n   |\n37\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n43 |\
    \     if dot_pos_end == St"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[0..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n                    if dot_name.contains('.')\
    \ {\n                        String::from(\"No\")\n                    } else\
    \ {\n                        let mut dot_name = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \                        if dot_name.contains('.') {\n                       \
    \     String::from(\"No\")\n                        } else {\n               \
    \             String::from(\"Yes\")\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpr3ru48d2.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpr3ru48d2.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr3ru48d2.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr3ru48d2.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr3ru48d2.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr3ru48d2.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr3ru48d2.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = file_name.find('.')\n\
    \    if dot_pos_start == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp2o2cuoac.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp2o2cuoac.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp2o2cuoac.rs:27:48\n   |\n27\
    \ |     let mut dot_pos_start = file_name.find('.')\n   |                    \
    \                            ^ help: add `;` here\n28 |     if dot_pos_start ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp2o2cuoac.rs:64:1\n   |\n64 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2o2cuoac.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2o2cuoac.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2o2cuoac.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2o2cuoac.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2o2cuoac.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2o2cuoac.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpe7tcv3cb.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpe7tcv3cb.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7tcv3cb.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos == 0 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut first_letter = file_name[dot_pos\
    \ - 1];\n    if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    let mut last_letter = file_name[dot_pos];\n    if last_letter\
    \ < 'a' || last_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    if file_name[dot_pos - 2] != String::from('.') {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos\
    \ - 2] != String::from('exe') && file_name[dot_pos - 2] != String::from('dll')\
    \ {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\")\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp7pehvohn.rs:40:47\n\
    \   |\n40 |     if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos\
    \ - 2] != String::from('exe') && file_name[dot_pos - 2] != String...\n   |   \
    \                                            ^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from(\"txt\") && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from('dll') {\n   |                   \
    \                            ~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n  --> /tmp/tmp7pehvohn.rs:40:96\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from('txt') && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String...\n   |                               \
    \                                                                 ^^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n40 |   \
    \  if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos - 2]\
    \ != String::from(\"exe\") && file_name[dot_pos - 2] != String::from('dll') {\n\
    \   |                                                                        \
    \                        ~~~~~\n\nerror: character literal may only contain one\
    \ codepoint\n  --> /tmp/tmp7pehvohn.rs:40:145\n   |\n40 | ...= String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from('dll') {\n   |                   \
    \                                                 ^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from('txt') && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from(\"dll\") {\n   |                 \
    \                                                                            \
    \                                                    ~~~~~\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp7pehvohn.rs:19:42\n   |\n19 |     let\
    \ mut dot_pos = file_name.find('.')\n   |            "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter = true;\n \
    \   let mut dot_pos_start_letter2 = true;\n    let mut dot_pos_end_letter2 = true;\n\
    \    let mut dot_pos_start_letter3 = true;\n    let mut dot_pos_end_letter3 =\
    \ true;\n    let mut dot_pos_start_letter4 = true;\n    let mut dot_pos_end_letter4\
    \ = true;\n    let mut dot_pos_start_letter5 = true;\n    let mut dot_pos_end_letter5\
    \ = true;\n    let mut dot_pos_start_letter6 = true;\n    let mut dot_pos_end_letter6\
    \ = true;\n    let mut dot_pos_start_letter7 = true;\n    let mut dot_pos_end_letter7\
    \ = true;\n    let mut dot_pos_start_letter8 = true;\n    let mut dot_pos_end_letter8\
    \ = true;\n    let mut dot_pos_start_letter9 = true;\n    let mut dot_pos_end_letter9\
    \ = true;\n    let mut dot_pos_start_letter10 = true;\n    let mut dot_pos_end_letter10\
    \ = true;\n    let mut dot_pos_start_letter11 = true;\n    let mut dot_pos_end_letter11\
    \ = true;\n    let mut dot_pos_start_letter12 = true;\n    let mut dot_pos_end_letter12\
    \ = true;\n    let mut dot_pos_start_letter13 = true;\n    let mut dot_pos_end_letter13\
    \ = true;\n    let mut dot_pos_start_letter14 = true;\n    let mut dot_pos_end_letter14\
    \ = true;\n    let mut dot_pos_start_letter15 = true;\n    let mut dot_pos_end_letter15\
    \ = true;\n    let mut dot_pos_start_letter16 = true;\n    let mut dot_pos_end_letter16\
    \ = true;\n    let mut dot_pos_start_letter17 = true;\n    let mut dot_pos_end_letter17\
    \ = true;\n    let mut dot_pos_start_letter18 = true;\n    let mut dot_pos_end_letter18\
    \ = true;\n    let mut dot_pos_start_letter19 = true;\n    let mut dot_pos_end_letter19\
    \ = true;\n    let mut dot_pos_start_letter20 = true;\n    let mut dot_pos_end_letter20\
    \ = true;\n    let mut dot_pos_start_letter21 = true;\n    let mut dot_pos_end_letter21\
    \ = true;\n    let mut dot_pos_start_letter22 = true;\n    let mut dot_pos_end_letter22\
    \ = true;\n    let mut dot_pos_start_letter23 = true;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjz4bwbt_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpjz4bwbt_.rs:68:11\n\
    \   |\n68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjz4bwbt_.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjz4bwbt_.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjz4bwbt_.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter2 = false;\n    let mut dot_pos_end_letter2 =\
    \ false;\n    let mut dot_pos_start_letter3 = false;\n    let mut dot_pos_end_letter3\
    \ = false;\n    let mut dot_pos_start_letter4 = false;\n    let mut dot_pos_end_letter4\
    \ = false;\n    let mut dot_pos_start_letter5 = false;\n    let mut dot_pos_end_letter5\
    \ = false;\n    let mut dot_pos_start_letter6 = false;\n    let mut dot_pos_end_letter6\
    \ = false;\n    let mut dot_pos_start_letter7 = false;\n    let mut dot_pos_end_letter7\
    \ = false;\n    let mut dot_pos_start_letter8 = false;\n    let mut dot_pos_end_letter8\
    \ = false;\n    let mut dot_pos_start_letter9 = false;\n    let mut dot_pos_end_letter9\
    \ = false;\n    let mut dot_pos_start_letter10 = false;\n    let mut dot_pos_end_letter10\
    \ = false;\n    let mut dot_pos_start_letter11 = false;\n    let mut dot_pos_end_letter11\
    \ = false;\n    let mut dot_pos_start_letter12 = false;\n    let mut dot_pos_end_letter12\
    \ = false;\n    let mut dot_pos_start_letter13 = false;\n    let mut dot_pos_end_letter13\
    \ = false;\n    let mut dot_pos_start_letter14 = false;\n    let mut dot_pos_end_letter14\
    \ = false;\n    let mut dot_pos_start_letter15 = false;\n    let mut dot_pos_end_letter15\
    \ = false;\n    let mut dot_pos_start_letter16 = false;\n    let mut dot_pos_end_letter16\
    \ = false;\n    let mut dot_pos_start_letter17 = false;\n    let mut dot_pos_end_letter17\
    \ = false;\n    let mut dot_pos_start_letter18 = false;\n    let mut dot_pos_end_letter18\
    \ = false;\n    let mut dot_pos_start_letter19 = false;\n    let mut dot_pos_end_letter19\
    \ = false;\n    let mut dot_pos_start_letter20 = false;\n    let mut dot_pos_end_letter20\
    \ = false;\n    let mut dot_pos_start_letter21 = false;\n    let mut dot_pos_end_letter21\
    \ = false;\n    let mut dot_pos_start_letter22 = false;\n    let mut dot_pos_end_letter22\
    \ = false;\n    let mut dot_pos_start_letter23 = false;\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpw93s8yq2.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected identifier, found `}`\n \
    \ --> /tmp/tmpw93s8yq2.rs:69:1\n   |\n69 | }\n   | ^ expected identifier\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw93s8yq2.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw93s8yq2.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw93s8yq2.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_char = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_char.isalpha() == false {\n                String::from(\"\
    No\")\n            } else if first_char == 'a' || first_char == 'A' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'b' || first_char\
    \ == 'B' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'c' || first_char == 'C' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'd' || first_char == 'D' {\n                String::from(\"\
    No\")\n            } else if first_char == 'e' || first_char == 'E' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'f' || first_char\
    \ == 'F' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'g' || first_char == 'G' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'h' || first_char == 'H' {\n                String::from(\"\
    No\")\n            } else if first_char == 'i' || first_char == 'I' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'j' || first_char\
    \ == 'J' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'k' || first_char == 'K' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'l' || first_char == 'L' {\n                String::from(\"\
    No\")\n            } else if first_char == 'm' || first_char == 'M' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'n' || first_char\
    \ == 'N' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'o' || first_char == 'O' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'p' || first_char == 'P' {\n                String::from(\"\
    No\")\n            } else if first_char == 'q' || first_char == 'Q' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'r' || first_char\
    \ == 'R' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 's' || first_char == 'S' {\n                String\n}\n\nfn main() {\n  \
    \  let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkc2ap74l.rs:94:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - unclosed delimiter\n...\n22 |         } else {\n \
    \  |                - unclosed delimiter\n...\n62 |             } else if first_char\
    \ == 's' || first_char == 'S' {\n   |                                        \
    \                      - this delimiter might not be properly closed...\n63 |\
    \                 String\n64 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n94 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpkc2ap74l.rs:19:46\n   |\n19 |         let mut dot_pos = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n20 |\
    \         if dot_pos == String::npos {\n   |         -- unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `String`\n   --> /tmp/tmpkc2ap74l.rs:63:17\n  \
    \  |\n63  |                   String\n    |                   ^^^^^^ help: use\
    \ struct literal syntax instead: `String { vec: val }`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkc2ap74l.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkc2ap74l.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkc2ap74l.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkc2ap74l.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkc2ap74l.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scop"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpta8tce9y.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpta8tce9y.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected expression, found `}`\n  --> /tmp/tmpta8tce9y.rs:64:1\n   |\n64 | }\n\
    \   | ^ expected expression\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpta8tce9y.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpta8tce9y.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpta8tce9y.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpta8tce9y.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpta8tce9y.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right}"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter2 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter2 = dot_pos_end;\n    let mut dot_pos_start_letter3 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter3 = dot_pos_end;\n    let mut dot_pos_start_letter4\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter4 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter5 = dot_pos_start;\n    let mut dot_pos_end_letter5 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter6 = dot_pos_start;\n    let mut dot_pos_end_letter6\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter7 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter7 = dot_pos_end;\n    let mut dot_pos_start_letter8 =\
    \ dot_pos_start;\n    let mut dot_pos_end_letter8 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter9 = dot_pos_start;\n    let mut dot_pos_end_letter9 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter10 = dot_pos_start;\n    let mut dot_pos_end_letter10\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter11 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter11 = dot_pos_end;\n    let mut dot_pos_start_letter12\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter12 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter13 = dot_pos_start;\n    let mut dot_pos_end_letter13 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter14 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter14 = dot_pos_end;\n    let mut dot_pos_start_letter15 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter15 = dot_pos_end;\n    let mut dot_pos_start_letter16\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter16 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter17 = dot_pos_start;\n    let mut dot_pos_end_letter17 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter18 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter18 = dot_pos_end;\n    let mut dot_pos_start_letter19\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp_3jdi32c.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp_3jdi32c.rs:59:35\n\
    \   |\n59 |     let mut dot_pos_start_letter19\n   |                         \
    \          ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3jdi32c.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left},"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    \n    if file_name.len() > 3 {\n        file_name.truncate(3);\n\
    \    }\n    \n    if file_name.contains(\".\") {\n        file_name.truncate(file_name.rfind('.'));\n\
    \    }\n    \n    if file_name.starts_with(\"a\") || file_name.starts_with(\"\
    A\") {\n        file_name.truncate(0);\n    }\n    \n    if file_name.contains(\"\
    .\") {\n        file_name.truncate(file_name.rfind('.'));\n    }\n    \n    if\
    \ file_name.contains(\"txt\") || file_name.contains(\"exe\") || file_name.contains(\"\
    dll\") {\n        file_name.truncate(0);\n    }\n    \n    file_name\n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqase6xlq.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos;\n    dot_pos_end += 1;\n    let mut dot_pos_start = dot_pos;\n\
    \    dot_pos_start += 1;\n    while dot_pos_start < dot_pos_end {\n        let\
    \ mut dot_pos_end = dot_pos_start;\n        dot_pos_end += 1;\n        if file_name[dot_pos_end]\
    \ != '\\0' {\n            if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' {\n                dot_pos_end += 1;\n            }\n            if file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' {\n                dot_pos_end += 1;\n\
    \            }\n            if dot_pos_end == dot_pos_start {\n              \
    \  return String::from(\"No\");\n            }\n        }\n        dot_pos_start\
    \ += 1;\n    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprpmfzg9f.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmprpmfzg9f.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprpmfzg9f.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprpmfzg9f.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprpmfzg9f.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprpmfzg9f.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprpmfzg9f.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_split\
    \ = file_name.split('.');\n    if file_name_split.len() != 2 {\n        return\
    \ String::from(\"No\");\n    }\n    let mut file_name_split_first = file_name_split[0].chars();\n\
    \    if file_name_split_first.len() != 1 && file_name_split_first.first().unwrap()\
    \ != 'a' && file_name_split_first.first().unwrap() != 'A' {\n        return String::from(\"\
    No\");\n    }\n    let mut file_name_split_last = file_name_split[1].chars();\n\
    \    if file_name_split_last.len() != 1 && file_name_split_last.first().unwrap()\
    \ != 'a' && file_name_split_last.first().unwrap() != 'A' {\n        return String::from(\"\
    No\");\n    }\n    if file_name_split_first.first().unwrap() == 'a' || file_name_split_first.first().unwrap()\
    \ == 'A' {\n        if file_name_split_first.last().unwrap() == 'z' || file_name_split_first.last().unwrap()\
    \ == 'Z' {\n            if file_name_split_last.first().unwrap() == 't' || file_name_split_last.first().unwrap()\
    \ == 'T' {\n                if file_name_split_last.last().unwrap() == 'e' ||\
    \ file_name_split_last.last().unwrap() == 'E' {\n                    if file_name_split_last.last().unwrap()\
    \ == 's' || file_name_split_last.last().unwrap() == 'S' {\n                  \
    \      return String::from(\"Yes\");\n                    }\n                }\n\
    \            }\n        }\n    }\n    return String::from(\"No\");\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpixk9ipah.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    if dot_pos\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name[0..dot_pos\
    \ - 1].is_empty() {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != 'a' && file_name[dot_pos - 1] != 'b' && file_name[dot_pos - 1] != 'c'\
    \ &&\n        file_name[dot_pos - 1] != 'd' && file_name[dot_pos - 1] != 'e' &&\
    \ file_name[dot_pos - 1] != 'f' &&\n        file_name[dot_pos - 1] != 'g' && file_name[dot_pos\
    \ - 1] != 'h' && file_name[dot_pos - 1] != 'i' &&\n        file_name[dot_pos -\
    \ 1] != 'j' && file_name[dot_pos - 1] != 'k' && file_name[dot_pos - 1] != 'l'\
    \ &&\n        file_name[dot_pos - 1] != 'm' && file_name[dot_pos - 1] != 'n' &&\
    \ file_name[dot_pos - 1] != 'o' &&\n        file_name[dot_pos - 1] != 'p' && file_name[dot_pos\
    \ - 1] != 'q' && file_name[dot_pos - 1] != 'r' &&\n        file_name[dot_pos -\
    \ 1] != 's' && file_name[dot_pos - 1] != 't' && file_name[dot_pos - 1] != 'u'\
    \ &&\n        file_name[dot_pos - 1] != 'v' && file_name[dot_pos - 1] != 'w' &&\
    \ file_name[dot_pos - 1] != 'x' &&\n        file_name[dot_pos - 1] != 'y' && file_name[dot_pos\
    \ - 1] != 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] == 'a' || file_name[dot_pos - 1] == 'b' || file_name[dot_pos - 1] == 'c'\
    \ ||\n        file_name[dot_pos - 1] == 'd' || file_name[dot_pos - 1] == 'e' ||\
    \ file_name[dot_pos - 1] == 'f' ||\n        file_name[dot_pos - 1] == 'g' || file_name[dot_pos\
    \ - 1] == 'h' || file_name[dot_pos - 1] == 'i' ||\n        file_name[dot_pos -\
    \ 1] == 'j' || file_name[dot_pos - 1] == 'k' || file_name[dot_pos - 1] == 'l'\
    \ ||\n        file_name[dot_pos - 1] == 'm' || file_name[dot_pos - 1] == 'n' ||\
    \ file_name[dot_pos - 1] == 'o' ||\n        file_name[dot_pos - 1] == 'p' || file_name[dot_\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpb8a3wfs4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpb8a3wfs4.rs:44:1\n\
    \   |\n38 |     if file_name[dot_pos - 1] == 'a' || file_name[dot_pos - 1] ==\
    \ 'b' || file_name[dot_pos - 1] == 'c' ||\n   |     -- this `if` expression has\
    \ a condition, but no block\n...\n44 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpb8a3wfs4.rs:43:51\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n43 |         file_name[dot_pos\
    \ - 1] == 'p' || file_name[dot_\n   |                                        \
    \           ^ unclosed delimiter\n44 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb8a3wfs4.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb8a3wfs4.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scop"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp4h50q1v6.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp4h50q1v6.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmp4h50q1v6.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4h50q1v6.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4h50q1v6.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4h50q1v6.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4h50q1v6.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4h50q1v6.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_start;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        if dot_pos_start == dot_pos_end\
    \ {\n            dot_pos_end = dot_pos_end + 1;\n        }\n        if dot_pos_start\
    \ < dot_pos_end {\n            if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n                dot_pos_start = dot_pos_start + 1;\n            }\n\
    \            if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end] <= 'z'\
    \ {\n                dot_pos_end = dot_pos_end - 1;\n            }\n        }\n\
    \    }\n    if file_name[dot_pos_start] == '.' {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start]\
    \ <= 'Z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] >= '0' && file_name[dot_pos_start]\
    \ <= '9' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= '0' && file_name[dot_pos_end] <= '9' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] == '.' {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp3jgz1t2_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp3jgz1t2_.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmp3jgz1t2_.rs:72:1\n   |\n71 |     if file_name[dot_pos_start]\
    \ >= 'a' && file_name[dot_pos_start] \n   |     -- this `if` expression has a\
    \ condition, but no block\n72 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jgz1t2_.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3jgz1t2_.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerro"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name :\
    \ String = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_start =\
    \ dot_pos;\n    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start\
    \ = dot_pos_start;\n        let mut dot_pos_end = dot_pos_end;\n        let mut\
    \ dot_pos_start = dot_pos_start;\n        while dot_pos_start != dot_pos_end {\n\
    \            let mut dot_pos_start = dot_pos_start;\n            let mut dot_pos_end\
    \ = dot_pos_end;\n            let mut dot_pos_start = dot_pos_start;\n       \
    \     while dot_pos_start != dot_pos_end {\n                let mut dot_pos_start\
    \ = dot_pos_start;\n                let mut dot_pos_end = dot_pos_end;\n     \
    \           let mut dot_pos_start = dot_pos_start;\n                while dot_pos_start\
    \ != dot_pos_end {\n                    let mut dot_pos_start = dot_pos_start;\n\
    \                    let mut dot_pos_end = dot_pos_end;\n                    let\
    \ mut dot_pos_start = dot_pos_start;\n                    while dot_pos_start\
    \ != dot_pos_end {\n                        let mut dot_pos_start = dot_pos_start;\n\
    \                        let mut dot_pos_end = dot_pos_end;\n                \
    \        let mut dot_pos_start = dot_pos_start;\n                        while\
    \ dot_pos_start != dot_pos_end {\n                            let mut dot_pos_start\
    \ = dot_pos_start;\n                            let mut dot_pos_end = dot_pos_end;\n\
    \                            let mut dot_pos_start = dot_pos_start;\n        \
    \                    while dot_pos_start != dot_pos_end {\n                  \
    \              let mut dot_pos_start = dot_pos_start;\n                      \
    \          let mut dot_pos_end = dot_pos_end;\n                              \
    \  let mut dot_pos_start = dot_pos_start;\n                                while\
    \ dot_pos_start != dot_pos_end {\n                                    let mut\
    \ dot_pos_start = dot_pos_start;\n                                    let mut\
    \ dot_pos_end = dot_pos_end;\n                                    let mut dot_pos_start\
    \ = dot_pos_start;\n                                    while dot_pos_start !=\
    \ dot_pos_end {\n                                        let mut dot_pos_start\
    \ = dot_pos_start;\n                                        let mut dot_pos_end\
    \ = dot_pos_end;\n                                        let mut dot_pos_start\
    \ = dot_pos_start;\n                                        while dot_pos_start\
    \ != dot_pos_end {\n                                            let mut dot_pos_start\
    \ = dot_pos_start;\n                                            let mut dot_pos_end\
    \ = dot_pos_end;\n                                            let mut dot_pos_start\
    \ = dot_pos_\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpm11dmet1.rs:96:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n26 |     while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \ - unclosed delimiter\n...\n30 |         while dot_pos_start != dot_pos_end {\n\
    \   |                                            - unclosed delimiter\n...\n34\
    \ |             while dot_pos_start != dot_pos_end {\n   |                   \
    \                             - unclosed delimiter\n...\n38 |                \
    \ while dot_pos_start != dot_pos_end {\n   |                                 \
    \                   - unclosed delimiter\n...\n42 |                     while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                 - unclosed delimiter\n...\n46 |                         while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                     - unclosed delimiter\n...\n50 |                        \
    \     while dot_pos_start != dot_pos_end {\n   |                             \
    \                                   - unclosed delimiter\n...\n54 |          \
    \                       while dot_pos_start != dot_pos_end {\n   |           \
    \                                                         - unclosed delimiter\n\
    ...\n58 |                                     while dot_pos_start != dot_pos_end\
    \ {\n   |                                                                    \
    \    - unclosed delimiter\n...\n62 |                                         while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                                     - this delimiter might not be properly closed...\n\
    ...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    96 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm11dmet1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.char\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp6nlpvmho.rs:38:1\n   |\n\
    37 |     if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_asc...\n   |     -- this `if` expression\
    \ has a condition, but no block\n38 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6nlpvmho.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:46:25\n   |\n46"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        let mut dot_pos_end = dot_pos_start;\n\
    \        while dot_pos_end < file_name.len() {\n            if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n                dot_pos_end += 1;\n\
    \            } else if file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end]\
    \ <= 'Z' {\n                dot_pos_end += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        if dot_pos_start == dot_pos_end\
    \ {\n            break;\n        }\n        if file_name[dot_pos_start] >= '0'\
    \ && file_name[dot_pos_start] <= '9' {\n            break;\n        }\n      \
    \  dot_pos_start = dot_pos_end;\n    }\n    if dot_pos_start == dot_pos {\n  \
    \      return String::from(\"No\");\n    }\n    if dot_pos_start < dot_pos {\n\
    \        dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos {\n       \
    \ return String::from(\"Yes\");\n    }\n    if dot_pos_end < dot_pos {\n     \
    \   dot_pos_end += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_start < dot_pos_end {\n       \
    \ dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return\
    \ String::from(\"Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_end\
    \ += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start < dot_pos_end {\n        dot_pos_start +=\
    \ 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_end += 1;\n\
    \    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start < dot_pos_end {\n        dot_pos_start +=\
    \ 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_\n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwmc_ep0g.rs:119:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n87  |  \
    \   if dot_pos_end < dot_pos_end {\n    |                                  - this\
    \ delimiter might not be properly closed...\n88  |         dot_pos_\n89  | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n119 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwmc_ep0g.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `dot_pos_`\
    \ in this scope\n  --> /tmp/tmpwmc_ep0g.rs:88:9\n   |\n88 |         dot_pos_\n\
    \   |         ^^^^^^^^ help: a local variable with a similar name exists: `dot_pos`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:93:17\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwmc_ep0g.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:94:17\n   |\n94 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:94:25\n\
    \   |\n94 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwmc_ep0g.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cann"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_digit()) {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '.') {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase() || c != 'a' ||\
    \ c != 'z') {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase() || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_digit() || c != '0' || c\
    \ != '9') {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '.' || c != '0' || c != '9') {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()\
    \ || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase() || c !=\
    \ 'A' || c != 'Z' || c != 'a' || c != 'z') {\n        return String::from(\"No\"\
    );\n    }\n    if file_name.chars().any(|c| !c.is_digit() || c != '0' || c !=\
    \ '9' || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '.'\
    \ || c != '0' || c != '9' || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpca9s97du.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpca9s97du.rs:61:29\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n61 |     if file_name.chars().any(|c|\
    \ \n   |                             ^ unclosed delimiter\n62 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpca9s97du.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpca9s97du.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpca9s97du.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpca9s97du.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpca9s97du.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpca9s97du.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpca9s97du.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpca9s97du.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpca9s97du.rs:70:17\n   |\n70 |  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_index =\
    \ file_name.find('.')\n    if dot_index == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut first_letter = file_name.chars().next().unwrap();\n\
    \    if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() > dot_index {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() < dot_index {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.char\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprc6trkw0.rs:19:44\n\
    \   |\n19 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n20 |     if dot_index == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmprc6trkw0.rs:88:1\n\
    \   |\n87 |     if file_name.char\n   |     -- this `if` expression has a condition,\
    \ but no block\n88 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:92:17\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:92:25\n \
    \  |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprc6trkw0.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprc6trkw0.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:95:17\n  \
    \ |\n95 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprc6trkw0.rs:95:25\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:96:17\n   |\n96 |\
    \     assert_eq!({left}, {right})"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    while dot_pos < file_name.len() {\n        let mut\
    \ dot_pos = file_name.find('.', dot_pos);\n        if dot_pos == String::npos\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = dot_pos + 1;\n        if dot_pos == file_name.len() {\n            return\
    \ String::from(\"No\");\n        }\n        let mut dot_pos = file_name.find('.',\
    \ dot_pos);\n        if dot_pos == String::npos {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos\
    \ == file_name.len() {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_pos = file_name.find('.', dot_pos);\n        if dot_pos ==\
    \ String::npos {\n            return String::from(\"No\");\n        }\n      \
    \  let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len() {\n \
    \           return String::from(\"No\");\n        }\n        let mut dot_pos =\
    \ file_name.find('.', dot_pos);\n        if dot_pos == String::npos {\n      \
    \      return String::from(\"No\");\n        }\n        let mut dot_pos = dot_pos\
    \ + 1;\n        if dot_pos == file_name.len() {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = file_name.find('.', dot_pos);\n \
    \       if dot_pos == String::npos {\n            return String::from(\"No\");\n\
    \        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len()\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = file_name.find('.', dot_pos);\n        if dot_pos == String::npos {\n    \
    \        return String::from(\"No\");\n        }\n        let mut dot_pos = dot_pos\
    \ + 1;\n        if dot_pos == file_name.len() {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = file_name.find('.', dot_pos);\n \
    \       if dot_pos == String::npos {\n            return String::from(\"No\");\n\
    \        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len()\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = file_name.find('.', dot_pos);\n        if dot_pos == String::\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzru8it5a.rs:111:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n22  |  \
    \   while dot_pos < file_name.len() {\n    |                                 \
    \    - this delimiter might not be properly closed...\n...\n81  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n111 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpzru8it5a.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n\
    \   |     -- unexpected token\n\nerror: expected identifier, found `}`\n  -->\
    \ /tmp/tmpzru8it5a.rs:81:1\n   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzru8it5a.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzru8it5a.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzru8it5a.rs:86:17\n   |\n86 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzru8it5a.rs:86:25\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzru8it5a.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzru8it5a.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzru8it5a.rs:88:17\n   |\n88 |     assert_eq!({left}, {ri"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_end = dot_pos;\n    \n    while dot_pos_end < file_name.len() {\n\
    \        let mut dot_pos_start = dot_pos_end;\n        \n        while dot_pos_start\
    \ < file_name.len() {\n            let mut char_pos = dot_pos_start;\n       \
    \     \n            if char_pos > dot_pos_end {\n                break;\n    \
    \        }\n            \n            let mut char_pos_end = char_pos;\n     \
    \       \n            while char_pos_end < file_name.len() {\n               \
    \ let mut char_pos_start = char_pos_end;\n                \n                if\
    \ char_pos_start > dot_pos_end {\n                    break;\n               \
    \ }\n                \n                let mut char_pos_end = char_pos_start;\n\
    \                \n                while char_pos_end < file_name.len() {\n  \
    \                  let mut char_pos_start = char_pos_end;\n                  \
    \  \n                    if char_pos_start > dot_pos_end {\n                 \
    \       break;\n                    }\n                    \n                \
    \    let mut char_pos_end = char_pos_start;\n                    \n          \
    \          if char_pos_end > dot_pos_end {\n                        break;\n \
    \                   }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n   \
    \                 \n                    let mut char_pos_end = char_pos_start;\n\
    \                    \n                    if char_pos_end > dot_pos_end {\n \
    \                       break;\n                    }\n                    \n\
    \                    let mut char_pos_start = char_pos_end;\n                \
    \    \n                    if char_pos_start > dot_pos_end {\n               \
    \         break;\n                    }\n                    \n              \
    \      let mut char_pos_end = char_pos_start;\n                    \n        \
    \            if char_pos_end > dot_pos_end {\n                        break;\n\
    \                    }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n   \
    \                 \n                    let mut char_pos_end = char_pos_start;\n\
    \                    \n                    if char_pos_end > dot_pos_end {\n \
    \                       break;\n                    }\n                    \n\
    \                    let mut char_pos_start = char_pos_end;\n                \
    \    \n                    if char_pos_start > dot_pos_end {\n               \
    \         break;\n                    }\n                    \n              \
    \      let mut char_pos_end = char_pos_start;\n                    \n        \
    \            if char_pos_end > dot_pos_end {\n                        break;\n\
    \                    }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n}\n\n\
    fn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpre3eyy57.rs:141:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n24  |  \
    \   while dot_pos_end < file_name.len() {\n    |                             \
    \            - unclosed delimiter\n...\n27  |         while dot_pos_start < file_name.len()\
    \ {\n    |                                               - unclosed delimiter\n\
    ...\n36  |             while char_pos_end < file_name.len() {\n    |         \
    \                                         - unclosed delimiter\n...\n45  |   \
    \              while char_pos_end < file_name.len() {\n    |                 \
    \                                     - this delimiter might not be properly closed...\n\
    ...\n111 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n141 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpre3eyy57.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n   --> /tmp/tmpre3eyy57.rs:115:17\n    |\n115 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpre3eyy57.rs:115:25\n\
    \    |\n115 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpre3eyy57.rs:116:17\n    |\n116 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpre3eyy57.rs:116:25\n\
    \    |\n116 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpre3eyy57.rs:117:17\n    |\n117 |     assert_eq!({left},\
    \ {right});\n    |                 ^^"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    let mut dot_name_chars = dot_name.chars();\n            \
    \        let mut dot_name_chars_iter = dot_name_chars.iter();\n              \
    \      let mut dot_name_chars_next = dot_name_chars_iter.next();\n           \
    \         let mut dot_name_chars_prev = dot_name_chars_iter.prev();\n        \
    \            let mut dot_name_chars_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next_next_next\
    \ = dot_name_chars_iter.next_back();\n                    let mut dot_name_chars_prev_prev_prev_prev_prev_prev_next\
    \ = dot_name_chars_iter.prev_back();\n                    let mut dot_name_chars_next_next_next_next_next_next_next_next\
    \ = dot_name_chars_iter.next_back();\n                    let mut dot_name_chars_prev_prev_prev_prev_prev_prev_next\
    \ = dot_name_chars_iter.prev_back();\n                    let mut dot_name_chars_next_\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv5xfx252.rs:81:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - unclosed delimiter\n...\n22 |         } else {\n \
    \  |                - unclosed delimiter\n...\n26 |             } else {\n   |\
    \                    - unclosed delimiter\n...\n30 |                 } else {\n\
    \   |                        - this delimiter might not be properly closed...\n\
    ...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    81 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpv5xfx252.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpv5xfx252.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmpv5xfx252.rs:50:49\n   |\n50 |                \
    \     let mut dot_name_chars_next_\n   |                                     \
    \            ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv5xfx252.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv5xfx252.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv5xfx252.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv5xf"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpj2w2n9z4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpj2w2n9z4.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmpj2w2n9z4.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2w2n9z4.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj2w2n9z4.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj2w2n9z4.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut counter = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n\
    \    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:108:17\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:108:25\n    |\n108 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:110:25\n    |\n110 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:111:17\n\
    \    |\n111 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:111:25\n    |\n111 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:112:17\n\
    \    |\n112 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:112:25\n    |\n112 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:113:17\n\
    \    |\n113 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_start = dot_pos + 1\n    while dot_pos_start > dot_pos_end {\n     \
    \   if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z' {\n\
    \            dot_pos_start -= 1;\n        } else if file_name[dot_pos_start] >=\
    \ 'A' && file_name[dot_pos_start] <= 'Z' {\n            dot_pos_start -= 1;\n\
    \        } else {\n            return String::from(\"No\");\n        }\n    }\n\
    \    if dot_pos_start == dot_pos_end {\n        if file_name[dot_pos_start] >=\
    \ 'a' && file_name[dot_pos_start] <= 'z' {\n            dot_pos_start += 1;\n\
    \        } else if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start]\
    \ <= 'Z' {\n            dot_pos_start += 1;\n        } else {\n            return\
    \ String::from(\"No\");\n        }\n    }\n    if file_name[dot_pos_start] >=\
    \ '0' && file_name[dot_pos_start] <= '9' {\n        return String::from(\"Yes\"\
    );\n    } else {\n        return String::from(\"No\");\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp8zez0_iv.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp8zez0_iv.rs:19:46\n   |\n19 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n20 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `while`\n  --> /tmp/tmp8zez0_iv.rs:21:40\n   |\n21 |    \
    \ let mut dot_pos_start = dot_pos + 1\n   |                                  \
    \      ^ help: add `;` here\n22 |     while dot_pos_start > dot_pos_end {\n  \
    \ |     ----- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp8zez0_iv.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8zez0_iv.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8zez0_iv.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8zez0_iv.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8zez0_iv.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8zez0_iv.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8zez0_iv.rs:52:17\n   |\n"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_start = dot_pos;\n    let mut dot_pos_end = dot_pos;\n    \n   \
    \ loop {\n        dot_pos_end = dot_pos_start.saturating_sub(1);\n        if dot_pos_end\
    \ < String::npos && dot_pos_end != dot_pos_start {\n            return String::from(\"\
    No\");\n        }\n        \n        let mut dot_pos_start = dot_pos_end;\n  \
    \      \n        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end\
    \ {\n            return String::from(\"No\");\n        }\n        \n        let\
    \ mut dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpl69bh2o_.rs:118:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n25  |  \
    \   loop {\n    |          - this delimiter might not be properly closed...\n\
    ...\n88  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n118 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpl69bh2o_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpl69bh2o_.rs:88:1\n\
    \   |\n87 |         if dot_pos_\n   |         -- this `if` expression has a condition,\
    \ but no block\n88 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpl69bh2o_.rs:92:17\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:92:25\n \
    \  |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl69bh2o_.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl69bh2o_.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl69bh2o_.rs:95:17\n  \
    \ |\n95 |  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    \n    // Remove all non-alphanumeric characters\
    \ from the file's name\n    file_name.chars().filter(|c| !c.is_alphanumeric()).collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyynpesx9.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of('.');\n\
    \    let mut dot_pos_end = file_name_chars.len();\n    \n    if dot_pos == String::new().len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos != 0 {\n\
    \        dot_pos_end = dot_pos;\n    }\n    \n    let mut first_char_pos = 0;\n\
    \    \n    for c in file_name_chars {\n        if !c.is_ascii_letter() {\n   \
    \         return String::from(\"No\");\n        }\n        \n        if first_char_pos\
    \ == dot_pos {\n            return String::from(\"No\");\n        }\n        \n\
    \        first_char_pos = c;\n    }\n    \n    if dot_pos_end != file_name_chars.len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 1] != '.' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 2] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 3] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 4] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 5] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 6] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 7] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 8] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 9] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 10] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 11] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 12] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 13] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpgopudh0v.rs:99:1\n   |\n\
    98 |     if file_name\n   |     -- this `if` expression has a condition, but no\
    \ block\n99 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n   --> /tmp/tmpgopudh0v.rs:103:17\n    |\n103 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:103:25\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:104:17\n    |\n104 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:104:25\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:105:17\n    |\n105 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:105:25\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:106:17\n    |\n106 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:106:25\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:107:17\n    |\n107 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:107:25\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[dot_pos + 1..].chars().next()\n    if first_char\
    \ == String::from('.') {\n        return String::from(\"No\");\n    }\n    if\
    \ first_char.starts_with(String::from('a')) || first_char.starts_with(String::from('A'))\
    \ {\n        return String::from(\"No\");\n    }\n    if first_char.starts_with(String::from('0'))\
    \ || first_char.starts_with(String::from('9')) {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos == 0 {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos - 1..dot_pos].count() != 1 {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 1..dot_pos].chars().next().unwrap().to_ascii_lowercase()\
    \ != file_name[dot_pos - 1..dot_pos] {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp02f2hl6n.rs:19:43\n\
    \   |\n19 |     let mut dot_pos = file_name.rfind('.')\n   |                 \
    \                          ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp02f2hl6n.rs:23:65\n   |\n23 |     let mut first_char = file_name[dot_pos\
    \ + 1..].chars().next()\n   |                                                \
    \                 ^ help: add `;` here\n24 |     if first_char == String::from('.')\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp02f2hl6n.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02f2hl6n.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp02f2hl6n.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp02f2hl6n.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02f2hl6n.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\ner"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    while dot_pos_start < dot_pos_end {\n\
    \        if dot_pos_start == dot_pos_end {\n            break;\n        }\n  \
    \      let mut letter = file_name[dot_pos_start];\n        if !((letter >= 'a'\
    \ && letter <= 'z') || (letter >= 'A' && letter <= 'Z')) {\n            dot_pos_start_letter\
    \ = false;\n            break;\n        }\n        dot_pos_start += 1;\n    }\n\
    \    if dot_pos_start_letter {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos_start == dot_pos_end {\n        return String::from(\"No\");\n\
    \    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == \n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpm4wo7egr.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpm4wo7egr.rs:90:1\n   |\n90 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm4wo7egr.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:95:25\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm4wo7egr.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm4wo7egr.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjwrru_aj.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = file_name.chars().next().unwrap();\n    if first_letter <\
    \ 'a' || first_letter > 'z' {\n        return String::from(\"No\");\n    }\n \
    \   \n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_2\
    \ = file_name.find('.')\n    if dot_pos_2 == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos == dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos_3 = file_name.find('.')\n    if dot_pos_3\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    if\
    \ dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n    }\n    \n\
    \    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n    }\n\
    \    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n\
    \    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\"\
    );\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjajciu2n.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjajciu2n.rs:27:42\n   |\n27 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n28 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjajciu2n.rs:32:44\n   |\n32 |     let\
    \ mut dot_pos_2 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n33 |     if dot_pos_2 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpjajciu2n.rs:45:44\n   |\n45 |     let mut dot_pos_3 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n46 |  \
    \   if dot_pos_3 == String::npos { \n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpjajciu2n.rs:110:25\n    |\n110 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:111:17\n\
    \    |\n111 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpjajciu2n.rs:111:25\n    |\n111 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:112:17\n\
    \    |\n112 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \  "
  stdout: ''
  timestamp: 1659805604
