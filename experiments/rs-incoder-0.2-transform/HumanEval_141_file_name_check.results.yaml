language: rs
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of('.');\n\
    \    let mut dot_pos_end = file_name_chars.find_first_not_of('.', dot_pos);\n\
    \    let mut dot_pos_start = dot_pos + 1;\n    let mut dot_pos_start_end = dot_pos_end;\n\
    \    let mut dot_pos_start_end_end = dot_pos_start_end;\n    let mut dot_pos_start_end_end_end\
    \ = dot_pos_start_end_end;\n    let mut dot_pos_start_end_end_end_end = dot_pos_start_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end = dot_pos_start_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n \
    \   let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgh8zf3mj.rs:37:51\n   |\n\
    37 |     let mut dot_pos_start_end_end_end_end_end_end_\n   |                \
    \                                   ^ help: add `;` here\n38 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end` in\
    \ this scope\n  --> /tmp/tmpgh8zf3mj.rs:23:45\n   |\n23 |     let mut dot_pos_start_end_end_end_end\
    \ = dot_pos_start_end_end_end_end;\n   |                                     \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `dot_pos_start_end_end_end`\n\nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:24:49\n   |\n24 |     let mut dot_pos_start_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end;\n   |                                 \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `dot_pos_start_end_end_end_end`\n\nerror[E0425]: cannot\
    \ find value `dot_pos_start_end_end_end_end_end_end` in this scope\n  --> /tmp/tmpgh8zf3mj.rs:25:53\n\
    \   |\n25 |     let mut dot_pos_start_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end;\n\
    \   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_start_end_end_end_end_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:26:57\n   |\n26 |     let mut dot_pos_start_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end;\n   |                         \
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `dot_pos_start_end_end_end_end_end_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_start_end_end_end_end_end_end_end_end`\
    \ in this scope\n  --> /tmp/tmpgh8zf3mj.rs:27:61\n   |\n27 |     let mut dot_pos_start_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end;\n   |         "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = String::from(\"\");\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    for c in file_name.chars() {\n        if c.is_digit() {\n     \
    \       return String::from(\"No\");\n        }\n        if c.is_lowercase() {\n\
    \            if first_letter == String::from(\"\") {\n                first_letter\
    \ = String::from(c.to_lowercase());\n            }\n            else {\n     \
    \           if first_letter != String::from(c.to_lowercase()) {\n            \
    \        return String::from(\"No\");\n                }\n            }\n    \
    \    }\n        else if c.is_uppercase() {\n            if first_letter == String::from(\"\
    \") {\n                first_letter = String::from(c.to_uppercase());\n      \
    \      }\n            else {\n                if first_letter != String::from(c.to_uppercase())\
    \ {\n                    return String::from(\"No\");\n                }\n   \
    \         }\n        }\n    }\n    \n    if dot_pos == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos - 1] !=\
    \ '.' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 2] != String::from(\"a\") && file_name[dot_pos - 2] != String::from(\"A\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 3] != String::from(\"z\") && file_name[dot_pos - 3] != String::from(\"Z\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 4] != String::from(\"0\") && file_name[dot_pos - 4] != String::from(\"9\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    return String::from(\"\
    Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpyxop3c6w.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpyxop3c6w.rs:23:42\n   |\n23 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n24 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyxop3c6w.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyxop3c6w.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyxop3c6w.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyxop3c6w.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyxop3c6w.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyxop3c6w.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    A\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    0\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    9\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:105:17\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:105:25\n    |\n105 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:106:17\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:106:25\n    |\n106 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:107:17\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:107:25\n    |\n107 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:108:17\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:108:25\n    |\n108 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpef66fz5s.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpef66fz5s.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[..dot_pos].chars().next().unwrap();\n    if\
    \ first_char.len() != 1 || first_char != 'a' || first_char != 'z' || first_char\
    \ != 'A' {\n        return String::from(\"No\");\n    }\n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_char = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \    if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe' || dot_char\
    \ != 'dll' {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:43\n\
    \   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe'\
    \ || dot_char != 'dll' {\n   |                                           ^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    32 |     if dot_char.len() != 1 || dot_char != \"txt\" || dot_char != 'exe' ||\
    \ dot_char != 'dll' {\n   |                                           ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:64\n\
    \   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe'\
    \ || dot_char != 'dll' {\n   |                                               \
    \                 ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use\
    \ double quotes\n   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' ||\
    \ dot_char != \"exe\" || dot_char != 'dll' {\n   |                           \
    \                                     ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp55j0m5mq.rs:32:85\n   |\n32 |     if dot_char.len()\
    \ != 1 || dot_char != 'txt' || dot_char != 'exe' || dot_char != 'dll' {\n   |\
    \                                                                            \
    \         ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n32 |     if dot_char.len() != 1 || dot_char != 'txt' || dot_char\
    \ != 'exe' || dot_char != \"dll\" {\n   |                                    \
    \                                                 ~~~~~\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp55j0m5mq.rs:19:42\n   |\n19 |     let mut\
    \ dot_pos = file_name.find('.')\n   |                                        \
    \  ^ help: add `;` here\n20 |     if dot_pos == String::npos {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp55j0m5mq.rs:27:42\n\
    \   |\n27 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n28 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") || file_name.starts_with(\"A\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        let mut dot_index = file_name.rfind('.')\n        if dot_index\
    \ == String::npos {\n            return String::from(\"No\");\n        }\n   \
    \     if dot_index == 0 {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_string = file_name.clone();\n        dot_string.truncate(dot_index\
    \ - 1);\n        if dot_string.contains(\"txt\") || dot_string.contains(\"exe\"\
    ) || dot_string.contains(\"dll\") {\n            return String::from(\"Yes\");\n\
    \        }\n    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgjjkr3e0.rs:29:49\n\
    \   |\n29 |         let mut dot_index = file_name.rfind('.')\n   |           \
    \                                      ^ help: add `;` here\n30 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgjjkr3e0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgjjkr3e0.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgjjkr3e0.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgjjkr3e0.rs:51:25\n\
    \   |\n51 |     assert_eq!({le"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ == false {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_digit()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol()) {\n    \
    \    return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_whitespace())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_formfeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_backspace()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_formfeed()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_newline()) {\n   \
    \     return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7mb2e30.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7mb2e30.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7mb2e30.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7mb2e30.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_split\
    \ = file_name.split('.');\n    let mut file_name_split_len = file_name_split.len();\n\
    \    let mut file_name_split_index = 0;\n    let mut file_name_split_chars = String::new();\n\
    \    let mut file_name_split_chars_len = String::new();\n    let mut file_name_split_char_index\
    \ = 0;\n    let mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpjaq15og1.rs:53:51\n   |\n\
    53 |     let mut file_name_split_chars_len = file_name_\n   |                \
    \                                   ^ help: add `;` here\n54 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `file_name_` in this scope\n  --> /tmp/tmpjaq15og1.rs:53:41\n\
    \   |\n53 |     let mut file_name_split_chars_len = file_name_\n   |         \
    \                                ^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `file_name`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjaq15og1.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjaq15og1.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjaq15og1.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjaq15og1.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjaq15og1.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjaq15og1.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjaq15"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end_2 = file_name.find('.')\n\
    \    if dot_pos_end_2 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_2 = dot_pos_end_2 + 1;\n    let mut dot_pos_end_3\
    \ = file_name.find('.')\n    if dot_pos_end_3 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_3 = dot_pos_end_3 + 1;\n\
    \    let mut dot_pos_end_4 = file_name.find('.')\n    if dot_pos_end_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_4 =\
    \ dot_pos_end_4 + 1;\n    let mut dot_pos_end_5 = file_name.find('.')\n    if\
    \ dot_pos_end_5 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_5 = dot_pos_end_5 + 1;\n    let mut dot_pos_end_6 = file_name.find('.')\n\
    \    if dot_pos_end_6 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_6 = dot_pos_end_6 + 1;\n    let mut dot_pos_end_7\
    \ = file_name.find('.')\n    if dot_pos_end_7 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_7 = dot_pos_end_7 + 1;\n\
    \    let mut dot_pos_end_8 = file_name.find('.')\n    if dot_pos_end_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_8 =\
    \ dot_pos_end_8 + 1;\n    let mut dot_pos_end_9 = file_name.find('.')\n    if\
    \ dot_pos_end_9 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_9 = dot_pos_end_9 + 1;\n    let mut dot_pos_end_10 =\
    \ file_name.find('.')\n    if dot_pos_end_10 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_10 = dot_pos_end_10\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp660nc99i.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:27:48\n   |\n27\
    \ |     let mut dot_pos_end_2 = file_name.find('.')\n   |                    \
    \                            ^ help: add `;` here\n28 |     if dot_pos_end_2 ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmp660nc99i.rs:32:48\n   |\n32 |     let mut dot_pos_end_3\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n33 |     if dot_pos_end_3 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:37:48\n\
    \   |\n37 |     let mut dot_pos_end_4 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n38 |     if dot_pos_end_4\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp660nc99i.rs:42:48\n   |\n42 |     let mut dot_pos_end_5\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n43 |     if dot_pos_end_5 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp660nc99i.rs:47:48\n\
    \   |\n47 |     let mut dot_pos_end_6 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n48 |     if dot_pos_end_6\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp660nc99i.rs:52:48\n   |\n52 |     let mut dot_pos_end_7\
    \ = file_name.find('.')\n   "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[dot_pos - 1..dot_pos].chars().next()\n   \
    \ if first_char.count() > 1 {\n        return String::from(\"No\");\n    }\n \
    \   if first_char.count() < 1 || first_char.first().unwrap() != 'a' || first_char.first().unwrap()\
    \ != 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 1..].chars().any(|c| !c.is_ascii_alphanumeric()) {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgd292yf_.rs:19:43\n\
    \   |\n19 |     let mut dot_pos = file_name.rfind('.')\n   |                 \
    \                          ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpgd292yf_.rs:23:72\n   |\n23 |     let mut first_char = file_name[dot_pos\
    \ - 1..dot_pos].chars().next()\n   |                                         \
    \                               ^ help: add `;` here\n24 |     if first_char.count()\
    \ > 1 {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgd292yf_.rs:38:17\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:38:25\n \
    \  |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgd292yf_.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgd292yf_.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgd292yf_.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgd292yf_.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgd292yf_.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scop"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        let mut dot_pos_end = file_name.rfind('.')\n \
    \       let mut dot_pos_start = dot_pos + 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmplhdqq29l.rs:93:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - this delimiter might not be properly closed...\n...\n\
    63 | }\n   | - ...as it matches this but it has different indentation\n...\n93\
    \ | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmplhdqq29l.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         let mut\
    \ dot_pos_end = file_name.rfind('.')\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmplhdqq29l.rs:20:51\n   |\n20\
    \ |         let mut dot_pos_end = file_name.rfind('.')\n   |                 \
    \                                  ^ help: add `;` here\n21 |         let mut\
    \ dot_pos_start = dot_pos + 1;\n   |         --- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplhdqq29l.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplhdqq29l.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplhdqq29l.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplhdqq29l.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplhdqq29l.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplhdqq29l.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                  "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start_letter\
    \ = String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpdfs0f2jj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpdfs0f2jj.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found `}`\n  --> /tmp/tmpdfs0f2jj.rs:59:17\n   |\n59 |     let\
    \ mut dot_\n   |                 ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdfs0f2jj.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdfs0f2jj.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdfs0f2jj.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdfs0f2jj.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.find('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name.chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_pos = file_name.find('.')\n\
    \                    if dot_pos == String::npos {\n                        String::from(\"\
    No\")\n                    } else {\n                        let mut dot_pos =\
    \ file_name.find('.')\n                        if dot_pos == String::npos {\n\
    \                            String::from(\"No\")\n                        } else\
    \ {\n                            if dot_pos == dot_pos + 1 {\n               \
    \                 String::from(\"Yes\")\n                            } else {\n\
    \                                String::from(\"No\")\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:31:58\n   |\n31 |       \
    \              let mut dot_pos = file_name.find('.')\n   |                   \
    \                                       ^ help: add `;` here\n32 |           \
    \          if dot_pos == String::npos {\n   |                     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfv8xky15.rs:35:62\n\
    \   |\n35 |                         let mut dot_pos = file_name.find('.')\n  \
    \ |                                                              ^ help: add `;`\
    \ here\n36 |                         if dot_pos == String::npos {\n   |      \
    \                   -- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfv8xky15.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfv8xky15.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfv8xky15.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfv8xky15.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.next().unwrap().unwrap();\n\
    \    let mut dot_pos_next = dot_pos.unwrap();\n    let mut dot_pos_next_next =\
    \ dot_pos_next.unwrap();\n    let mut dot_pos_next_next_next = dot_pos_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next = dot_pos_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next = dot_pos_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next = dot_pos_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next =\
    \ dot_pos_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n \
    \   let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3kih9v59.rs:36:36\n   |\n\
    36 |     let mut dot_pos_next_next_next_\n   |                               \
    \     ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `dot_pos_next_next_next_next_next_next_next_next_next_next` in this\
    \ scope\n  --> /tmp/tmp3kih9v59.rs:28:73\n   |\n28 |     let mut dot_pos_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next.unwrap();\n   |\
    \                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:29:78\n   |\n29 | ...t_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:30:83\n   |\n30 | ...next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_next_next_next_next_next_next_next_next_next_next`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next`\
    \ in this scope\n  --> /tmp/tmp3kih9v59.rs:32:83\n   |\n32 | ...xt_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    if dot_pos_end == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end\
    \ = file_name.find('.')\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpnbyw1m4l.rs:105:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n73  |  \
    \   if dot_pos_end == String::npos {\n    |                                  \
    \  - this delimiter might not be properly closed...\n74  |         return String\n\
    75  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:27:46\n   |\n27\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n28 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:32:46\n   |\n32 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n33 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:37:46\n   |\n37\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n43 |\
    \     if dot_pos_end == St"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[0..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n                    if dot_name.contains('.')\
    \ {\n                        String::from(\"No\")\n                    } else\
    \ {\n                        let mut dot_name = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \                        if dot_name.contains('.') {\n                       \
    \     String::from(\"No\")\n                        } else {\n               \
    \             String::from(\"Yes\")\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpr3ru48d2.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpr3ru48d2.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr3ru48d2.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr3ru48d2.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr3ru48d2.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr3ru48d2.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr3ru48d2.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr3ru48d2.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = file_name.find('.')\n\
    \    if dot_pos_start == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp2o2cuoac.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp2o2cuoac.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp2o2cuoac.rs:27:48\n   |\n27\
    \ |     let mut dot_pos_start = file_name.find('.')\n   |                    \
    \                            ^ help: add `;` here\n28 |     if dot_pos_start ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp2o2cuoac.rs:64:1\n   |\n64 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2o2cuoac.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2o2cuoac.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2o2cuoac.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2o2cuoac.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2o2cuoac.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2o2cuoac.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpe7tcv3cb.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpe7tcv3cb.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7tcv3cb.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos == 0 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut first_letter = file_name[dot_pos\
    \ - 1];\n    if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    let mut last_letter = file_name[dot_pos];\n    if last_letter\
    \ < 'a' || last_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    if file_name[dot_pos - 2] != String::from('.') {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos\
    \ - 2] != String::from('exe') && file_name[dot_pos - 2] != String::from('dll')\
    \ {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\")\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp7pehvohn.rs:40:47\n\
    \   |\n40 |     if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos\
    \ - 2] != String::from('exe') && file_name[dot_pos - 2] != String...\n   |   \
    \                                            ^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from(\"txt\") && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from('dll') {\n   |                   \
    \                            ~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n  --> /tmp/tmp7pehvohn.rs:40:96\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from('txt') && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String...\n   |                               \
    \                                                                 ^^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n40 |   \
    \  if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos - 2]\
    \ != String::from(\"exe\") && file_name[dot_pos - 2] != String::from('dll') {\n\
    \   |                                                                        \
    \                        ~~~~~\n\nerror: character literal may only contain one\
    \ codepoint\n  --> /tmp/tmp7pehvohn.rs:40:145\n   |\n40 | ...= String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from('dll') {\n   |                   \
    \                                                 ^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n40 |     if file_name[dot_pos\
    \ - 2] != String::from('txt') && file_name[dot_pos - 2] != String::from('exe')\
    \ && file_name[dot_pos - 2] != String::from(\"dll\") {\n   |                 \
    \                                                                            \
    \                                                    ~~~~~\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp7pehvohn.rs:19:42\n   |\n19 |     let\
    \ mut dot_pos = file_name.find('.')\n   |            "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter = true;\n \
    \   let mut dot_pos_start_letter2 = true;\n    let mut dot_pos_end_letter2 = true;\n\
    \    let mut dot_pos_start_letter3 = true;\n    let mut dot_pos_end_letter3 =\
    \ true;\n    let mut dot_pos_start_letter4 = true;\n    let mut dot_pos_end_letter4\
    \ = true;\n    let mut dot_pos_start_letter5 = true;\n    let mut dot_pos_end_letter5\
    \ = true;\n    let mut dot_pos_start_letter6 = true;\n    let mut dot_pos_end_letter6\
    \ = true;\n    let mut dot_pos_start_letter7 = true;\n    let mut dot_pos_end_letter7\
    \ = true;\n    let mut dot_pos_start_letter8 = true;\n    let mut dot_pos_end_letter8\
    \ = true;\n    let mut dot_pos_start_letter9 = true;\n    let mut dot_pos_end_letter9\
    \ = true;\n    let mut dot_pos_start_letter10 = true;\n    let mut dot_pos_end_letter10\
    \ = true;\n    let mut dot_pos_start_letter11 = true;\n    let mut dot_pos_end_letter11\
    \ = true;\n    let mut dot_pos_start_letter12 = true;\n    let mut dot_pos_end_letter12\
    \ = true;\n    let mut dot_pos_start_letter13 = true;\n    let mut dot_pos_end_letter13\
    \ = true;\n    let mut dot_pos_start_letter14 = true;\n    let mut dot_pos_end_letter14\
    \ = true;\n    let mut dot_pos_start_letter15 = true;\n    let mut dot_pos_end_letter15\
    \ = true;\n    let mut dot_pos_start_letter16 = true;\n    let mut dot_pos_end_letter16\
    \ = true;\n    let mut dot_pos_start_letter17 = true;\n    let mut dot_pos_end_letter17\
    \ = true;\n    let mut dot_pos_start_letter18 = true;\n    let mut dot_pos_end_letter18\
    \ = true;\n    let mut dot_pos_start_letter19 = true;\n    let mut dot_pos_end_letter19\
    \ = true;\n    let mut dot_pos_start_letter20 = true;\n    let mut dot_pos_end_letter20\
    \ = true;\n    let mut dot_pos_start_letter21 = true;\n    let mut dot_pos_end_letter21\
    \ = true;\n    let mut dot_pos_start_letter22 = true;\n    let mut dot_pos_end_letter22\
    \ = true;\n    let mut dot_pos_start_letter23 = true;\n    let mu\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjz4bwbt_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpjz4bwbt_.rs:68:11\n\
    \   |\n68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjz4bwbt_.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjz4bwbt_.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjz4bwbt_.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjz4bwbt_.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found "
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter2 = false;\n    let mut dot_pos_end_letter2 =\
    \ false;\n    let mut dot_pos_start_letter3 = false;\n    let mut dot_pos_end_letter3\
    \ = false;\n    let mut dot_pos_start_letter4 = false;\n    let mut dot_pos_end_letter4\
    \ = false;\n    let mut dot_pos_start_letter5 = false;\n    let mut dot_pos_end_letter5\
    \ = false;\n    let mut dot_pos_start_letter6 = false;\n    let mut dot_pos_end_letter6\
    \ = false;\n    let mut dot_pos_start_letter7 = false;\n    let mut dot_pos_end_letter7\
    \ = false;\n    let mut dot_pos_start_letter8 = false;\n    let mut dot_pos_end_letter8\
    \ = false;\n    let mut dot_pos_start_letter9 = false;\n    let mut dot_pos_end_letter9\
    \ = false;\n    let mut dot_pos_start_letter10 = false;\n    let mut dot_pos_end_letter10\
    \ = false;\n    let mut dot_pos_start_letter11 = false;\n    let mut dot_pos_end_letter11\
    \ = false;\n    let mut dot_pos_start_letter12 = false;\n    let mut dot_pos_end_letter12\
    \ = false;\n    let mut dot_pos_start_letter13 = false;\n    let mut dot_pos_end_letter13\
    \ = false;\n    let mut dot_pos_start_letter14 = false;\n    let mut dot_pos_end_letter14\
    \ = false;\n    let mut dot_pos_start_letter15 = false;\n    let mut dot_pos_end_letter15\
    \ = false;\n    let mut dot_pos_start_letter16 = false;\n    let mut dot_pos_end_letter16\
    \ = false;\n    let mut dot_pos_start_letter17 = false;\n    let mut dot_pos_end_letter17\
    \ = false;\n    let mut dot_pos_start_letter18 = false;\n    let mut dot_pos_end_letter18\
    \ = false;\n    let mut dot_pos_start_letter19 = false;\n    let mut dot_pos_end_letter19\
    \ = false;\n    let mut dot_pos_start_letter20 = false;\n    let mut dot_pos_end_letter20\
    \ = false;\n    let mut dot_pos_start_letter21 = false;\n    let mut dot_pos_end_letter21\
    \ = false;\n    let mut dot_pos_start_letter22 = false;\n    let mut dot_pos_end_letter22\
    \ = false;\n    let mut dot_pos_start_letter23 = false;\n    let mut \n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpw93s8yq2.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected identifier, found `}`\n \
    \ --> /tmp/tmpw93s8yq2.rs:69:1\n   |\n69 | }\n   | ^ expected identifier\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw93s8yq2.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw93s8yq2.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw93s8yq2.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw93s8yq2.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw93s8yq2.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_char = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_char.isalpha() == false {\n                String::from(\"\
    No\")\n            } else if first_char == 'a' || first_char == 'A' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'b' || first_char\
    \ == 'B' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'c' || first_char == 'C' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'd' || first_char == 'D' {\n                String::from(\"\
    No\")\n            } else if first_char == 'e' || first_char == 'E' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'f' || first_char\
    \ == 'F' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'g' || first_char == 'G' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'h' || first_char == 'H' {\n                String::from(\"\
    No\")\n            } else if first_char == 'i' || first_char == 'I' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'j' || first_char\
    \ == 'J' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'k' || first_char == 'K' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'l' || first_char == 'L' {\n                String::from(\"\
    No\")\n            } else if first_char == 'm' || first_char == 'M' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'n' || first_char\
    \ == 'N' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 'o' || first_char == 'O' {\n                String::from(\"No\")\n      \
    \      } else if first_char == 'p' || first_char == 'P' {\n                String::from(\"\
    No\")\n            } else if first_char == 'q' || first_char == 'Q' {\n      \
    \          String::from(\"No\")\n            } else if first_char == 'r' || first_char\
    \ == 'R' {\n                String::from(\"No\")\n            } else if first_char\
    \ == 's' || first_char == 'S' {\n                String\n}\n\nfn main() {\n  \
    \  let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkc2ap74l.rs:94:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - unclosed delimiter\n...\n22 |         } else {\n \
    \  |                - unclosed delimiter\n...\n62 |             } else if first_char\
    \ == 's' || first_char == 'S' {\n   |                                        \
    \                      - this delimiter might not be properly closed...\n63 |\
    \                 String\n64 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n94 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpkc2ap74l.rs:19:46\n   |\n19 |         let mut dot_pos = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n20 |\
    \         if dot_pos == String::npos {\n   |         -- unexpected token\n\nerror[E0423]:\
    \ expected value, found struct `String`\n   --> /tmp/tmpkc2ap74l.rs:63:17\n  \
    \  |\n63  |                   String\n    |                   ^^^^^^ help: use\
    \ struct literal syntax instead: `String { vec: val }`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkc2ap74l.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkc2ap74l.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkc2ap74l.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkc2ap74l.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkc2ap74l.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scop"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end - 1;\n    let mut\
    \ dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end = dot_pos_end -\
    \ 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_end\
    \ = dot_pos_end - 1;\n    let mut dot_pos_start = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpta8tce9y.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpta8tce9y.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected expression, found `}`\n  --> /tmp/tmpta8tce9y.rs:64:1\n   |\n64 | }\n\
    \   | ^ expected expression\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpta8tce9y.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpta8tce9y.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpta8tce9y.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpta8tce9y.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpta8tce9y.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpta8tce9y.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right}"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter2 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter2 = dot_pos_end;\n    let mut dot_pos_start_letter3 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter3 = dot_pos_end;\n    let mut dot_pos_start_letter4\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter4 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter5 = dot_pos_start;\n    let mut dot_pos_end_letter5 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter6 = dot_pos_start;\n    let mut dot_pos_end_letter6\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter7 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter7 = dot_pos_end;\n    let mut dot_pos_start_letter8 =\
    \ dot_pos_start;\n    let mut dot_pos_end_letter8 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter9 = dot_pos_start;\n    let mut dot_pos_end_letter9 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter10 = dot_pos_start;\n    let mut dot_pos_end_letter10\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter11 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter11 = dot_pos_end;\n    let mut dot_pos_start_letter12\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter12 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter13 = dot_pos_start;\n    let mut dot_pos_end_letter13 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter14 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter14 = dot_pos_end;\n    let mut dot_pos_start_letter15 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter15 = dot_pos_end;\n    let mut dot_pos_start_letter16\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter16 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter17 = dot_pos_start;\n    let mut dot_pos_end_letter17 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter18 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter18 = dot_pos_end;\n    let mut dot_pos_start_letter19\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp_3jdi32c.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp_3jdi32c.rs:59:35\n\
    \   |\n59 |     let mut dot_pos_start_letter19\n   |                         \
    \          ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3jdi32c.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left},"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    \n    if file_name.len() > 3 {\n        file_name.truncate(3);\n\
    \    }\n    \n    if file_name.contains(\".\") {\n        file_name.truncate(file_name.rfind('.'));\n\
    \    }\n    \n    if file_name.starts_with(\"a\") || file_name.starts_with(\"\
    A\") {\n        file_name.truncate(0);\n    }\n    \n    if file_name.contains(\"\
    .\") {\n        file_name.truncate(file_name.rfind('.'));\n    }\n    \n    if\
    \ file_name.contains(\"txt\") || file_name.contains(\"exe\") || file_name.contains(\"\
    dll\") {\n        file_name.truncate(0);\n    }\n    \n    file_name\n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqase6xlq.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqase6xlq.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqase6xlq.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqase6xlq.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos;\n    dot_pos_end += 1;\n    let mut dot_pos_start = dot_pos;\n\
    \    dot_pos_start += 1;\n    while dot_pos_start < dot_pos_end {\n        let\
    \ mut dot_pos_end = dot_pos_start;\n        dot_pos_end += 1;\n        if file_name[dot_pos_end]\
    \ != '\\0' {\n            if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' {\n                dot_pos_end += 1;\n            }\n            if file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' {\n                dot_pos_end += 1;\n\
    \            }\n            if dot_pos_end == dot_pos_start {\n              \
    \  return String::from(\"No\");\n            }\n        }\n        dot_pos_start\
    \ += 1;\n    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprpmfzg9f.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmprpmfzg9f.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprpmfzg9f.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprpmfzg9f.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprpmfzg9f.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprpmfzg9f.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprpmfzg9f.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprpmfzg9f.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_split\
    \ = file_name.split('.');\n    if file_name_split.len() != 2 {\n        return\
    \ String::from(\"No\");\n    }\n    let mut file_name_split_first = file_name_split[0].chars();\n\
    \    if file_name_split_first.len() != 1 && file_name_split_first.first().unwrap()\
    \ != 'a' && file_name_split_first.first().unwrap() != 'A' {\n        return String::from(\"\
    No\");\n    }\n    let mut file_name_split_last = file_name_split[1].chars();\n\
    \    if file_name_split_last.len() != 1 && file_name_split_last.first().unwrap()\
    \ != 'a' && file_name_split_last.first().unwrap() != 'A' {\n        return String::from(\"\
    No\");\n    }\n    if file_name_split_first.first().unwrap() == 'a' || file_name_split_first.first().unwrap()\
    \ == 'A' {\n        if file_name_split_first.last().unwrap() == 'z' || file_name_split_first.last().unwrap()\
    \ == 'Z' {\n            if file_name_split_last.first().unwrap() == 't' || file_name_split_last.first().unwrap()\
    \ == 'T' {\n                if file_name_split_last.last().unwrap() == 'e' ||\
    \ file_name_split_last.last().unwrap() == 'E' {\n                    if file_name_split_last.last().unwrap()\
    \ == 's' || file_name_split_last.last().unwrap() == 'S' {\n                  \
    \      return String::from(\"Yes\");\n                    }\n                }\n\
    \            }\n        }\n    }\n    return String::from(\"No\");\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpixk9ipah.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpixk9ipah.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpixk9ipah.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpixk9ipah.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    if dot_pos\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name[0..dot_pos\
    \ - 1].is_empty() {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != 'a' && file_name[dot_pos - 1] != 'b' && file_name[dot_pos - 1] != 'c'\
    \ &&\n        file_name[dot_pos - 1] != 'd' && file_name[dot_pos - 1] != 'e' &&\
    \ file_name[dot_pos - 1] != 'f' &&\n        file_name[dot_pos - 1] != 'g' && file_name[dot_pos\
    \ - 1] != 'h' && file_name[dot_pos - 1] != 'i' &&\n        file_name[dot_pos -\
    \ 1] != 'j' && file_name[dot_pos - 1] != 'k' && file_name[dot_pos - 1] != 'l'\
    \ &&\n        file_name[dot_pos - 1] != 'm' && file_name[dot_pos - 1] != 'n' &&\
    \ file_name[dot_pos - 1] != 'o' &&\n        file_name[dot_pos - 1] != 'p' && file_name[dot_pos\
    \ - 1] != 'q' && file_name[dot_pos - 1] != 'r' &&\n        file_name[dot_pos -\
    \ 1] != 's' && file_name[dot_pos - 1] != 't' && file_name[dot_pos - 1] != 'u'\
    \ &&\n        file_name[dot_pos - 1] != 'v' && file_name[dot_pos - 1] != 'w' &&\
    \ file_name[dot_pos - 1] != 'x' &&\n        file_name[dot_pos - 1] != 'y' && file_name[dot_pos\
    \ - 1] != 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] == 'a' || file_name[dot_pos - 1] == 'b' || file_name[dot_pos - 1] == 'c'\
    \ ||\n        file_name[dot_pos - 1] == 'd' || file_name[dot_pos - 1] == 'e' ||\
    \ file_name[dot_pos - 1] == 'f' ||\n        file_name[dot_pos - 1] == 'g' || file_name[dot_pos\
    \ - 1] == 'h' || file_name[dot_pos - 1] == 'i' ||\n        file_name[dot_pos -\
    \ 1] == 'j' || file_name[dot_pos - 1] == 'k' || file_name[dot_pos - 1] == 'l'\
    \ ||\n        file_name[dot_pos - 1] == 'm' || file_name[dot_pos - 1] == 'n' ||\
    \ file_name[dot_pos - 1] == 'o' ||\n        file_name[dot_pos - 1] == 'p' || file_name[dot_\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpb8a3wfs4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpb8a3wfs4.rs:44:1\n\
    \   |\n38 |     if file_name[dot_pos - 1] == 'a' || file_name[dot_pos - 1] ==\
    \ 'b' || file_name[dot_pos - 1] == 'c' ||\n   |     -- this `if` expression has\
    \ a condition, but no block\n...\n44 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpb8a3wfs4.rs:43:51\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n43 |         file_name[dot_pos\
    \ - 1] == 'p' || file_name[dot_\n   |                                        \
    \           ^ unclosed delimiter\n44 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb8a3wfs4.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb8a3wfs4.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb8a3wfs4.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scop"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp4h50q1v6.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp4h50q1v6.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmp4h50q1v6.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4h50q1v6.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4h50q1v6.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4h50q1v6.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4h50q1v6.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4h50q1v6.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4h50q1v6.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_start;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        if dot_pos_start == dot_pos_end\
    \ {\n            dot_pos_end = dot_pos_end + 1;\n        }\n        if dot_pos_start\
    \ < dot_pos_end {\n            if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n                dot_pos_start = dot_pos_start + 1;\n            }\n\
    \            if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end] <= 'z'\
    \ {\n                dot_pos_end = dot_pos_end - 1;\n            }\n        }\n\
    \    }\n    if file_name[dot_pos_start] == '.' {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start]\
    \ <= 'Z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] >= '0' && file_name[dot_pos_start]\
    \ <= '9' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ >= '0' && file_name[dot_pos_end] <= '9' {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start] == '.' {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp3jgz1t2_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp3jgz1t2_.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `{`, found `}`\n  --> /tmp/tmp3jgz1t2_.rs:72:1\n   |\n71 |     if file_name[dot_pos_start]\
    \ >= 'a' && file_name[dot_pos_start] \n   |     -- this `if` expression has a\
    \ condition, but no block\n72 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jgz1t2_.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3jgz1t2_.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3jgz1t2_.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerro"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name :\
    \ String = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_start =\
    \ dot_pos;\n    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start\
    \ = dot_pos_start;\n        let mut dot_pos_end = dot_pos_end;\n        let mut\
    \ dot_pos_start = dot_pos_start;\n        while dot_pos_start != dot_pos_end {\n\
    \            let mut dot_pos_start = dot_pos_start;\n            let mut dot_pos_end\
    \ = dot_pos_end;\n            let mut dot_pos_start = dot_pos_start;\n       \
    \     while dot_pos_start != dot_pos_end {\n                let mut dot_pos_start\
    \ = dot_pos_start;\n                let mut dot_pos_end = dot_pos_end;\n     \
    \           let mut dot_pos_start = dot_pos_start;\n                while dot_pos_start\
    \ != dot_pos_end {\n                    let mut dot_pos_start = dot_pos_start;\n\
    \                    let mut dot_pos_end = dot_pos_end;\n                    let\
    \ mut dot_pos_start = dot_pos_start;\n                    while dot_pos_start\
    \ != dot_pos_end {\n                        let mut dot_pos_start = dot_pos_start;\n\
    \                        let mut dot_pos_end = dot_pos_end;\n                \
    \        let mut dot_pos_start = dot_pos_start;\n                        while\
    \ dot_pos_start != dot_pos_end {\n                            let mut dot_pos_start\
    \ = dot_pos_start;\n                            let mut dot_pos_end = dot_pos_end;\n\
    \                            let mut dot_pos_start = dot_pos_start;\n        \
    \                    while dot_pos_start != dot_pos_end {\n                  \
    \              let mut dot_pos_start = dot_pos_start;\n                      \
    \          let mut dot_pos_end = dot_pos_end;\n                              \
    \  let mut dot_pos_start = dot_pos_start;\n                                while\
    \ dot_pos_start != dot_pos_end {\n                                    let mut\
    \ dot_pos_start = dot_pos_start;\n                                    let mut\
    \ dot_pos_end = dot_pos_end;\n                                    let mut dot_pos_start\
    \ = dot_pos_start;\n                                    while dot_pos_start !=\
    \ dot_pos_end {\n                                        let mut dot_pos_start\
    \ = dot_pos_start;\n                                        let mut dot_pos_end\
    \ = dot_pos_end;\n                                        let mut dot_pos_start\
    \ = dot_pos_start;\n                                        while dot_pos_start\
    \ != dot_pos_end {\n                                            let mut dot_pos_start\
    \ = dot_pos_start;\n                                            let mut dot_pos_end\
    \ = dot_pos_end;\n                                            let mut dot_pos_start\
    \ = dot_pos_\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpm11dmet1.rs:96:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n26 |     while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \ - unclosed delimiter\n...\n30 |         while dot_pos_start != dot_pos_end {\n\
    \   |                                            - unclosed delimiter\n...\n34\
    \ |             while dot_pos_start != dot_pos_end {\n   |                   \
    \                             - unclosed delimiter\n...\n38 |                \
    \ while dot_pos_start != dot_pos_end {\n   |                                 \
    \                   - unclosed delimiter\n...\n42 |                     while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                 - unclosed delimiter\n...\n46 |                         while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                     - unclosed delimiter\n...\n50 |                        \
    \     while dot_pos_start != dot_pos_end {\n   |                             \
    \                                   - unclosed delimiter\n...\n54 |          \
    \                       while dot_pos_start != dot_pos_end {\n   |           \
    \                                                         - unclosed delimiter\n\
    ...\n58 |                                     while dot_pos_start != dot_pos_end\
    \ {\n   |                                                                    \
    \    - unclosed delimiter\n...\n62 |                                         while\
    \ dot_pos_start != dot_pos_end {\n   |                                       \
    \                                     - this delimiter might not be properly closed...\n\
    ...\n66 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    96 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpm11dmet1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.char\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp6nlpvmho.rs:38:1\n   |\n\
    37 |     if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_asc...\n   |     -- this `if` expression\
    \ has a condition, but no block\n38 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6nlpvmho.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6nlpvmho.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6nlpvmho.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6nlpvmho.rs:46:25\n   |\n46"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        let mut dot_pos_end = dot_pos_start;\n\
    \        while dot_pos_end < file_name.len() {\n            if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n                dot_pos_end += 1;\n\
    \            } else if file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end]\
    \ <= 'Z' {\n                dot_pos_end += 1;\n            } else {\n        \
    \        break;\n            }\n        }\n        if dot_pos_start == dot_pos_end\
    \ {\n            break;\n        }\n        if file_name[dot_pos_start] >= '0'\
    \ && file_name[dot_pos_start] <= '9' {\n            break;\n        }\n      \
    \  dot_pos_start = dot_pos_end;\n    }\n    if dot_pos_start == dot_pos {\n  \
    \      return String::from(\"No\");\n    }\n    if dot_pos_start < dot_pos {\n\
    \        dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos {\n       \
    \ return String::from(\"Yes\");\n    }\n    if dot_pos_end < dot_pos {\n     \
    \   dot_pos_end += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_start < dot_pos_end {\n       \
    \ dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return\
    \ String::from(\"Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_end\
    \ += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start < dot_pos_end {\n        dot_pos_start +=\
    \ 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_end += 1;\n\
    \    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start < dot_pos_end {\n        dot_pos_start +=\
    \ 1;\n    }\n    if dot_pos_end == dot_pos_end {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_end < dot_pos_end {\n        dot_pos_\n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwmc_ep0g.rs:119:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n87  |  \
    \   if dot_pos_end < dot_pos_end {\n    |                                  - this\
    \ delimiter might not be properly closed...\n88  |         dot_pos_\n89  | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n119 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwmc_ep0g.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `dot_pos_`\
    \ in this scope\n  --> /tmp/tmpwmc_ep0g.rs:88:9\n   |\n88 |         dot_pos_\n\
    \   |         ^^^^^^^^ help: a local variable with a similar name exists: `dot_pos`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:93:17\n\
    \   |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwmc_ep0g.rs:93:25\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:94:17\n   |\n94 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:94:25\n\
    \   |\n94 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwmc_ep0g.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwmc_ep0g.rs:95:25\n   |\n95 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cann"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_digit()) {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '.') {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase() || c != 'a' ||\
    \ c != 'z') {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase() || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_digit() || c != '0' || c\
    \ != '9') {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '.' || c != '0' || c != '9') {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()\
    \ || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase() || c !=\
    \ 'A' || c != 'Z' || c != 'a' || c != 'z') {\n        return String::from(\"No\"\
    );\n    }\n    if file_name.chars().any(|c| !c.is_digit() || c != '0' || c !=\
    \ '9' || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '.'\
    \ || c != '0' || c != '9' || c != 'a' || c != 'z' || c != 'A' || c != 'Z') {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `)`\n  --> /tmp/tmpca9s97du.rs:62:1\n\
    \   |\n62 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter:\
    \ `}`\n  --> /tmp/tmpca9s97du.rs:61:29\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n61 |     if file_name.chars().any(|c|\
    \ \n   |                             ^ unclosed delimiter\n62 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpca9s97du.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpca9s97du.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpca9s97du.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpca9s97du.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpca9s97du.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpca9s97du.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpca9s97du.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpca9s97du.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpca9s97du.rs:70:17\n   |\n70 |  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_index =\
    \ file_name.find('.')\n    if dot_index == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut first_letter = file_name.chars().next().unwrap();\n\
    \    if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() > dot_index {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() < dot_index {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.chars().next()\
    \ != dot_index {\n        return String::from(\"No\");\n    }\n    if file_name.char\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprc6trkw0.rs:19:44\n\
    \   |\n19 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n20 |     if dot_index == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmprc6trkw0.rs:88:1\n\
    \   |\n87 |     if file_name.char\n   |     -- this `if` expression has a condition,\
    \ but no block\n88 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:92:17\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:92:25\n \
    \  |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprc6trkw0.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprc6trkw0.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprc6trkw0.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:95:17\n  \
    \ |\n95 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprc6trkw0.rs:95:25\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprc6trkw0.rs:96:17\n   |\n96 |\
    \     assert_eq!({left}, {right})"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    while dot_pos < file_name.len() {\n        let mut\
    \ dot_pos = file_name.find('.', dot_pos);\n        if dot_pos == String::npos\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = dot_pos + 1;\n        if dot_pos == file_name.len() {\n            return\
    \ String::from(\"No\");\n        }\n        let mut dot_pos = file_name.find('.',\
    \ dot_pos);\n        if dot_pos == String::npos {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos\
    \ == file_name.len() {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_pos = file_name.find('.', dot_pos);\n        if dot_pos ==\
    \ String::npos {\n            return String::from(\"No\");\n        }\n      \
    \  let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len() {\n \
    \           return String::from(\"No\");\n        }\n        let mut dot_pos =\
    \ file_name.find('.', dot_pos);\n        if dot_pos == String::npos {\n      \
    \      return String::from(\"No\");\n        }\n        let mut dot_pos = dot_pos\
    \ + 1;\n        if dot_pos == file_name.len() {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = file_name.find('.', dot_pos);\n \
    \       if dot_pos == String::npos {\n            return String::from(\"No\");\n\
    \        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len()\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = file_name.find('.', dot_pos);\n        if dot_pos == String::npos {\n    \
    \        return String::from(\"No\");\n        }\n        let mut dot_pos = dot_pos\
    \ + 1;\n        if dot_pos == file_name.len() {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos = file_name.find('.', dot_pos);\n \
    \       if dot_pos == String::npos {\n            return String::from(\"No\");\n\
    \        }\n        let mut dot_pos = dot_pos + 1;\n        if dot_pos == file_name.len()\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos\
    \ = file_name.find('.', dot_pos);\n        if dot_pos == String::\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzru8it5a.rs:111:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n22  |  \
    \   while dot_pos < file_name.len() {\n    |                                 \
    \    - this delimiter might not be properly closed...\n...\n81  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n111 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpzru8it5a.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n\
    \   |     -- unexpected token\n\nerror: expected identifier, found `}`\n  -->\
    \ /tmp/tmpzru8it5a.rs:81:1\n   |\n81 | }\n   | ^ expected identifier\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzru8it5a.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzru8it5a.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzru8it5a.rs:86:17\n   |\n86 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzru8it5a.rs:86:25\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzru8it5a.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzru8it5a.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzru8it5a.rs:88:17\n   |\n88 |     assert_eq!({left}, {ri"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_end = dot_pos;\n    \n    while dot_pos_end < file_name.len() {\n\
    \        let mut dot_pos_start = dot_pos_end;\n        \n        while dot_pos_start\
    \ < file_name.len() {\n            let mut char_pos = dot_pos_start;\n       \
    \     \n            if char_pos > dot_pos_end {\n                break;\n    \
    \        }\n            \n            let mut char_pos_end = char_pos;\n     \
    \       \n            while char_pos_end < file_name.len() {\n               \
    \ let mut char_pos_start = char_pos_end;\n                \n                if\
    \ char_pos_start > dot_pos_end {\n                    break;\n               \
    \ }\n                \n                let mut char_pos_end = char_pos_start;\n\
    \                \n                while char_pos_end < file_name.len() {\n  \
    \                  let mut char_pos_start = char_pos_end;\n                  \
    \  \n                    if char_pos_start > dot_pos_end {\n                 \
    \       break;\n                    }\n                    \n                \
    \    let mut char_pos_end = char_pos_start;\n                    \n          \
    \          if char_pos_end > dot_pos_end {\n                        break;\n \
    \                   }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n   \
    \                 \n                    let mut char_pos_end = char_pos_start;\n\
    \                    \n                    if char_pos_end > dot_pos_end {\n \
    \                       break;\n                    }\n                    \n\
    \                    let mut char_pos_start = char_pos_end;\n                \
    \    \n                    if char_pos_start > dot_pos_end {\n               \
    \         break;\n                    }\n                    \n              \
    \      let mut char_pos_end = char_pos_start;\n                    \n        \
    \            if char_pos_end > dot_pos_end {\n                        break;\n\
    \                    }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n   \
    \                 \n                    let mut char_pos_end = char_pos_start;\n\
    \                    \n                    if char_pos_end > dot_pos_end {\n \
    \                       break;\n                    }\n                    \n\
    \                    let mut char_pos_start = char_pos_end;\n                \
    \    \n                    if char_pos_start > dot_pos_end {\n               \
    \         break;\n                    }\n                    \n              \
    \      let mut char_pos_end = char_pos_start;\n                    \n        \
    \            if char_pos_end > dot_pos_end {\n                        break;\n\
    \                    }\n                    \n                    let mut char_pos_start\
    \ = char_pos_end;\n                    \n                    if char_pos_start\
    \ > dot_pos_end {\n                        break;\n                    }\n}\n\n\
    fn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpre3eyy57.rs:141:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n24  |  \
    \   while dot_pos_end < file_name.len() {\n    |                             \
    \            - unclosed delimiter\n...\n27  |         while dot_pos_start < file_name.len()\
    \ {\n    |                                               - unclosed delimiter\n\
    ...\n36  |             while char_pos_end < file_name.len() {\n    |         \
    \                                         - unclosed delimiter\n...\n45  |   \
    \              while char_pos_end < file_name.len() {\n    |                 \
    \                                     - this delimiter might not be properly closed...\n\
    ...\n111 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n141 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpre3eyy57.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n   --> /tmp/tmpre3eyy57.rs:115:17\n    |\n115 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpre3eyy57.rs:115:25\n\
    \    |\n115 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpre3eyy57.rs:116:17\n    |\n116 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpre3eyy57.rs:116:25\n\
    \    |\n116 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpre3eyy57.rs:117:17\n    |\n117 |     assert_eq!({left},\
    \ {right});\n    |                 ^^"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    let mut dot_name_chars = dot_name.chars();\n            \
    \        let mut dot_name_chars_iter = dot_name_chars.iter();\n              \
    \      let mut dot_name_chars_next = dot_name_chars_iter.next();\n           \
    \         let mut dot_name_chars_prev = dot_name_chars_iter.prev();\n        \
    \            let mut dot_name_chars_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next_next = dot_name_chars_iter.next_back();\n\
    \                    let mut dot_name_chars_prev_prev_prev_prev_prev_next = dot_name_chars_iter.prev_back();\n\
    \                    let mut dot_name_chars_next_next_next_next_next_next_next\
    \ = dot_name_chars_iter.next_back();\n                    let mut dot_name_chars_prev_prev_prev_prev_prev_prev_next\
    \ = dot_name_chars_iter.prev_back();\n                    let mut dot_name_chars_next_next_next_next_next_next_next_next\
    \ = dot_name_chars_iter.next_back();\n                    let mut dot_name_chars_prev_prev_prev_prev_prev_prev_next\
    \ = dot_name_chars_iter.prev_back();\n                    let mut dot_name_chars_next_\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpv5xfx252.rs:81:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - unclosed delimiter\n...\n22 |         } else {\n \
    \  |                - unclosed delimiter\n...\n26 |             } else {\n   |\
    \                    - unclosed delimiter\n...\n30 |                 } else {\n\
    \   |                        - this delimiter might not be properly closed...\n\
    ...\n51 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    81 | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpv5xfx252.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpv5xfx252.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmpv5xfx252.rs:50:49\n   |\n50 |                \
    \     let mut dot_name_chars_next_\n   |                                     \
    \            ^ help: add `;` here\n51 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv5xfx252.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv5xfx252.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv5xfx252.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv5xf"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpj2w2n9z4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpj2w2n9z4.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmpj2w2n9z4.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2w2n9z4.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj2w2n9z4.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj2w2n9z4.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj2w2n9z4.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut counter = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n    let mut q = 0;\n    let mut r = 0;\n\
    \    let mut s = 0;\n    let mut t = 0;\n    let mut u = 0;\n    let mut v = 0;\n\
    \    let mut w = 0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n\
    \    let mut a = 0;\n    let mut b = 0;\n    let mut c = 0;\n    let mut d = 0;\n\
    \    let mut e = 0;\n    let mut f = 0;\n    let mut g = 0;\n    let mut h = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = 0;\n    let mut l = 0;\n\
    \    let mut m = 0;\n    let mut n = 0;\n    let mut o = 0;\n    let mut p = 0;\n\
    \    let mut q = 0;\n    let mut r = 0;\n    let mut s = 0;\n    let mut t = 0;\n\
    \    let mut u = 0;\n    let mut v = 0;\n    let mut w = 0;\n    let mut x = 0;\n\
    \    let mut y = 0;\n    let mut z = 0;\n    let mut a = 0;\n    let mut b = 0;\n\
    \    let mut c = 0;\n    let mut d = 0;\n    let mut e = 0;\n    let mut f = 0;\n\
    \    let mut g = 0;\n    let mut h = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = 0;\n    let mut l = 0;\n    let mut m = 0;\n    let mut n = 0;\n\
    \    let mut o = 0;\n    let mut p = 0;\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:108:17\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:108:25\n    |\n108 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:109:17\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:109:25\n    |\n109 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:110:25\n    |\n110 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:111:17\n\
    \    |\n111 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:111:25\n    |\n111 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:112:17\n\
    \    |\n112 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpg4fej59_.rs:112:25\n    |\n112 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpg4fej59_.rs:113:17\n\
    \    |\n113 |     assert_eq!({left}, {right});\n    |                 ^^^^"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_start = dot_pos + 1\n    while dot_pos_start > dot_pos_end {\n     \
    \   if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z' {\n\
    \            dot_pos_start -= 1;\n        } else if file_name[dot_pos_start] >=\
    \ 'A' && file_name[dot_pos_start] <= 'Z' {\n            dot_pos_start -= 1;\n\
    \        } else {\n            return String::from(\"No\");\n        }\n    }\n\
    \    if dot_pos_start == dot_pos_end {\n        if file_name[dot_pos_start] >=\
    \ 'a' && file_name[dot_pos_start] <= 'z' {\n            dot_pos_start += 1;\n\
    \        } else if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start]\
    \ <= 'Z' {\n            dot_pos_start += 1;\n        } else {\n            return\
    \ String::from(\"No\");\n        }\n    }\n    if file_name[dot_pos_start] >=\
    \ '0' && file_name[dot_pos_start] <= '9' {\n        return String::from(\"Yes\"\
    );\n    } else {\n        return String::from(\"No\");\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp8zez0_iv.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp8zez0_iv.rs:19:46\n   |\n19 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n20 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `while`\n  --> /tmp/tmp8zez0_iv.rs:21:40\n   |\n21 |    \
    \ let mut dot_pos_start = dot_pos + 1\n   |                                  \
    \      ^ help: add `;` here\n22 |     while dot_pos_start > dot_pos_end {\n  \
    \ |     ----- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp8zez0_iv.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8zez0_iv.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8zez0_iv.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8zez0_iv.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8zez0_iv.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8zez0_iv.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8zez0_iv.rs:52:17\n   |\n"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_start = dot_pos;\n    let mut dot_pos_end = dot_pos;\n    \n   \
    \ loop {\n        dot_pos_end = dot_pos_start.saturating_sub(1);\n        if dot_pos_end\
    \ < String::npos && dot_pos_end != dot_pos_start {\n            return String::from(\"\
    No\");\n        }\n        \n        let mut dot_pos_start = dot_pos_end;\n  \
    \      \n        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end\
    \ {\n            return String::from(\"No\");\n        }\n        \n        let\
    \ mut dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_end < String::npos\
    \ && dot_pos_end != dot_pos_start {\n            return String::from(\"No\");\n\
    \        }\n        \n        let mut dot_pos_start = dot_pos_end;\n        \n\
    \        if dot_pos_start < String::npos && dot_pos_start != dot_pos_end {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos_end = dot_pos_end;\n        \n        if dot_pos_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpl69bh2o_.rs:118:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n25  |  \
    \   loop {\n    |          - this delimiter might not be properly closed...\n\
    ...\n88  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n118 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpl69bh2o_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpl69bh2o_.rs:88:1\n\
    \   |\n87 |         if dot_pos_\n   |         -- this `if` expression has a condition,\
    \ but no block\n88 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpl69bh2o_.rs:92:17\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:92:25\n \
    \  |\n92 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl69bh2o_.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:93:25\n   |\n93 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl69bh2o_.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl69bh2o_.rs:94:25\n   |\n94 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl69bh2o_.rs:95:17\n  \
    \ |\n95 |  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    \n    // Remove all non-alphanumeric characters\
    \ from the file's name\n    file_name.chars().filter(|c| !c.is_alphanumeric()).collect::<String>().to_string()\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyynpesx9.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyynpesx9.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyynpesx9.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyynpesx9.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of('.');\n\
    \    let mut dot_pos_end = file_name_chars.len();\n    \n    if dot_pos == String::new().len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos != 0 {\n\
    \        dot_pos_end = dot_pos;\n    }\n    \n    let mut first_char_pos = 0;\n\
    \    \n    for c in file_name_chars {\n        if !c.is_ascii_letter() {\n   \
    \         return String::from(\"No\");\n        }\n        \n        if first_char_pos\
    \ == dot_pos {\n            return String::from(\"No\");\n        }\n        \n\
    \        first_char_pos = c;\n    }\n    \n    if dot_pos_end != file_name_chars.len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 1] != '.' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 2] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 3] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 4] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 5] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 6] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 7] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 8] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 9] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 10] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 11] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 12] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name_chars[dot_pos_end\
    \ - 13] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpgopudh0v.rs:99:1\n   |\n\
    98 |     if file_name\n   |     -- this `if` expression has a condition, but no\
    \ block\n99 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n   --> /tmp/tmpgopudh0v.rs:103:17\n    |\n103 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:103:25\n\
    \    |\n103 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:104:17\n    |\n104 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:104:25\n\
    \    |\n104 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:105:17\n    |\n105 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:105:25\n\
    \    |\n105 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:106:17\n    |\n106 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:106:25\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpgopudh0v.rs:107:17\n    |\n107 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpgopudh0v.rs:107:25\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[dot_pos + 1..].chars().next()\n    if first_char\
    \ == String::from('.') {\n        return String::from(\"No\");\n    }\n    if\
    \ first_char.starts_with(String::from('a')) || first_char.starts_with(String::from('A'))\
    \ {\n        return String::from(\"No\");\n    }\n    if first_char.starts_with(String::from('0'))\
    \ || first_char.starts_with(String::from('9')) {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos == 0 {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos - 1..dot_pos].count() != 1 {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 1..dot_pos].chars().next().unwrap().to_ascii_lowercase()\
    \ != file_name[dot_pos - 1..dot_pos] {\n        return String::from(\"No\");\n\
    \    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp02f2hl6n.rs:19:43\n\
    \   |\n19 |     let mut dot_pos = file_name.rfind('.')\n   |                 \
    \                          ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp02f2hl6n.rs:23:65\n   |\n23 |     let mut first_char = file_name[dot_pos\
    \ + 1..].chars().next()\n   |                                                \
    \                 ^ help: add `;` here\n24 |     if first_char == String::from('.')\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp02f2hl6n.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02f2hl6n.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp02f2hl6n.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp02f2hl6n.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp02f2hl6n.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02f2hl6n.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\ner"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    while dot_pos_start < dot_pos_end {\n\
    \        if dot_pos_start == dot_pos_end {\n            break;\n        }\n  \
    \      let mut letter = file_name[dot_pos_start];\n        if !((letter >= 'a'\
    \ && letter <= 'z') || (letter >= 'A' && letter <= 'Z')) {\n            dot_pos_start_letter\
    \ = false;\n            break;\n        }\n        dot_pos_start += 1;\n    }\n\
    \    if dot_pos_start_letter {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos_start == dot_pos_end {\n        return String::from(\"No\");\n\
    \    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == \n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpm4wo7egr.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpm4wo7egr.rs:90:1\n   |\n90 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm4wo7egr.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:95:25\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm4wo7egr.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm4wo7egr.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm4wo7egr.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm4wo7egr.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjwrru_aj.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = file_name.chars().next().unwrap();\n    if first_letter <\
    \ 'a' || first_letter > 'z' {\n        return String::from(\"No\");\n    }\n \
    \   \n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_2\
    \ = file_name.find('.')\n    if dot_pos_2 == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos == dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos_3 = file_name.find('.')\n    if dot_pos_3\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    if\
    \ dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n    }\n    \n\
    \    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n    }\n\
    \    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\");\n\
    \    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"No\"\
    );\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_3 > dot_pos_2 {\n        return String::from(\"\
    No\");\n    }\n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjajciu2n.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjajciu2n.rs:27:42\n   |\n27 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n28 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjajciu2n.rs:32:44\n   |\n32 |     let\
    \ mut dot_pos_2 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n33 |     if dot_pos_2 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpjajciu2n.rs:45:44\n   |\n45 |     let mut dot_pos_3 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n46 |  \
    \   if dot_pos_3 == String::npos { \n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:110:17\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpjajciu2n.rs:110:25\n    |\n110 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:111:17\n\
    \    |\n111 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \   --> /tmp/tmpjajciu2n.rs:111:25\n    |\n111 |     assert_eq!({left}, {right});\n\
    \    |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n   --> /tmp/tmpjajciu2n.rs:112:17\n\
    \    |\n112 |     assert_eq!({left}, {right});\n    |                 ^^^^ not\
    \ found in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n\
    \  "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_ascii_upper()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_lower() {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_digit()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_alnum() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_punct()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_space() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_xdigit()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_alpha() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_digit()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_alnum() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_punct()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_space() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().first().unwrap().is_xdigit()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_alpha() {\n        return String::from(\"\
    No\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpmpw6z42i.rs:68:29\n\
    \   |\n68 |           return String::from(\"No\n   |  _____________________________^\n\
    69 | | }\n70 | |\n71 | | fn main() {\n...  |\n98 | |     assert_eq!({left}, {right});\n\
    99 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = dot_pos_start;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6k0jjuwd.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp6k0jjuwd.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmp6k0jjuwd.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6k0jjuwd.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6k0jjuwd.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6k0jjuwd.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6k0jjuwd.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6k0jjuwd.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6k0jjuwd.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6k0jjuwd.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6k0jjuwd.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n "
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start > 0 && file_name[dot_pos_start - 1] >= 'a' && file_name[dot_pos_start\
    \ - 1] <= 'z' {\n        dot_pos_start -= 1;\n    }\n    if dot_pos_start == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos;\n\
    \    while dot_pos_end < file_name.len() && file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' {\n        dot_pos_end += 1;\n    }\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    if dot_pos_end - dot_pos_start\
    \ != 1 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_start\
    \ = dot_pos;\n    while dot_pos_start > 0 && file_name[dot_pos_start - 1] >= 'A'\
    \ && file_name[dot_pos_start - 1] <= 'Z' {\n        dot_pos_start -= 1;\n    }\n\
    \    if dot_pos_start == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos;\n    while dot_pos_end < file_name.len()\
    \ && file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end] <= 'Z' {\n      \
    \  dot_pos_end += 1;\n    }\n    if dot_pos_end == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_end - dot_pos_start != 1 {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start > 0 && file_name[dot_pos_start - 1] >= '0' && file_name[dot_pos_start\
    \ - 1] <= '9' {\n        dot_pos_start -= 1;\n    }\n    if dot_pos_start == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos;\n\
    \    while dot_pos_end < file_name.len() && file_name[dot_pos_end] >= '0' && file_name[dot_pos_end]\
    \ <= '9' {\n        dot_pos_end += 1;\n\n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzqsmcjmx.rs:100:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n67  |  \
    \   while dot_pos_end < file_name.len() && file_name[dot_pos_end] >= '0' && file_name[dot_pos_end]\
    \ <= '9' {\n    |                                                            \
    \                                               - this delimiter might not be\
    \ properly closed...\n...\n70  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n100 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpzqsmcjmx.rs:17:42\n   |\n17 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n18 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpzqsmcjmx.rs:21:46\n   |\n21 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n22 |     if dot_pos_end == String::npos {\
    \ \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpzqsmcjmx.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpzqsmcjmx.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzqsmcjmx.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzqsmcjmx.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzqsmcjmx.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    if file_name.len()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    0\") || file_name.starts_with(\"1\") || file_name.starts_with(\"2\") || file_name.starts_with(\"\
    3\") || file_name.starts_with(\"4\") || file_name.starts_with(\"5\") || file_name.starts_with(\"\
    6\") || file_name.starts_with(\"7\") || file_name.starts_with(\"8\") || file_name.starts_with(\"\
    9\") {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_punctuation()) {\n        return String::from(\"No\");\n    }\n\
    \    if file_name.chars().any(|c| !c.is_ascii_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol()) {\n    \
    \    return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_whitespace())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_formfeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_backspace()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_formfeed()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp40s35lw6.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `)`\n \
    \ --> /tmp/tmp40s35lw6.rs:67:1\n   |\n67 | }\n   | ^ expected expression\n\nerror:\
    \ mismatched closing delimiter: `}`\n  --> /tmp/tmp40s35lw6.rs:66:29\n   |\n15\
    \ | fn file_name_check(file_name: String) -> String {\n   |                  \
    \                               - closing delimiter possibly meant for this\n\
    ...\n66 |     if file_name.chars().any(|c| !\n   |                           \
    \  ^ unclosed delimiter\n67 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp40s35lw6.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp40s35lw6.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp40s35lw6.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp40s35lw6.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp40s35lw6.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp40s35lw6.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp40s35lw6.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpo4gwptr8.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos {\n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpo4gwptr8.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpo4gwptr8.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, fo"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpe7tcv3cb.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpe7tcv3cb.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7tcv3cb.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe7tcv3cb.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe7tcv3cb.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name :\
    \ String = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    let mut dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_3\
    \ = file_name.find('.')\n    if dot_pos_3 == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_5 = file_name.find('.')\n    if dot_pos_5 == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    \n    let mut dot_pos_6 = file_name.find('.')\n\
    \    if dot_pos_6 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    \n    let mut dot_pos_7 = file_name.find('.')\n    if dot_pos_7 ==\
    \ String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    \n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    \n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 ==\
    \ String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_11 = file_name.find('.')\n    if dot_pos_11 == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_12 = file_name.find('.')\n\
    \    if dot_pos_12 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    \n    let mut dot_pos_13 = file_name.find('.')\n    if dot_pos_13\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos { \n        return String::\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp_p1c3wyq.rs:120:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n88  |  \
    \   if dot_pos_15 == String::npos { \n    |                                  \
    \ - this delimiter might not be properly closed...\n89  |         return String::\n\
    90  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    120 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp_p1c3wyq.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp_p1c3wyq.rs:22:44\n   |\n22 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n23 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp_p1c3wyq.rs:27:44\n   |\n27 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n28 |     if dot_pos_3 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmp_p1c3wyq.rs:32:44\n   |\n32 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n33 |  \
    \   if dot_pos_4 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp_p1c3wyq.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_5 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_5 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmp_p1c3wyq.rs:42:44\n   |\n42 |     let mut dot_pos_6 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n43 |  \
    \   if dot_pos_6 == String::npos { \n   |     -"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter2 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter2 = dot_pos_end;\n    let mut dot_pos_start_letter3 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter3 = dot_pos_end;\n    let mut dot_pos_start_letter4\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter4 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter5 = dot_pos_start;\n    let mut dot_pos_end_letter5 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter6 = dot_pos_start;\n    let mut dot_pos_end_letter6\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter7 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter7 = dot_pos_end;\n    let mut dot_pos_start_letter8 =\
    \ dot_pos_start;\n    let mut dot_pos_end_letter8 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter9 = dot_pos_start;\n    let mut dot_pos_end_letter9 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter10 = dot_pos_start;\n    let mut dot_pos_end_letter10\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter11 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter11 = dot_pos_end;\n    let mut dot_pos_start_letter12\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter12 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter13 = dot_pos_start;\n    let mut dot_pos_end_letter13 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter14 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter14 = dot_pos_end;\n    let mut dot_pos_start_letter15 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter15 = dot_pos_end;\n    let mut dot_pos_start_letter16\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter16 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter17 = dot_pos_start;\n    let mut dot_pos_end_letter17 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter18 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter18 = dot_pos_end;\n    let mut dot_pos_start_letter19 = \n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpo67iw574.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpo67iw574.rs:60:1\n   |\n60 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo67iw574.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo67iw574.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo67iw574.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo67iw574.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo67iw574.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo67iw574.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo67iw574.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo67iw574.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo67iw574.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        if file_name[dot_pos_start] >= 'a'\
    \ && file_name[dot_pos_start] <= 'z' {\n            dot_pos_start++;\n       \
    \ } else if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start] <= 'Z'\
    \ {\n            dot_pos_start++;\n        } else {\n            return String::from(\"\
    No\");\n        }\n    }\n    while dot_pos_end < file_name.len() {\n        if\
    \ file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end] <= 'z' {\n         \
    \   dot_pos_end++;\n        } else if file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end]\
    \ <= 'Z' {\n            dot_pos_end++;\n        } else {\n            return String::from(\"\
    No\");\n        }\n    }\n    if dot_pos_start == dot_pos_end {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_start == dot_pos + 1 {\n      \
    \  return String::from(\"No\");\n    }\n    if dot_pos_end == dot_pos + 1 {\n\
    \        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end\
    \ - 1] != '9' {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos + 1 {\n        return String::from(\"No\");\n    }\n    if dot_pos_end\
    \ == dot_pos + 1 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start]\
    \ != 'a' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end\
    \ - 1] != 'z' {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos + 1 {\n        return String::from(\"No\");\n    }\n    if dot_pos_end\
    \ == dot_pos + 1 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start]\
    \ != 'A' {\n        return String::from(\"No\");\n    }\n    if file_name\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpcigah0d7.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected expression, found `+`\n\
    \  --> /tmp/tmpcigah0d7.rs:25:27\n   |\n25 |             dot_pos_start++;\n  \
    \ |                           ^ expected expression\n\nerror: expected expression,\
    \ found `+`\n  --> /tmp/tmpcigah0d7.rs:27:27\n   |\n27 |             dot_pos_start++;\n\
    \   |                           ^ expected expression\n\nerror: expected expression,\
    \ found `+`\n  --> /tmp/tmpcigah0d7.rs:34:25\n   |\n34 |             dot_pos_end++;\n\
    \   |                         ^ expected expression\n\nerror: expected expression,\
    \ found `+`\n  --> /tmp/tmpcigah0d7.rs:36:25\n   |\n36 |             dot_pos_end++;\n\
    \   |                         ^ expected expression\n\nerror: expected `{`, found\
    \ `}`\n  --> /tmp/tmpcigah0d7.rs:84:1\n   |\n83 |     if file_name\n   |     --\
    \ this `if` expression has a condition, but no block\n84 | }\n   | ^ expected\
    \ `{`\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcigah0d7.rs:88:17\n\
    \   |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcigah0d7.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcigah0d7.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcigah0d7.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcigah0d7.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this s"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfox4bj6g.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos {\n    |                                   -\
    \ this delimiter might not be properly closed...\n79  |         return \n80  |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n110\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_4 == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:33:44\n   |\n33 |     let mut dot_pos_5 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n34 |  \
    \   if dot_pos_5 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_6 == String::npos {\n   |\
    \     -- unexpected to"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.find('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else if let Some(dot_pos) = file_name.find('..', dot_pos\
    \ + 1) {\n                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_letter = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n                    if dot_letter < 'a' ||\
    \ dot_letter > 'z' {\n                        String::from(\"No\")\n         \
    \           } else {\n                        String::from(\"Yes\")\n        \
    \            }\n                }\n            } else {\n                String::from(\"\
    No\")\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpdqyqf04k.rs:26:58\n\
    \   |\n26 |             } else if let Some(dot_pos) = file_name.find('..', dot_pos\
    \ + 1) {\n   |                                                          ^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    26 |             } else if let Some(dot_pos) = file_name.find(\"..\", dot_pos\
    \ + 1) {\n   |                                                          ~~~~\n\
    \nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpdqyqf04k.rs:19:46\n \
    \  |\n19 |         let mut dot_pos = file_name.find('.')\n   |               \
    \                               ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdqyqf04k.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdqyqf04k.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdqyqf04k.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdqyqf04k.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdqyqf04k.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdqyqf04k.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdqyqf04k.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot fi"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    while dot_pos_start < dot_pos_end\
    \ {\n        if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <=\
    \ 'z' {\n            dot_pos_start_letter = dot_pos_start;\n            break;\n\
    \        }\n        dot_pos_start += 1;\n    }\n    if dot_pos_start_letter !=\
    \ dot_pos_start {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    while dot_pos_end_letter > dot_pos_start {\n        if file_name[dot_pos_end_letter]\
    \ >= 'a' && file_name[dot_pos_end_letter] <= 'z' {\n            break;\n     \
    \   }\n        dot_pos_end_letter -= 1;\n    }\n    if dot_pos_end_letter != dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos_end_letter <\
    \ dot_pos_start {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 2] != '9' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 3] != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 4] != 'txt' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 5] != 'exe' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end_letter\
    \ - 6] != 'dll' {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp6nimtfp6.rs:59:45\n\
    \   |\n59 |     if file_name[dot_pos_end_letter - 4] != 'txt' {\n   |        \
    \                                     ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n59 |     if file_name[dot_pos_end_letter\
    \ - 4] != \"txt\" {\n   |                                             ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmp6nimtfp6.rs:62:45\n\
    \   |\n62 |     if file_name[dot_pos_end_letter - 5] != 'exe' {\n   |        \
    \                                     ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n62 |     if file_name[dot_pos_end_letter\
    \ - 5] != \"exe\" {\n   |                                             ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmp6nimtfp6.rs:65:45\n\
    \   |\n65 |     if file_name[dot_pos_end_letter - 6] != 'dll' {\n   |        \
    \                                     ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n65 |     if file_name[dot_pos_end_letter\
    \ - 6] != \"dll\" {\n   |                                             ~~~~~\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmp6nimtfp6.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n\
    \   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp6nimtfp6.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6nimtfp6.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6nimtfp6.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end_end = file_name.find('.')\n\
    \    if dot_pos_end_end == String::npos {\n        return String::from(\"No\"\
    );\n    }\n    let mut dot_pos_end_end = dot_pos_end_end + 1;\n    let mut dot_pos_end_end_end\
    \ = file_name.find('.')\n    if dot_pos_end_end_end == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_end_end_end = dot_pos_end_end_end\
    \ + 1;\n    let mut dot_pos_end_end_end_end = file_name.find('.')\n    if dot_pos_end_end_end_end\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end_end_end_end = dot_pos_end_end_end_end + 1;\n    let mut dot_pos_end_end_end_end_end\
    \ = file_name.find('.')\n    if dot_pos_end_end_end_end_end == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos_end_end_end_end_end\
    \ = dot_pos_end_end_end_end_end + 1;\n    let mut dot_pos_end_end_end_end_end_end\
    \ = file_name.find('.')\n    if dot_pos_end_end_end_end_end_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_end_end_end_end_end_end\
    \ = dot_pos_end_end_end_end_end_end_end + 1;\n    let mut dot_pos_end_end_end_end_end_end_end_end\
    \ = file_name.find('.')\n    if dot_pos_end_end_end_end_end_end_end_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_end_end_end_end_end_end_end\
    \ = dot_pos_end_end_end_end_end_end_end_end_end + 1;\n    let mut dot_pos_end_end_end_end_end_end_end_end_end_end\
    \ = file_name.find('.')\n    if dot_pos_end_end_end_end_end_end_end_end_end ==\
    \ String::npos {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_end_end_end_end_end_end_end_end_end\
    \ = \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpvhsz157d.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpvhsz157d.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpvhsz157d.rs:27:50\n   |\n27\
    \ |     let mut dot_pos_end_end = file_name.find('.')\n   |                  \
    \                                ^ help: add `;` here\n28 |     if dot_pos_end_end\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmpvhsz157d.rs:32:54\n   |\n32 |     let mut dot_pos_end_end_end\
    \ = file_name.find('.')\n   |                                                \
    \      ^ help: add `;` here\n33 |     if dot_pos_end_end_end == String::npos {\n\
    \   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpvhsz157d.rs:37:58\n   |\n37 |     let mut dot_pos_end_end_end_end =\
    \ file_name.find('.')\n   |                                                  \
    \        ^ help: add `;` here\n38 |     if dot_pos_end_end_end_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpvhsz157d.rs:42:62\n   |\n42 |     let mut dot_pos_end_end_end_end_end\
    \ = file_name.find('.')\n   |                                                \
    \              ^ help: add `;` here\n43 |     if dot_pos_end_end_end_end_end ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmpvhsz157d.rs:47:66\n   |\n47 |     let mut dot_pos_end_end_end_end_end_end\
    \ = file_name.find('.')\n   |                                                \
    \                  ^ help: add `;` here\n48 |     if dot_pos_end_end_end_end_end_end\
    \ == String::npos {\n   |     -- u"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    while dot_pos_start < dot_pos_end {\n        let mut char_pos = file_name.find('\
    \ ', dot_pos_start);\n        if char_pos == String::npos {\n            return\
    \ String::from(\"No\");\n        }\n        let mut char_pos_end = file_name.find('\
    \ ', dot_pos_end);\n        if char_pos_end == String::npos {\n            return\
    \ String::from(\"No\");\n        }\n        if char_pos > char_pos_end {\n   \
    \         return String::from(\"No\");\n        }\n        let mut char_pos_start\
    \ = char_pos + 1;\n        if char_pos_start > char_pos_end {\n            return\
    \ String::from(\"No\");\n        }\n        let mut char_pos_start = char_pos_start\
    \ + 1;\n        if char_pos_start > char_pos_end {\n            return String::from(\"\
    No\");\n        }\n        let mut char_pos_start = char_pos_start + 1;\n    \
    \    if char_pos_start > char_pos_end {\n            return String::from(\"No\"\
    );\n        }\n        let mut char_pos_start = char_pos_start + 1;\n        if\
    \ char_pos_start > char_pos_end {\n            return String::from(\"No\");\n\
    \        }\n        let mut char_pos_start = char_pos_start + 1;\n        if char_pos_start\
    \ > char_pos_end {\n            return String::from(\"No\");\n        }\n    \
    \    let mut char_pos_start = char_pos_start + 1;\n        if char_pos_start >\
    \ char_pos_end {\n            return String::from(\"No\");\n        }\n      \
    \  let mut char_pos_start = char_pos_start + 1;\n        if char_pos_start > char_pos_end\
    \ {\n            return String::from(\"No\");\n        }\n        let mut char_pos_start\
    \ = char_pos_start + 1;\n        if char_pos_start > char_pos_end {\n        \
    \    return String::from(\"No\");\n        }\n        let mut char_pos_start =\
    \ char_pos_start + 1;\n        if char_pos_start > char_pos_end {\n          \
    \  return String::from(\"No\");\n        }\n        let mut char_pos_start = char_pos_start\
    \ + 1;\n        if char_pos_start > char_pos_end {\n            return String::from(\"\
    No\");\n        }\n        let mut char_pos_start = char_pos_start + 1;\n    \
    \    if char_pos_start > char_pos_end {\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpln74xlyo.rs:111:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n26  |  \
    \   while dot_pos_start < dot_pos_end {\n    |                               \
    \        - unclosed delimiter\n...\n79  |         if char_pos_start > char_pos_end\
    \ {\n    |                                          - this delimiter might not\
    \ be properly closed...\n80  | \n81  | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n111 | }\n    |   ^\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmpln74xlyo.rs:17:42\n   |\n17 |     let mut dot_pos\
    \ = file_name.find('.')\n   |                                          ^ help:\
    \ add `;` here\n18 |     if dot_pos == String::npos {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpln74xlyo.rs:21:46\n\
    \   |\n21 |     let mut dot_pos_end = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n22 |     if dot_pos_end\
    \ == String::npos {\n   |     -- unexpected token\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n  --> /tmp/tmpln74xlyo.rs:85:17\n   |\n85 |    \
    \ assert_eq!({left}, {right});\n   |                 ^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpln74xlyo.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpln74xlyo.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpln74xlyo.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpln74xlyo.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    if dot_name.len() == dot_pos {\n                        if\
    \ dot_name.chars().any(|c| c != '.') {\n                            String::from(\"\
    No\")\n                        } else {\n                            String::from(\"\
    Yes\")\n                        }\n                    } else {\n            \
    \            String::from(\"No\")\n                    }\n                }\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl080z87j.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpl080z87j.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl080z87j.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl080z87j.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl080z87j.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl080z87j.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl080z87j.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl080z87j.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl080z87j.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl080z87j.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ { \n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdu7mapxk.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos { \n    |                                  \
    \ - this delimiter might not be properly closed...\n79  | \n80  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\
    \ \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpdu7mapxk.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:29:44\n   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n30 |  \
    \   if dot_pos_4 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:33:44\n   |\n33 |     let\
    \ mut dot_pos_5 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n34 |     if dot_pos_5 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:37:44\n   |\n37 |     let mut dot_pos_6 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n38 |  \
    \   if dot_pos_6 == String::npos { \n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\")\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1\n    if dot_pos_start == String::npos { \n        return String::from(\"\
    No\")\n    }\n    let mut dot_pos_start_end = dot_pos_start + 1\n    if dot_pos_start_end\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_start_end_end = dot_pos_start_end + 1\n    if dot_pos_start_end_end\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_start_end_end_end = dot_pos_start_end_end + 1\n    if dot_pos_start_end_end_end\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_start_end_end_end_end = dot_pos_start_end_end_end + 1\n    if dot_pos_start_end_end_end_end\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_start_end_end_end_end_end = dot_pos_start_end_end_end_end + 1\n    if\
    \ dot_pos_start_end_end_end_end_end == String::npos { \n        return String::from(\"\
    No\")\n    }\n    let mut dot_pos_start_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end\
    \ + 1\n    if dot_pos_start_end_end_end_end_end_end == String::npos { \n     \
    \   return String::from(\"No\")\n    }\n    let mut dot_pos_start_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end + 1\n    if dot_pos_start_end_end_end_end_end_end_end\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos_start_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end\
    \ + 1\n    if dot_pos_start_end_end_end_end_end_end_end_end == String::npos {\
    \ \n        return String::from(\"No\")\n    }\n    let mut dot_pos_start_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end + 1\n    if dot_pos_start_end_end_end_end_end_end_end_end_end\
    \ == String::npos { \n        return String::from(\"No\")\n\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoo1nv8a8.rs:95:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n62 |     if\
    \ dot_pos_start_end_end_end_end_end_end_end_end_end == String::npos { \n   | \
    \                                                                         - this\
    \ delimiter might not be properly closed...\n...\n65 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n95 | }\n   |   ^\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpoo1nv8a8.rs:17:42\n   |\n17 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n18 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpoo1nv8a8.rs:21:46\n\
    \   |\n21 |     let mut dot_pos_end = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n22 |     if dot_pos_end\
    \ == String::npos { \n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmpoo1nv8a8.rs:25:40\n   |\n25 |     let mut dot_pos_start\
    \ = dot_pos + 1\n   |                                        ^ help: add `;` here\n\
    26 |     if dot_pos_start == String::npos { \n   |     -- unexpected token\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpoo1nv8a8.rs:29:50\n   |\n\
    29 |     let mut dot_pos_start_end = dot_pos_start + 1\n   |                 \
    \                                 ^ help: add `;` here\n30 |     if dot_pos_start_end\
    \ == String::npos { \n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmpoo1nv8a8.rs:33:58\n   |\n33 |     let mut dot_pos_start_end_end\
    \ = dot_pos_start_end + 1\n   |                                              \
    \            ^ help: add `;` here\n34 |     if dot_pos_start_end_end == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpoo1nv8a8.rs:37:66\n   |\n37 |     let mut dot_pos_start_end_end_end\
    \ = dot_pos_start_end_end"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ { \n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdu7mapxk.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos { \n    |                                  \
    \ - this delimiter might not be properly closed...\n79  | \n80  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\
    \ \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpdu7mapxk.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:29:44\n   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n30 |  \
    \   if dot_pos_4 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:33:44\n   |\n33 |     let\
    \ mut dot_pos_5 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n34 |     if dot_pos_5 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:37:44\n   |\n37 |     let mut dot_pos_6 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n38 |  \
    \   if dot_pos_6 == String::npos { \n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp892_7sr1.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String\n84 \
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n114\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp892_7sr1.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp892_7sr1.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") || file_name.starts_with(\"A\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        let mut dot_index = file_name.rfind(\".\");\n        if dot_index\
    \ == String::npos {\n            return String::from(\"No\");\n        }\n   \
    \     let mut dot_name = file_name.clone();\n        dot_name.truncate(dot_index);\n\
    \        if dot_name.contains(\".\") {\n            return String::from(\"No\"\
    );\n        }\n        if dot_name.starts_with(\"a\") || dot_name.starts_with(\"\
    A\") {\n            return String::from(\"No\");\n        }\n        if dot_name.starts_with(\"\
    0\") || dot_name.starts_with(\"9\") {\n            return String::from(\"No\"\
    );\n        }\n    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n  \
    \  let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcxpz99tw.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcxpz99tw.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcxpz99tw.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcxpz99tw.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcxpz99tw.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcxpz99tw.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcxpz99tw.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcxpz99tw.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcxpz99tw.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcxpz99tw.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcxpz99tw.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n  \
    \  if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_letter = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n    if dot_letter != 'txt' && dot_letter !=\
    \ 'exe' && dot_letter != 'dll' {\n        return String::from(\"No\");\n    }\n\
    \    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpmztg4ic6.rs:32:22\n\
    \   |\n32 |     if dot_letter != 'txt' && dot_letter != 'exe' && dot_letter !=\
    \ 'dll' {\n   |                      ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n32 |     if dot_letter != \"txt\"\
    \ && dot_letter != 'exe' && dot_letter != 'dll' {\n   |                      ~~~~~\n\
    \nerror: character literal may only contain one codepoint\n  --> /tmp/tmpmztg4ic6.rs:32:45\n\
    \   |\n32 |     if dot_letter != 'txt' && dot_letter != 'exe' && dot_letter !=\
    \ 'dll' {\n   |                                             ^^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n32 |     if\
    \ dot_letter != 'txt' && dot_letter != \"exe\" && dot_letter != 'dll' {\n   |\
    \                                             ~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmpmztg4ic6.rs:32:68\n   |\n32 |\
    \     if dot_letter != 'txt' && dot_letter != 'exe' && dot_letter != 'dll' {\n\
    \   |                                                                    ^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    32 |     if dot_letter != 'txt' && dot_letter != 'exe' && dot_letter != \"dll\"\
    \ {\n   |                                                                    ~~~~~\n\
    \nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmztg4ic6.rs:19:42\n \
    \  |\n19 |     let mut dot_pos = file_name.find('.')\n   |                   \
    \                       ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpmztg4ic6.rs:27:42\n   |\n27 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n28 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmztg4ic6.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` "
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    if file_name.len() > 3 {\n        file_name.truncate(3);\n\
    \    }\n    if file_name.contains('.') {\n        file_name.truncate(file_name.rfind('.'));\n\
    \    }\n    if file_name.starts_with('0') && file_name.len() == 3 {\n        file_name.truncate(2);\n\
    \    }\n    if file_name.starts_with('a') && file_name.len() == 3 {\n        file_name.truncate(2);\n\
    \    }\n    if file_name.starts_with('A') && file_name.len() == 3 {\n        file_name.truncate(2);\n\
    \    }\n    if file_name.starts_with('z') && file_name.len() == 3 {\n        file_name.truncate(2);\n\
    \    }\n    if file_name.starts_with('Z') && file_name.len() == 3 {\n        file_name.truncate(2);\n\
    \    }\n    if file_name.starts_with('0') && file_name.len() == 2 {\n        file_name.truncate(1);\n\
    \    }\n    if file_name.starts_with('a') && file_name.len() == 2 {\n        file_name.truncate(1);\n\
    \    }\n    if file_name.starts_with('A') && file_name.len() == 2 {\n        file_name.truncate(1);\n\
    \    }\n    if file_name.starts_with('z') && file_name.len() == 2 {\n        file_name.truncate(1);\n\
    \    }\n    if file_name.starts_with('Z') && file_name.len() == 2 {\n        file_name.truncate(1);\n\
    \    }\n    if file_name.starts_with('0') && file_name.len() == 1 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('a') && file_name.len() == 1 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('A') && file_name.len() == 1 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('z') && file_name.len() == 1 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('Z') && file_name.len() == 1 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('0') && file_name.len() == 0 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('a') && file_name.len() == 0 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('A') && file_name.len() == 0 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with('z') && file_name.len() == 0 {\n        file_name.truncate(0);\n\
    \    }\n    if file_name.starts_with\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp_37e3i4u.rs:81:1\n   |\n\
    80 |     if file_name.starts_with\n   |     -- this `if` expression has a condition,\
    \ but no block\n81 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp_37e3i4u.rs:85:17\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp_37e3i4u.rs:85:25\n \
    \  |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_37e3i4u.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_37e3i4u.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_37e3i4u.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_37e3i4u.rs:87:25\n   |\n87 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_37e3i4u.rs:88:17\n  \
    \ |\n88 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_37e3i4u.rs:88:25\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_37e3i4u.rs:89:17\n   |\n89 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_37e3i4u.rs:89:25\n\
    \   |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: ca"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        let mut dot_pos_2 = file_name.find('.')\n        if dot_pos == dot_pos_2\
    \ {\n            String::from(\"No\")\n        } else {\n            let mut first_letter\
    \ = file_name.chars().next().unwrap();\n            if first_letter < 'a' || first_letter\
    \ > 'z' {\n                String::from(\"No\")\n            } else {\n      \
    \          let mut dot_pos_3 = file_name.find('.')\n                if dot_pos_3\
    \ == dot_pos_2 {\n                    String::from(\"No\")\n                }\
    \ else {\n                    let mut dot_pos_4 = file_name.find('.')\n      \
    \              if dot_pos_4 == dot_pos_2 {\n                        String::from(\"\
    No\")\n                    } else {\n                        String::from(\"Yes\"\
    )\n                    }\n                }\n            }\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp0v4r_b43.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         let mut dot_pos_2\
    \ = file_name.find('.')\n   |         --- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp0v4r_b43.rs:20:48\n   |\n20 |       \
    \  let mut dot_pos_2 = file_name.find('.')\n   |                             \
    \                   ^ help: add `;` here\n21 |         if dot_pos == dot_pos_2\
    \ {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp0v4r_b43.rs:28:56\n   |\n28 |                 let mut dot_pos_3\
    \ = file_name.find('.')\n   |                                                \
    \        ^ help: add `;` here\n29 |                 if dot_pos_3 == dot_pos_2\
    \ {\n   |                 -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmp0v4r_b43.rs:32:60\n   |\n32 |                     let mut\
    \ dot_pos_4 = file_name.find('.')\n   |                                      \
    \                      ^ help: add `;` here\n33 |                     if dot_pos_4\
    \ == dot_pos_2 {\n   |                     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0v4r_b43.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0v4r_b43.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0v4r_b43.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0v4r_b43.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0v4r_b43.rs:48:17\n   |\n48 |     assert_eq!({l"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    let mut \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpr3r21sba.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected identifier, found `}`\n \
    \ --> /tmp/tmpr3r21sba.rs:74:1\n   |\n74 | }\n   | ^ expected identifier\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr3r21sba.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr3r21sba.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr3r21sba.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr3r21sba.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr3r21sba.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr3r21sba.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr3r21sba.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr3r21sba.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr3r21sba.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut dot_name = file_name.clone();\n \
    \           dot_name.truncate(dot_pos);\n            if dot_name.chars().count()\
    \ > 1 {\n                dot_name.truncate(0);\n                if dot_name.chars().count()\
    \ > 1 {\n                    dot_name.truncate(0);\n                    if dot_name.chars().count()\
    \ > 1 {\n                        dot_name.truncate(0);\n                     \
    \   if dot_name.chars().count() > 1 {\n                            dot_name.truncate(0);\n\
    \                            if dot_name.chars().count() > 1 {\n             \
    \                   dot_name.truncate(0);\n                                if\
    \ dot_name.chars().count() > 1 {\n                                    dot_name.truncate(0);\n\
    \                                    if dot_name.chars().count() > 1 {\n     \
    \                                   dot_name.truncate(0);\n                  \
    \                      if dot_name.chars().count() > 1 {\n                   \
    \                         dot_name.truncate(0);\n                            \
    \                if dot_name.chars().count() > 1 {\n                         \
    \                       dot_name.truncate(0);\n                              \
    \                  if dot_name.chars().count() > 1 {\n                       \
    \                             dot_name.truncate(0);\n                        \
    \                            if dot_name.chars().count() > 1 {\n             \
    \                                           dot_name.truncate(0);\n          \
    \                                              if dot_name.chars().count() > 1\
    \ {\n                                                            dot_name.truncate(0);\n\
    \                                                            if dot_name.chars().count()\
    \ > 1 {\n                                                                dot_name.truncate(0);\n\
    \                                                                if dot_name.chars().count()\
    \ > 1 {\n                                                                    dot_name.truncate(0);\n\
    \                                                                    if dot_name.chars().count()\
    \ > 1 {\n                                                                    \
    \    dot_name.truncate(0);\n                                                 \
    \                   }\n                                                      \
    \          }\n                                                            }\n\
    \                                                        }\n                 \
    \                                   }\n                                      \
    \          }\n                                            }\n                \
    \                        }\n                                    }\n          \
    \                      }\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpcc5mit0g.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcc5mit0g.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcc5mit0g.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcc5mit0g.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcc5mit0g.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcc5mit0g.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcc5mit0g.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcc5mit0g.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcc5mit0g.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcc5mit0g.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcc5mit0g.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    if file_name.len() > 3 {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains('.') {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"a\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"A\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"0\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"9\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"_\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"$\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"%\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"*\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"(\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\")\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"~\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"\\\"\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"'\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"<\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"<\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"=\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"?\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"@\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"[\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"]\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"{\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"}\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"(\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\")\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpknnzo6mc.rs:92:30\n\
    \    |\n92  |       if file_name.starts_with(\")\n    |  ______________________________^\n\
    93  | | }\n94  | |\n95  | | fn main() {\n...   |\n122 | |     assert_eq!({left},\
    \ {right});\n123 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_index =\
    \ file_name.rfind('.')\n        if dot_index == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[..dot_index].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_index = file_name.rfind('.')\n\
    \                if dot_index == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_index];\n\
    \                    if dot_name.chars().any(|c| c != '.') {\n               \
    \         String::from(\"No\")\n                    } else {\n               \
    \         String::from(\"Yes\")\n                    }\n                }\n  \
    \          }\n        }\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpf_zrsa6y.rs:19:49\n\
    \   |\n19 |         let mut dot_index = file_name.rfind('.')\n   |           \
    \                                      ^ help: add `;` here\n20 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpf_zrsa6y.rs:27:57\n   |\n27 |            \
    \     let mut dot_index = file_name.rfind('.')\n   |                         \
    \                                ^ help: add `;` here\n28 |                 if\
    \ dot_index == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf_zrsa6y.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf_zrsa6y.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf_zrsa6y.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf_zrsa6y.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf_zrsa6y.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf_zrsa6y.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf_zrsa6y.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf_zrsa6y.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.len();\n    let\
    \ mut dot_pos_start = 0;\n    while dot_pos < dot_pos_end {\n        let mut dot_pos_start\
    \ = dot_pos;\n        if dot_pos == dot_pos_end {\n            break;\n      \
    \  }\n        if file_name[dot_pos] >= 'a' && file_name[dot_pos] <= 'z' {\n  \
    \          dot_pos_start = dot_pos + 1;\n        }\n        if file_name[dot_pos]\
    \ >= 'A' && file_name[dot_pos] <= 'Z' {\n            dot_pos_start = dot_pos +\
    \ 1;\n        }\n        if dot_pos_start == dot_pos {\n            break;\n \
    \       }\n        dot_pos_end = dot_pos;\n        dot_pos = dot_pos + 1;\n  \
    \  }\n    if dot_pos_start == dot_pos {\n        return String::from(\"No\");\n\
    \    }\n    if dot_pos_start == 0 {\n        return String::from(\"No\");\n  \
    \  }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"No\"\
    );\n    }\n    if file_name[dot_pos_start - 1] >= '0' && file_name[dot_pos_start\
    \ - 1] <= '9' {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end + 1 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start\
    \ - 1] != '.' {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end + 2 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start\
    \ - 2] != 'txt' && file_name[dot_pos_start - 2] != 'exe' && file_name[dot_pos_start\
    \ - 2] != 'dll' {\n        return String::from(\"No\");\n    }\n    return String::from(\"\
    Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpci4dg_9b.rs:62:40\n\
    \   |\n62 |     if file_name[dot_pos_start - 2] != 'txt' && file_name[dot_pos_start\
    \ - 2] != 'exe' && file_name[dot_pos_start - 2] != 'dll' {\n   |             \
    \                           ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n62 |     if file_name[dot_pos_start - 2] != \"txt\"\
    \ && file_name[dot_pos_start - 2] != 'exe' && file_name[dot_pos_start - 2] !=\
    \ 'dll' {\n   |                                        ~~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmpci4dg_9b.rs:62:81\n  \
    \ |\n62 |     if file_name[dot_pos_start - 2] != 'txt' && file_name[dot_pos_start\
    \ - 2] != 'exe' && file_name[dot_pos_start - 2] != 'dll' {\n   |             \
    \                                                                    ^^^^^\n \
    \  |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n62\
    \ |     if file_name[dot_pos_start - 2] != 'txt' && file_name[dot_pos_start -\
    \ 2] != \"exe\" && file_name[dot_pos_start - 2] != 'dll' {\n   |             \
    \                                                                    ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmpci4dg_9b.rs:62:122\n\
    \   |\n62 |     if file_name[dot_pos_start - 2] != 'txt' && file_name[dot_pos_start\
    \ - 2] != 'exe' && file_name[dot_pos_start - 2] != 'dll' {\n   |             \
    \                                                                            \
    \                                 ^^^^^\n   |\nhelp: if you meant to write a `str`\
    \ literal, use double quotes\n   |\n62 |     if file_name[dot_pos_start - 2] !=\
    \ 'txt' && file_name[dot_pos_start - 2] != 'exe' && file_name[dot_pos_start -\
    \ 2] != \"dll\" {\n   |                                                      \
    \                                                                    ~~~~~\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpci4dg_9b.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 | "
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos;\n    while\
    \ dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        if dot_pos_start == dot_pos\
    \ {\n            dot_pos_start += 1;\n        }\n        if dot_pos_end == dot_pos\
    \ {\n            dot_pos_end += 1;\n        }\n        if dot_pos_start < dot_pos_end\
    \ {\n            let mut dot_pos_start = dot_pos_end;\n            let mut dot_pos_end\
    \ = dot_pos_end;\n            if dot_pos_start == dot_pos {\n                dot_pos_start\
    \ += 1;\n            }\n            if dot_pos_end == dot_pos {\n            \
    \    dot_pos_end += 1;\n            }\n            if dot_pos_start < dot_pos_end\
    \ {\n                dot_pos_end = dot_pos;\n            }\n        }\n      \
    \  if dot_pos_start == dot_pos {\n            dot_pos_start += 1;\n        }\n\
    \        if dot_pos_end == dot_pos {\n            dot_pos_end += 1;\n        }\n\
    \        if dot_pos_start < dot_pos_end {\n            dot_pos_end = dot_pos;\n\
    \        }\n        if dot_pos_start == dot_pos {\n            dot_pos_start +=\
    \ 1;\n        }\n        if dot_pos_end == dot_pos {\n            dot_pos_end\
    \ += 1;\n        }\n        if dot_pos_start < dot_pos_end {\n            dot_pos_end\
    \ = dot_pos;\n        }\n        if dot_pos_start == dot_pos {\n            dot_pos_start\
    \ += 1;\n        }\n        if dot_pos_end == dot_pos {\n            dot_pos_end\
    \ += 1;\n        }\n        if dot_pos_start < dot_pos_end {\n            dot_pos_end\
    \ = dot_pos;\n        }\n        if dot_pos_start == dot_pos {\n            dot_pos_start\
    \ += 1;\n        }\n        if dot_pos_end == dot_pos {\n            dot_pos_end\
    \ += 1;\n        }\n        if dot_pos_start < dot_pos_end {\n            dot_pos_end\
    \ = dot_pos;\n        }\n        if dot_pos_start == dot_pos {\n            dot_pos_start\
    \ += 1;\n        }\n        if dot_pos_end == dot_pos {\n            dot_pos_end\
    \ += 1;\n        }\n        if dot_pos_start < dot_pos_end {\n            dot_pos_end\
    \ = dot_pos;\n        }\n        if dot_pos_start == dot_pos {\n            dot_pos_start\
    \ += 1;\n        }\n        if \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjlou4u8f.rs:124:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n23  |  \
    \   while dot_pos_start != dot_pos_end {\n    |                              \
    \          - this delimiter might not be properly closed...\n...\n94  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n124 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjlou4u8f.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpjlou4u8f.rs:94:1\n   |\n94 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjlou4u8f.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjlou4u8f.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjlou4u8f.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjlou4u8f.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmpjlou4u8f.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmpjlou4u8f.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmpjlou4u8f.rs:101:17\n    |\n101 |     as"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos = dot_pos\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_pos_end = dot_pos_end + 1;\n\
    \    let mut dot_pos_end_2 = file_name.find('.')\n    if dot_pos_end_2 == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_pos_end_2 = dot_pos_end_2 +\
    \ 1;\n    let mut dot_pos_end_3 = file_name.find('.')\n    if dot_pos_end_3 ==\
    \ String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_3 = dot_pos_end_3\
    \ + 1;\n    let mut dot_pos_end_4 = file_name.find('.')\n    if dot_pos_end_4\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_4 =\
    \ dot_pos_end_4 + 1;\n    let mut dot_pos_end_5 = file_name.find('.')\n    if\
    \ dot_pos_end_5 == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_5\
    \ = dot_pos_end_5 + 1;\n    let mut dot_pos_end_6 = file_name.find('.')\n    if\
    \ dot_pos_end_6 == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_6\
    \ = dot_pos_end_6 + 1;\n    let mut dot_pos_end_7 = file_name.find('.')\n    if\
    \ dot_pos_end_7 == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_7\
    \ = dot_pos_end_7 + 1;\n    let mut dot_pos_end_8 = file_name.find('.')\n    if\
    \ dot_pos_end_8 == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_8\
    \ = dot_pos_end_8 + 1;\n    let mut dot_pos_end_9 = file_name.find('.')\n    if\
    \ dot_pos_end_9 == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end_9\
    \ = dot_pos_end_9 + 1;\n    let mut dot_pos_end_10 = file_name.find('.')\n   \
    \ if dot_pos_end_10 == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_end_10 = dot_pos_end_10 + 1;\n    let mut dot_pos_end_11 = file_name.find('.')\n\
    \    if dot_pos_end_11 == String::npos { return String::from(\"No\") }\n    let\
    \ \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:20:46\n   |\n20 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n21 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:23:48\n   |\n23 |     let\
    \ mut dot_pos_end_2 = file_name.find('.')\n   |                              \
    \                  ^ help: add `;` here\n24 |     if dot_pos_end_2 == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:26:48\n   |\n26 |     let\
    \ mut dot_pos_end_3 = file_name.find('.')\n   |                              \
    \                  ^ help: add `;` here\n27 |     if dot_pos_end_3 == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:29:48\n   |\n29 |     let\
    \ mut dot_pos_end_4 = file_name.find('.')\n   |                              \
    \                  ^ help: add `;` here\n30 |     if dot_pos_end_4 == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:32:48\n   |\n32 |     let\
    \ mut dot_pos_end_5 = file_name.find('.')\n   |                              \
    \                  ^ help: add `;` here\n33 |     if dot_pos_end_5 == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmprrimabnu.rs:35:48\n   |\n35 |     let\
    \ mut dot_pos_end_6 = file_name.find('.')\n   |                              \
    \                  ^ help: add `;` here\n36 |     if dot_pos_end_6 == String::np"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        let mut dot_pos_end = dot_pos;\n        let mut\
    \ dot_pos_start = dot_pos;\n        let mut dot_pos_len = dot_pos - dot_pos_start;\n\
    \        let mut dot_pos_len2 = dot_pos_len;\n        let mut dot_pos_len3 = dot_pos_len;\n\
    \        let mut dot_pos_len4 = dot_pos_len;\n        let mut dot_pos_len5 = dot_pos_len;\n\
    \        let mut dot_pos_len6 = dot_pos_len;\n        let mut dot_pos_len7 = dot_pos_len;\n\
    \        let mut dot_pos_len8 = dot_pos_len;\n        let mut dot_pos_len9 = dot_pos_len;\n\
    \        let mut dot_pos_len10 = dot_pos_len;\n        let mut dot_pos_len11 =\
    \ dot_pos_len;\n        let mut dot_pos_len12 = dot_pos_len;\n        let mut\
    \ dot_pos_len13 = dot_pos_len;\n        let mut dot_pos_len14 = dot_pos_len;\n\
    \        let mut dot_pos_len15 = dot_pos_len;\n        let mut dot_pos_len16 =\
    \ dot_pos_len;\n        let mut dot_pos_len17 = dot_pos_len;\n        let mut\
    \ dot_pos_len18 = dot_pos_len;\n        let mut dot_pos_len19 = dot_pos_len;\n\
    \        let mut dot_pos_len20 = dot_pos_len;\n        let mut dot_pos_len21 =\
    \ dot_pos_len;\n        let mut dot_pos_len22 = dot_pos_len;\n        let mut\
    \ dot_pos_len23 = dot_pos_len;\n        let mut dot_pos_len24 = dot_pos_len;\n\
    \        let mut dot_pos_len25 = dot_pos_len;\n        let mut dot_pos_len26 =\
    \ dot_pos_len;\n        let mut dot_pos_len27 = dot_pos_len;\n        let mut\
    \ dot_pos_len28 = dot_pos_len;\n        let mut dot_pos_len29 = dot_pos_len;\n\
    \        let mut dot_pos_len30 = dot_pos_len;\n        let mut dot_pos_len31 =\
    \ dot_pos_len;\n        let mut dot_pos_len32 = dot_pos_len;\n        let mut\
    \ dot_pos_len33 = dot_pos_len;\n        let mut dot_pos_len34 = dot_pos_len;\n\
    \        let mut dot_pos_len35 = dot_pos_len;\n        let mut dot_pos_len36 =\
    \ dot_pos_len;\n        let mut dot_pos_len37 = dot_pos_len;\n        let mut\
    \ dot_pos_len38 = dot_pos_len;\n        let mut dot_pos_len39 = dot_pos_len;\n\
    \        let mut dot_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpoaz2bpus.rs:92:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - this delimiter might not be properly closed...\n...\n\
    62 | }\n   | - ...as it matches this but it has different indentation\n...\n92\
    \ | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpoaz2bpus.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         let mut\
    \ dot_pos_end = dot_pos;\n   |         --- unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmpoaz2bpus.rs:61:21\n   |\n61 |         let mut\
    \ dot_\n   |                     ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoaz2bpus.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoaz2bpus.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoaz2bpus.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoaz2bpus.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoaz2bpus.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoaz2bpus.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoaz2bpus.rs:69:17\n   |\n69 |   "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut counter = 0;\n\
    \    let mut dot_count = 0;\n    let mut first_letter = false;\n    let mut last_letter\
    \ = false;\n    let mut first_letter_is_letter = false;\n    let mut last_letter_is_letter\
    \ = false;\n    let mut first_letter_is_digit = false;\n    let mut last_letter_is_digit\
    \ = false;\n    let mut first_letter_is_dot = false;\n    let mut last_letter_is_dot\
    \ = false;\n    let mut dot_is_digit = false;\n    let mut dot_is_letter = false;\n\
    \    let mut dot_is_dot = false;\n    let mut dot_is_space = false;\n    let mut\
    \ dot_is_dash = false;\n    let mut dot_is_slash = false;\n    let mut dot_is_colon\
    \ = false;\n    let mut dot_is_semicolon = false;\n    let mut dot_is_equal =\
    \ false;\n    let mut dot_is_comma = false;\n    let mut dot_is_apostrophe = false;\n\
    \    let mut dot_is_dollar = false;\n    let mut dot_is_percent = false;\n   \
    \ let mut dot_is_ampersand = false;\n    let mut dot_is_asterisk = false;\n  \
    \  let mut dot_is_plus = false;\n    let mut dot_is_minus = false;\n    let mut\
    \ dot_is_open_bracket = false;\n    let mut dot_is_close_bracket = false;\n  \
    \  let mut dot_is_open_square_bracket = false;\n    let mut dot_is_close_square_bracket\
    \ = false;\n    let mut dot_is_open_brace = false;\n    let mut dot_is_close_brace\
    \ = false;\n    let mut dot_is_open_bracket = false;\n    let mut dot_is_close_bracket\
    \ = false;\n    let mut dot_is_open_square_bracket = false;\n    let mut dot_is_close_square_bracket\
    \ = false;\n    let mut dot_is_open_brace = false;\n    let mut dot_is_close_brace\
    \ = false;\n    let mut dot_is_open_bracket = false;\n    let mut dot_is_close_bracket\
    \ = false;\n    let mut dot_is_open_square_bracket = false;\n    let mut dot_is_close_square_bracket\
    \ = false;\n    let mut dot_is_open_brace = false;\n    let mut dot_is_close_brace\
    \ = false;\n    let mut dot_is_open_bracket = false;\n    let mut dot_is_close_bracket\
    \ = false;\n    let mut dot_is_open_square_bracket = false;\n    let mut dot_is_close_square_bracket\
    \ = false;\n    let mut dot_is_open_brace = false;\n    let mut dot_is_close_brace\
    \ = false;\n    let mut dot_is_open_bracket = false;\n    let mut dot_is_close_bra\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqxsqys2k.rs:68:29\n   |\n\
    68 |     let mut dot_is_close_bra\n   |                             ^ help: add\
    \ `;` here\n69 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpqxsqys2k.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqxsqys2k.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqxsqys2k.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqxsqys2k.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqxsqys2k.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqxsqys2k.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqxsqys2k.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqxsqys2k.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqxsqys2k.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqxsqys2k.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_str\
    \ = file_name.to_string();\n    file_name_str.truncate(3);\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"\
    0\");\n    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\");\n\
    \    file_name_str.push_str(\"0\");\n    file_name_str.push_str(\"0\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpylb3hjb_.rs:72:28\n\
    \    |\n72  |       file_name_str.push_str(\"0\n    |  ____________________________^\n\
    73  | | }\n74  | |\n75  | | fn main() {\n...   |\n102 | |     assert_eq!({left},\
    \ {right});\n103 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 3 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 4 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 5 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 6 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 7 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 8 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 9 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 10 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 11 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 12 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 13 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 14 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 15 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 16 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 17 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 18 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 19 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 20 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 21 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 22 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 23 {\n        return String::from(\"Yes\");\n    }\n    if file_name.chars().count()\
    \ == 24 {\n        return String::from(\"Yes\");\n\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp50q04kiv.rs:124:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n91  |  \
    \   if file_name.chars().count() == 24 {\n    |                              \
    \          - this delimiter might not be properly closed...\n...\n94  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n124 | }\n\
    \    |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp50q04kiv.rs:98:17\n\
    \   |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp50q04kiv.rs:98:25\n   |\n98 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp50q04kiv.rs:99:17\n   |\n99 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp50q04kiv.rs:99:25\n\
    \   |\n99 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \   --> /tmp/tmp50q04kiv.rs:100:17\n    |\n100 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmp50q04kiv.rs:100:25\n    |\n100 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmp50q04kiv.rs:101:17\n    |\n101 |     assert_eq!({left}, {right});\n\
    \    |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n   --> /tmp/tmp50q04kiv.rs:101:25\n    |\n101 |\
    \     assert_eq!({left}, {right});\n    |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n   -->\
    \ /tmp/tmp50q04kiv.rs:102:17\n    |\n10"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_components\
    \ = file_name.split_ascii_lowercase();\n    file_name_components.remove(\".txt\"\
    );\n    file_name_components.remove(\".exe\");\n    file_name_components.remove(\"\
    .dll\");\n    file_name_components.remove(\"..\");\n    file_name_components.remove(\"\
    0\");\n    file_name_components.remove(\"1\");\n    file_name_components.remove(\"\
    2\");\n    file_name_components.remove(\"3\");\n    file_name_components.remove(\"\
    4\");\n    file_name_components.remove(\"5\");\n    file_name_components.remove(\"\
    6\");\n    file_name_components.remove(\"7\");\n    file_name_components.remove(\"\
    8\");\n    file_name_components.remove(\"9\");\n    file_name_components.remove(\"\
    a\");\n    file_name_components.remove(\"b\");\n    file_name_components.remove(\"\
    c\");\n    file_name_components.remove(\"d\");\n    file_name_components.remove(\"\
    e\");\n    file_name_components.remove(\"f\");\n    file_name_components.remove(\"\
    g\");\n    file_name_components.remove(\"h\");\n    file_name_components.remove(\"\
    i\");\n    file_name_components.remove(\"j\");\n    file_name_components.remove(\"\
    k\");\n    file_name_components.remove(\"l\");\n    file_name_components.remove(\"\
    m\");\n    file_name_components.remove(\"n\");\n    file_name_components.remove(\"\
    o\");\n    file_name_components.remove(\"p\");\n    file_name_components.remove(\"\
    q\");\n    file_name_components.remove(\"r\");\n    file_name_components.remove(\"\
    s\");\n    file_name_components.remove(\"t\");\n    file_name_components.remove(\"\
    u\");\n    file_name_components.remove(\"v\");\n    file_name_components.remove(\"\
    w\");\n    file_name_components.remove(\"x\");\n    file_name_components.remove(\"\
    y\");\n    file_name_components.remove(\"z\");\n    file_name_components.remove(\"\
    A\");\n    file_name_components.remove(\"B\");\n    file_name_components.remove(\"\
    C\");\n    file_name_components.remove(\"D\");\n    file_name_components.remove(\"\
    E\");\n    file_name_components.remove(\"F\");\n    file_name_components.remove(\"\
    G\");\n    file_name_components.remove(\"H\");\n    file_name_components.remove(\"\
    I\");\n    file_name_components.remove(\"J\");\n    file_name_components.remove(\"\
    K\");\n    file_name_components.remove(\"L\");\n    file_name_components.remove(\"\
    M\");\n    file_name_components.remove(\"N\");\n    file_name_components.remove(\"\
    O\");\n    file_name_components.remove(\"\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmphs9wz2d7.rs:72:33\n\
    \    |\n72  |       file_name_components.remove(\"\n    |  _________________________________^\n\
    73  | | }\n74  | |\n75  | | fn main() {\n...   |\n102 | |     assert_eq!({left},\
    \ {right});\n103 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    if dot_name.chars().any(|c| c != '.') {\n               \
    \         String::from(\"No\")\n                    } else {\n               \
    \         let mut dot_pos = dot_name.find('.')\n                        if dot_pos\
    \ == String::npos {\n                            String::from(\"No\")\n      \
    \                  } else {\n                            let mut dot_name = dot_name[..dot_pos];\n\
    \                            if dot_name.chars().any(|c| c != 'txt' && c != 'exe'\
    \ && c != 'dll') {\n                                String::from(\"No\")\n   \
    \                         } else {\n                                String::from(\"\
    Yes\")\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp3ak0lutf.rs:40:62\n\
    \   |\n40 | ...                   if dot_name.chars().any(|c| c != 'txt' && c\
    \ != 'exe' && c != 'dll') {\n   |                                            \
    \            ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n40 |                             if dot_name.chars().any(|c| c\
    \ != \"txt\" && c != 'exe' && c != 'dll') {\n   |                            \
    \                                  ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp3ak0lutf.rs:40:76\n   |\n40 | ...     \
    \              if dot_name.chars().any(|c| c != 'txt' && c != 'exe' && c != 'dll')\
    \ {\n   |                                                                    \
    \  ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n40 |                             if dot_name.chars().any(|c| c != 'txt'\
    \ && c != \"exe\" && c != 'dll') {\n   |                                     \
    \                                       ~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp3ak0lutf.rs:40:90\n   |\n40 | ...\
    \                   if dot_name.chars().any(|c| c != 'txt' && c != 'exe' && c\
    \ != 'dll') {\n   |                                                          \
    \                          ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n40 |                             if dot_name.chars().any(|c|\
    \ c != 'txt' && c != 'exe' && c != \"dll\") {\n   |                          \
    \                                                                ~~~~~\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp3ak0lutf.rs:19:46\n   |\n19\
    \ |         let mut dot_pos = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n20 |         if dot_pos == String::npos\
    \ {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp3ak0lutf.rs:27:54\n   |\n27 |                 let mut dot_pos =\
    \ file_name.find('.')\n   |                                  "
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_char = file_name[dot_pos as\
    \ usize].to_ascii_lowercase();\n            if first_char == 'a' || first_char\
    \ == 'b' || first_char == 'c' || first_char == 'd' ||\n                first_char\
    \ == 'e' || first_char == 'f' || first_char == 'g' || first_char == 'h' ||\n \
    \               first_char == 'i' || first_char == 'j' || first_char == 'k' ||\
    \ first_char == 'l' ||\n                first_char == 'm' || first_char == 'n'\
    \ || first_char == 'o' || first_char == 'p' ||\n                first_char ==\
    \ 'q' || first_char == 'r' || first_char == 's' || first_char == 't' ||\n    \
    \            first_char == 'u' || first_char == 'v' || first_char == 'w' || first_char\
    \ == 'x' ||\n                first_char == 'y' || first_char == 'z' {\n      \
    \          String::from(\"No\")\n            } else {\n                String::from(\"\
    Yes\")\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpxyc3iw1h.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxyc3iw1h.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxyc3iw1h.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxyc3iw1h.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxyc3iw1h.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ { \n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpmst2m92s.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos { \n    |                                  \
    \ - this delimiter might not be properly closed...\n79  |         return \n80\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    110 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpmst2m92s.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpmst2m92s.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpmst2m92s.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpmst2m92s.rs:29:44\n   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n30 |  \
    \   if dot_pos_4 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpmst2m92s.rs:33:44\n   |\n33 |     let\
    \ mut dot_pos_5 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n34 |     if dot_pos_5 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpmst2m92s.rs:37:44\n   |\n37 |     let mut dot_pos_6 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n38 |  \
    \   if dot_pos_6 == String::npos { \n   |     -- unexpe"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end_2 = file_name.find('.')\n\
    \    if dot_pos_end_2 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_2 = dot_pos_end_2 + 1;\n    let mut dot_pos_end_3\
    \ = file_name.find('.')\n    if dot_pos_end_3 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_3 = dot_pos_end_3 + 1;\n\
    \    let mut dot_pos_end_4 = file_name.find('.')\n    if dot_pos_end_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_4 =\
    \ dot_pos_end_4 + 1;\n    let mut dot_pos_end_5 = file_name.find('.')\n    if\
    \ dot_pos_end_5 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_5 = dot_pos_end_5 + 1;\n    let mut dot_pos_end_6 = file_name.find('.')\n\
    \    if dot_pos_end_6 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_6 = dot_pos_end_6 + 1;\n    let mut dot_pos_end_7\
    \ = file_name.find('.')\n    if dot_pos_end_7 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_7 = dot_pos_end_7 + 1;\n\
    \    let mut dot_pos_end_8 = file_name.find('.')\n    if dot_pos_end_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_8 =\
    \ dot_pos_end_8 + 1;\n    let mut dot_pos_end_9 = file_name.find('.')\n    if\
    \ dot_pos_end_9 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_9 = dot_pos_end_9 + 1;\n    let mut dot_pos_end_10 =\
    \ file_name.find('.')\n    if dot_pos_end_10 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_10 = dot_pos_end_10 +\
    \ 1;\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp2ze0txvb.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:27:48\n   |\n27\
    \ |     let mut dot_pos_end_2 = file_name.find('.')\n   |                    \
    \                            ^ help: add `;` here\n28 |     if dot_pos_end_2 ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmp2ze0txvb.rs:32:48\n   |\n32 |     let mut dot_pos_end_3\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n33 |     if dot_pos_end_3 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:37:48\n\
    \   |\n37 |     let mut dot_pos_end_4 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n38 |     if dot_pos_end_4\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:42:48\n   |\n42 |     let mut dot_pos_end_5\
    \ = file_name.find('.')\n   |                                                ^\
    \ help: add `;` here\n43 |     if dot_pos_end_5 == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:47:48\n\
    \   |\n47 |     let mut dot_pos_end_6 = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n48 |     if dot_pos_end_6\
    \ == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ keyword `if`\n  --> /tmp/tmp2ze0txvb.rs:52:48\n   |\n52 |     let mut dot_pos_end_7\
    \ = file_name.find('.')\n   "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpo4gwptr8.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos {\n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpo4gwptr8.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpo4gwptr8.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpo4gwptr8.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, fo"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfox4bj6g.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos {\n    |                                   -\
    \ this delimiter might not be properly closed...\n79  |         return \n80  |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n110\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_4 == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:33:44\n   |\n33 |     let mut dot_pos_5 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n34 |  \
    \   if dot_pos_5 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_6 == String::npos {\n   |\
    \     -- unexpected to"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpevnlszg4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpevnlszg4.rs:22:42\n   |\n22 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n23 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpevnlszg4.rs:27:42\n   |\n27 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n28 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpevnlszg4.rs:32:42\n\
    \   |\n32 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n33 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpevnlszg4.rs:37:42\n   |\n37 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n38 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpevnlszg4.rs:42:42\n   |\n42 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n43 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpevnlszg4.rs:47:42\n\
    \   |\n47 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n48 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpevnlszg4.rs:52:42\n   |\n52 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n53 |    \
    \ if dot_pos == String::npos {"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos;\n    while\
    \ dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_start;\n        let mut dot_pos_end = dot_pos_start..=dot_pos_end.find(\"\
    -\");\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n\
    \        }\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end\
    \ = dot_pos_end.next();\n        }\n        if dot_pos_end == dot_pos_start {\n\
    \            dot_pos_end = dot_pos_end.next();\n        }\n        if dot_pos_end\
    \ == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n        }\n\
    \        if dot_pos_end == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n\
    \        }\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end\
    \ = dot_pos_end.next();\n        }\n        if dot_pos_end == dot_pos_start {\n\
    \            dot_pos_end = dot_pos_end.next();\n        }\n        if dot_pos_end\
    \ == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n        }\n\
    \        if dot_pos_end == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n\
    \        }\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end\
    \ = dot_pos_end.next();\n        }\n        if dot_pos_end == dot_pos_start {\n\
    \            dot_pos_end = dot_pos_end.next();\n        }\n        if dot_pos_end\
    \ == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n        }\n\
    \        if dot_pos_end == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n\
    \        }\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end\
    \ = dot_pos_end.next();\n        }\n        if dot_pos_end == dot_pos_start {\n\
    \            dot_pos_end = dot_pos_end.next();\n        }\n        if dot_pos_end\
    \ == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n        }\n\
    \        if dot_pos_end == dot_pos_start {\n            dot_pos_end = dot_pos_end.next();\n\
    \        }\n        if dot_pos_end == dot_pos_start {\n            dot_pos_end\
    \ = dot_pos_end.next();\n        }\n        if dot_pos_end == dot_pos_start {\n\
    \            dot_pos_end = dot_pos_end.next();\n        }\n        if dot_pos_end\
    \ == dot_\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg0zmbjy1.rs:115:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n23  |  \
    \   while dot_pos_start != dot_pos_end {\n    |                              \
    \          - this delimiter might not be properly closed...\n...\n85  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n115 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpg0zmbjy1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpg0zmbjy1.rs:85:1\n\
    \   |\n84 |         if dot_pos_end == dot_\n   |         -- this `if` expression\
    \ has a condition, but no block\n85 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg0zmbjy1.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg0zmbjy1.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg0zmbjy1.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg0zmbjy1.rs:90:25\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg0zmbjy1.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg0zmbjy1.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_start;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let \n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp1_mvjd1_.rs:100:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n26  |  \
    \   while dot_pos_start != dot_pos_end {\n    |                              \
    \          - this delimiter might not be properly closed...\n...\n70  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n100 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp1_mvjd1_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp1_mvjd1_.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected pattern, found `}`\n  --> /tmp/tmp1_mvjd1_.rs:70:1\n   |\n70 | }\n\
    \   | ^ expected pattern\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1_mvjd1_.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1_mvjd1_.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1_mvjd1_.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1_mvjd1_.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1_mvjd1_.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `righ"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String\n}\n\nfn main() {\n \
    \   let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwyowmvl3.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos {\n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String\n84 \
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n114\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwyowmvl3.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwyowmvl3.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpwyowmvl3.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwyowmvl3.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwyowmvl3.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpwyowmvl3.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, foun"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.len() ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    if file_name.len() ==\
    \ 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_punctuation()) {\n        return String::from(\"No\");\n    }\n\
    \    if file_name.chars().any(|c| !c.is_ascii_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol()) {\n    \
    \    return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_digit()) {\n     \
    \   return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_digit()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_symbol()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpqp6iq45y.rs:77:1\n   |\n\
    76 |     if file_name.chars().any(|c| !c.is_ascii_\n   |     -- this `if` expression\
    \ has a condition, but no block\n77 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpqp6iq45y.rs:76:29\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n76 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_\n   |                             ^ unclosed delimiter\n77 | }\n\
    \   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqp6iq45y.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqp6iq45y.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqp6iq45y.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqp6iq45y.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqp6iq45y.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqp6iq45y.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqp6iq45y.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqp6iq45y.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut dot_pos = file_name.find('.')\n\
    \    let mut dot_pos_end = file_name.len();\n    \n    if dot_pos == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos == 0 {\n\
    \        return String::from(\"No\");\n    }\n    \n    if dot_pos > dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_start\
    \ = dot_pos - 1;\n    \n    while dot_pos_start > dot_pos_end {\n        if file_name[dot_pos_start]\
    \ >= 'a' && file_name[dot_pos_start] <= 'z' {\n            dot_pos_start--;\n\
    \        } else if file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start]\
    \ <= 'Z' {\n            dot_pos_start--;\n        } else {\n            return\
    \ String::from(\"No\");\n        }\n    }\n    \n    if dot_pos_start == dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ > dot_pos_end {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ > dot_pos_end {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ > dot_pos_end {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ > dot_pos_end {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_start]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_start\
    \ > dot_pos_end {\n}\n\nfn main() {\n    let candidate = file_name_check;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp1qefoudf.rs:134:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n103 |  \
    \   if dot_pos_start > dot_pos_end {\n    |                                  \
    \  - this delimiter might not be properly closed...\n104 | }\n    | - ...as it\
    \ matches this but it has different indentation\n...\n134 | }\n    |   ^\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmp1qefoudf.rs:16:42\n   |\n16\
    \ |     let mut dot_pos = file_name.find('.')\n   |                          \
    \                ^ help: add `;` here\n17 |     let mut dot_pos_end = file_name.len();\n\
    \   |     --- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmp1qefoudf.rs:108:17\n    |\n108 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmp1qefoudf.rs:108:25\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmp1qefoudf.rs:109:17\n    |\n109 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmp1qefoudf.rs:109:25\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmp1qefoudf.rs:110:17\n    |\n110 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmp1qefoudf.rs:110:25\n\
    \    |\n110 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmp1qefoudf.rs:111:17\n    |\n111 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E042"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    if dot_name.contains(\".\") {\n                        dot_name.split_off('.').next().unwrap().to_lowercase()\n\
    \                    } else {\n                        String::from(\"No\")\n\
    \                    }\n                }\n            }\n        }\n    }\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmptfc7x02x.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmptfc7x02x.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptfc7x02x.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptfc7x02x.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptfc7x02x.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptfc7x02x.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptfc7x02x.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptfc7x02x.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptfc7x02x.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptfc7x02x.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start != String::npos && \n        file_name[dot_pos_start]\
    \ >= 'a' && file_name[dot_pos_start] <= 'z' &&\n        file_name[dot_pos_start+1]\
    \ >= 'a' && file_name[dot_pos_start+1] <= 'z' {\n        dot_pos_start += 1;\n\
    \    }\n    if dot_pos_start == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_start;\n    while dot_pos_end\
    \ != String::npos && \n        file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' &&\n        file_name[dot_pos_end+1] >= 'a' && file_name[dot_pos_end+1]\
    \ <= 'z' {\n        dot_pos_end += 1;\n    }\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos_end - dot_pos_start\
    \ != 3 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start]\
    \ != '0' || file_name[dot_pos_start+1] != '0' || \n        file_name[dot_pos_start+2]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    if dot_pos_end !=\
    \ dot_pos_start + 3 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ != '0' || file_name[dot_pos_end+1] != '0' || \n        file_name[dot_pos_end+2]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    if dot_pos_end !=\
    \ dot_pos_start + 2 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ != '0' || file_name[dot_pos_end+1] != '0' || \n        file_name[dot_pos_end+2]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n    if dot_pos_end !=\
    \ dot_pos_start + 1 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ != '0' || file_name[dot_pos_end+1] != '0' || \n        file_name[dot_pos_end+2]\
    \ != '0' {\n        return String::from(\"No\");\n    }\n}\n\nfn main() {\n  \
    \  let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpaeka_1xo.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpaeka_1xo.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpaeka_1xo.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpaeka_1xo.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpaeka_1xo.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpaeka_1xo.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpaeka_1xo.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpaeka_1xo.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpaeka_1xo.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpaeka_1xo.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start2 = dot_pos_start + 1;\n    let mut dot_pos_end2 = dot_pos_end\
    \ + 1;\n    let mut dot_pos_start3 = dot_pos_start2 + 1;\n    let mut dot_pos_end3\
    \ = dot_pos_end2 + 1;\n    let mut dot_pos_start4 = dot_pos_start3 + 1;\n    let\
    \ mut dot_pos_end4 = dot_pos_end3 + 1;\n    let mut dot_pos_start5 = dot_pos_start4\
    \ + 1;\n    let mut dot_pos_end5 = dot_pos_end4 + 1;\n    let mut dot_pos_start6\
    \ = dot_pos_start5 + 1;\n    let mut dot_pos_end6 = dot_pos_end5 + 1;\n    let\
    \ mut dot_pos_start7 = dot_pos_start6 + 1;\n    let mut dot_pos_end7 = dot_pos_end6\
    \ + 1;\n    let mut dot_pos_start8 = dot_pos_start7 + 1;\n    let mut dot_pos_end8\
    \ = dot_pos_end7 + 1;\n    let mut dot_pos_start9 = dot_pos_start8 + 1;\n    let\
    \ mut dot_pos_end9 = dot_pos_end8 + 1;\n    let mut dot_pos_start10 = dot_pos_start9\
    \ + 1;\n    let mut dot_pos_end10 = dot_pos_end9 + 1;\n    let mut dot_pos_start11\
    \ = dot_pos_start10 + 1;\n    let mut dot_pos_end11 = dot_pos_end10 + 1;\n   \
    \ let mut dot_pos_start12 = dot_pos_start11 + 1;\n    let mut dot_pos_end12 =\
    \ dot_pos_end11 + 1;\n    let mut dot_pos_start13 = dot_pos_start12 + 1;\n   \
    \ let mut dot_pos_end13 = dot_pos_end12 + 1;\n    let mut dot_pos_start14 = dot_pos_start13\
    \ + 1;\n    let mut dot_pos_end14 = dot_pos_end13 + 1;\n    let mut dot_pos_start15\
    \ = dot_pos_start14 + 1;\n    let mut dot_pos_end15 = dot_pos_end14 + 1;\n   \
    \ let mut dot_pos_start16 = dot_pos_start15 + 1;\n    let mut dot_pos_end16 =\
    \ dot_pos_end15 + 1;\n    let mut dot_pos_start17 = dot_pos_start16 + 1;\n   \
    \ let mut dot_pos_end17 = dot_pos_end16 + 1;\n    let mut dot_pos_start18 = dot_pos_start17\
    \ + 1;\n    let mut dot_pos_end18 = dot_pos_end17 + 1;\n}\n\nfn main() {\n   \
    \ let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp0ane705r.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp0ane705r.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0ane705r.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0ane705r.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0ane705r.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0ane705r.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0ane705r.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0ane705r.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0ane705r.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0ane705r.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0ane705r.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name :\
    \ String = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_name = file_name.clone();\n    dot_name.truncate(dot_pos);\n\
    \    let mut dot_name_pos = 0;\n    let mut dot_name_len = dot_name.len();\n \
    \   while dot_name_pos < dot_name_len {\n        let mut dot_name_char = dot_name[dot_name_pos];\n\
    \        if dot_name_char == '.' {\n            if dot_name_pos == 0 {\n     \
    \           return String::from(\"No\");\n            }\n            dot_name_pos++;\n\
    \            continue;\n        }\n        if dot_name_char >= 'a' && dot_name_char\
    \ <= 'z' {\n            dot_name_pos++;\n            continue;\n        }\n  \
    \      if dot_name_char >= 'A' && dot_name_char <= 'Z' {\n            dot_name_pos++;\n\
    \            continue;\n        }\n        if dot_name_char >= '0' && dot_name_char\
    \ <= '9' {\n            dot_name_pos++;\n            continue;\n        }\n  \
    \      return String::from(\"No\");\n    }\n    if dot_name_pos == dot_name_len\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos]\
    \ != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name_pos\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 1] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 2] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 3] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 4] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 5] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 6] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 7] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 8] != '\\0' {\n        return String::from(\"No\");\n    }\n    if dot_name[dot_name_pos\
    \ - 9] != '\\0' {\n        return String::from(\"No\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmpxa03pj98.rs:82:29\n\
    \    |\n82  |           return String::from(\"No\n    |  _____________________________^\n\
    83  | | }\n84  | |\n85  | | fn main() {\n...   |\n112 | |     assert_eq!({left},\
    \ {right});\n113 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    if file_name.len()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut first_letter\
    \ = file_name[0];\n    if first_letter < 'a' || first_letter > 'z' {\n       \
    \ return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    if file_name[dot_pos -\
    \ 1] != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_2]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != file_name[dot_pos_2] {\n        return String::from(\"No\");\n    }\n\
    \    if file_name[dot_pos - 1] != file_name[dot_pos_2 + 1] {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos_2 + 1] {\n   \
    \     return String::from(\"No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos\
    \ + 1] {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_2]\
    \ != file_name[dot_pos + 2] {\n        return String::from(\"No\");\n    }\n \
    \   if file_name[dot_pos_2] != file_name[dot_pos + 3] {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos + 4] {\n     \
    \   return String::from(\"No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos\
    \ + 5] {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_2]\
    \ != file_name[dot_pos + 6] {\n        return String::from(\"No\");\n    }\n \
    \   if file_name[dot_pos_2] != file_name[dot_pos + 7] {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos + 8] {\n     \
    \   return String::from(\"No\");\n    }\n    if file_name[dot_pos_2] != file_name[dot_pos\
    \ + 9] {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_2]\
    \ != file_name[dot_pos + 10] {\n        return String::from(\"No\");\n    }\n\
    \    if \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgolpnaj0.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpgolpnaj0.rs:28:42\n   |\n28 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n29 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpgolpnaj0.rs:32:44\n   |\n32 |     let\
    \ mut dot_pos_2 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n33 |     if dot_pos_2 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected expression, found `}`\n  --> /tmp/tmpgolpnaj0.rs:82:1\n\
    \   |\n82 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgolpnaj0.rs:86:17\n   |\n86 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgolpnaj0.rs:86:25\n \
    \  |\n86 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgolpnaj0.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgolpnaj0.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgolpnaj0.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgolpnaj0.rs:88:25\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this sc"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of(\"\
    .\");\n    let mut dot_pos_end = file_name_chars.len();\n    if dot_pos == String::new().len()\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos == 0 {\n    \
    \    return String::from(\"No\");\n    }\n    if dot_pos == dot_pos_end {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = 0;\n \
    \   let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let\
    \ mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut\
    \ dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end\
    \ = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let\
    \ mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut\
    \ dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start\
    \ = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let\
    \ mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut\
    \ dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end\
    \ = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let\
    \ mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut\
    \ dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start\
    \ = 0;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n\
    \    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let\
    \ mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut\
    \ dot_pos_end = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end\
    \ = dot_pos_end;\n    let mut dot_pos_start = 0;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1otyz257.rs:74:11\n   |\n\
    74 |     let mu\n   |           ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1otyz257.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1otyz257.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1otyz257.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1otyz257.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1otyz257.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1otyz257.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1otyz257.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1otyz257.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1otyz257.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1otyz257.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  -"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    if dot_name.chars().any(|c| c != '.') {\n               \
    \         String::from(\"No\")\n                    } else {\n               \
    \         if dot_name.len() != dot_pos {\n                            String::from(\"\
    No\")\n                        } else {\n                            if dot_name.chars().any(|c|\
    \ c != 'txt' && c != 'exe' && c != 'dll') {\n                                String::from(\"\
    No\")\n                            } else {\n                                String::from(\"\
    Yes\")\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp1wlidkru.rs:38:62\n\
    \   |\n38 | ...                   if dot_name.chars().any(|c| c != 'txt' && c\
    \ != 'exe' && c != 'dll') {\n   |                                            \
    \            ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n38 |                             if dot_name.chars().any(|c| c\
    \ != \"txt\" && c != 'exe' && c != 'dll') {\n   |                            \
    \                                  ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp1wlidkru.rs:38:76\n   |\n38 | ...     \
    \              if dot_name.chars().any(|c| c != 'txt' && c != 'exe' && c != 'dll')\
    \ {\n   |                                                                    \
    \  ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n38 |                             if dot_name.chars().any(|c| c != 'txt'\
    \ && c != \"exe\" && c != 'dll') {\n   |                                     \
    \                                       ~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp1wlidkru.rs:38:90\n   |\n38 | ...\
    \                   if dot_name.chars().any(|c| c != 'txt' && c != 'exe' && c\
    \ != 'dll') {\n   |                                                          \
    \                          ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n38 |                             if dot_name.chars().any(|c|\
    \ c != 'txt' && c != 'exe' && c != \"dll\") {\n   |                          \
    \                                                                ~~~~~\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp1wlidkru.rs:19:46\n   |\n19\
    \ |         let mut dot_pos = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n20 |         if dot_pos == String::npos\
    \ {\n   |         -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp1wlidkru.rs:27:54\n   |\n27 |                 let mut dot_pos =\
    \ file_name.find('.')\n   |                                  "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_digit()) {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_digit()) {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp0icq6ksy.rs:107:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n76  |  \
    \   if file_name.chars().any(|c| !c.is_digit()) {\n    |                     \
    \                            - this delimiter might not be properly closed...\n\
    77  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    107 | }\n    |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp0icq6ksy.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0icq6ksy.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0icq6ksy.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0icq6ksy.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0icq6ksy.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0icq6ksy.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0icq6ksy.rs:84:17\n   |\n84 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0icq6ksy.rs:84:25\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0icq6ksy.rs:85:17\n   |\n85 |     as"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_letter = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n                    if dot_letter < 'a' ||\
    \ dot_letter > 'z' {\n                        String::from(\"No\")\n         \
    \           } else {\n                        String::from(\"Yes\")\n        \
    \            }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp8617wblt.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp8617wblt.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8617wblt.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8617wblt.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8617wblt.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8617wblt.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8617wblt.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8617wblt.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8617wblt.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8617wblt.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_len = file_name.len();\n    let mut\
    \ dot_len2 = dot_len;\n    while dot_len2 > dot_pos {\n        if file_name[dot_pos]\
    \ >= 'a' && file_name[dot_pos] <= 'z' {\n            dot_len2 -= 1;\n        }\n\
    \        if file_name[dot_pos] >= 'A' && file_name[dot_pos] <= 'Z' {\n       \
    \     dot_len2 -= 1;\n        }\n        if file_name[dot_pos] >= '0' && file_name[dot_pos]\
    \ <= '9' {\n            dot_len2 -= 1;\n        }\n        dot_pos += 1;\n   \
    \ }\n    if dot_len2 > dot_pos {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos == dot_len {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name[dot_pos] != '0' && file_name[dot_pos] != '1' {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name[dot_pos] == '0' {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name[dot_pos] == '1' {\n        return\
    \ String::from(\"Yes\");\n    }\n    if file_name[dot_pos] == '.' {\n        let\
    \ mut dot_pos = dot_pos + 1;\n        let mut dot_len = file_name.len();\n   \
    \     let mut dot_len2 = dot_len;\n        while dot_len2 > dot_pos {\n      \
    \      if file_name[dot_pos] >= 'a' && file_name[dot_pos] <= 'z' {\n         \
    \       dot_len2 -= 1;\n            }\n            if file_name[dot_pos] >= 'A'\
    \ && file_name[dot_pos] <= 'Z' {\n                dot_len2 -= 1;\n           \
    \ }\n            if file_name[dot_pos] >= '0' && file_name[dot_pos] <= '9' {\n\
    \                dot_len2 -= 1;\n            }\n            dot_pos += 1;\n  \
    \      }\n        if dot_len2 > dot_pos {\n            return String::from(\"\
    No\");\n        }\n        if dot_pos == dot_len {\n            return String::from(\"\
    No\");\n        }\n        if file_name[dot_pos] != '0' && file_name[dot_pos]\
    \ != '1' {\n            return String::from(\"No\");\n        }\n        if file_name[dot_pos]\
    \ == '0' {\n            return String::from(\"No\");\n        }\n        if file_name[dot_pos\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9nbiivmi.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n51  |  \
    \   if file_name[dot_pos] == '.' {\n    |                                  - this\
    \ delimiter might not be properly closed...\n...\n80  | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n110 | }\n    |   ^\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp9nbiivmi.rs:17:42\n   |\n17 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp9nbiivmi.rs:80:1\n\
    \   |\n79 |         if file_name[dot_pos\n   |         -- this `if` expression\
    \ has a condition, but no block\n80 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp9nbiivmi.rs:79:21\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n79 |         if file_name[dot_pos\n\
    \   |                     ^ unclosed delimiter\n80 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9nbiivmi.rs:84:17\n\
    \   |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9nbiivmi.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9nbiivmi.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9nbiivmi.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this sco"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        if file_name.chars().first().unwrap().is_ascii_letter() {\n\
    \            return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 2 {\n        if file_name.chars().first().unwrap().is_ascii_letter() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_letter() {\n         \
    \   if file_name.chars().first().unwrap().to_ascii_lowercase() !=\n          \
    \      file_name.chars().last().unwrap().to_ascii_lowercase() {\n            \
    \    return String::from(\"No\");\n            }\n        }\n    }\n    if file_name.chars().count()\
    \ == 3 {\n        if file_name.chars().first().unwrap().is_ascii_letter() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_letter() &&\n        \
    \    file_name.chars().first().unwrap().to_ascii_lowercase() !=\n            \
    \    file_name.chars().last().unwrap().to_ascii_lowercase() &&\n            file_name.chars().first().unwrap().to_ascii_lowercase()\
    \ !=\n                file_name.chars().last().unwrap().to_ascii_lowercase() {\n\
    \            return String::from(\"No\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 4 {\n        if file_name.chars().first().unwrap().is_ascii_letter() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_letter() &&\n        \
    \    file_name.chars().first().unwrap().to_ascii_lowercase() !=\n            \
    \    file_name.chars().last().unwrap().to_ascii_lowercase() &&\n            file_name.chars().first().unwrap().to_ascii_lowercase()\
    \ !=\n                file_name.chars().last().unwrap().to_ascii_lowercase() &&\n\
    \            file_name.chars().first().unwrap().to_ascii_lowercase() !=\n    \
    \            file_name.chars().last().unwrap().to_ascii_lowercase() {\n      \
    \      return String::from(\"No\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 5 {\n        if file_name.chars().first().unwrap().is_ascii_letter() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_letter() &&\n        \
    \    file_name.chars().first().unwrap().to_ascii_lowercase() !=\n            \
    \    file_name.chars().last().unwrap().to_ascii_lowercase() &&\n            file_name.chars().first().unwrap().to_ascii_lowercase()\
    \ !=\n                file_name.chars().last().unwrap().to_ascii_lowercase() &&\n\
    \            file_name.chars().first().unwrap().to_ascii_lowercase() !=\n    \
    \            file_name.chars().\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3906a2zp.rs:97:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n31 |      \
    \           file_name.chars().last().unwrap().to_ascii_lowercase() {\n   |   \
    \                                                                     - this delimiter\
    \ might not be properly closed...\n32 |                 return String::from(\"\
    No\");\n33 |             }\n   |             - ...as it matches this but it has\
    \ different indentation\n...\n97 | }\n   |   ^\n\nerror: unexpected token: `}`\n\
    \  --> /tmp/tmp3906a2zp.rs:67:1\n   |\n67 | }\n   | ^\n\nerror: expected `{`,\
    \ found `}`\n  --> /tmp/tmp3906a2zp.rs:67:1\n   |\n59 |         if file_name.chars().first().unwrap().is_ascii_letter()\
    \ &&\n   |         -- this `if` expression has a condition, but no block\n...\n\
    67 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp3906a2zp.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3906a2zp.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3906a2zp.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3906a2zp.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3906a2zp.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3906a2zp.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in th"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    if dot_pos_start == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start_end = dot_pos_end;\n    if dot_pos_start_end\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_start_end_2 = dot_pos_start_end;\n    if dot_pos_start_end_2 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_start_end_3\
    \ = dot_pos_start_end_2;\n    if dot_pos_start_end_3 == String::npos { \n    \
    \    return String::from(\"No\");\n    }\n    let mut dot_pos_start_end_4 = dot_pos_start_end_3;\n\
    \    if dot_pos_start_end_4 == String::npos { \n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_start_end_5 = dot_pos_start_end_4;\n    if\
    \ dot_pos_start_end_5 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start_end_6 = dot_pos_start_end_5;\n    if dot_pos_start_end_6\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_start_end_7 = dot_pos_start_end_6;\n    if dot_pos_start_end_7 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_start_end_8\
    \ = dot_pos_start_end_7;\n    if dot_pos_start_end_8 == String::npos { \n    \
    \    return String::from(\"No\");\n    }\n    let mut dot_pos_start_end_9 = dot_pos_start_end_8;\n\
    \    if dot_pos_start_end_9 == String::npos { \n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_start_end_10 = dot_pos_start_end_9;\n    if\
    \ dot_pos_start_end_10 == String::npos { \n        return String::from(\"No\"\
    );\n    }\n    let mut dot_pos_start_end_11 = dot_pos_start_end_10;\n    if dot_pos_start_end_11\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_start_end_12 = dot_pos_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp060w0nry.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp060w0nry.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found `}`\n  --> /tmp/tmp060w0nry.rs:73:44\n   |\n73 |     let\
    \ mut dot_pos_start_end_12 = dot_pos_\n   |                                  \
    \          ^ help: add `;` here\n74 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_pos_` in this scope\n  --> /tmp/tmp060w0nry.rs:73:36\n\
    \   |\n73 |     let mut dot_pos_start_end_12 = dot_pos_\n   |                \
    \                    ^^^^^^^^ help: a local variable with a similar name exists:\
    \ `dot_pos`\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp060w0nry.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp060w0nry.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp060w0nry.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp060w0nry.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp060w0nry.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp060w0nry.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_len\
    \ = file_name.len();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_next = dot_pos + 1;\n    while dot_pos_next < file_name_len {\n\
    \        if file_name[dot_pos_next] >= 'a' && file_name[dot_pos_next] <= 'z' {\n\
    \            dot_pos_next += 1;\n        } else if file_name[dot_pos_next] >=\
    \ 'A' && file_name[dot_pos_next] <= 'Z' {\n            dot_pos_next += 1;\n  \
    \      } else {\n            break;\n        }\n    }\n    \n    if dot_pos_next\
    \ == file_name_len {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_prev = dot_pos - 1;\n    while dot_pos_prev >= 0 {\n        if file_name[dot_pos_prev]\
    \ >= 'a' && file_name[dot_pos_prev] <= 'z' {\n            dot_pos_prev -= 1;\n\
    \        } else if file_name[dot_pos_prev] >= 'A' && file_name[dot_pos_prev] <=\
    \ 'Z' {\n            dot_pos_prev -= 1;\n        } else {\n            break;\n\
    \        }\n    }\n    \n    if dot_pos_prev == 0 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_prev < dot_pos {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos == dot_pos_prev + 1 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos == dot_pos_prev + 2 {\n        return String::from(\"\
    Yes\");\n    }\n    \n    if dot_pos == dot_pos_prev + 3 {\n        return String::from(\"\
    Yes\");\n    }\n    \n    return String::from(\"No\");\n}\n\nfn main() {\n   \
    \ let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpt0dssof_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpt0dssof_.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0dssof_.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0dssof_.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0dssof_.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0dssof_.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0dssof_.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt0dssof_.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt0dssof_.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt0dssof_.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt0dssof_.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_start = dot_pos;\n    while dot_pos_start != dot_pos_end {\n       \
    \ if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z' ||\n \
    \           file_name[dot_pos_start] >= 'A' && file_name[dot_pos_start] <= 'Z'\
    \ {\n            dot_pos_start += 1;\n        } else {\n            return String::from(\"\
    No\");\n        }\n    }\n    if file_name[dot_pos_start] == '.' {\n        if\
    \ file_name[dot_pos_start + 1] == '.' {\n            if file_name[dot_pos_start\
    \ + 2] == '.' {\n                return String::from(\"Yes\");\n            }\
    \ else {\n                return String::from(\"No\");\n            }\n      \
    \  } else {\n            return String::from(\"No\");\n        }\n    } else {\n\
    \        return String::from(\"No\");\n    }\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfij80fzt.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfij80fzt.rs:19:46\n   |\n19 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n20 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfij80fzt.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfij80fzt.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfij80fzt.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfij80fzt.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfij80fzt.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfij80fzt.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfij80fzt.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfij80fzt.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in th"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp892_7sr1.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String\n84 \
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n114\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp892_7sr1.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp892_7sr1.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp892_7sr1.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos { \n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let mut dot_pos_start2 = dot_pos_start;\n\
    \    let mut dot_pos_end2 = dot_pos_end;\n    let mut dot_pos_start3 = dot_pos_start;\n\
    \    let mut dot_pos_end3 = dot_pos_end;\n    let mut dot_pos_start4 = dot_pos_start;\n\
    \    let mut dot_pos_end4 = dot_pos_end;\n    let mut dot_pos_start5 = dot_pos_start;\n\
    \    let mut dot_pos_end5 = dot_pos_end;\n    let mut dot_pos_start6 = dot_pos_start;\n\
    \    let mut dot_pos_end6 = dot_pos_end;\n    let mut dot_pos_start7 = dot_pos_start;\n\
    \    let mut dot_pos_end7 = dot_pos_end;\n    let mut dot_pos_start8 = dot_pos_start;\n\
    \    let mut dot_pos_end8 = dot_pos_end;\n    let mut dot_pos_start9 = dot_pos_start;\n\
    \    let mut dot_pos_end9 = dot_pos_end;\n    let mut dot_pos_start10 = dot_pos_start;\n\
    \    let mut dot_pos_end10 = dot_pos_end;\n    let mut dot_pos_start11 = dot_pos_start;\n\
    \    let mut dot_pos_end11 = dot_pos_end;\n    let mut dot_pos_start12 = dot_pos_start;\n\
    \    let mut dot_pos_end12 = dot_pos_end;\n    let mut dot_pos_start13 = dot_pos_start;\n\
    \    let mut dot_pos_end13 = dot_pos_end;\n    let mut dot_pos_start14 = dot_pos_start;\n\
    \    let mut dot_pos_end14 = dot_pos_end;\n    let mut dot_pos_start15 = dot_pos_start;\n\
    \    let mut dot_pos_end15 = dot_pos_end;\n    let mut dot_pos_start16 = dot_pos_start;\n\
    \    let mut dot_pos_end16 = dot_pos_end;\n    let mut dot_pos_start17 = dot_pos_start;\n\
    \    let mut dot_pos_end17 = dot_pos_end;\n    let mut dot_pos_start18 = dot_pos_start;\n\
    \    let mut dot_pos_end18 = dot_pos_end;\n    let mut dot_pos_start19 = dot_pos_start;\n\
    \    let mut dot_pos_end19 = dot_pos_end;\n    let mut dot_pos_start20 = dot_pos_start;\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6cu1p2k4.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp6cu1p2k4.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6cu1p2k4.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6cu1p2k4.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6cu1p2k4.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6cu1p2k4.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6cu1p2k4.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6cu1p2k4.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6cu1p2k4.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6cu1p2k4.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in th"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n\
    \        if dot_pos == String::npos {\n            String::from(\"No\")\n    \
    \    } else {\n            let mut first_letter = file_name[..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_pos];\n\
    \                    if dot_name.chars().any(|c| c != '.') {\n               \
    \         String::from(\"No\")\n                    } else {\n               \
    \         let mut dot_pos = dot_name.find('.')\n                        if dot_pos\
    \ == String::npos {\n                            String::from(\"No\")\n      \
    \                  } else {\n                            if dot_name[..dot_pos].chars().any(|c|\
    \ c != '.') {\n                                String::from(\"No\")\n        \
    \                    } else {\n                                String::from(\"\
    Yes\")\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmproc12t5v.rs:19:46\n\
    \   |\n19 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmproc12t5v.rs:27:54\n   |\n27 |            \
    \     let mut dot_pos = file_name.find('.')\n   |                            \
    \                          ^ help: add `;` here\n28 |                 if dot_pos\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmproc12t5v.rs:35:61\n   |\n35 |       \
    \                  let mut dot_pos = dot_name.find('.')\n   |                \
    \                                             ^ help: add `;` here\n36 |     \
    \                    if dot_pos == String::npos {\n   |                      \
    \   -- unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmproc12t5v.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmproc12t5v.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmproc12t5v.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmproc12t5v.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmproc12t5v.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmproc12t5v.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos { \n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ { \n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdu7mapxk.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos { \n    |                                  \
    \ - this delimiter might not be properly closed...\n79  | \n80  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\
    \ \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpdu7mapxk.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:29:44\n   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n30 |  \
    \   if dot_pos_4 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpdu7mapxk.rs:33:44\n   |\n33 |     let\
    \ mut dot_pos_5 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n34 |     if dot_pos_5 == String::npos { \n  \
    \ |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpdu7mapxk.rs:37:44\n   |\n37 |     let mut dot_pos_6 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n38 |  \
    \   if dot_pos_6 == String::npos { \n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start_letter\
    \ = dot_pos_start.is_ascii_letter();\n        let mut dot_pos_end_letter = dot_pos_end.is_ascii_letter();\n\
    \        if dot_pos_start_letter && dot_pos_end_letter {\n            break;\n\
    \        }\n        if dot_pos_start_letter {\n            dot_pos_start_letter\
    \ = false;\n        }\n        if dot_pos_end_letter {\n            dot_pos_end_letter\
    \ = false;\n        }\n        if dot_pos_start == dot_pos_end {\n           \
    \ break;\n        }\n        dot_pos_start += 1;\n        dot_pos_end += 1;\n\
    \    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp98lzcjy8.rs:89:29\n\
    \    |\n89  |           return String::from(\"\n    |  _____________________________^\n\
    90  | | }\n91  | |\n92  | | fn main() {\n...   |\n119 | |     assert_eq!({left},\
    \ {right});\n120 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut counter = 0;\n\
    \    let mut current_char: char;\n    for current_char in file_name {\n      \
    \  if current_char == '.' {\n            if counter > 2 {\n                return\
    \ String::from(\"No\");\n            }\n            counter += 1;\n        }\n\
    \        if current_char >= 'a' && current_char <= 'z' {\n            if counter\
    \ > 2 {\n                return String::from(\"No\");\n            }\n       \
    \     counter += 1;\n        }\n        if current_char >= 'A' && current_char\
    \ <= 'Z' {\n            if counter > 2 {\n                return String::from(\"\
    No\");\n            }\n            counter += 1;\n        }\n    }\n    if counter\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\"\
    )\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdywqwrxs.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdywqwrxs.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdywqwrxs.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdywqwrxs.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdywqwrxs.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdywqwrxs.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdywqwrxs.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdywqwrxs.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdywqwrxs.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdywqwrxs.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdywqwrxs.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    else if dot_pos == 0 {\
    \ return String::from(\"No\") }\n    else if file_name[dot_pos - 1] != String::from('0')\
    \ && file_name[dot_pos - 1] != String::from('9') {\n        return String::from(\"\
    No\")\n    }\n    let mut first_letter = String::from('a')\n    if file_name[0]\
    \ >= 'a' && file_name[0] <= 'z' {\n        first_letter = String::from('a')\n\
    \    }\n    else if file_name[0] >= 'A' && file_name[0] <= 'Z' {\n        first_letter\
    \ = String::from('A')\n    }\n    else { return String::from(\"No\") }\n    let\
    \ mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { return String::from(\"\
    No\") }\n    else if dot_pos == 0 { return String::from(\"No\") }\n    else if\
    \ file_name[dot_pos - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9')\
    \ {\n        return String::from(\"No\")\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    else if dot_pos\
    \ == 0 { return String::from(\"No\") }\n    else if file_name[dot_pos - 1] !=\
    \ String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n       \
    \ return String::from(\"No\")\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    else if dot_pos\
    \ == 0 { return String::from(\"No\") }\n    else if file_name[dot_pos - 1] !=\
    \ String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n       \
    \ return String::from(\"No\")\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    else if dot_pos\
    \ == 0 { return String::from(\"No\") }\n    else if file_name[dot_pos - 1] !=\
    \ String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n       \
    \ return String::from(\"No\")\n    }\n    let mut dot_pos = \n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfil3e0g2.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfil3e0g2.rs:23:45\n   |\n23 |     let\
    \ mut first_letter = String::from('a')\n   |                                 \
    \            ^ help: add `;` here\n24 |     if file_name[0] >= 'a' && file_name[0]\
    \ <= 'z' {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmpfil3e0g2.rs:31:42\n   |\n31 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n32 |    \
    \ if dot_pos == String::npos { return String::from(\"No\") }\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfil3e0g2.rs:37:42\n\
    \   |\n37 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n38 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfil3e0g2.rs:43:42\n   |\n43 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n44 |     if dot_pos == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfil3e0g2.rs:49:42\n   |\n49 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n50 |    \
    \ if dot_pos == String::npos { return String::from(\"No\") }\n   |     -- unexpected\
    \ token\n\nerror: expected expression, found `}`\n  --> /tmp/tmpfil3e0g2.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfil3e0g2.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` i"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos;\n\
    \    while dot_pos_start != dot_pos_end {\n        let mut dot_pos_start = dot_pos_start;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        if dot_pos_start == dot_pos_end\
    \ {\n            dot_pos_end = dot_pos_end;\n        }\n        if dot_pos_start\
    \ < dot_pos_end {\n            if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n                dot_pos_start += 1;\n            }\n            if\
    \ file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end] <= 'z' {\n         \
    \       dot_pos_end -= 1;\n            }\n        }\n        if dot_pos_start\
    \ == dot_pos_end {\n            dot_pos_end = dot_pos_end;\n        }\n      \
    \  if dot_pos_start < dot_pos_end {\n            if file_name[dot_pos_start] >=\
    \ '0' && file_name[dot_pos_start] <= '9' {\n                dot_pos_start += 1;\n\
    \            }\n            if file_name[dot_pos_end] >= '0' && file_name[dot_pos_end]\
    \ <= '9' {\n                dot_pos_end -= 1;\n            }\n        }\n    \
    \    if dot_pos_start == dot_pos_end {\n            dot_pos_end = dot_pos_end;\n\
    \        }\n        if dot_pos_start < dot_pos_end {\n            if file_name[dot_pos_start]\
    \ != 'a' && file_name[dot_pos_start] != 'A' {\n                dot_pos_start +=\
    \ 1;\n            }\n            if file_name[dot_pos_end] != 'a' && file_name[dot_pos_end]\
    \ != 'A' {\n                dot_pos_end -= 1;\n            }\n        }\n    \
    \    if dot_pos_start == dot_pos_end {\n            dot_pos_end = dot_pos_end;\n\
    \        }\n        if dot_pos_start < dot_pos_end {\n            if file_name[dot_pos_start]\
    \ != 'z' && file_name[dot_pos_start] != 'Z' {\n                dot_pos_start +=\
    \ 1;\n            }\n            if file_name[dot_pos_end] != 'z' && file_name[dot_pos_end]\
    \ != 'Z' {\n                dot_pos_end -= 1;\n            }\n        }\n    \
    \    if dot_pos_start == dot_pos_end {\n            dot_pos_end = dot_pos_end;\n\
    \        }\n        if dot_pos_start < \n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpc6g_b32j.rs:107:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n26  |  \
    \   while dot_pos_start != dot_pos_end {\n    |                              \
    \          - this delimiter might not be properly closed...\n...\n77  | }\n  \
    \  | - ...as it matches this but it has different indentation\n...\n107 | }\n\
    \    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpc6g_b32j.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpc6g_b32j.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected expression, found `}`\n  --> /tmp/tmpc6g_b32j.rs:77:1\n   |\n77 | }\n\
    \   | ^ expected expression\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpc6g_b32j.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc6g_b32j.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc6g_b32j.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc6g_b32j.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc6g_b32j.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos;\n    dot_pos_end += 1;\n    while dot_pos_end < file_name.len()\
    \ {\n        let mut dot_pos_start = dot_pos;\n        dot_pos_start += 1;\n \
    \       if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z'\
    \ {\n            dot_pos_start += 1;\n        }\n        if file_name[dot_pos_start]\
    \ >= 'A' && file_name[dot_pos_start] <= 'Z' {\n            dot_pos_start += 1;\n\
    \        }\n        if file_name[dot_pos_start] == '.' {\n            break;\n\
    \        }\n    }\n    if dot_pos_start == dot_pos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_start = dot_pos;\n    dot_pos_start += 1;\n\
    \    while dot_pos_start < file_name.len() {\n        let mut dot_pos_end = dot_pos;\n\
    \        dot_pos_end += 1;\n        if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' {\n            dot_pos_end += 1;\n        }\n        if file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' {\n            dot_pos_end += 1;\n \
    \       }\n        if file_name[dot_pos_end] == '.' {\n            break;\n  \
    \      }\n    }\n    if dot_pos_end == dot_pos {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 1] >= '0' && file_name[dot_pos - 1]\
    \ <= '9' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] == '.' {\n        if file_name[dot_pos - 2] != 't' && file_name[dot_pos\
    \ - 2] != 'e' && file_name[dot_pos - 2] != 'x' && file_name[dot_pos - 2] != 't'\
    \ && file_name[dot_pos - 2] != 'e' && file_name[dot_pos - 2] != 'x' && file_name[dot_pos\
    \ - 2] != 't' && file_name[dot_pos - 2] != 'e' && file_name[dot_pos - 2] != 'x'\
    \ {\n            return String::from(\"No\");\n        }\n    }\n    if file_name[dot_pos\
    \ - 1] == 't' || file_name[dot_pos - 1] == 'e' || file_name[dot_pos - 1] == 'x'\
    \ {\n        if file_name[dot_pos - 2] != 't' && file_name[dot_po\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz3gv594s.rs:97:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n65 |     if\
    \ file_name[dot_pos - 1] == 't' || file_name[dot_pos - 1] == 'e' || file_name[dot_pos\
    \ - 1] == 'x' {\n   |                                                        \
    \                                                - this delimiter might not be\
    \ properly closed...\n66 |         if file_name[dot_pos - 2] != 't' && file_name[dot_po\n\
    67 | }\n   | - ...as it matches this but it has different indentation\n...\n97\
    \ | }\n   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpz3gv594s.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpz3gv594s.rs:67:1\n\
    \   |\n66 |         if file_name[dot_pos - 2] != 't' && file_name[dot_po\n   |\
    \         -- this `if` expression has a condition, but no block\n67 | }\n   |\
    \ ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpz3gv594s.rs:66:54\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - closing delimiter possibly meant for\
    \ this\n...\n66 |         if file_name[dot_pos - 2] != 't' && file_name[dot_po\n\
    \   |                                                      ^ unclosed delimiter\n\
    67 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `dot_pos_start` in this scope\n  --> /tmp/tmpz3gv594s.rs:36:8\n   |\n36 |  \
    \   if dot_pos_start == dot_pos {\n   |        ^^^^^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz3gv594s.rs:71:17\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz3gv594s.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n  "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().first().unwrap().is_ascii_letter() {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_ascii_letter() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_ascii_letter() && file_name.chars().last().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 2 && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first().unwrap().is_ascii_letter()\
    \ && file_name.chars().last().unwrap().is_ascii_letter() && file_name.chars().first\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpjn5xv625.rs:47:1\n   |\n\
    46 |     if file_name.chars().count() == 2 && file_name.chars().last().unwrap().is_ascii_letter()\
    \ && file_name.chars().first().unwrap().is_asc...\n   |     -- this `if` expression\
    \ has a condition, but no block\n47 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjn5xv625.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjn5xv625.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjn5xv625.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjn5xv625.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjn5xv625.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjn5xv625.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjn5xv625.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjn5xv625.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjn5xv625.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjn5xv625.rs:55:25\n   |\n55"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_len = file_name.len();\n    while dot_pos\
    \ < dot_len {\n        let mut dot_char = file_name[dot_pos];\n        if dot_char\
    \ == '.' {\n            dot_pos = dot_pos + 1;\n            dot_len = dot_len\
    \ - dot_pos;\n        } else {\n            break;\n        }\n    }\n    let\
    \ mut dot_char = file_name[dot_pos];\n    if dot_char != 'a' && dot_char != 'b'\
    \ && dot_char != 'c' && dot_char != 'd' && dot_char != 'e' && dot_char != 'f'\
    \ && dot_char != 'g' && dot_char != 'h' && dot_char != 'i' && dot_char != 'j'\
    \ && dot_char != 'k' && dot_char != 'l' && dot_char != 'm' && dot_char != 'n'\
    \ && dot_char != 'o' && dot_char != 'p' && dot_char != 'q' && dot_char != 'r'\
    \ && dot_char != 's' && dot_char != 't' && dot_char != 'u' && dot_char != 'v'\
    \ && dot_char != 'w' && dot_char != 'x' && dot_char != 'y' && dot_char != 'z'\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = dot_pos\
    \ + 1;\n    let mut dot_len = file_name.len();\n    while dot_pos < dot_len {\n\
    \        let mut dot_char = file_name[dot_pos];\n        if dot_char == '.' {\n\
    \            dot_pos = dot_pos + 1;\n            dot_len = dot_len - dot_pos;\n\
    \        } else {\n            break;\n        }\n    }\n    let mut dot_char\
    \ = file_name[dot_pos];\n    if dot_char != 'a' && dot_char != 'b' && dot_char\
    \ != 'c' && dot_char != 'd' && dot_char != 'e' && dot_char != 'f' && dot_char\
    \ != 'g' && dot_char != 'h' && dot_char != 'i' && dot_char != 'j' && dot_char\
    \ != 'k' && dot_char != 'l' && dot_char != 'm' && dot_char != 'n' && dot_char\
    \ != 'o' && dot_char != 'p' && dot_char != 'q' && dot_char != 'r' && dot_char\
    \ != 's' && dot_char != 't' && dot_char != 'u' && dot_char != 'v' && dot_char\
    \ != 'w' && dot_char != 'x' && dot_char != 'y' && dot_char != 'z' {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = dot_pos + 1;\n    let mut\
    \ dot_len = file_name.len();\n    while dot_pos < dot_\n}\n\nfn main() {\n   \
    \ let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmprajeeleg.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmprajeeleg.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmprajeeleg.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmprajeeleg.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprajeeleg.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprajeeleg.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprajeeleg.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprajeeleg.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprajeeleg.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprajeeleg.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprajeeleg.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    while dot_pos_start < dot_pos_end {\n        let mut letter = file_name[dot_pos_start];\n\
    \        if letter == '.' {\n            dot_pos_end_letter = true;\n        }\n\
    \        if dot_pos_start_letter {\n            if letter != 'a' && letter !=\
    \ 'A' && letter != 'z' && letter != 'Z' {\n                return String::from(\"\
    No\");\n            }\n        }\n        if dot_pos_end_letter {\n          \
    \  if letter != 'a' && letter != 'A' && letter != 'z' && letter != 'Z' {\n   \
    \             return String::from(\"No\");\n            }\n        }\n       \
    \ if letter != 'a' && letter != 'A' && letter != 'z' && letter != 'Z' {\n    \
    \        return String::from(\"No\");\n        }\n        dot_pos_start_letter\
    \ = dot_pos_start_letter;\n        dot_pos_end_letter = dot_pos_end_letter;\n\
    \        dot_pos_start += 1;\n    }\n    if dot_pos_start_letter {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_end_letter {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end + 1 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 2 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 3 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 4 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 5 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 6 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 7 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 8 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 9 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 10 {\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpqxqz9f0a.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n83  |  \
    \   if dot_pos_start == dot_pos_end + 10 {\n    |                            \
    \              - this delimiter might not be properly closed...\n84  | }\n   \
    \ | - ...as it matches this but it has different indentation\n...\n114 | }\n \
    \   |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqxqz9f0a.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpqxqz9f0a.rs:88:17\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqxqz9f0a.rs:88:25\n \
    \  |\n88 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqxqz9f0a.rs:89:17\n   |\n89 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqxqz9f0a.rs:89:25\n   |\n89 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqxqz9f0a.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqxqz9f0a.rs:90:25\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqxqz9f0a.rs:91:17\n  \
    \ |\n91 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in t"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut first_letter = file_name.chars().next().unwrap();\n    if first_letter\
    \ < 'a' || first_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_index = file_name\n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpb0vxexkt.rs:19:44\n\
    \   |\n19 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n20 |     if dot_index == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpb0vxexkt.rs:27:44\n   |\n27 |     let mut dot_index = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n28 |  \
    \   if dot_index == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpb0vxexkt.rs:31:44\n   |\n31 |     let\
    \ mut dot_index = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n32 |     if dot_index == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpb0vxexkt.rs:35:44\n\
    \   |\n35 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n36 |     if dot_index == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpb0vxexkt.rs:39:44\n   |\n39 |     let mut dot_index = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n40 |  \
    \   if dot_index == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpb0vxexkt.rs:43:44\n   |\n43 |     let\
    \ mut dot_index = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n44 |     if dot_index == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpb0vxexkt.rs:47:44\n\
    \   |\n47 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n48 |     if dot_index == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpb0vxexkt.rs:51:44\n   |\n51 |     let mut dot_index = file_name.find('.')\n\
    \   |                                            ^ help: add `;` her"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter =\
    \ String::new();\n    let mut dot_pos_start_letter_pos = 0;\n    let mut dot_pos_end_letter_pos\
    \ = 0;\n    let mut dot_pos_start_letter_pos_end = String::new();\n    let mut\
    \ dot_pos_end_letter_pos_end = String::new();\n    let mut dot_pos_start_letter_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_end_letter_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter_pos_end_letter_pos = 0;\n    let mut dot_pos_end_letter_pos_end_letter_pos\
    \ = 0;\n    let mut dot_pos_start_letter_pos_end_letter_pos_end = String::new();\n\
    \    let mut dot_pos_end_letter_pos_end_letter_pos_end = String::new();\n    let\
    \ mut dot_pos_start_letter_pos_end_letter_pos_end_letter = String::new();\n  \
    \  let mut dot_pos_end_letter_pos_end_letter_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos = 0;\n   \
    \ let mut dot_pos_end_letter_pos_end_letter_pos_end_pos = 0;\n    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos_end\
    \ = String::new();\n    let mut dot_pos_end_letter_pos_end_letter_pos_end_letter_pos_end\
    \ = String::new();\n    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos_end_letter_pos\
    \ = 0;\n    let mut dot_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_pos\
    \ = 0;\n    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos_end_letter_pos_end\
    \ = String::new();\n    let mut dot_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_letter_pos_end\
    \ = String::new();\n    let mut dot_pos_start_letter_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_letter_pos_end_letter\
    \ = String::new();\n\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpj_340q5_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpj_340q5_.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpj_340q5_.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj_340q5_.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj_340q5_.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj_340q5_.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj_340q5_.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj_340q5_.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj_340q5_.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj_340q5_.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj_340q5_.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    if file_name.len() < 4\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter())\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter()\
    \ || c != 'a' || c != 'z') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != 'A' || c != 'Z') { return String::from(\"No\")\
    \ }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9')\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter()\
    \ || c != '.') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != 'a'..='z' || c != 'A'..='Z') { return String::from(\"\
    No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9'\
    \ || c != '.' || c != 'a'..='z' || c != 'A'..='Z') { return String::from(\"No\"\
    ) }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9' ||\
    \ c != '.' || c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='exe' || c != 'dll')\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter()\
    \ || c != '0'..='9' || c != '.' || c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='exe'\
    \ || c != 'dll' || c != 'txt' || c != 'exe' || c != 'dll') { return String::from(\"\
    No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9'\
    \ || c != '.' || c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='exe' || c !=\
    \ 'dll' || c != 'txt' || c != 'exe' || c != 'dll' || c != 'txt' || c != 'exe'\
    \ || c != 'dll') { return String::from(\"No\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp70hdfipm.rs:27:129\n\
    \   |\n27 |     if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9'\
    \ || c != '.' || c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='...\n   | \
    \                                                                            \
    \                                                    ^^^^^\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n27 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != '.' || c != 'a'..='z' || c !=\
    \ 'A'..='Z' || c != \"txt\"..='exe' || c != 'dll') { return String::from(\"No\"\
    ) }\n   |                                                                    \
    \                                                             ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp70hdfipm.rs:27:137\n\
    \   |\n27 | ...|| c != '.' || c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='exe'\
    \ || c != 'dll') { return String::from(\"No\") }\n   |                       \
    \                                             ^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n27 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != '.' || c != 'a'..='z' || c !=\
    \ 'A'..='Z' || c != 'txt'..=\"exe\" || c != 'dll') { return String::from(\"No\"\
    ) }\n   |                                                                    \
    \                                                                     ~~~~~\n\n\
    error: character literal may only contain one codepoint\n  --> /tmp/tmp70hdfipm.rs:27:151\n\
    \   |\n27 | ... c != 'a'..='z' || c != 'A'..='Z' || c != 'txt'..='exe' || c !=\
    \ 'dll') { return String::from(\"No\") }\n   |                               \
    \                                     ^^^^^\n   |\nhelp: if you meant to write\
    \ a `str` literal, use double quotes\n   |\n27 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != '.' || c != 'a'..='z' || c !=\
    \ 'A'..='Z' || c != 'txt'..='exe' || c != \"dll\") { return String::from(\"No\"\
    ) }\n   |      "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_index = file_name_chars.find_first_of(\"\
    .\");\n    let mut dot_index_2 = file_name_chars.find_first_of(\".\", dot_index\
    \ + 1);\n    let mut dot_index_3 = file_name_chars.find_first_of(\".\", dot_index_2\
    \ + 1);\n    let mut dot_index_4 = file_name_chars.find_first_of(\".\", dot_index_3\
    \ + 1);\n    let mut dot_index_5 = file_name_chars.find_first_of(\".\", dot_index_4\
    \ + 1);\n    let mut dot_index_6 = file_name_chars.find_first_of(\".\", dot_index_5\
    \ + 1);\n    let mut dot_index_7 = file_name_chars.find_first_of(\".\", dot_index_6\
    \ + 1);\n    let mut dot_index_8 = file_name_chars.find_first_of(\".\", dot_index_7\
    \ + 1);\n    let mut dot_index_9 = file_name_chars.find_first_of(\".\", dot_index_8\
    \ + 1);\n    let mut dot_index_10 = file_name_chars.find_first_of(\".\", dot_index_9\
    \ + 1);\n    let mut dot_index_11 = file_name_chars.find_first_of(\".\", dot_index_10\
    \ + 1);\n    let mut dot_index_12 = file_name_chars.find_first_of(\".\", dot_index_11\
    \ + 1);\n    let mut dot_index_13 = file_name_chars.find_first_of(\".\", dot_index_12\
    \ + 1);\n    let mut dot_index_14 = file_name_chars.find_first_of(\".\", dot_index_13\
    \ + 1);\n    let mut dot_index_15 = file_name_chars.find_first_of(\".\", dot_index_14\
    \ + 1);\n    let mut dot_index_16 = file_name_chars.find_first_of(\".\", dot_index_15\
    \ + 1);\n    let mut dot_index_17 = file_name_chars.find_first_of(\".\", dot_index_16\
    \ + 1);\n    let mut dot_index_18 = file_name_chars.find_first_of(\".\", dot_index_17\
    \ + 1);\n    let mut dot_index_19 = file_name_chars.find_first_of(\".\", dot_index_18\
    \ + 1);\n    let mut dot_index_20 = file_name_chars.find_first_of(\".\", dot_index_19\
    \ + 1);\n    let mut dot_index_21 = file_name_chars.find_first_of(\".\", dot_index_20\
    \ + 1);\n    let mut dot_index_22 = file_name_chars.find_first_of(\".\", dot_index_21\
    \ + 1);\n    let mut dot_index_23 = file_name_chars.find_first_of(\".\", dot_index_22\
    \ + 1);\n    let mut dot_index_24 = file_name_chars.find_first_of(\".\", dot_index_23\
    \ + 1);\n    let mut dot_index_25 = file_name_chars.find_first_\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw21yicmx.rs:41:55\n   |\n\
    41 |     let mut dot_index_25 = file_name_chars.find_first_\n   |            \
    \                                           ^ help: add `;` here\n42 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw21yicmx.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw21yicmx.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw21yicmx.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw21yicmx.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw21yicmx.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw21yicmx.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw21yicmx.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw21yicmx.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw21yicmx.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw21yicmx.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                        "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    if file_name.len() < 3\
    \ { return String::from(\"No\") }\n    if file_name[0..dot_pos].is_empty() { return\
    \ String::from(\"No\") }\n    if file_name[dot_pos] != 'a' && file_name[dot_pos]\
    \ != 'A' { return String::from(\"No\") }\n    if file_name[dot_pos+1] != 'z' &&\
    \ file_name[dot_pos+1] != 'Z' { return String::from(\"No\") }\n    if file_name[dot_pos+2]\
    \ != 't' && file_name[dot_pos+2] != 'T' { return String::from(\"No\") }\n    if\
    \ file_name[dot_pos+3] != 'e' && file_name[dot_pos+3] != 'E' { return String::from(\"\
    No\") }\n    if file_name[dot_pos+4] != 'x' && file_name[dot_pos+4] != 'X' { return\
    \ String::from(\"No\") }\n    if file_name[dot_pos+5] != 't' && file_name[dot_pos+5]\
    \ != 'T' { return String::from(\"No\") }\n    if file_name[dot_pos+6] != 'e' &&\
    \ file_name[dot_pos+6] != 'E' { return String::from(\"No\") }\n    if file_name[dot_pos+7]\
    \ != 'd' && file_name[dot_pos+7] != 'D' { return String::from(\"No\") }\n    if\
    \ file_name[dot_pos+8] != 'l' && file_name[dot_pos+8] != 'L' { return String::from(\"\
    No\") }\n    if file_name[dot_pos+9] != 'l' && file_name[dot_pos+9] != 'L' { return\
    \ String::from(\"No\") }\n    if file_name[dot_pos+10] != 'l' && file_name[dot_pos+10]\
    \ != 'L' { return String::from(\"No\") }\n    if file_name[dot_pos+11] != 'l'\
    \ && file_name[dot_pos+11] != 'L' { return String::from(\"No\") }\n    if file_name[dot_pos+12]\
    \ != 'l' && file_name[dot_pos+12] != 'L' { return String::from(\"No\") }\n   \
    \ if file_name[dot_pos+13] != 'l' && file_name[dot_pos+13] != 'L' { return String::from(\"\
    No\") }\n    if file_name[dot_pos+14] != 'l' && file_name[dot_pos+14] != 'L' {\
    \ return String::from(\"No\") }\n    if file_name[dot_\n}\n\nfn main() {\n   \
    \ let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfznkwr1y.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmpfznkwr1y.rs:37:1\n   |\n36 |     if file_name[dot_\n\
    \   |     -- this `if` expression has a condition, but no block\n37 | }\n   |\
    \ ^ expected `{`\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpfznkwr1y.rs:36:17\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - closing delimiter possibly meant for\
    \ this\n...\n36 |     if file_name[dot_\n   |                 ^ unclosed delimiter\n\
    37 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpfznkwr1y.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfznkwr1y.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfznkwr1y.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfznkwr1y.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfznkwr1y.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfznkwr1y.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfznkwr1y.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right}"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjwrru_aj.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        let mut dot_pos_end = dot_pos_start;\n\
    \        while dot_pos_end < file_name.len() {\n            if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' ||\n                file_name[dot_pos_end]\
    \ >= 'A' && file_name[dot_pos_end] <= 'Z' ||\n                file_name[dot_pos_end]\
    \ >= '0' && file_name[dot_pos_end] <= '9' {\n                break;\n        \
    \    }\n            dot_pos_end += 1;\n        }\n        if dot_pos_end == dot_pos_start\
    \ {\n            return String::from(\"No\");\n        }\n        if dot_pos_start\
    \ == dot_pos {\n            return String::from(\"No\");\n        }\n        if\
    \ dot_pos_start < dot_pos_end {\n            dot_pos_start = dot_pos_end;\n  \
    \      }\n    }\n    return String::from(\"Yes\");\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjpmlaykh.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpjpmlaykh.rs:48:17\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpjpmlaykh.rs:48:25\n \
    \  |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpmlaykh.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpmlaykh.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpmlaykh.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpmlaykh.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpmlaykh.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpmlaykh.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpmlaykh.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpmlaykh.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_start = dot_pos + 1;\n    let mut dot_pos_end = dot_pos_end;\n    let\
    \ mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_pos_start;\n    let mut dot_pos_end = dot_pos_end;\n\
    \    let mut dot_pos_start = dot_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp3p9iyoqq.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp3p9iyoqq.rs:19:46\n   |\n19 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n20 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found `}`\n  --> /tmp/tmp3p9iyoqq.rs:65:33\n   |\n65 |     let mut dot_pos_start\
    \ = dot_\n   |                                 ^ help: add `;` here\n66 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `dot_` in this scope\n\
    \  --> /tmp/tmp3p9iyoqq.rs:65:29\n   |\n65 |     let mut dot_pos_start = dot_\n\
    \   |                             ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3p9iyoqq.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3p9iyoqq.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3p9iyoqq.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3p9iyoqq.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3p9iyoqq.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3p9iyoqq.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_owned();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos = file_name.find('.')\n    let mut dot_len = dot_pos - file_name.len()\
    \ - 1;\n    \n    while dot_len >= 0 {\n        let mut dot_pos = file_name.find('.')\n\
    \        let mut dot_len = dot_pos - file_name.len() - 1;\n        \n        if\
    \ dot_len == 0 {\n            dot_len = dot_pos;\n        }\n        \n      \
    \  if dot_len > 3 {\n            return String::from(\"No\");\n        }\n   \
    \     \n        let mut dot_pos = file_name.find('.')\n        let mut dot_len\
    \ = dot_pos - file_name.len() - 1;\n        \n        if dot_len == 0 {\n    \
    \        dot_len = dot_pos;\n        }\n        \n        if dot_len > 1 {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos = file_name.find('.')\n        let mut dot_len = dot_pos - file_name.len()\
    \ - 1;\n        \n        if dot_len == 0 {\n            dot_len = dot_pos;\n\
    \        }\n        \n        if dot_len > 0 {\n            return String::from(\"\
    No\");\n        }\n    }\n    \n    let mut dot_pos = file_name.find('.')\n  \
    \  let mut dot_len = dot_pos - file_name.len() - 1;\n    \n    while dot_len >=\
    \ 0 {\n        let mut dot_pos = file_name.find('.')\n        let mut dot_len\
    \ = dot_pos - file_name.len() - 1;\n        \n        if dot_len == 0 {\n    \
    \        dot_len = dot_pos;\n        }\n        \n        if dot_len > 3 {\n \
    \           return String::from(\"No\");\n        }\n        \n        let mut\
    \ dot_pos = file_name.find('.')\n        let mut dot_len = dot_pos - file_name.len()\
    \ - 1;\n        \n        if dot_len == 0 {\n            dot_len = dot_pos;\n\
    \        }\n        \n        if dot_len > 1 {\n            return String::from(\"\
    No\");\n        }\n        \n        let mut dot_pos = file_name.find('.')\n \
    \       let mut dot_len = dot_pos - file_name.len() - 1;\n        \n        if\
    \ dot_len == 0 {\n            dot_len = dot_pos;\n        }\n        \n      \
    \  if dot_len > 0 {\n            return String::from(\"No\");\n        }\n   \
    \ }\n    \n    let mut dot_pos = file_name.find('.')\n    let mut dot_len = dot_pos\
    \ - file_name.len() - 1;\n    \n    while dot_len >= 0 {\n        let mut \n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpu8yeuwnq.rs:133:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n101 |  \
    \   while dot_len >= 0 {\n    |                        - this delimiter might\
    \ not be properly closed...\n102 |         let mut \n103 | }\n    | - ...as it\
    \ matches this but it has different indentation\n...\n133 | }\n    |   ^\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpu8yeuwnq.rs:17:42\n   |\n17\
    \ |     let mut dot_pos = file_name.find('.')\n   |                          \
    \                ^ help: add `;` here\n18 |     if dot_pos == String::npos { \n\
    \   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n  -->\
    \ /tmp/tmpu8yeuwnq.rs:22:42\n   |\n22 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n23 |    \
    \ let mut dot_len = dot_pos - file_name.len() - 1;\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpu8yeuwnq.rs:26:46\n\
    \   |\n26 |         let mut dot_pos = file_name.find('.')\n   |              \
    \                                ^ help: add `;` here\n27 |         let mut dot_len\
    \ = dot_pos - file_name.len() - 1;\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmpu8yeuwnq.rs:37:46\n   |\n37\
    \ |         let mut dot_pos = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |         let mut dot_len =\
    \ dot_pos - file_name.len() - 1;\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmpu8yeuwnq.rs:48:46\n   |\n48\
    \ |         let mut dot_pos = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n49 |         let mut dot_len =\
    \ dot_pos - file_name.len() - 1;\n   |         --- unexpected token\n\nerror:\
    \ expected `;`, found keyword `let`\n  --> /tmp/tmpu8yeuwnq.rs:60:42\n   |\n60\
    \ |     let mut dot_pos = file_name.find('.')\n   |                          \
    \             "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    \n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    \n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_5\
    \ = file_name.find('.')\n    if dot_pos_5 == String::npos {\n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_7 = file_name.find('.')\n    if dot_pos_7 == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    \n    let mut dot_pos_8 = file_name.find('.')\n\
    \    if dot_pos_8 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    \n    let mut dot_pos_9 = file_name.find('.')\n    if dot_pos_9 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_10\
    \ = file_name.find('.')\n    if dot_pos_10 == String::npos {\n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos_11 = file_name.find('.')\n    if dot_pos_11\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    \n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 ==\
    \ String::npos {\n        return String::from(\"No\");\n    }\n    \n    let mut\
    \ dot_pos_15 = file_name.find('.')\n    if dot_pos_15 == String::npos {\n    \
    \    return String::from(\"No\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmppr9bc3bi.rs:89:29\n\
    \    |\n89  |           return String::from(\"No\n    |  _____________________________^\n\
    90  | | }\n91  | |\n92  | | fn main() {\n...   |\n119 | |     assert_eq!({left},\
    \ {right});\n120 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count()\
    \ == 1 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() {\n\
    \            return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 2 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() {\n      \
    \      return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 3 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() &&\n     \
    \       file_name.chars().last().unwrap().is_ascii_lowercase() {\n           \
    \ return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 4 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() &&\n     \
    \       file_name.chars().last().unwrap().is_ascii_lowercase() &&\n          \
    \  file_name.chars().last().unwrap().is_ascii_lowercase() {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count() ==\
    \ 5 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() &&\n     \
    \       file_name.chars().last().unwrap().is_ascii_lowercase() &&\n          \
    \  file_name.chars().last().unwrap().is_ascii_lowercase() &&\n            file_name.chars().last().unwrap().is_ascii_lowercase()\
    \ {\n            return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 6 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() &&\n     \
    \       file_name.chars().last().unwrap().is_ascii_lowercase() &&\n          \
    \  file_name.chars().last().unwrap().is_ascii_lowercase() &&\n            file_name.chars().last().unwrap().is_ascii_lowercase()\
    \ &&\n            file_name.chars().last().unwrap().is_ascii_lowercase() {\n \
    \           return String::from(\"Yes\");\n        }\n    }\n    if file_name.chars().count()\
    \ == 7 {\n        if file_name.chars().first().unwrap().is_ascii_lowercase() &&\n\
    \            file_name.chars().last().unwrap().is_ascii_lowercase() &&\n     \
    \       file_name.chars().last().unwrap().is_ascii_lowercase() &&\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpei_2atan.rs:101:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n29  |  \
    \           file_name.chars().last().unwrap().is_ascii_lowercase() {\n    |  \
    \                                                                  - this delimiter\
    \ might not be properly closed...\n30  |             return String::from(\"Yes\"\
    );\n31  |         }\n    |         - ...as it matches this but it has different\
    \ indentation\n...\n101 | }\n    |   ^\n\nerror: expected expression, found `}`\n\
    \  --> /tmp/tmpei_2atan.rs:71:1\n   |\n71 | }\n   | ^ expected expression\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpei_2atan.rs:75:17\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpei_2atan.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpei_2atan.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpei_2atan.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpei_2atan.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpei_2atan.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpei_2atan.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpei_2atan.rs:7"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    if file_name.len() > 3 {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        let mut dot_pos = file_name.find('.')?;\n\
    \        if dot_pos == file_name.len() - 1 {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_pos_next = file_name.find('.')?.next();\n\
    \        if dot_pos_next == None {\n            return String::from(\"No\");\n\
    \        }\n        if dot_pos_next.unwrap().unwrap() != 'a' && dot_pos_next.unwrap().unwrap()\
    \ != 'b' && dot_pos_next.unwrap().unwrap() != 'c' && dot_pos_next.unwrap().unwrap()\
    \ != 'd' && dot_pos_next.unwrap().unwrap() != 'e' && dot_pos_next.unwrap().unwrap()\
    \ != 'f' && dot_pos_next.unwrap().unwrap() != 'g' && dot_pos_next.unwrap().unwrap()\
    \ != 'h' && dot_pos_next.unwrap().unwrap() != 'i' && dot_pos_next.unwrap().unwrap()\
    \ != 'j' && dot_pos_next.unwrap().unwrap() != 'k' && dot_pos_next.unwrap().unwrap()\
    \ != 'l' && dot_pos_next.unwrap().unwrap() != 'm' && dot_pos_next.unwrap().unwrap()\
    \ != 'n' && dot_pos_next.unwrap().unwrap() != 'o' && dot_pos_next.unwrap().unwrap()\
    \ != 'p' && dot_pos_next.unwrap().unwrap() != 'q' && dot_pos_next.unwrap().unwrap()\
    \ != 'r' && dot_pos_next.unwrap().unwrap() != 's' && dot_pos_next.unwrap().unwrap()\
    \ != 't' && dot_pos_next.unwrap().unwrap() != 'u' && dot_pos_next.unwrap().unwrap()\
    \ != 'v' && dot_pos_next.unwrap().unwrap() != 'w' && dot_pos_next.unwrap().unwrap()\
    \ != 'x' && dot_pos_next.unwrap().unwrap() != 'y' && dot_pos_next.unwrap().unwrap()\
    \ != 'z' {\n            return String::from(\"No\");\n        }\n        if dot_pos_next.unwrap().unwrap()\
    \ != file_name[dot_pos + 1] {\n            return String::from(\"No\");\n    \
    \    }\n    }\n    if file_name.starts_with(\"a\") || file_name.starts_with(\"\
    A\") || file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n     \
    \   return String::from(\"No\");\n    }\n    if file_name.starts_with(\"txt\"\
    ) || file_name.starts_with(\"exe\") || file_name.starts_with(\"dll\") {\n    \
    \    return String::from(\"Yes\");\n    }\n    return String::from(\"No\");\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:47:17\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt7vuoqcp.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt7vuoqcp.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt7vuoqcp.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt7vuoqcp.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt7vuoqcp.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        let mut dot_pos_end = dot_pos_start;\n\
    \        while dot_pos_end < file_name.len() {\n            if file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n                dot_pos_end += 1;\n\
    \            } else if file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end]\
    \ <= 'Z' {\n                dot_pos_end += 1;\n            } else if file_name[dot_pos_end]\
    \ >= '0' && file_name[dot_pos_end] <= '9' {\n                dot_pos_end += 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if dot_pos_start == dot_pos_end {\n            break;\n        }\n      \
    \  let mut dot_pos_start = dot_pos_end;\n    }\n    if dot_pos_start == dot_pos\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos_start < dot_pos\
    \ {\n        dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos {\n   \
    \     return String::from(\"Yes\");\n    }\n    if dot_pos_end < dot_pos {\n \
    \       dot_pos_end += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n    \
    \    return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_pos_end\
    \ {\n        dot_pos_start += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n\
    \        return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_pos_end\
    \ {\n        dot_pos_end += 1;\n    }\n    if dot_pos_start == dot_pos_end {\n\
    \        return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_pos_end\
    \ {\n        dot_pos_end += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n \
    \       return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_pos_end\
    \ {\n        dot_pos_end += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n \
    \       return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_pos_end\
    \ {\n        dot_pos_end += 1;\n    }\n    if dot_pos_end == dot_pos_end {\n \
    \       return String::from(\"Yes\");\n    }\n    if dot_pos_start < dot_\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp4ro5waxb.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmp4ro5waxb.rs:87:1\n\
    \   |\n86 |     if dot_pos_start < dot_\n   |     -- this `if` expression has\
    \ a condition, but no block\n87 | }\n   | ^ expected `{`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4ro5waxb.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4ro5waxb.rs:91:25\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4ro5waxb.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4ro5waxb.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4ro5waxb.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4ro5waxb.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4ro5waxb.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4ro5waxb.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4ro5waxb.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right}"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_str\
    \ = file_name.to_string();\n    let mut dot_pos = file_name_str.find('.')\n  \
    \  if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_str = file_name_str.to_owned();\n    dot_str.truncate(dot_pos);\n\
    \    let mut dot_pos = dot_str.find('.')\n    if dot_pos == String::npos {\n \
    \       return String::from(\"No\");\n    }\n    let mut dot_str = dot_str.to_owned();\n\
    \    dot_str.truncate(dot_pos);\n    let mut dot_pos = dot_str.find('.')\n   \
    \ if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_str = dot_str.to_owned();\n    dot_str.truncate(dot_pos);\n \
    \   let mut dot_pos = dot_str.find('.')\n    if dot_pos == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_str = dot_str.to_owned();\n\
    \    dot_str.truncate(dot_pos);\n    let mut dot_pos = dot_str.find('.')\n   \
    \ if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_str = dot_str.to_owned();\n    dot_str.truncate(dot_pos);\n \
    \   let mut dot_pos = dot_str.find('.')\n    if dot_pos == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_str = dot_str.to_owned();\n\
    \    dot_str.truncate(dot_pos);\n    let mut dot_pos = dot_str.find('.')\n   \
    \ if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_str = dot_str.to_owned();\n    dot_str.truncate(dot_pos);\n \
    \   let mut dot_pos = dot_str.find('.')\n    if dot_pos == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_str = dot_str.to_owned();\n\
    \    dot_str.truncate(dot_pos);\n    let mut dot_pos = dot_str.find('.')\n   \
    \ if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_str = dot_str.to_owned();\n    dot_str.truncate(dot_pos);\n \
    \   let mut dot_pos = dot_str.find('.')\n    if dot_pos == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_str = dot_str.to_owned\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfeabair_.rs:17:46\n\
    \   |\n17 |     let mut dot_pos = file_name_str.find('.')\n   |              \
    \                                ^ help: add `;` here\n18 |     if dot_pos ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmpfeabair_.rs:23:40\n   |\n23 |     let mut dot_pos = dot_str.find('.')\n\
    \   |                                        ^ help: add `;` here\n24 |     if\
    \ dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpfeabair_.rs:29:40\n   |\n29 |     let mut\
    \ dot_pos = dot_str.find('.')\n   |                                        ^ help:\
    \ add `;` here\n30 |     if dot_pos == String::npos {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfeabair_.rs:35:40\n\
    \   |\n35 |     let mut dot_pos = dot_str.find('.')\n   |                    \
    \                    ^ help: add `;` here\n36 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfeabair_.rs:41:40\n   |\n41 |     let mut dot_pos = dot_str.find('.')\n\
    \   |                                        ^ help: add `;` here\n42 |     if\
    \ dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpfeabair_.rs:47:40\n   |\n47 |     let mut\
    \ dot_pos = dot_str.find('.')\n   |                                        ^ help:\
    \ add `;` here\n48 |     if dot_pos == String::npos {\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfeabair_.rs:53:40\n\
    \   |\n53 |     let mut dot_pos = dot_str.find('.')\n   |                    \
    \                    ^ help: add `;` here\n54 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfeabair_.rs:59:40\n   |\n59 |     let mut dot_pos = dot_str.find('.')\n\
    \   |                                        ^ help: add `;` here\n60 |     if\
    \ dot_pos == String::npos {\n   |     -- unexpected tok"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_len\
    \ = file_name.len();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter2 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter2 = dot_pos_end;\n    let mut dot_pos_start_letter3 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter3 = dot_pos_end;\n    let mut dot_pos_start_letter4\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter4 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter5 = dot_pos_start;\n    let mut dot_pos_end_letter5 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter6 = dot_pos_start;\n    let mut dot_pos_end_letter6\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter7 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter7 = dot_pos_end;\n    let mut dot_pos_start_letter8 =\
    \ dot_pos_start;\n    let mut dot_pos_end_letter8 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter9 = dot_pos_start;\n    let mut dot_pos_end_letter9 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter10 = dot_pos_start;\n    let mut dot_pos_end_letter10\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter11 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter11 = dot_pos_end;\n    let mut dot_pos_start_letter12\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter12 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter13 = dot_pos_start;\n    let mut dot_pos_end_letter13 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter14 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter14 = dot_pos_end;\n    let mut dot_pos_start_letter15 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter15 = dot_pos_end;\n    let mut dot_pos_start_letter16\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter16 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter17 = dot_pos_start;\n    let mut dot_pos_end_letter17 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter18 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter18 = dot_pos_end;\n    let mut dot_pos_start_letter\n}\n\n\
    fn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpuw8ymbd9.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpuw8ymbd9.rs:59:33\n\
    \   |\n59 |     let mut dot_pos_start_letter\n   |                           \
    \      ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuw8ymbd9.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuw8ymbd9.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuw8ymbd9.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuw8ymbd9.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {ri"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpl6bd71kn.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpl6bd71kn.rs:60:38\n\
    \   |\n60 |     let mut dot_pos_end_letter = dot_\n   |                      \
    \                ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `dot_` in this scope\n  --> /tmp/tmpl6bd71kn.rs:60:34\n  \
    \ |\n60 |     let mut dot_pos_end_letter = dot_\n   |                        \
    \          ^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl6bd71kn.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpl6bd71kn.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpl6bd71kn.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl6bd71kn.rs:68:25\n   |\n68 |    "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.len() < 3\
    \ {\n        return String::from(\"Yes\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") || file_name.starts_with(\"A\") {\n        return String::from(\"Yes\");\n\
    \    }\n    if file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        let mut dot_index = file_name.rfind(\".\");\n        if dot_index\
    \ == String::npos {\n            return String::from(\"Yes\");\n        }\n  \
    \      let dot_string = file_name[dot_index..].to_string();\n        if dot_string.len()\
    \ != 1 || dot_string.chars().any(|c| !c.is_letter()) {\n            return String::from(\"\
    No\");\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv3bkyfo6.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv3bkyfo6.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv3bkyfo6.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv3bkyfo6.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv3bkyfo6.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_index =\
    \ file_name.find('.')\n        if dot_index == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[..dot_index].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_index = file_name.find('.')\n\
    \                if dot_index == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_index];\n\
    \                    if dot_name.chars().any(|c| c != '.') {\n               \
    \         String::from(\"No\")\n                    } else {\n               \
    \         let mut dot_index = dot_name.find('.')\n                        if dot_index\
    \ == String::npos {\n                            String::from(\"No\")\n      \
    \                  } else {\n                            let mut dot_name = dot_name[..dot_index];\n\
    \                            if dot_name.chars().any(|c| c != '.') {\n       \
    \                         String::from(\"No\")\n                            }\
    \ else {\n                                String::from(\"Yes\")\n            \
    \                }\n                        }\n                    }\n       \
    \         }\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpcynfx_13.rs:19:48\n\
    \   |\n19 |         let mut dot_index = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n20 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpcynfx_13.rs:27:56\n   |\n27 |            \
    \     let mut dot_index = file_name.find('.')\n   |                          \
    \                              ^ help: add `;` here\n28 |                 if dot_index\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpcynfx_13.rs:35:63\n   |\n35 |       \
    \                  let mut dot_index = dot_name.find('.')\n   |              \
    \                                                 ^ help: add `;` here\n36 | \
    \                        if dot_index == String::npos {\n   |                \
    \         -- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpcynfx_13.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcynfx_13.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcynfx_13.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcynfx_13.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcynfx_13.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcynfx_13.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut dot_index =\
    \ file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n    let mut dot_index = file_name.find('.')\n    if dot_index == String::npos\
    \ { return String::from(\"No\") }\n    let mut dot_index = file_name.find('.')\n\
    \    if dot_index == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_index = file_name.find('.')\n    if dot_index == String::npos { return String::from(\"\
    No\") }\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:16:44\n\
    \   |\n16 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n17 |     if dot_index == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:18:44\n   |\n18 |     let\
    \ mut dot_index = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n19 |     if dot_index == String::npos { return\
    \ String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:20:44\n   |\n20 |     let mut\
    \ dot_index = file_name.find('.')\n   |                                      \
    \      ^ help: add `;` here\n21 |     if dot_index == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp2xqfxoij.rs:22:44\n   |\n22 |     let mut dot_index = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n23 |  \
    \   if dot_index == String::npos { return String::from(\"No\") }\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:24:44\n\
    \   |\n24 |     let mut dot_index = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n25 |     if dot_index == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:26:44\n   |\n26 |     let\
    \ mut dot_index = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n27 |     if dot_index == String::npos { return\
    \ String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp2xqfxoij.rs:28:44\n   |\n28 |     let mut\
    \ dot_index = file_name.find('.')\n   |                                      \
    \      ^ help: add `;` here\n29 |     if dot_index == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected toke"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\")\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\")\n\
    \    }\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ { \n        return String::from(\"No\")\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpn8v_gbjp.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `let`\n\
    \  --> /tmp/tmpn8v_gbjp.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ let mut dot_pos_end = file_name.find('.')\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpn8v_gbjp.rs:22:46\n   |\n\
    22 |     let mut dot_pos_end = file_name.find('.')\n   |                     \
    \                         ^ help: add `;` here\n23 |     if dot_pos_end == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpn8v_gbjp.rs:26:46\n   |\n26 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n27 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpn8v_gbjp.rs:30:46\n   |\n30\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n31 |     if dot_pos_end == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpn8v_gbjp.rs:34:46\n   |\n34 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n35 |\
    \     if dot_pos_end == String::npos { \n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpn8v_gbjp.rs:38:46\n   |\n38\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n39 |     if dot_pos_end == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpn8v_gbjp.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                      "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_len = file_name.len();\n    while dot_pos\
    \ < dot_len {\n        let mut dot_char = file_name[dot_pos];\n        if dot_char\
    \ == '.' {\n            dot_pos = dot_pos + 1;\n            dot_len = dot_len\
    \ - dot_pos;\n        } else {\n            break;\n        }\n    }\n    if dot_pos\
    \ == dot_len {\n        return String::from(\"No\");\n    }\n    let mut dot_char\
    \ = file_name[dot_pos];\n    if dot_char == '.' {\n        dot_pos = dot_pos +\
    \ 1;\n        dot_len = dot_len - dot_pos;\n    }\n    let mut dot_char = file_name[dot_pos];\n\
    \    if dot_char == '.' {\n        dot_pos = dot_pos + 1;\n        dot_len = dot_len\
    \ - dot_pos;\n    }\n    let mut dot_char = file_name[dot_pos];\n    if dot_char\
    \ == '.' {\n        dot_pos = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n\
    \    }\n    let mut dot_char = file_name[dot_pos];\n    if dot_char == '.' {\n\
    \        dot_pos = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n    }\n\
    \    let mut dot_char = file_name[dot_pos];\n    if dot_char == '.' {\n      \
    \  dot_pos = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n    }\n    let\
    \ mut dot_char = file_name[dot_pos];\n    if dot_char == '.' {\n        dot_pos\
    \ = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n    }\n    let mut dot_char\
    \ = file_name[dot_pos];\n    if dot_char == '.' {\n        dot_pos = dot_pos +\
    \ 1;\n        dot_len = dot_len - dot_pos;\n    }\n    let mut dot_char = file_name[dot_pos];\n\
    \    if dot_char == '.' {\n        dot_pos = dot_pos + 1;\n        dot_len = dot_len\
    \ - dot_pos;\n    }\n    let mut dot_char = file_name[dot_pos];\n    if dot_char\
    \ == '.' {\n        dot_pos = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n\
    \    }\n    let mut dot_char = file_name[dot_pos];\n    if dot_char == '.' {\n\
    \        dot_pos = dot_pos + 1;\n        dot_len = dot_len - dot_pos;\n    }\n\
    \    let mut dot_char = file_name[dot_pos];\n    if dot_char == '\n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmpztugi1h1.rs:86:20\n\
    \   |\n86 |     if dot_char == '\n   |                    ^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter = false;\n\
    \    while dot_pos_start != dot_pos_end {\n        if dot_pos_start == dot_pos_end\
    \ {\n            break;\n        }\n        let mut letter = file_name[dot_pos_start];\n\
    \        if letter == 'a' || letter == 'A' {\n            dot_pos_start_letter\
    \ = true;\n        }\n        if letter == 'z' || letter == 'Z' {\n          \
    \  dot_pos_end_letter = true;\n        }\n        if dot_pos_start_letter && dot_pos_end_letter\
    \ {\n            break;\n        }\n        dot_pos_start += 1;\n    }\n    if\
    \ dot_pos_start_letter || dot_pos_end_letter {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos_end + 1 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 2 {\n        return String::from(\"\
    Yes\");\n    }\n    if dot_pos_start == dot_pos_end + 3 {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp4lvknjzs.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp4lvknjzs.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4lvknjzs.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4lvknjzs.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4lvknjzs.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4lvknjzs.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4lvknjzs.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4lvknjzs.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4lvknjzs.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4lvknjzs.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4lvknjzs.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ == false {\n        return String::from(\"No\");\n    }\n    if file_name.chars().filter(|c|\
    \ c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z').count() > 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().filter(|c| c >= '0' &&\
    \ c <= '9').count() > 0 {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().filter(|c| c == '.').count() > 0 {\n        let mut dot_index\
    \ = file_name.rfind('.')\n        if dot_index == String::npos {\n           \
    \ return String::from(\"No\");\n        }\n        if dot_index == 0 {\n     \
    \       return String::from(\"No\");\n        }\n        let mut dot_index = dot_index\
    \ + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index =\
    \ dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index\
    \ = dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut\
    \ dot_index = dot_index + 1\n        let mut dot_index = dot_index + 1\n     \
    \   let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index +\
    \ 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index\
    \ + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index =\
    \ dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index\
    \ = dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut\
    \ dot_index = dot_index + 1\n        let mut dot_index = dot_index + 1\n     \
    \   let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index +\
    \ 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index\
    \ + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index =\
    \ dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index\
    \ = dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mut\
    \ dot_index = dot_index + 1\n        let mut dot_index = dot_index + 1\n     \
    \   let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index +\
    \ 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index = dot_index\
    \ + 1\n        let mut dot_index = dot_index + 1\n        let mut dot_index =\
    \ dot_index + 1\n        let mut dot_index = dot_index + 1\n        let mu\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4ivv4qyf.rs:104:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n28  |  \
    \   if file_name.chars().filter(|c| c == '.').count() > 0 {\n    |           \
    \                                                - this delimiter might not be\
    \ properly closed...\n...\n74  | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n104 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp4ivv4qyf.rs:29:49\n   |\n29 |         let mut dot_index = file_name.rfind('.')\n\
    \   |                                                 ^ help: add `;` here\n30\
    \ |         if dot_index == String::npos {\n   |         -- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4ivv4qyf.rs:36:42\n\
    \   |\n36 |         let mut dot_index = dot_index + 1\n   |                  \
    \                        ^ help: add `;` here\n37 |         let mut dot_index\
    \ = dot_index + 1\n   |         --- unexpected token\n\nerror: expected `;`, found\
    \ keyword `let`\n  --> /tmp/tmp4ivv4qyf.rs:37:42\n   |\n37 |         let mut dot_index\
    \ = dot_index + 1\n   |                                          ^ help: add `;`\
    \ here\n38 |         let mut dot_index = dot_index + 1\n   |         --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4ivv4qyf.rs:38:42\n\
    \   |\n38 |         let mut dot_index = dot_index + 1\n   |                  \
    \                        ^ help: add `;` here\n39 |         let mut dot_index\
    \ = dot_index + 1\n   |         --- unexpected token\n\nerror: expected `;`, found\
    \ keyword `let`\n  --> /tmp/tmp4ivv4qyf.rs:39:42\n   |\n39 |         let mut dot_index\
    \ = dot_index + 1\n   |                                          ^ help: add `;`\
    \ here\n40 |         let mut dot_index = dot_index + 1\n   |         --- unexpected\
    \ token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp4ivv4qyf.rs:40:42\n\
    \   |\n40 |         let mut dot_index = dot_index + 1\n   |                  \
    \                       "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = String::from(\"a\");\n    let mut last_letter = String::from(\"\
    z\");\n    let mut first_letter_pos = 0;\n    let mut last_letter_pos = 0;\n \
    \   \n    while first_letter_pos < dot_pos {\n        if first_letter == String::from(\"\
    a\") {\n            if file_name[first_letter_pos] >= 'a' && file_name[first_letter_pos]\
    \ <= 'z' {\n                first_letter_pos += 1;\n            } else {\n   \
    \             return String::from(\"No\");\n            }\n        } else if first_letter\
    \ == String::from(\"A\") {\n            if file_name[first_letter_pos] >= 'A'\
    \ && file_name[first_letter_pos] <= 'Z' {\n                first_letter_pos +=\
    \ 1;\n            } else {\n                return String::from(\"No\");\n   \
    \         }\n        } else {\n            return String::from(\"No\");\n    \
    \    }\n    }\n    \n    while last_letter_pos < dot_pos {\n        if last_letter\
    \ == String::from(\"a\") {\n            if file_name[last_letter_pos] >= 'a' &&\
    \ file_name[last_letter_pos] <= 'z' {\n                last_letter_pos += 1;\n\
    \            } else {\n                return String::from(\"No\");\n        \
    \    }\n        } else if last_letter == String::from(\"A\") {\n            if\
    \ file_name[last_letter_pos] >= 'A' && file_name[last_letter_pos] <= 'Z' {\n \
    \               last_letter_pos += 1;\n            } else {\n                return\
    \ String::from(\"No\");\n            }\n        } else {\n            return String::from(\"\
    No\");\n        }\n    }\n    \n    if file_name[dot_pos] >= '0' && file_name[dot_pos]\
    \ <= '9' {\n        return String::from(\"Yes\");\n    } else {\n        return\
    \ String::from(\"No\");\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpjk0muwdq.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpjk0muwdq.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpjk0muwdq.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjk0muwdq.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjk0muwdq.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjk0muwdq.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjk0muwdq.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjk0muwdq.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjk0muwdq.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjk0muwdq.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjk0muwdq.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_split\
    \ = file_name.split('.');\n    file_name_split.pop();\n    let mut file_name_split_2\
    \ = file_name_split.split_off(1);\n    file_name_split_2.pop();\n    let mut file_name_split_3\
    \ = file_name_split_2.split_off(1);\n    file_name_split_3.pop();\n    let mut\
    \ file_name_split_4 = file_name_split_3.split_off(1);\n    file_name_split_4.pop();\n\
    \    let mut file_name_split_5 = file_name_split_4.split_off(1);\n    file_name_split_5.pop();\n\
    \    let mut file_name_split_6 = file_name_split_5.split_off(1);\n    file_name_split_6.pop();\n\
    \    let mut file_name_split_7 = file_name_split_6.split_off(1);\n    file_name_split_7.pop();\n\
    \    let mut file_name_split_8 = file_name_split_7.split_off(1);\n    file_name_split_8.pop();\n\
    \    let mut file_name_split_9 = file_name_split_8.split_off(1);\n    file_name_split_9.pop();\n\
    \    let mut file_name_split_10 = file_name_split_9.split_off(1);\n    file_name_split_10.pop();\n\
    \    let mut file_name_split_11 = file_name_split_10.split_off(1);\n    file_name_split_11.pop();\n\
    \    let mut file_name_split_12 = file_name_split_11.split_off(1);\n    file_name_split_12.pop();\n\
    \    let mut file_name_split_13 = file_name_split_12.split_off(1);\n    file_name_split_13.pop();\n\
    \    let mut file_name_split_14 = file_name_split_13.split_off(1);\n    file_name_split_14.pop();\n\
    \    let mut file_name_split_15 = file_name_split_14.split_off(1);\n    file_name_split_15.pop();\n\
    \    let mut file_name_split_16 = file_name_split_15.split_off(1);\n    file_name_split_16.pop();\n\
    \    let mut file_name_split_17 = file_name_split_16.split_off(1);\n    file_name_split_17.pop();\n\
    \    let mut file_name_split_18 = file_name_split_17.split_off(1);\n    file_name_split_18.pop();\n\
    \    let mut file_name_split_19 = file_name_split_18.split_off(1);\n    file_name_split_19.pop();\n\
    \    let mut file_name_split_20 = file_name_split_19.split_off(1);\n    file_name_split_20.pop();\n\
    \    let mut file_name_split_21 = file_name_split_20.split_off(1);\n    file_name_split_21.pop();\n\
    \    let mut file_name_split_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdmas8tkg.rs:58:29\n   |\n\
    58 |     let mut file_name_split_\n   |                             ^ help: add\
    \ `;` here\n59 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpdmas8tkg.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdmas8tkg.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdmas8tkg.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdmas8tkg.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdmas8tkg.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdmas8tkg.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdmas8tkg.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdmas8tkg.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdmas8tkg.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdmas8tkg.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { return String::from(\"No\") }\n    let mut\
    \ dot_pos_start = dot_pos;\n    while dot_pos_start != dot_pos_end {\n       \
    \ let mut dot_pos_start = dot_pos_start;\n        while dot_pos_start != dot_pos_end\
    \ && file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z' {\n  \
    \          dot_pos_start += 1;\n        }\n        if dot_pos_start == dot_pos_end\
    \ {\n            return String::from(\"No\");\n        }\n        let mut dot_pos_end\
    \ = dot_pos_end;\n        while dot_pos_end != dot_pos_end && file_name[dot_pos_end]\
    \ >= 'a' && file_name[dot_pos_end] <= 'z' {\n            dot_pos_end -= 1;\n \
    \       }\n        if dot_pos_end == dot_pos_end {\n            return String::from(\"\
    No\");\n        }\n    }\n    if dot_pos_start == dot_pos_end {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_start = dot_pos_start;\n \
    \   while dot_pos_start != dot_pos_end && file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n        dot_pos_start += 1;\n    }\n    if dot_pos_start == dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end;\n\
    \    while dot_pos_end != dot_pos_end && file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' {\n        dot_pos_end -= 1;\n    }\n    if dot_pos_end == dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_start =\
    \ dot_pos_start;\n    while dot_pos_start != dot_pos_end && file_name[dot_pos_start]\
    \ >= 'A' && file_name[dot_pos_start] <= 'Z' {\n        dot_pos_start += 1;\n \
    \   }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"No\"\
    );\n    }\n    let mut dot_pos_end = dot_pos_end;\n    while dot_pos_end != dot_pos_end\
    \ && file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end] <= 'Z' {\n      \
    \  dot_pos_end -= 1;\n    }\n    if dot_pos_end == \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpzd7udwrr.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpzd7udwrr.rs:19:46\n   |\n19 |     let\
    \ mut dot_pos_end = file_name.find('.')\n   |                                \
    \              ^ help: add `;` here\n20 |     if dot_pos_end == String::npos {\
    \ return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ expression, found `}`\n  --> /tmp/tmpzd7udwrr.rs:67:1\n   |\n67 | }\n   | ^\
    \ expected expression\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzd7udwrr.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzd7udwrr.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzd7udwrr.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzd7udwrr.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzd7udwrr.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzd7udwrr.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzd7udwrr.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzd"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_len\
    \ = file_name.len();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    \n    if dot_pos_2 > dot_pos {\n\
    \        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos -\
    \ 1] < 'a' || file_name[dot_pos - 1] > 'z' {\n        return String::from(\"No\"\
    );\n    }\n    \n    if file_name[dot_pos_2-1] < 'a' || file_name[dot_pos_2-1]\
    \ > 'z' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos_2\
    \ - 1] == '.' {\n        file_name_len = dot_pos_2 - 1;\n    }\n    \n    if file_name[dot_pos_2\
    \ - 1] != '.' && file_name[dot_pos_2 - 1] != '.' && file_name[dot_pos_2 - 1] !=\
    \ 'txt' && file_name[dot_pos_2 - 1] != 'exe' && file_name[dot_pos_2 - 1] != 'dll'\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if file_name_len >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 2] != '0' && file_name[file_name_len - 2] != '1' {\n        return String::from(\"\
    No\");\n    }\n    \n    if file_name[file_name_len - 2] != '0' {\n        return\
    \ String::from(\"No\");\n    }\n    \n    if file_name[file_name_len - 1] != '0'\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[file_name_len\
    \ - 1] != '0' {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmptqp__03b.rs:43:106\n\
    \   |\n43 |     if file_name[dot_pos_2 - 1] != '.' && file_name[dot_pos_2 - 1]\
    \ != '.' && file_name[dot_pos_2 - 1] != 'txt' && file_name[dot_pos_2 - 1...\n\
    \   |                                                                        \
    \                                  ^^^^^\n   |\nhelp: if you meant to write a\
    \ `str` literal, use double quotes\n   |\n43 |     if file_name[dot_pos_2 - 1]\
    \ != '.' && file_name[dot_pos_2 - 1] != '.' && file_name[dot_pos_2 - 1] != \"\
    txt\" && file_name[dot_pos_2 - 1] != 'exe' && file_name[dot_pos_2 - 1] != 'dll'\
    \ {\n   |                                                                    \
    \                                      ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmptqp__03b.rs:43:143\n   |\n43 | ...ile_name[dot_pos_2\
    \ - 1] != 'txt' && file_name[dot_pos_2 - 1] != 'exe' && file_name[dot_pos_2 -\
    \ 1] != 'dll' {\n   |                                                        \
    \            ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n43 |     if file_name[dot_pos_2 - 1] != '.' && file_name[dot_pos_2\
    \ - 1] != '.' && file_name[dot_pos_2 - 1] != 'txt' && file_name[dot_pos_2 - 1]\
    \ != \"exe\" && file_name[dot_pos_2 - 1] != 'dll' {\n   |                    \
    \                                                                            \
    \                                               ~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmptqp__03b.rs:43:180\n   |\n43 |\
    \ ...ile_name[dot_pos_2 - 1] != 'exe' && file_name[dot_pos_2 - 1] != 'dll' {\n\
    \   |                                                                    ^^^^^\n\
    \   |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n\
    43 |     if file_name[dot_pos_2 - 1] != '.' && file_name[dot_pos_2 - 1] != '.'\
    \ && file_name[dot_pos_2 - 1] != 'txt' && file_name[dot_pos_2 - 1] != 'exe' &&\
    \ file_name[dot_pos_2 - 1] != \"dll\" {\n   |                                \
    \                                                 "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_letter()) {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_digit()) {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase().is_ascii())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase().is_ascii()) {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.chars().any(|c| !c.is_digit().is_ascii()) {\n       \
    \ return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase().is_ascii()\
    \ ||\n        !c.is_ascii_uppercase().is_ascii() ||\n        !c.is_digit().is_ascii())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase().is_ascii() ||\n        !c.is_ascii_uppercase().is_ascii()\
    \ ||\n        !c.is_digit().is_ascii() ||\n        !c.is_ascii_lowercase().is_ascii()\
    \ ||\n        !c.is_ascii_uppercase().is_ascii() ||\n        !c.is_digit().is_ascii())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase().is_ascii() ||\n        !c.is_ascii_uppercase().is_ascii()\
    \ ||\n        !c.is_digit().is_ascii() ||\n        !c.is_ascii_lowercase().is_ascii()\
    \ ||\n        !c.is_ascii_uppercase().is_ascii() ||\n        !c.is_digit().is_ascii()\
    \ ||\n        !c.is_ascii_lowercase().is_ascii() ||\n        !c.is_ascii_uppercase().is_ascii()\
    \ ||\n        !c.is_digit().is_ascii()) {\n        return String::from(\"No\"\
    );\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase().is_ascii()\
    \ ||\n        !c.is_ascii_uppercase().is_\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp5ncryg0h.rs:69:1\n   |\n\
    67 |     if file_name.chars().any(|c| !c.is_ascii_lowercase().is_ascii() ||\n\
    \   |     -- this `if` expression has a condition, but no block\n68 |        \
    \ !c.is_ascii_uppercase().is_\n69 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp5ncryg0h.rs:67:29\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n67 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase().is_ascii() ||\n   |                             ^ unclosed\
    \ delimiter\n68 |         !c.is_ascii_uppercase().is_\n69 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5ncryg0h.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5ncryg0h.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5ncryg0h.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5ncryg0h.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5ncryg0h.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5ncryg0h.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5ncryg0h.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` i"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    if file_name.len() < 3\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter())\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter()\
    \ || c != 'a' && c != 'z') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != 'A' && c != 'Z') { return String::from(\"No\")\
    \ }\n    if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9')\
    \ { return String::from(\"No\") }\n    if file_name.chars().any(|c| !c.is_ascii_letter()\
    \ || c != 'a'..='z' || c != 'A'..='Z') { return String::from(\"No\") }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z'\
    \ || c != 'A'..='Z' || c != '.') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != 'txt') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != 'exe') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != 'dll') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != 'dll') { return String::from(\"No\") }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp_gdeo87f.rs:26:129\n\
    \   |\n26 |     if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9'\
    \ || c != 'a'..='z' || c != 'A'..='Z' || c != '.' || c != 'txt') { ...\n   | \
    \                                                                            \
    \                                                    ^^^^^\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n26 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != \"txt\") { return String::from(\"No\") }\n   |            \
    \                                                                            \
    \                                         ~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp_gdeo87f.rs:27:129\n   |\n27 |   \
    \  if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9' || c !=\
    \ 'a'..='z' || c != 'A'..='Z' || c != '.' || c != 'exe') { ...\n   |         \
    \                                                                            \
    \                                            ^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n27 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'..='9' || c != 'a'..='z' || c != 'A'..='Z' ||\
    \ c != '.' || c != \"exe\") { return String::from(\"No\") }\n   |            \
    \                                                                            \
    \                                         ~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp_gdeo87f.rs:28:129\n   |\n28 |   \
    \  if file_name.chars().any(|c| !c.is_ascii_letter() || c != '0'..='9' || c !=\
    \ 'a'..='z' || c != 'A'..='Z' || c != '.' || c != 'dll') { ...\n   |         \
    \                                                                            \
    \                                            ^^^^^\n   |\nhelp: if you meant to\
    \ write a `str` literal, use double quotes\n   |\n28 |     if file_name.chars().any(|c|\
    \ !c.is_ascii_letter() || c != '0'.."
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter = true;\n \
    \   let mut dot_pos_start_digit = true;\n    let mut dot_pos_end_digit = true;\n\
    \    let mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter = true;\n\
    \    let mut dot_pos_start_digit = true;\n    let mut dot_pos_end_digit = true;\n\
    \    let mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter = true;\n\
    \    let mut dot_pos_start_digit = true;\n    let mut dot_pos_end_digit = true;\n\
    \    while dot_pos_start != dot_pos_end {\n        if dot_pos_start_letter ==\
    \ true {\n            if dot_pos_end_letter == true {\n                if dot_pos_start_digit\
    \ == true {\n                    if dot_pos_end_digit == true {\n            \
    \            if dot_pos_start_letter == true {\n                            if\
    \ dot_pos_end_letter == true {\n                                if dot_pos_start_digit\
    \ == true {\n                                    if dot_pos_end_digit == true\
    \ {\n                                        if dot_pos_start_letter == true {\n\
    \                                            if dot_pos_end_letter == true {\n\
    \                                                if dot_pos_start_digit == true\
    \ {\n                                                    if dot_pos_end_digit\
    \ == true {\n                                                        if dot_pos_start_letter\
    \ == true {\n                                                            if dot_pos_end_letter\
    \ == true {\n                                                                if\
    \ dot_pos_start_digit == true {\n                                            \
    \                        if dot_pos_end_digit == true {\n                    \
    \                                                    if dot_pos_start_letter ==\
    \ true {\n                                                                   \
    \                         if dot_pos_end_letter == true {\n                  \
    \                                              if dot_pos_start_digit == true\
    \ {\n                                                                    if dot_pos_end_digit\
    \ == true {\n                                                                \
    \        if dot_pos_start_letter == true {\n                                 \
    \                                           if dot_pos_end_letter == true {\n\
    \                                                                            \
    \    if dot_pos_start_digit == true {\n                                      \
    \                                              if dot_pos_end_digit == true {\n\
    \                                                                            \
    \            if dot_pos_start_letter == true {\n                             \
    \                                                               if dot_pos_end_letter\
    \ == true {\n                                                                \
    \                                if dot_pos_start_digit == true {\n          \
    \                                                                            \
    \              if dot_pos_end_digit == true {\n                              \
    \                                                                          if\
    \ dot_pos_start_letter == true {\n                                           \
    \                                                                 if dot_pos_end_letter\
    \ == true {\n                                                                \
    \                                                if dot_pos_start_digit == true\
    \ {\n                                                                        \
    \                                            if dot_pos_end_digit == true {\n\
    \                                                                            \
    \                                            if dot_pos_start_letter == true {\n\
    \n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpcfnmk1wo.rs:100:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n35  |  \
    \   while dot_pos_start != dot_pos_end {\n    |                              \
    \          - unclosed delimiter\n36  |         if dot_pos_start_letter == true\
    \ {\n    |                                         - unclosed delimiter\n37  |\
    \             if dot_pos_end_letter == true {\n    |                         \
    \                  - unclosed delimiter\n38  |                 if dot_pos_start_digit\
    \ == true {\n    |                                                - unclosed delimiter\n\
    39  |                     if dot_pos_end_digit == true {\n    |              \
    \                                    - unclosed delimiter\n40  |             \
    \            if dot_pos_start_letter == true {\n    |                        \
    \                                 - unclosed delimiter\n41  |                \
    \             if dot_pos_end_letter == true {\n    |                         \
    \                                  - unclosed delimiter\n42  |               \
    \                  if dot_pos_start_digit == true {\n    |                   \
    \                                             - unclosed delimiter\n43  |    \
    \                                 if dot_pos_end_digit == true {\n    |      \
    \                                                            - unclosed delimiter\n\
    44  |                                         if dot_pos_start_letter == true\
    \ {\n    |                                                                   \
    \      - unclosed delimiter\n45  |                                           \
    \  if dot_pos_end_letter == true {\n    |                                    \
    \                                       - unclosed delimiter\n46  |          \
    \                                       if dot_pos_start_digit == true {\n   \
    \ |                                                                          \
    \      - unclosed delimiter\n47  |                                 "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_len = file_name.len();\n    while dot_pos\
    \ < dot_len {\n        let mut dot_char = file_name[dot_pos];\n        if dot_char\
    \ == '.' {\n            if dot_pos == dot_len {\n                return String::from(\"\
    No\");\n            }\n            dot_len = dot_len - dot_pos;\n            dot_pos\
    \ = dot_pos + 1;\n        } else {\n            if dot_char < 'a' || dot_char\
    \ > 'z' {\n                return String::from(\"No\");\n            }\n     \
    \       if dot_char < 'A' || dot_char > 'Z' {\n                return String::from(\"\
    No\");\n            }\n        }\n        dot_pos = dot_pos + 1;\n    }\n    if\
    \ dot_pos == dot_len {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] < '0' || file_name[dot_pos - 1] > '9' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos] != '0' && file_name[dot_pos] != '1' {\n\
    \        return String::from(\"No\");\n    }\n    if file_name[dot_pos - 1] ==\
    \ '0' {\n        if file_name[dot_pos] == '0' {\n            return String::from(\"\
    No\");\n        }\n        if file_name[dot_pos] == '1' {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    if file_name[dot_pos - 1] == '1'\
    \ {\n        if file_name[dot_pos] == '0' {\n            return String::from(\"\
    Yes\");\n        }\n        if file_name[dot_pos] == '1' {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    if file_name[dot_pos - 1] == '2'\
    \ {\n        if file_name[dot_pos] == '0' {\n            return String::from(\"\
    Yes\");\n        }\n        if file_name[dot_pos] == '1' {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    if file_name[dot_pos - 1] == '3'\
    \ {\n        if file_name[dot_pos] == '0' {\n            return String::from(\"\
    Yes\");\n        }\n        if file_name[dot_pos] == '1' {\n            return\
    \ String::from(\"Yes\");\n        }\n    }\n    if file_name[dot_pos - 1] == '4'\
    \ {\n        if file_name[dot_pos] == '0' {\n            return String::from(\"\
    Yes\");\n        }\n        if file_name[dot_pos] == '1' {\n            return\
    \ String::from\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp5op5zn7k.rs:118:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if file_name[dot_pos - 1] == '4' {\n    |                                \
    \      - unclosed delimiter\n...\n86  |         if file_name[dot_pos] == '1' {\n\
    \    |                                      - this delimiter might not be properly\
    \ closed...\n87  |             return String::from\n88  | }\n    | - ...as it\
    \ matches this but it has different indentation\n...\n118 | }\n    |   ^\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmp5op5zn7k.rs:17:42\n   |\n17\
    \ |     let mut dot_pos = file_name.find('.')\n   |                          \
    \                ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n\
    \   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp5op5zn7k.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5op5zn7k.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5op5zn7k.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5op5zn7k.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5op5zn7k.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5op5zn7k.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5op5zn7k.rs:95"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        if dot_pos == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[..dot_pos].chars().next()\n\
    \            if first_letter != String::from('a'..'z') && first_letter != String::from('A'..'Z')\
    \ {\n                String::from(\"No\")\n            } else {\n            \
    \    let mut dot_pos = file_name.rfind('.')\n                if dot_pos == String::npos\
    \ {\n                    String::from(\"No\")\n                } else {\n    \
    \                let mut dot_pos = file_name.rfind('.')\n                    if\
    \ dot_pos == String::npos {\n                        String::from(\"No\")\n  \
    \                  } else {\n                        let mut dot_pos = file_name.rfind('.')\n\
    \                        if dot_pos == String::npos {\n                      \
    \      String::from(\"No\")\n                        } else {\n              \
    \              if dot_pos == 0 {\n                                String::from(\"\
    Yes\")\n                            } else {\n                               \
    \ let mut dot_pos = file_name.rfind('.')\n                                if dot_pos\
    \ == String::npos {\n                                    String::from(\"No\")\n\
    \                                } else {\n                                  \
    \  if dot_pos == 0 {\n                                        String::from(\"\
    Yes\")\n                                    } else {\n                       \
    \                 let mut dot_pos = file_name.rfind('.')\n                   \
    \                     if dot_pos == String::npos {\n                         \
    \                   String::from(\"No\")\n                                   \
    \     } else {\n                                            if dot_pos == 0 {\n\
    \                                                String::from(\"Yes\")\n     \
    \                                       } else {\n                           \
    \                     String::from(\"No\")\n                                 \
    \           }\n                                        }\n                   \
    \                 }\n                                }\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         if dot_pos\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:23:71\n   |\n23 |            \
    \ let mut first_letter = file_name[..dot_pos].chars().next()\n   |           \
    \                                                            ^ help: add `;` here\n\
    24 |             if first_letter != String::from('a'..'z') && first_letter !=\
    \ String::from('A'..'Z') {\n   |             -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:27:55\n   |\n27 |       \
    \          let mut dot_pos = file_name.rfind('.')\n   |                      \
    \                                 ^ help: add `;` here\n28 |                 if\
    \ dot_pos == String::npos {\n   |                 -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:31:59\n   |\n31\
    \ |                     let mut dot_pos = file_name.rfind('.')\n   |         \
    \                                                  ^ help: add `;` here\n32 |\
    \                     if dot_pos == String::npos {\n   |                     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:35:63\n\
    \   |\n35 |                         let mut dot_pos = file_name.rfind('.')\n \
    \  |                                                               ^ help: add\
    \ `;` here\n36 |                         if dot_pos == String::npos {\n   |  \
    \                       -- unexpected token\n\nerror: expected `;`, found keyword\
    \ `if`\n  --> /tmp/tmpvmkj72dn.rs:42:71\n   |\n42 | ...                   let\
    \ mut dot_pos = file_name.rfind('.')\n   |                                   \
    \                          ^ help: add `;` here\n43 | ...                   if\
    \ dot_pos == String::npos {\n   |                       -- unexpected token\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpvmkj72dn.rs:49:79\n "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    if dot_pos_end == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end\
    \ = file_name.find('.')\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwfjp3x12.rs:105:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n73  |  \
    \   if dot_pos_end == String::npos {\n    |                                  \
    \  - this delimiter might not be properly closed...\n74  |         return \n75\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:27:46\n   |\n27\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n28 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:32:46\n   |\n32 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n33 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:37:46\n   |\n37\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n43 |\
    \     if dot_pos_end == String::"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_chars\
    \ = file_name.chars();\n    let mut dot_pos = file_name_chars.find_first_of('.');\n\
    \    let mut dot_pos_end = file_name_chars.end();\n    loop {\n        if dot_pos\
    \ == dot_pos_end {\n            return String::from(\"No\");\n        }\n    \
    \    if dot_pos == 0 {\n            return String::from(\"Yes\");\n        }\n\
    \        if file_name_chars[dot_pos - 1] < 'a' || file_name_chars[dot_pos - 1]\
    \ > 'z' ||\n            file_name_chars[dot_pos] < 'A' || file_name_chars[dot_pos]\
    \ > 'Z' {\n            return String::from(\"No\");\n        }\n        if dot_pos\
    \ == dot_pos_end - 1 {\n            return String::from(\"Yes\");\n        }\n\
    \        if file_name_chars[dot_pos + 1] < 'a' || file_name_chars[dot_pos + 1]\
    \ > 'z' ||\n            file_name_chars[dot_pos] < 'A' || file_name_chars[dot_pos]\
    \ > 'Z' {\n            return String::from(\"No\");\n        }\n        dot_pos_end\
    \ = dot_pos + 1;\n        dot_pos = file_name_chars.find_first_of('.', dot_pos_end);\n\
    \    }\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmsyu0xnu.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmsyu0xnu.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmsyu0xnu.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmsyu0xnu.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmsyu0xnu.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_owned();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp9falzxr_.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp9falzxr_.rs:60:31\n\
    \   |\n60 |     let mut dot_pos_end_letter\n   |                             \
    \  ^ help: add `;` here\n61 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9falzxr_.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9falzxr_.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9falzxr_.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9falzxr_.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9falzxr_.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9falzxr_.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9falzxr_.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9falzxr_.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9falzxr_.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right}"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() <\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with('0')\
    \ && file_name.len() != 3 {\n        return String::from(\"No\");\n    }\n   \
    \ if file_name.starts_with('a') && file_name.len() != 3 || file_name.starts_with('A')\
    \ && file_name.len() != 3 {\n        return String::from(\"No\");\n    }\n   \
    \ if file_name.ends_with('txt') || file_name.ends_with('exe') || file_name.ends_with('dll')\
    \ {\n        return String::from(\"Yes\");\n    }\n    return String::from(\"\
    No\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpswsjzbw_.rs:28:28\n\
    \   |\n28 |     if file_name.ends_with('txt') || file_name.ends_with('exe') ||\
    \ file_name.ends_with('dll') {\n   |                            ^^^^^\n   |\n\
    help: if you meant to write a `str` literal, use double quotes\n   |\n28 |   \
    \  if file_name.ends_with(\"txt\") || file_name.ends_with('exe') || file_name.ends_with('dll')\
    \ {\n   |                            ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmpswsjzbw_.rs:28:58\n   |\n28 |     if file_name.ends_with('txt')\
    \ || file_name.ends_with('exe') || file_name.ends_with('dll') {\n   |        \
    \                                                  ^^^^^\n   |\nhelp: if you meant\
    \ to write a `str` literal, use double quotes\n   |\n28 |     if file_name.ends_with('txt')\
    \ || file_name.ends_with(\"exe\") || file_name.ends_with('dll') {\n   |      \
    \                                                    ~~~~~\n\nerror: character\
    \ literal may only contain one codepoint\n  --> /tmp/tmpswsjzbw_.rs:28:88\n  \
    \ |\n28 |     if file_name.ends_with('txt') || file_name.ends_with('exe') || file_name.ends_with('dll')\
    \ {\n   |                                                                    \
    \                    ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n28 |     if file_name.ends_with('txt') || file_name.ends_with('exe')\
    \ || file_name.ends_with(\"dll\") {\n   |                                    \
    \                                                    ~~~~~\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpswsjzbw_.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpswsjzbw_.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpswsjzbw_.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found i"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_2\
    \ = file_name.find('.')\n    if dot_pos_2 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_3 = file_name.find('.')\n    if dot_pos_3 ==\
    \ String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_4 =\
    \ file_name.find('.')\n    if dot_pos_4 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_5 = file_name.find('.')\n    if dot_pos_5 ==\
    \ String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_6 =\
    \ file_name.find('.')\n    if dot_pos_6 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_7 = file_name.find('.')\n    if dot_pos_7 ==\
    \ String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_8 =\
    \ file_name.find('.')\n    if dot_pos_8 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_9 = file_name.find('.')\n    if dot_pos_9 ==\
    \ String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_10 =\
    \ file_name.find('.')\n    if dot_pos_10 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_11 = file_name.find('.')\n    if dot_pos_11\
    \ == String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_12\
    \ = file_name.find('.')\n    if dot_pos_12 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_13 = file_name.find('.')\n    if dot_pos_13\
    \ == String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_14\
    \ = file_name.find('.')\n    if dot_pos_14 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_15 = file_name.find('.')\n    if dot_pos_15\
    \ == String::npos { return String::from(\"No\") }\n    \n    let mut dot_pos_16\
    \ = file_name.find('.')\n    if dot_pos_16 == String::npos { return String::from(\"\
    No\") }\n    \n    let mut dot_pos_17 = \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:20:44\n   |\n20 |     let\
    \ mut dot_pos_2 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n21 |     if dot_pos_2 == String::npos { return\
    \ String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:23:44\n   |\n23 |     let mut\
    \ dot_pos_3 = file_name.find('.')\n   |                                      \
    \      ^ help: add `;` here\n24 |     if dot_pos_3 == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp5_dg2m_1.rs:26:44\n   |\n26 |     let mut dot_pos_4 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n27 |  \
    \   if dot_pos_4 == String::npos { return String::from(\"No\") }\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_5 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_5 == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:32:44\n   |\n32 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n33 |     if dot_pos_6 == String::npos { return\
    \ String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp5_dg2m_1.rs:35:44\n   |\n35 |     let mut\
    \ dot_pos_7 = file_name.find('.')\n   |                                      \
    \      ^ help: add `;` here\n36 |     if dot_pos_7 == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerr"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_index =\
    \ file_name.find('.')\n        if dot_index == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[..dot_index].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_index = file_name.find('.')\n\
    \                if dot_index == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[..dot_index];\n\
    \                    let mut dot_name_chars = dot_name.chars();\n            \
    \        let mut dot_name_chars_iter = dot_name_chars.iter();\n              \
    \      let mut dot_name_chars_next = dot_name_chars_iter.next();\n           \
    \         let mut dot_name_chars_next_char = dot_name_chars_next.unwrap();\n \
    \                   if dot_name_chars_next_char != 'txt' &&\n                \
    \        dot_name_chars_next_char != 'exe' &&\n                        dot_name_chars_next_char\
    \ != 'dll' {\n                        String::from(\"No\")\n                 \
    \   } else {\n                        String::from(\"Yes\")\n                \
    \    }\n                }\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmpjr_f3v2o.rs:36:52\n\
    \   |\n36 |                     if dot_name_chars_next_char != 'txt' &&\n   |\
    \                                                    ^^^^^\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n36 |              \
    \       if dot_name_chars_next_char != \"txt\" &&\n   |                      \
    \                              ~~~~~\n\nerror: character literal may only contain\
    \ one codepoint\n  --> /tmp/tmpjr_f3v2o.rs:37:53\n   |\n37 |                 \
    \        dot_name_chars_next_char != 'exe' &&\n   |                          \
    \                           ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n37 |                         dot_name_chars_next_char\
    \ != \"exe\" &&\n   |                                                     ~~~~~\n\
    \nerror: character literal may only contain one codepoint\n  --> /tmp/tmpjr_f3v2o.rs:38:53\n\
    \   |\n38 |                         dot_name_chars_next_char != 'dll' {\n   |\
    \                                                     ^^^^^\n   |\nhelp: if you\
    \ meant to write a `str` literal, use double quotes\n   |\n38 |              \
    \           dot_name_chars_next_char != \"dll\" {\n   |                      \
    \                               ~~~~~\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjr_f3v2o.rs:19:48\n   |\n19 |         let mut dot_index = file_name.find('.')\n\
    \   |                                                ^ help: add `;` here\n20\
    \ |         if dot_index == String::npos {\n   |         -- unexpected token\n\
    \nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjr_f3v2o.rs:27:56\n \
    \  |\n27 |                 let mut dot_index = file_name.find('.')\n   |     \
    \                                                   ^ help: add `;` here\n28 |\
    \                 if dot_index == String::npos {\n   |                 -- unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjr_f3v2o.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror["
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n \
    \   let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    \n    while dot_pos_start_letter < dot_pos_end_letter {\n\
    \        if file_name[dot_pos_start_letter] >= 'a' && file_name[dot_pos_start_letter]\
    \ <= 'z' {\n            dot_pos_start_letter += 1;\n        } else if file_name[dot_pos_start_letter]\
    \ >= 'A' && file_name[dot_pos_start_letter] <= 'Z' {\n            dot_pos_start_letter\
    \ += 1;\n        } else {\n            return String::from(\"No\");\n        }\n\
    \    }\n    \n    while dot_pos_end_letter < file_name.len() {\n        if file_name[dot_pos_end_letter]\
    \ >= 'a' && file_name[dot_pos_end_letter] <= 'z' {\n            dot_pos_end_letter\
    \ += 1;\n        } else if file_name[dot_pos_end_letter] >= 'A' && file_name[dot_pos_end_letter]\
    \ <= 'Z' {\n            dot_pos_end_letter += 1;\n        } else {\n         \
    \   return String::from(\"No\");\n        }\n    }\n    \n    if dot_pos_start\
    \ == dot_pos_end {\n        return String::from(\"No\");\n    }\n    \n    if\
    \ dot_pos_start == dot_pos_end_letter {\n        return String::from(\"No\");\n\
    \    }\n    \n    if dot_pos_start == dot_pos_end_letter + 1 {\n        return\
    \ String::from(\"No\");\n    }\n    \n    if dot_pos_end == file_name.len() {\n\
    \        return String::from(\"No\");\n    }\n    \n    if dot_pos_end == dot_pos_end_letter\
    \ + 1 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_end\
    \ == dot_pos_end_letter + 2 {\n        return String::from(\"No\");\n    }\n \
    \   \n    if dot_pos_end == dot_pos_end_letter + 3 {\n        return String::from(\"\
    No\");\n    }\n    \n    if dot_pos_end == dot_pos_end_letter + 4 {\n        return\
    \ String::from(\"No\");\n    }\n    \n    if dot_pos_end == dot_pos_end_letter\
    \ + 5 {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_end\
    \ == dot_pos_end_letter + 6 {\n        return String::from(\"No\");\n\n}\n\nfn\
    \ main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpubtu_ka9.rs:116:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n83  |  \
    \   if dot_pos_end == dot_pos_end_letter + 6 {\n    |                        \
    \                      - this delimiter might not be properly closed...\n...\n\
    86  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    116 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpubtu_ka9.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmpubtu_ka9.rs:90:17\n   |\n90 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpubtu_ka9.rs:90:25\n \
    \  |\n90 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpubtu_ka9.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpubtu_ka9.rs:91:25\n   |\n91 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpubtu_ka9.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpubtu_ka9.rs:92:25\n   |\n92 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpubtu_ka9.rs:93:17\n  \
    \ |\n93 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjwrru_aj.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    while\
    \ dot_pos_start < file_name.len() {\n        if file_name[dot_pos_start] >= 'a'\
    \ && file_name[dot_pos_start] <= 'z' ||\n            file_name[dot_pos_start]\
    \ >= 'A' && file_name[dot_pos_start] <= 'Z' ||\n            file_name[dot_pos_start]\
    \ >= '0' && file_name[dot_pos_start] <= '9' {\n            dot_pos_start++;\n\
    \        } else {\n            break;\n        }\n    }\n    while dot_pos_end\
    \ < file_name.len() {\n        if file_name[dot_pos_end] >= 'a' && file_name[dot_pos_end]\
    \ <= 'z' ||\n            file_name[dot_pos_end] >= 'A' && file_name[dot_pos_end]\
    \ <= 'Z' ||\n            file_name[dot_pos_end] >= '0' && file_name[dot_pos_end]\
    \ <= '9' {\n            dot_pos_end++;\n        } else {\n            break;\n\
    \        }\n    }\n    if dot_pos_start == dot_pos_end {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_start == dot_pos + 1 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos + 1 {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] != '.' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_end - 1] != 'txt' &&\n        file_name[dot_pos_end\
    \ - 1] != 'exe' &&\n        file_name[dot_pos_end - 1] != 'dll' {\n        return\
    \ String::from(\"No\");\n    }\n    if dot_pos_start == dot_pos_end {\n      \
    \  return String::from(\"No\");\n    }\n    if dot_pos_start == dot_pos + 1 {\n\
    \        return String::from(\"No\");\n    }\n    if dot_pos_end == dot_pos +\
    \ 1 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_start]\
    \ != 'a' &&\n        file_name[dot_pos_start] != 'A' &&\n        file_name[dot_pos_start]\
    \ != '0' &&\n        file_name[dot_pos_start] != '1' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_end - 1] != 'txt' &&\n        file_name[dot_pos_end\
    \ - 1] != 'exe' &&\n        file_name[dot_\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp_odqyd26.rs:53:38\n\
    \   |\n53 |     if file_name[dot_pos_end - 1] != 'txt' &&\n   |              \
    \                        ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n53 |     if file_name[dot_pos_end - 1] != \"txt\" &&\n\
    \   |                                      ~~~~~\n\nerror: character literal may\
    \ only contain one codepoint\n  --> /tmp/tmp_odqyd26.rs:54:39\n   |\n54 |    \
    \     file_name[dot_pos_end - 1] != 'exe' &&\n   |                           \
    \            ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double\
    \ quotes\n   |\n54 |         file_name[dot_pos_end - 1] != \"exe\" &&\n   |  \
    \                                     ~~~~~\n\nerror: character literal may only\
    \ contain one codepoint\n  --> /tmp/tmp_odqyd26.rs:55:39\n   |\n55 |         file_name[dot_pos_end\
    \ - 1] != 'dll' {\n   |                                       ^^^^^\n   |\nhelp:\
    \ if you meant to write a `str` literal, use double quotes\n   |\n55 |       \
    \  file_name[dot_pos_end - 1] != \"dll\" {\n   |                             \
    \          ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp_odqyd26.rs:73:38\n   |\n73 |     if file_name[dot_pos_end - 1]\
    \ != 'txt' &&\n   |                                      ^^^^^\n   |\nhelp: if\
    \ you meant to write a `str` literal, use double quotes\n   |\n73 |     if file_name[dot_pos_end\
    \ - 1] != \"txt\" &&\n   |                                      ~~~~~\n\nerror:\
    \ character literal may only contain one codepoint\n  --> /tmp/tmp_odqyd26.rs:74:39\n\
    \   |\n74 |         file_name[dot_pos_end - 1] != 'exe' &&\n   |             \
    \                          ^^^^^\n   |\nhelp: if you meant to write a `str` literal,\
    \ use double quotes\n   |\n74 |         file_name[dot_pos_end - 1] != \"exe\"\
    \ &&\n   |                                       ~~~~~\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp_odqyd26.rs:17:42\n   |\n17 |     let mut\
    \ dot_pos = file_name.find('.')\n   |                                        \
    \  ^ help: add `;` here\n18 |     if dot_pos =="
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_letter()) {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_lowercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_digit()) {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_digit()) {\n\n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp1e6aa3iu.rs:108:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n76  |  \
    \   if file_name.chars().any(|c| !c.is_digit()) {\n    |                     \
    \                            - this delimiter might not be properly closed...\n\
    77  | \n78  | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n108 | }\n    |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1e6aa3iu.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1e6aa3iu.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1e6aa3iu.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1e6aa3iu.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1e6aa3iu.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1e6aa3iu.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1e6aa3iu.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1e6aa3iu.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1e6aa3iu.rs:86:17\n   |\n86 |"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_next = dot_pos + 1;\n    let mut dot_pos_prev = dot_pos - 1;\n    let\
    \ mut dot_pos_next_prev = dot_pos_next - 1;\n    let mut dot_pos_prev_next = dot_pos_prev\
    \ - 1;\n    let mut dot_pos_next_next_prev = dot_pos_next_prev - 1;\n    let mut\
    \ dot_pos_prev_prev_next = dot_pos_prev_next - 1;\n    let mut dot_pos_next_prev_prev\
    \ = dot_pos_prev_prev - 1;\n    let mut dot_pos_next_next_next_prev = dot_pos_next_prev_next\
    \ - 1;\n    let mut dot_pos_prev_prev_prev_next = dot_pos_prev_prev_prev - 1;\n\
    \    let mut dot_pos_next_prev_prev_prev = dot_pos_next_prev_prev_prev - 1;\n\
    \    let mut dot_pos_next_next_next_next_prev = dot_pos_next_next_prev_prev -\
    \ 1;\n    let mut dot_pos_prev_prev_prev_prev_next = dot_pos_prev_prev_prev_prev\
    \ - 1;\n    let mut dot_pos_next_prev_prev_prev_prev = dot_pos_next_prev_prev_prev_prev\
    \ - 1;\n    let mut dot_pos_next_next_next_next_prev = dot_pos_next_next_prev_prev_prev\
    \ - 1;\n    let mut dot_pos_prev_prev_prev_prev_next_prev = dot_pos_prev_prev_prev_prev_next\
    \ - 1;\n    let mut dot_pos_next_prev_prev_prev_prev_next = dot_pos_next_prev_prev_prev_prev_next\
    \ - 1;\n    let mut dot_pos_next_next_next_next_next_prev = dot_pos_next_next_next_prev_prev_next\
    \ - 1;\n    let mut dot_pos_prev_prev_prev_prev_next_next_prev = dot_pos_prev_prev_prev_prev_next_next_prev\
    \ - 1;\n    let mut dot_pos_next_prev_prev_prev_prev_next_next_prev = dot_pos_next_prev_prev_prev_prev_next_next_prev\
    \ - 1;\n    let mut dot_pos_next_next_next_next_next_next_prev = dot_pos_next_next_next_prev_prev_next_next_prev\
    \ - 1;\n    let mut dot_pos_prev_prev_prev_prev_next_next_next_next_prev = dot_pos_prev_prev_prev_prev_next_next_next_next_next_prev\
    \ - 1;\n    let mut dot_pos_next_prev_prev_prev_prev_next_next_next_next_prev\
    \ = dot_pos_next_prev_prev_prev_prev_next_next_next_next_prev - 1;\n    let mut\
    \ dot_pos_next_next_next_next_next_next_next_next_prev = dot_pos_next_next_next_prev_prev_next_next_next_next_prev\
    \ - 1;\n    let mut dot_pos_prev_prev_prev_prev_next_next_next_next_next_prev\
    \ = dot_pos_prev_prev_prev_prev_next_\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp6vx7lrec.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp6vx7lrec.rs:44:106\n\
    \   |\n44 |     let mut dot_pos_prev_prev_prev_prev_next_next_next_next_next_prev\
    \ = dot_pos_prev_prev_prev_prev_next_\n   |                                  \
    \                                                                        ^ help:\
    \ add `;` here\n45 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `dot_pos_prev_prev` in this scope\n  --> /tmp/tmp6vx7lrec.rs:27:38\n   |\n27\
    \ |     let mut dot_pos_next_prev_prev = dot_pos_prev_prev - 1;\n   |        \
    \                              ^^^^^^^^^^^^^^^^^ help: a local variable with a\
    \ similar name exists: `dot_pos_next_prev`\n\nerror[E0425]: cannot find value\
    \ `dot_pos_next_prev_next` in this scope\n  --> /tmp/tmp6vx7lrec.rs:28:43\n  \
    \ |\n28 |     let mut dot_pos_next_next_next_prev = dot_pos_next_prev_next - 1;\n\
    \   |                                           ^^^^^^^^^^^^^^^^^^^^^^ help: a\
    \ local variable with a similar name exists: `dot_pos_next_prev_prev`\n\nerror[E0425]:\
    \ cannot find value `dot_pos_prev_prev_prev` in this scope\n  --> /tmp/tmp6vx7lrec.rs:29:43\n\
    \   |\n29 |     let mut dot_pos_prev_prev_prev_next = dot_pos_prev_prev_prev -\
    \ 1;\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `dot_pos_next_prev_prev`\n\nerror[E0425]:\
    \ cannot find value `dot_pos_next_prev_prev_prev` in this scope\n  --> /tmp/tmp6vx7lrec.rs:30:43\n\
    \   |\n30 |     let mut dot_pos_next_prev_prev_prev = dot_pos_next_prev_prev_prev\
    \ - 1;\n   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_next_prev_prev`\n\
    \nerror[E0425]: cannot find value `dot_pos_next_next_prev_prev` in this scope\n\
    \  --> /tmp/tmp6vx7lrec.rs:31:48\n   |\n31 |     let mut dot_pos_nex"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    if file_name.len()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.len() ==\
    \ 3 {\n        if file_name[0] < 'a' || file_name[0] > 'z' ||\n            file_name[1]\
    \ < 'a' || file_name[1] > 'z' ||\n            file_name[2] < 'a' || file_name[2]\
    \ > 'z' {\n            return String::from(\"No\");\n        }\n    }\n    if\
    \ file_name.starts_with(\".\") {\n        return String::from(\"No\");\n    }\n\
    \    if file_name.starts_with(\"..\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"...\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"....\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\".....\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"......\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\".......\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"........\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"..........\") {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.starts_with(\"...........\")\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    ............\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    ..............\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    ...............\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .................\") {\n        return \n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3o3s6zu6.rs:117:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n27  |  \
    \           file_name[2] < 'a' || file_name[2] > 'z' {\n    |                \
    \                                      - this delimiter might not be properly\
    \ closed...\n28  |             return String::from(\"No\");\n29  |         }\n\
    \    |         - ...as it matches this but it has different indentation\n...\n\
    117 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp3o3s6zu6.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp3o3s6zu6.rs:91:17\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3o3s6zu6.rs:91:25\n \
    \  |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3o3s6zu6.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3o3s6zu6.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3o3s6zu6.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3o3s6zu6.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3o3s6zu6.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |      "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos;\n    dot_pos_end += 1;\n    while dot_pos_end < file_name.len()\
    \ {\n        let mut dot_pos_start = dot_pos;\n        dot_pos_start += 1;\n \
    \       if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start] <= 'z'\
    \ {\n            dot_pos_start += 1;\n        }\n        if file_name[dot_pos_start]\
    \ >= 'A' && file_name[dot_pos_start] <= 'Z' {\n            dot_pos_start += 1;\n\
    \        }\n        if file_name[dot_pos_start] != '0' && file_name[dot_pos_start]\
    \ != '9' {\n            return String::from(\"No\");\n        }\n        if dot_pos_start\
    \ == dot_pos_end {\n            return String::from(\"No\");\n        }\n    }\n\
    \    return String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp0mvpqwr6.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmp0mvpqwr6.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0mvpqwr6.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0mvpqwr6.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0mvpqwr6.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0mvpqwr6.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |     "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    if dot_pos_end == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end\
    \ = file_name.find('.')\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpnbyw1m4l.rs:105:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n73  |  \
    \   if dot_pos_end == String::npos {\n    |                                  \
    \  - this delimiter might not be properly closed...\n74  |         return String\n\
    75  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:27:46\n   |\n27\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n28 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:32:46\n   |\n32 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n33 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpnbyw1m4l.rs:37:46\n   |\n37\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpnbyw1m4l.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n43 |\
    \     if dot_pos_end == St"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgego6tf9.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected expression, found `}`\n\
    \  --> /tmp/tmpgego6tf9.rs:61:1\n   |\n61 | }\n   | ^ expected expression\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgego6tf9.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgego6tf9.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgego6tf9.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgego6tf9.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgego6tf9.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgego6tf9.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgego6tf9.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgego6tf9.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgego6tf9.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find va"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_str\
    \ = file_name.to_string();\n    let mut dot_pos = file_name_str.find('.')\n  \
    \  if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_str = file_name_str.chars().take(dot_pos).collect::<String>();\n\
    \    dot_pos_str = dot_pos_str.to_lowercase();\n    if dot_pos_str.len() != 1\
    \ || dot_pos_str[0] != 'a' || dot_pos_str[0] != 'b' || dot_pos_str[0] != 'c' ||\
    \ dot_pos_str[0] != 'd' || dot_pos_str[0] != 'e' || dot_pos_str[0] != 'f' || dot_pos_str[0]\
    \ != 'g' || dot_pos_str[0] != 'h' || dot_pos_str[0] != 'i' || dot_pos_str[0] !=\
    \ 'j' || dot_pos_str[0] != 'k' || dot_pos_str[0] != 'l' || dot_pos_str[0] != 'm'\
    \ || dot_pos_str[0] != 'n' || dot_pos_str[0] != 'o' || dot_pos_str[0] != 'p' ||\
    \ dot_pos_str[0] != 'q' || dot_pos_str[0] != 'r' || dot_pos_str[0] != 's' || dot_pos_str[0]\
    \ != 't' || dot_pos_str[0] != 'u' || dot_pos_str[0] != 'v' || dot_pos_str[0] !=\
    \ 'w' || dot_pos_str[0] != 'x' || dot_pos_str[0] != 'y' || dot_pos_str[0] != 'z'\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_str_len\
    \ = dot_pos_str.len();\n    let mut dot_pos_str_len_minus_1 = dot_pos_str_len\
    \ - 1;\n    let mut dot_pos_str_len_minus_2 = dot_pos_str_len_minus_1 - 1;\n \
    \   let mut dot_pos_str_len_minus_3 = dot_pos_str_len_minus_2 - 1;\n    let mut\
    \ dot_pos_str_len_minus_4 = dot_pos_str_len_minus_3 - 1;\n    let mut dot_pos_str_len_minus_5\
    \ = dot_pos_str_len_minus_4 - 1;\n    let mut dot_pos_str_len_minus_6 = dot_pos_str_len_minus_5\
    \ - 1;\n    let mut dot_pos_str_len_minus_7 = dot_pos_str_len_minus_6 - 1;\n \
    \   let mut dot_pos_str_len_minus_8 = dot_pos_str_len_minus_7 - 1;\n    let mut\
    \ dot_pos_str_len_minus_9 = dot_pos_str_len_minus_8 - 1;\n    let mut dot_pos_str_len_minus_10\
    \ = dot_pos_str_len_minus_9 - 1;\n    let mut dot_pos_str_len_minus_11 = dot_pos_str_len_minus_10\
    \ - 1;\n    let mut dot_pos_str_len_minus_12 = \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp56dc7p5v.rs:17:46\n\
    \   |\n17 |     let mut dot_pos = file_name_str.find('.')\n   |              \
    \                                ^ help: add `;` here\n18 |     if dot_pos ==\
    \ String::npos {\n   |     -- unexpected token\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmp56dc7p5v.rs:39:1\n   |\n39 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp56dc7p5v.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp56dc7p5v.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp56dc7p5v.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp56dc7p5v.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp56dc7p5v.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp56dc7p5v.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp56dc7p5v.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp56dc7p5v.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp56dc7p5v.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_letter = file_name.chars().next().unwrap();\n    if first_letter\
    \ < 'a' || first_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpqcgf4t91.rs:19:42\n\
    \   |\n19 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpqcgf4t91.rs:27:42\n   |\n27 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n28 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpqcgf4t91.rs:31:42\n   |\n31 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n32 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqcgf4t91.rs:35:42\n\
    \   |\n35 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n36 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpqcgf4t91.rs:39:42\n   |\n39 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n40 |    \
    \ if dot_pos == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpqcgf4t91.rs:43:42\n   |\n43 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n44 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpqcgf4t91.rs:47:42\n\
    \   |\n47 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n48 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpqcgf4t91.rs:51:42\n   |\n51 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n52 |    \
    \ if dot_pos == String::npos {\n   |  "
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_valid = false;\n    while dot_pos_end < file_name.len() {\n    \
    \    let mut dot_pos_valid = false;\n        let mut dot_pos_start = dot_pos_end;\n\
    \        let mut dot_pos_end = dot_pos_end;\n        let mut dot_pos = file_name.find('.',\
    \ dot_pos_end);\n        if dot_pos == String::npos {\n            dot_pos_valid\
    \ = true;\n        } else {\n            let mut dot_pos_end = dot_pos + 1;\n\
    \            let mut dot_pos_start = dot_pos + 1;\n            let mut dot_pos_valid\
    \ = false;\n            while dot_pos_end < file_name.len() {\n              \
    \  let mut dot_pos = file_name.find('.', dot_pos_end);\n                if dot_pos\
    \ == String::npos {\n                    dot_pos_valid = true;\n             \
    \       break;\n                } else {\n                    let mut dot_pos_end\
    \ = dot_pos + 1;\n                    let mut dot_pos_start = dot_pos + 1;\n \
    \                   let mut dot_pos_valid = false;\n                }\n      \
    \      }\n        }\n        if dot_pos_valid {\n            break;\n        }\n\
    \        dot_pos_end = dot_pos_end;\n    }\n    if dot_pos_valid {\n        if\
    \ dot_pos_start == 0 {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_pos_start = dot_pos_start;\n        let mut dot_pos_end =\
    \ dot_pos_end;\n        let mut dot_pos = file_name.find('.', dot_pos_end);\n\
    \        if dot_pos == String::npos {\n            return String::from(\"No\"\
    );\n        }\n        let mut dot_pos_end = dot_pos + 1;\n        let mut dot_pos_start\
    \ = dot_pos + 1;\n        let mut dot_pos_valid = false;\n        while dot_pos_end\
    \ < file_name.len() {\n            let mut dot_pos = file_name.find('.', dot_pos_end);\n\
    \            if dot_pos == String::npos {\n                dot_pos_valid = true;\n\
    \                break;\n            } else {\n                let mut dot_pos_end\
    \ = dot_pos + 1;\n                let mut dot_pos_start = dot_pos + 1;\n     \
    \           let mut dot_pos_valid = false;\n            }\n        }\n       \
    \ if dot_pos_valid {\n            if dot_pos_start == 0 {\n                return\
    \ String::from(\"No\");\n            }\n            let mut dot_pos_start = dot_pos_start;\n\
    \            let mut dot_pos_end = dot_pos_end;\n            let mut dot_pos =\
    \ file_name.find('.', dot_pos_end);\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpofz0wku9.rs:113:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n52  |  \
    \   if dot_pos_valid {\n    |                      - unclosed delimiter\n...\n\
    76  |         if dot_pos_valid {\n    |                          - this delimiter\
    \ might not be properly closed...\n...\n83  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n113 | }\n    |   ^\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpofz0wku9.rs:17:42\n   |\n17 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n   |     --\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpofz0wku9.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpofz0wku9.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpofz0wku9.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpofz0wku9.rs:88:25\n   |\n88 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpofz0wku9.rs:89:17\n  \
    \ |\n89 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpofz0wku9.rs:89:25\n   |\n89 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpofz0wku9.rs:90:17\n   |\n90 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    if dot_pos_end == dot_pos + 1\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_start =\
    \ dot_pos + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let\
    \ mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start\
    \ + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end\
    \ = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let\
    \ mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start\
    \ + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let\
    \ mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start\
    \ + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end\
    \ = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let\
    \ mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start\
    \ + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let\
    \ mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start\
    \ + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end\
    \ = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let\
    \ mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start = dot_pos_start\
    \ + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start + 1;\n    let\
    \ mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end = dot_pos_start\
    \ + 1;\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_end\
    \ = dot_pos_start + 1;\n    let mut dot_pos_\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp25s5g53o.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmp25s5g53o.rs:21:46\n   |\n21 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n22 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found `}`\n  --> /tmp/tmp25s5g53o.rs:66:21\n   |\n66 |     let\
    \ mut dot_pos_\n   |                     ^ help: add `;` here\n67 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmp25s5g53o.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp25s5g53o.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp25s5g53o.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp25s5g53o.rs:72:25\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp25s5g53o.rs:73:17\n  \
    \ |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp25s5g53o.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp25s5g53o.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tm"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos;\n    while dot_pos_end < file_name.len() {\n        let\
    \ mut dot_pos_start = dot_pos_end;\n        while dot_pos_start < file_name.len()\
    \ && \n            file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' &&\n            file_name[dot_pos_start] != 'A' && file_name[dot_pos_start]\
    \ != 'Z' {\n            dot_pos_start++;\n        }\n        if dot_pos_start\
    \ == dot_pos_end {\n            return String::from(\"No\");\n        }\n    \
    \    let mut dot_pos_end = dot_pos_start;\n        while dot_pos_end < file_name.len()\
    \ && \n            file_name[dot_pos_end] >= '0' && file_name[dot_pos_end] <=\
    \ '9' {\n            dot_pos_end++;\n        }\n        if dot_pos_end == dot_pos_start\
    \ {\n            return String::from(\"No\");\n        }\n    }\n    if dot_pos_end\
    \ == dot_pos {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 1] != '.' && file_name[dot_pos + 1] != '.' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos + 2] != '.' && file_name[dot_pos + 2]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 3] != '.' && file_name[dot_pos + 3] != '.' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos + 4] != '.' && file_name[dot_pos + 4]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 5] != '.' && file_name[dot_pos + 5] != '.' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos + 6] != '.' && file_name[dot_pos + 6]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 7] != '.' && file_name[dot_pos + 7] != '.' {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos + 8] != '.' && file_name[dot_pos + 8]\
    \ != '.' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 9] != '.' && file_name[dot_pos + 9] != \n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpgobdxg_7.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `+`\n \
    \ --> /tmp/tmpgobdxg_7.rs:27:27\n   |\n27 |             dot_pos_start++;\n   |\
    \                           ^ expected expression\n\nerror: expected expression,\
    \ found `+`\n  --> /tmp/tmpgobdxg_7.rs:35:25\n   |\n35 |             dot_pos_end++;\n\
    \   |                         ^ expected expression\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpgobdxg_7.rs:72:1\n   |\n72 | }\n   | ^ expected expression\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgobdxg_7.rs:76:17\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgobdxg_7.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgobdxg_7.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgobdxg_7.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgobdxg_7.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgobdxg_7.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgobdxg_7.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgobdxg_"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos =\
    \ file_name.rfind('.')\n        let mut dot_pos_start = dot_pos + 1;\n       \
    \ let mut dot_pos_end = dot_pos;\n        let mut dot_pos_len = dot_pos_end -\
    \ dot_pos_start;\n        let mut dot_pos_start2 = dot_pos_start;\n        let\
    \ mut dot_pos_len2 = dot_pos_len;\n        let mut dot_pos_start3 = dot_pos_start;\n\
    \        let mut dot_pos_len3 = dot_pos_len;\n        let mut dot_pos_start4 =\
    \ dot_pos_start;\n        let mut dot_pos_len4 = dot_pos_len;\n        let mut\
    \ dot_pos_start5 = dot_pos_start;\n        let mut dot_pos_len5 = dot_pos_len;\n\
    \        let mut dot_pos_start6 = dot_pos_start;\n        let mut dot_pos_len6\
    \ = dot_pos_len;\n        let mut dot_pos_start7 = dot_pos_start;\n        let\
    \ mut dot_pos_len7 = dot_pos_len;\n        let mut dot_pos_start8 = dot_pos_start;\n\
    \        let mut dot_pos_len8 = dot_pos_len;\n        let mut dot_pos_start9 =\
    \ dot_pos_start;\n        let mut dot_pos_len9 = dot_pos_len;\n        let mut\
    \ dot_pos_start10 = dot_pos_start;\n        let mut dot_pos_len10 = dot_pos_len;\n\
    \        let mut dot_pos_start11 = dot_pos_start;\n        let mut dot_pos_len11\
    \ = dot_pos_len;\n        let mut dot_pos_start12 = dot_pos_start;\n        let\
    \ mut dot_pos_len12 = dot_pos_len;\n        let mut dot_pos_start13 = dot_pos_start;\n\
    \        let mut dot_pos_len13 = dot_pos_len;\n        let mut dot_pos_start14\
    \ = dot_pos_start;\n        let mut dot_pos_len14 = dot_pos_len;\n        let\
    \ mut dot_pos_start15 = dot_pos_start;\n        let mut dot_pos_len15 = dot_pos_len;\n\
    \        let mut dot_pos_start16 = dot_pos_start;\n        let mut dot_pos_len16\
    \ = dot_pos_len;\n        let mut dot_pos_start17 = dot_pos_start;\n        let\
    \ mut dot_pos_len17 = dot_pos_len;\n        let mut dot_pos_start18 = dot_pos_start;\n\
    \        let mut dot_pos_len18 = dot_pos_len;\n        let mut dot_pos_start19\
    \ = dot_pos_start;\n        let mut dot_pos_len19 = dot_pos_len;\n        let\
    \ mut dot_pos_start20 = dot_pos_start;\n        let mut dot_pos_len20 = dot_pos_len;\n\
    \        let mut dot_pos_start21 = dot_pos_start;\n        let mut \n}\n\nfn main()\
    \ {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpf6fc2yy6.rs:93:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n18 |     }\
    \ else {\n   |            - this delimiter might not be properly closed...\n...\n\
    63 | }\n   | - ...as it matches this but it has different indentation\n...\n93\
    \ | }\n   |   ^\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpf6fc2yy6.rs:19:47\n\
    \   |\n19 |         let mut dot_pos = file_name.rfind('.')\n   |             \
    \                                  ^ help: add `;` here\n20 |         let mut\
    \ dot_pos_start = dot_pos + 1;\n   |         --- unexpected token\n\nerror: expected\
    \ identifier, found `}`\n  --> /tmp/tmpf6fc2yy6.rs:63:1\n   |\n63 | }\n   | ^\
    \ expected identifier\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf6fc2yy6.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf6fc2yy6.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf6fc2yy6.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf6fc2yy6.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf6fc2yy6.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf6fc2yy6.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6fc2yy6.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    while\
    \ dot_pos_end != String::npos && dot_pos < dot_pos_end {\n        let mut dot_pos_end\
    \ = file_name.find('.')\n        if dot_pos_end == String::npos {\n          \
    \  dot_pos_end = file_name.len();\n        }\n        let mut dot_pos_end = dot_pos_end\
    \ + 1;\n        let mut dot_pos_end = file_name.find('.')\n    }\n    if dot_pos_end\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    while dot_pos_end != String::npos && dot_pos < dot_pos_end {\n        let\
    \ mut dot_pos_end = file_name.find('.')\n        if dot_pos_end == String::npos\
    \ {\n            dot_pos_end = file_name.len();\n        }\n        let mut dot_pos_end\
    \ = dot_pos_end + 1;\n        let mut dot_pos_end = file_name.find('.')\n    }\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    while dot_pos_end != String::npos && dot_pos < dot_pos_end\
    \ {\n        let mut dot_pos_end = file_name.find('.')\n        if dot_pos_end\
    \ == String::npos {\n            dot_pos_end = file_name.len();\n        }\n \
    \       let mut dot_pos_end = dot_pos_end + 1;\n        let mut dot_pos_end =\
    \ file_name.find('.')\n    }\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    while dot_pos_end != String::npos\
    \ && dot_pos < dot_pos_end {\n        let mut dot_pos_end = file_name.find('.')\n\
    \        if dot_pos_end == String::npos {\n            dot_pos_end = file_name.len();\n\
    \        }\n        let mut dot_pos_end = dot_pos_end + 1;\n        let mut dot_pos_end\
    \ = file_name.find('.')\n    }\n    if dot_pos_end == String::npos {\n       \
    \ return String::from(\"No\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n   --> /tmp/tmp02f2z9ll.rs:71:29\n\
    \    |\n71  |           return String::from(\"No\n    |  _____________________________^\n\
    72  | | }\n73  | |\n74  | | fn main() {\n...   |\n101 | |     assert_eq!({left},\
    \ {right});\n102 | | }\n    | |__^\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos { \n        return String::from(\"\
    No\");\n    }\n    \n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvh59w642.rs:125:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n93  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n94  |         return String::\n95\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    125 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvh59w642.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpvh59w642.rs:22:42\n   |\n22 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n23 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpvh59w642.rs:27:42\n   |\n27 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n28 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpvh59w642.rs:32:42\n\
    \   |\n32 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n33 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpvh59w642.rs:37:42\n   |\n37 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n38 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpvh59w642.rs:42:42\n   |\n42 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n43 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfox4bj6g.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos {\n    |                                   -\
    \ this delimiter might not be properly closed...\n79  |         return \n80  |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n110\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_4 == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfox4bj6g.rs:33:44\n   |\n33 |     let mut dot_pos_5 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n34 |  \
    \   if dot_pos_5 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfox4bj6g.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_6 == String::npos {\n   |\
    \     -- unexpected to"
  stdout: ''
  timestamp: 1659821573
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    if dot_pos_2 > dot_pos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut first_letter = file_name[dot_pos\
    \ + 1..dot_pos_2].chars().next()\n    if first_letter != String::from(\"a\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name[dot_pos_2 + 1..dot_pos].chars().any(|c|\
    \ c != String::from(\".\") && c != String::from(\"..\")) {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos + 1..dot_pos_2].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos_2 + 1..dot_pos].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos + 1..dot_pos_2].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos_2 + 1..dot_pos].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos + 1..dot_pos_2].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos_2 + 1..dot_pos].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos + 1..dot_pos_2].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return String::from(\"No\");\n \
    \   }\n    if file_name[dot_pos_2 + 1..dot_pos].chars().any(|c| c != String::from(\"\
    .\") && c != String::from(\"..\")) {\n        return \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkxd1qhb5.rs:88:3\n\
    \   |\n15 | fn file_name_check(file_name: String) -> String {\n   |          \
    \                                       - unclosed delimiter\n...\n56 |     if\
    \ file_name[dot_pos_2 + 1..dot_pos].chars().any(|c| c != String::from(\".\") &&\
    \ c != String::from(\"..\")) {\n   |                                         \
    \                                                                    - this delimiter\
    \ might not be properly closed...\n57 |         return \n58 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n88 | }\n   |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpkxd1qhb5.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\
    \ \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpkxd1qhb5.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpkxd1qhb5.rs:28:76\n   |\n28 |     let\
    \ mut first_letter = file_name[dot_pos + 1..dot_pos_2].chars().next()\n   |  \
    \                                                                          ^ help:\
    \ add `;` here\n29 |     if first_letter != String::from(\"a\") {\n   |     --\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpkxd1qhb5.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkxd1qhb5.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkxd1qhb5.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_index =\
    \ file_name.find('.')\n        if dot_index == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name.chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_index = file_name.find('.')\n\
    \                if dot_index == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_index = file_name.find('.')\n\
    \                    if dot_index == String::npos {\n                        String::from(\"\
    No\")\n                    } else {\n                        if dot_index > dot_index\
    \ {\n                            String::from(\"No\")\n                      \
    \  } else {\n                            if dot_index > dot_index {\n        \
    \                        String::from(\"No\")\n                            } else\
    \ {\n                                String::from(\"Yes\")\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n}\n\nfn main() {\n    let candidate =\
    \ file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp4vo0c1fl.rs:19:48\n\
    \   |\n19 |         let mut dot_index = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n20 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp4vo0c1fl.rs:27:56\n   |\n27 |            \
    \     let mut dot_index = file_name.find('.')\n   |                          \
    \                              ^ help: add `;` here\n28 |                 if dot_index\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmp4vo0c1fl.rs:31:60\n   |\n31 |       \
    \              let mut dot_index = file_name.find('.')\n   |                 \
    \                                           ^ help: add `;` here\n32 |       \
    \              if dot_index == String::npos {\n   |                     -- unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4vo0c1fl.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4vo0c1fl.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4vo0c1fl.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4vo0c1fl.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4vo0c1fl.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4vo0c1fl.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpob5ec572.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos {\n    |                                   -\
    \ this delimiter might not be properly closed...\n79  |         return \n80  |\
    \ }\n    | - ...as it matches this but it has different indentation\n...\n110\
    \ | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpob5ec572.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpob5ec572.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpob5ec572.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpob5ec572.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_4 == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpob5ec572.rs:33:44\n   |\n33 |     let mut dot_pos_5 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n34 |  \
    \   if dot_pos_5 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpob5ec572.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_6 == String::npos {\n   |\
    \     -- unexpected t"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_letter = file_name.chars().next().unwrap();\n    if first_letter\
    \ < 'a' || first_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    if file_name.chars().count(|c| c == '.') != 1 {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().count(|c| c == '.') != 1 {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().count(|c| c == '.') !=\
    \ 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c == '.') != 1 {\n        return String::from(\"No\");\n    }\n    if file_name.chars().count(|c|\
    \ c\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpvue2zxmt.rs:19:42\n\
    \   |\n19 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpvue2zxmt.rs:76:1\n\
    \   |\n75 |     if file_name.chars().count(|c| c\n   |     -- this `if` expression\
    \ has a condition, but no block\n76 | }\n   | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpvue2zxmt.rs:75:31\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n75 |     if file_name.chars().count(|c|\
    \ c\n   |                               ^ unclosed delimiter\n76 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvue2zxmt.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvue2zxmt.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvue2zxmt.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvue2zxmt.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvue2zxmt.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvue2zxmt.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvue2zxmt.rs:83:17\n   |\n83 |\
    \     assert_eq!"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name_str\
    \ = file_name.to_string();\n    let mut dot_pos = file_name_str.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_str = String::from(\"\");\n    let mut dot_pos_str_len =\
    \ String::from(\"\");\n    let mut dot_pos_str_len2 = String::from(\"\");\n  \
    \  let mut dot_pos_str_len3 = String::from(\"\");\n    let mut dot_pos_str_len4\
    \ = String::from(\"\");\n    let mut dot_pos_str_len5 = String::from(\"\");\n\
    \    let mut dot_pos_str_len6 = String::from(\"\");\n    let mut dot_pos_str_len7\
    \ = String::from(\"\");\n    let mut dot_pos_str_len8 = String::from(\"\");\n\
    \    let mut dot_pos_str_len9 = String::from(\"\");\n    let mut dot_pos_str_len10\
    \ = String::from(\"\");\n    let mut dot_pos_str_len11 = String::from(\"\");\n\
    \    let mut dot_pos_str_len12 = String::from(\"\");\n    let mut dot_pos_str_len13\
    \ = String::from(\"\");\n    let mut dot_pos_str_len14 = String::from(\"\");\n\
    \    let mut dot_pos_str_len15 = String::from(\"\");\n    let mut dot_pos_str_len16\
    \ = String::from(\"\");\n    let mut dot_pos_str_len17 = String::from(\"\");\n\
    \    let mut dot_pos_str_len18 = String::from(\"\");\n    let mut dot_pos_str_len19\
    \ = String::from(\"\");\n    let mut dot_pos_str_len20 = String::from(\"\");\n\
    \    let mut dot_pos_str_len21 = String::from(\"\");\n    let mut dot_pos_str_len22\
    \ = String::from(\"\");\n    let mut dot_pos_str_len23 = String::from(\"\");\n\
    \    let mut dot_pos_str_len24 = String::from(\"\");\n    let mut dot_pos_str_len25\
    \ = String::from(\"\");\n    let mut dot_pos_str_len26 = String::from(\"\");\n\
    \    let mut dot_pos_str_len27 = String::from(\"\");\n    let mut dot_pos_str_len28\
    \ = String::from(\"\");\n    let mut dot_pos_str_len29 = String::from(\"\");\n\
    \    let mut dot_pos_str_len30 = String::from(\"\");\n    let mut dot_pos_str_len31\
    \ = String::from(\"\");\n    let mut dot_pos_str_len32 = String::from(\"\");\n\
    \    let mut dot_pos_str_len33 = String::from(\"\");\n    let mut dot_pos_str_len34\
    \ = String\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpm57sylm9.rs:17:46\n\
    \   |\n17 |     let mut dot_pos = file_name_str.find('.')\n   |              \
    \                                ^ help: add `;` here\n18 |     if dot_pos ==\
    \ String::npos { \n   |     -- unexpected token\n\nerror: expected `;`, found\
    \ `}`\n  --> /tmp/tmpm57sylm9.rs:55:39\n   |\n55 |     let mut dot_pos_str_len34\
    \ = String\n   |                                       ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct\
    \ `String`\n   --> /tmp/tmpm57sylm9.rs:55:33\n    |\n55  |       let mut dot_pos_str_len34\
    \ = String\n    |                                   ^^^^^^ help: use struct literal\
    \ syntax instead: `String { vec: val }`\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpm57sylm9.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpm57sylm9.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm57sylm9.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm57sylm9.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm57sylm9.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm57sylm9.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm57sylm9.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    let mut dot_pos = dot_pos\
    \ + 1;\n    while dot_pos < file_name.len() {\n        if file_name[dot_pos] >=\
    \ 'a' && file_name[dot_pos] <= 'z' ||\n            file_name[dot_pos] >= 'A' &&\
    \ file_name[dot_pos] <= 'Z' ||\n            file_name[dot_pos] >= '0' && file_name[dot_pos]\
    \ <= '9' {\n            dot_pos += 1;\n        } else {\n            break;\n\
    \        }\n    }\n    if dot_pos == file_name.len() {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos] != '\\0' {\n        return String::from(\"\
    No\");\n    }\n    if file_name.len() < 3 {\n        return String::from(\"No\"\
    );\n    }\n    if file_name.chars().any(|c| !c.is_ascii_letter()) {\n        return\
    \ String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_lowercase())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_uppercase()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_digit()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_symbol()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_whitespace()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_control()) {\n   \
    \     return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_print())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_graph()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_extended()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_ascii_graph()) {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpu3ps2eng.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ one of `:`, `@`, or `|`, found `)`\n  --> /tmp/tmpu3ps2eng.rs:75:1\n   |\n74\
    \ |     if file_name.chars().any(|c\n   |                                - expected\
    \ one of `:`, `@`, or `|`\n75 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpu3ps2eng.rs:74:29\n   |\n15 | fn file_name_check(file_name:\
    \ String) -> String {\n   |                                                 -\
    \ closing delimiter possibly meant for this\n...\n74 |     if file_name.chars().any(|c\n\
    \   |                             ^ unclosed delimiter\n75 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu3ps2eng.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu3ps2eng.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu3ps2eng.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu3ps2eng.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu3ps2eng.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu3ps2eng.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /t"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_index =\
    \ file_name.find('.')\n        if dot_index == String::npos {\n            String::from(\"\
    No\")\n        } else {\n            let mut first_letter = file_name[0..dot_index].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_index = file_name.find('.')\n\
    \                if dot_index == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[dot_index..].chars().next().unwrap();\n\
    \                    if dot_name.contains('.') {\n                        String::from(\"\
    No\")\n                    } else {\n                        String::from(\"Yes\"\
    )\n                    }\n                }\n            }\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp0egxqcs0.rs:19:48\n\
    \   |\n19 |         let mut dot_index = file_name.find('.')\n   |            \
    \                                    ^ help: add `;` here\n20 |         if dot_index\
    \ == String::npos {\n   |         -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmp0egxqcs0.rs:27:56\n   |\n27 |            \
    \     let mut dot_index = file_name.find('.')\n   |                          \
    \                              ^ help: add `;` here\n28 |                 if dot_index\
    \ == String::npos {\n   |                 -- unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0egxqcs0.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0egxqcs0.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0egxqcs0.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0egxqcs0.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0egxqcs0.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0egxqcs0.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0egxqcs0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0egxqcs0.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not fou"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_len = file_name.len();\n    while dot_pos\
    \ < dot_len {\n        let mut dot_char = file_name[dot_pos];\n        if dot_char\
    \ == '.' {\n            if dot_pos == dot_len {\n                return String::from(\"\
    No\");\n            }\n            let mut dot_char = file_name[dot_pos + 1];\n\
    \            if dot_char == '.' {\n                if dot_pos == dot_len {\n \
    \                   return String::from(\"No\");\n                }\n        \
    \        let mut dot_char = file_name[dot_pos + 2];\n                if dot_char\
    \ == '.' {\n                    if dot_pos == dot_len {\n                    \
    \    return String::from(\"No\");\n                    }\n                   \
    \ let mut dot_char = file_name[dot_pos + 3];\n                    if dot_char\
    \ == '.' {\n                        if dot_pos == dot_len {\n                \
    \            return String::from(\"No\");\n                        }\n       \
    \                 let mut dot_char = file_name[dot_pos + 4];\n               \
    \         if dot_char == '.' {\n                            if dot_pos == dot_len\
    \ {\n                                return String::from(\"No\");\n          \
    \                  }\n                            let mut dot_char = file_name[dot_pos\
    \ + 5];\n                            if dot_char == '.' {\n                  \
    \              if dot_pos == dot_len {\n                                    return\
    \ String::from(\"No\");\n                                }\n                 \
    \               let mut dot_char = file_name[dot_pos + 6];\n                 \
    \               if dot_char == '.' {\n                                    if dot_pos\
    \ == dot_len {\n                                        return String::from(\"\
    No\");\n                                    }\n                              \
    \      let mut dot_char = file_name[dot_pos + 7];\n                          \
    \          if dot_char == '.' {\n                                        if dot_pos\
    \ == dot_len {\n                                            return String::from(\"\
    No\");\n                                        }\n                          \
    \              let mut dot_char = file_name[dot_pos + 8];\n                  \
    \                      if dot_char == '.' {\n                                \
    \            if dot_pos == dot_len {\n                                       \
    \         return String::from(\"No\");\n                                     \
    \       }\n                                            let mut dot_char = file_name[dot_pos\
    \ + 9];\n                                            if dot_char == '.' {\n  \
    \                                              if dot_pos == dot_len {\n     \
    \                                               return String::from(\"No\");\n\
    \                                                }\n                         \
    \                   }\n                                        }\n           \
    \                         }\n                                }\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        dot_pos += 1;\n    }\n    return\
    \ String::from(\"Yes\");\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmptgm6sleg.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror[E0425]: cannot find value `left` in\
    \ this scope\n  --> /tmp/tmptgm6sleg.rs:91:17\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptgm6sleg.rs:91:25\n \
    \  |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptgm6sleg.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptgm6sleg.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptgm6sleg.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptgm6sleg.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptgm6sleg.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptgm6sleg.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptgm6sleg.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptgm6sleg.rs:95:25\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |    "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut dot_pos = file_name.find('.')\n\
    \    let mut dot_pos_2 = file_name.find('.')\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    let mut dot_pos_4 = file_name.find('.')\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    let mut dot_pos_6 = file_name.find('.')\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    let mut dot_pos_8 = file_name.find('.')\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    let mut dot_pos_10 = file_name.find('.')\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    let mut dot_pos_12 = file_name.find('.')\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    let mut dot_pos_14 = file_name.find('.')\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    let mut dot_pos_16 = file_name.find('.')\n    let mut dot_pos_17 = file_name.find('.')\n\
    \    let mut dot_pos_18 = file_name.find('.')\n    let mut dot_pos_19 = file_name.find('.')\n\
    \    let mut dot_pos_20 = file_name.find('.')\n    let mut dot_pos_21 = file_name.find('.')\n\
    \    let mut dot_pos_22 = file_name.find('.')\n    let mut dot_pos_23 = file_name.find('.')\n\
    \    let mut dot_pos_24 = file_name.find('.')\n    let mut dot_pos_25 = file_name.find('.')\n\
    \    let mut dot_pos_26 = file_name.find('.')\n    let mut dot_pos_27 = file_name.find('.')\n\
    \    let mut dot_pos_28 = file_name.find('.')\n    let mut dot_pos_29 = file_name.find('.')\n\
    \    let mut dot_pos_30 = file_name.find('.')\n    let mut dot_pos_31 = file_name.find('.')\n\
    \    let mut dot_pos_32 = file_name.find('.')\n    let mut dot_pos_33 = file_name.find('.')\n\
    \    let mut dot_pos_34 = file_name.find('.')\n    let mut dot_pos_35 = file_name.find('.')\n\
    \    let mut dot_pos_36 = file_name.find('.')\n    let mut dot_pos_37 = file_name.find('.')\n\
    \    let mut dot_pos_38 = file_name.find('.')\n    let mut dot_pos_39 = file_name.find('.')\n\
    \    let mut dot_pos_40 = file_name.find('.')\n    let mut dot_pos_41 = file_name.find('.')\n\
    \    let mut dot_pos_42 = file_name.find('.')\n    let mut dot_pos_43 = file_name.find('.')\n\
    \    let mut dot_pos_44 = file_name.\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp62aiu__w.rs:16:42\n\
    \   |\n16 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n17 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n \
    \ --> /tmp/tmp62aiu__w.rs:17:44\n   |\n17 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n18 |  \
    \   let mut dot_pos_3 = file_name.find('.')\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `let`\n  --> /tmp/tmp62aiu__w.rs:18:44\n  \
    \ |\n18 |     let mut dot_pos_3 = file_name.find('.')\n   |                  \
    \                          ^ help: add `;` here\n19 |     let mut dot_pos_4 =\
    \ file_name.find('.')\n   |     --- unexpected token\n\nerror: expected `;`, found\
    \ keyword `let`\n  --> /tmp/tmp62aiu__w.rs:19:44\n   |\n19 |     let mut dot_pos_4\
    \ = file_name.find('.')\n   |                                            ^ help:\
    \ add `;` here\n20 |     let mut dot_pos_5 = file_name.find('.')\n   |     ---\
    \ unexpected token\n\nerror: expected `;`, found keyword `let`\n  --> /tmp/tmp62aiu__w.rs:20:44\n\
    \   |\n20 |     let mut dot_pos_5 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n21 |     let mut dot_pos_6\
    \ = file_name.find('.')\n   |     --- unexpected token\n\nerror: expected `;`,\
    \ found keyword `let`\n  --> /tmp/tmp62aiu__w.rs:21:44\n   |\n21 |     let mut\
    \ dot_pos_6 = file_name.find('.')\n   |                                      \
    \      ^ help: add `;` here\n22 |     let mut dot_pos_7 = file_name.find('.')\n\
    \   |     --- unexpected token\n\nerror: expected `;`, found keyword `let`\n \
    \ --> /tmp/tmp62aiu__w.rs:22:44\n   |\n22 |     let mut dot_pos_7 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n23 |  \
    \   let mut dot_pos_8 = file_name.find('.')\n   |     --- unexpected token\n\n\
    error: expected `;`, found keyword `let`\n  --> /tmp/tmp62aiu__w.rs:23:44\n  \
    \ |\n23 |     let mut dot_pos_8 = file_name.fin"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut dot_pos = file_name.find('.')\n\
    \    let mut dot_pos_end = file_name.len();\n    \n    if dot_pos == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos == 0 {\n\
    \        return String::from(\"No\");\n    }\n    \n    if dot_pos > dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut first_letter\
    \ = file_name.chars().next().unwrap();\n    \n    if first_letter < 'a' || first_letter\
    \ > 'z' {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos >\
    \ dot_pos_end - 3 {\n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut dot_pos_start = dot_pos - 1;\n    \n    while dot_pos_start > 0 && file_name[dot_pos_start]\
    \ != '.' {\n        dot_pos_start -= 1;\n    }\n    \n    if dot_pos_start ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_end\
    \ = dot_pos_start + 3;\n    \n    while dot_pos_end < file_name.len() && file_name[dot_pos_end]\
    \ != '.' {\n        dot_pos_end += 1;\n    }\n    \n    if dot_pos_end == file_name.len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_end < dot_pos_start\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_start\
    \ = dot_pos_end - 1;\n    \n    while dot_pos_start > 0 && file_name[dot_pos_start]\
    \ != '.' {\n        dot_pos_start -= 1;\n    }\n    \n    if dot_pos_start ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_end\
    \ = dot_pos_start + 3;\n    \n    while dot_pos_end < file_name.len() && file_name[dot_pos_end]\
    \ != '.' {\n        dot_pos_end += 1;\n    }\n    \n    if dot_pos_end == file_name.len()\
    \ {\n        return String::from(\"No\");\n    }\n    \n    if dot_pos_end < dot_pos_start\
    \ {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_start\
    \ = dot_pos_end - 1;\n    \n    while dot_pos_start > 0 && file_name[dot_pos_start]\
    \ != '.' {\n        dot_pos_start -= 1;\n    }\n    \n    if dot_pos_start ==\
    \ 0 {\n        return String::from(\"No\");\n    }\n    \n    let mut dot_pos_end\
    \ = dot_pos_start + 3;\n    \n\n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpqzth3q61.rs:16:42\n\
    \   |\n16 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n17 |     let mut dot_pos_end =\
    \ file_name.len();\n   |     --- unexpected token\n\nerror[E0425]: cannot find\
    \ value `left` in this scope\n   --> /tmp/tmpqzth3q61.rs:106:17\n    |\n106 |\
    \     assert_eq!({left}, {right});\n    |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n   --> /tmp/tmpqzth3q61.rs:106:25\n\
    \    |\n106 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpqzth3q61.rs:107:17\n    |\n107 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpqzth3q61.rs:107:25\n\
    \    |\n107 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpqzth3q61.rs:108:17\n    |\n108 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpqzth3q61.rs:108:25\n\
    \    |\n108 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpqzth3q61.rs:109:17\n    |\n109 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpqzth3q61.rs:109:25\n\
    \    |\n109 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpqzth3q61.rs:110:17\n    |\n110 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpqzth3q61.rs:"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter2 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter2 = dot_pos_end;\n    let mut dot_pos_start_letter3 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter3 = dot_pos_end;\n    let mut dot_pos_start_letter4\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter4 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter5 = dot_pos_start;\n    let mut dot_pos_end_letter5 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter6 = dot_pos_start;\n    let mut dot_pos_end_letter6\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter7 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter7 = dot_pos_end;\n    let mut dot_pos_start_letter8 =\
    \ dot_pos_start;\n    let mut dot_pos_end_letter8 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter9 = dot_pos_start;\n    let mut dot_pos_end_letter9 = dot_pos_end;\n\
    \    let mut dot_pos_start_letter10 = dot_pos_start;\n    let mut dot_pos_end_letter10\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter11 = dot_pos_start;\n    let\
    \ mut dot_pos_end_letter11 = dot_pos_end;\n    let mut dot_pos_start_letter12\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter12 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter13 = dot_pos_start;\n    let mut dot_pos_end_letter13 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter14 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter14 = dot_pos_end;\n    let mut dot_pos_start_letter15 = dot_pos_start;\n\
    \    let mut dot_pos_end_letter15 = dot_pos_end;\n    let mut dot_pos_start_letter16\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter16 = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter17 = dot_pos_start;\n    let mut dot_pos_end_letter17 =\
    \ dot_pos_end;\n    let mut dot_pos_start_letter18 = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter18 = dot_pos_end;\n    let mut dot_pos_start_letter19\n}\n\
    \nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmp_3jdi32c.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp_3jdi32c.rs:59:35\n\
    \   |\n59 |     let mut dot_pos_start_letter19\n   |                         \
    \          ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_3jdi32c.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_3jdi32c.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_3jdi32c.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_3jdi32c.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left},"
  stdout: ''
  timestamp: 1659805603
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos +\
    \ 1;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpmu75u7dr.rs:19:42\n\
    \   |\n19 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected pattern, found `}`\n  -->\
    \ /tmp/tmpmu75u7dr.rs:63:1\n   |\n63 | }\n   | ^ expected pattern\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmu75u7dr.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmu75u7dr.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmu75u7dr.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmu75u7dr.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmu75u7dr.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmu75u7dr.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmu75u7dr.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmu75u7dr.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmu75u7dr.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `ri"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.len() >\
    \ 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains(\"\
    .\") {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    a\") || file_name.starts_with(\"A\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"0\") || file_name.starts_with(\"9\") {\n\
    \        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    .\") {\n        let mut dot_index = file_name.rfind(\".\");\n        if dot_index\
    \ == String::npos {\n            return String::from(\"No\");\n        }\n   \
    \     if dot_index == 0 {\n            return String::from(\"No\");\n        }\n\
    \        let mut dot_substr = file_name[dot_index..].to_string();\n        if\
    \ dot_substr.len() != 1 || dot_substr.starts_with(\".\") {\n            return\
    \ String::from(\"No\");\n        }\n    }\n    return String::from(\"Yes\");\n\
    }\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd6ss87n0.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd6ss87n0.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd6ss87n0.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd6ss87n0.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd6ss87n0.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd6ss87n0.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd6ss87n0.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd6ss87n0.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd6ss87n0.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd6ss87n0.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd6ss87n0.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_len = dot_pos_end - dot_pos_start;\n    let mut dot_pos_len_end\
    \ = dot_pos_len;\n    let mut dot_pos_len_start = dot_pos_len;\n    let mut dot_pos_len_len\
    \ = dot_pos_len_end - dot_pos_len_start;\n    let mut dot_pos_len_len_end = dot_pos_len_len;\n\
    \    let mut dot_pos_len_len_start = dot_pos_len_len;\n    let mut dot_pos_len_len_len\
    \ = dot_pos_len_len_end - dot_pos_len_len_start;\n    let mut dot_pos_len_len_len_end\
    \ = dot_pos_len_len_len;\n    let mut dot_pos_len_len_len_start = dot_pos_len_len_len;\n\
    \    let mut dot_pos_len_len_len_len = dot_pos_len_len_len_end - dot_pos_len_len_len_start;\n\
    \    let mut dot_pos_len_len_len_len_end = dot_pos_len_len_len_len;\n    let mut\
    \ dot_pos_len_len_len_len_start = dot_pos_len_len_len_len;\n    let mut dot_pos_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_len_end;\n    let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_len_end;\n\n}\n\nfn main() {\n    let candidate\
    \ = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpen5ovg55.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror[E0425]: cannot find value `dot_pos_len_len_len_len_len_end`\
    \ in this scope\n  --> /tmp/tmpen5ovg55.rs:36:47\n   |\n36 |     let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_end;\n   |                                   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar\
    \ name exists: `dot_pos_len_len_len_len_end`\n\nerror[E0425]: cannot find value\
    \ `dot_pos_len_len_len_len_len_len_end` in this scope\n  --> /tmp/tmpen5ovg55.rs:38:47\n\
    \   |\n38 |     let mut dot_pos_len_len_len_len_len_end = dot_pos_len_len_len_len_len_len_end;\n\
    \   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_len_len_len_len_len_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_len_len_len_len_len_len_end` in this\
    \ scope\n  --> /tmp/tmpen5ovg55.rs:39:47\n   |\n39 |     let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n   |                               \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with\
    \ a similar name exists: `dot_pos_len_len_len_len_len_end`\n\nerror[E0425]: cannot\
    \ find value `dot_pos_len_len_len_len_len_len_end` in this scope\n  --> /tmp/tmpen5ovg55.rs:40:47\n\
    \   |\n40 |     let mut dot_pos_len_len_len_len_len_end = dot_pos_len_len_len_len_len_len_end;\n\
    \   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `dot_pos_len_len_len_len_len_end`\n\
    \nerror[E0425]: cannot find value `dot_pos_len_len_len_len_len_len_end` in this\
    \ scope\n  --> /tmp/tmpen5ovg55.rs:41:47\n   |\n41 |     let mut dot_pos_len_len_len_len_len_end\
    \ = dot_pos_len_len_len_len_len_len_end;\n   |                               \
    \                ^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end =\
    \ file_name.find('.')\n    if dot_pos_end == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n    let mut dot_pos_end\
    \ = file_name.find('.')\n    if dot_pos_end == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end + 1;\n \
    \   let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwfjp3x12.rs:105:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n73  |  \
    \   if dot_pos_end == String::npos {\n    |                                  \
    \  - this delimiter might not be properly closed...\n74  |         return \n75\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    105 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:22:46\n   |\n22 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n23 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:27:46\n   |\n27\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n28 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:32:46\n   |\n32 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n33 |\
    \     if dot_pos_end == String::npos {\n   |     -- unexpected token\n\nerror:\
    \ expected `;`, found keyword `if`\n  --> /tmp/tmpwfjp3x12.rs:37:46\n   |\n37\
    \ |     let mut dot_pos_end = file_name.find('.')\n   |                      \
    \                        ^ help: add `;` here\n38 |     if dot_pos_end == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpwfjp3x12.rs:42:46\n   |\n42 |     let mut dot_pos_end = file_name.find('.')\n\
    \   |                                              ^ help: add `;` here\n43 |\
    \     if dot_pos_end == String::"
  stdout: ''
  timestamp: 1659821574
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n    let\
    \ mut dot_pos_start_letter = true;\n    while dot_pos_start < dot_pos_end {\n\
    \        let mut letter = file_name[dot_pos_start];\n        if letter < 'a' ||\
    \ letter > 'z' {\n            dot_pos_start_letter = false;\n            break;\n\
    \        }\n        dot_pos_start += 1;\n    }\n    if dot_pos_start_letter {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos_end_letter =\
    \ true;\n    while dot_pos_end_letter {\n        let mut letter = file_name[dot_pos_end];\n\
    \        if letter < 'a' || letter > 'z' {\n            dot_pos_end_letter = false;\n\
    \            break;\n        }\n        dot_pos_end += 1;\n    }\n    if dot_pos_end\
    \ == dot_pos_start {\n        return String::from(\"No\");\n    }\n    if dot_pos_end\
    \ < dot_pos_start {\n        return String::from(\"No\");\n    }\n    if dot_pos_end\
    \ - dot_pos_start > 3 {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == 0 {\n        return String::from(\"No\");\n    }\n    if dot_pos_end == file_name.len()\
    \ - 1 {\n        return String::from(\"No\");\n    }\n    if dot_pos_start ==\
    \ dot_pos_end {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end + 1 {\n        return String::from(\"No\");\n    }\n    if dot_pos_start\
    \ == dot_pos_end - 2 {\n        return String::from(\"No\");\n    }\n    if dot_pos_end\
    \ == dot_pos_start + 1 {\n        return String::from(\"No\");\n    }\n    if\
    \ dot_pos_end == dot_pos_start + 2 {\n        return String::from(\"No\");\n \
    \   }\n    if dot_pos_end == dot_pos_start + 3 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos_start + 4 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos_start + 5 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos_start + 6 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos_start + 7 {\n        return String::from(\"\
    No\");\n    }\n    if dot_pos_end == dot_pos_start + \n}\n\nfn main() {\n    let\
    \ candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpzhnmpni9.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `}`\n \
    \ --> /tmp/tmpzhnmpni9.rs:90:1\n   |\n90 | }\n   | ^ expected expression\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzhnmpni9.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzhnmpni9.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzhnmpni9.rs:95:17\n   |\n95 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzhnmpni9.rs:95:25\n\
    \   |\n95 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzhnmpni9.rs:96:17\n   |\n96 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzhnmpni9.rs:96:25\n   |\n96 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzhnmpni9.rs:97:17\n   |\n97 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzhnmpni9.rs:97:25\n   |\n97 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzhnmpni9.rs:98:17\n  \
    \ |\n98 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find val"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos + 1;\n    if dot_pos_end == file_name.len()\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos_end > dot_pos\
    \ {\n        let mut dot_pos_start = dot_pos;\n        while dot_pos_start < dot_pos_end\
    \ {\n            if file_name[dot_pos_start] >= 'a' && file_name[dot_pos_start]\
    \ <= 'z' {\n                dot_pos_start++;\n            } else if file_name[dot_pos_start]\
    \ >= 'A' && file_name[dot_pos_start] <= 'Z' {\n                dot_pos_start++;\n\
    \            } else {\n                return String::from(\"No\");\n        \
    \    }\n        }\n    }\n    if dot_pos_start == dot_pos {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos_start] != 'a' && file_name[dot_pos_start]\
    \ != 'A' && file_name[dot_pos_start] != 'z' && file_name[dot_pos_start] != 'Z'\
    \ {\n        return String::from(\"No\");\n    }\n    if dot_pos_end - dot_pos\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if dot_pos > dot_pos_end\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos_end]\
    \ != 'txt' && file_name[dot_pos_end] != 'exe' && file_name[dot_pos_end] != 'dll'\
    \ {\n        return String::from(\"No\");\n    }\n    return String::from(\"Yes\"\
    );\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: character literal may only contain one codepoint\n  --> /tmp/tmp83utr6vw.rs:51:34\n\
    \   |\n51 |     if file_name[dot_pos_end] != 'txt' && file_name[dot_pos_end] !=\
    \ 'exe' && file_name[dot_pos_end] != 'dll' {\n   |                           \
    \       ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n51 |     if file_name[dot_pos_end] != \"txt\" && file_name[dot_pos_end]\
    \ != 'exe' && file_name[dot_pos_end] != 'dll' {\n   |                        \
    \          ~~~~~\n\nerror: character literal may only contain one codepoint\n\
    \  --> /tmp/tmp83utr6vw.rs:51:69\n   |\n51 |     if file_name[dot_pos_end] !=\
    \ 'txt' && file_name[dot_pos_end] != 'exe' && file_name[dot_pos_end] != 'dll'\
    \ {\n   |                                                                    \
    \ ^^^^^\n   |\nhelp: if you meant to write a `str` literal, use double quotes\n\
    \   |\n51 |     if file_name[dot_pos_end] != 'txt' && file_name[dot_pos_end] !=\
    \ \"exe\" && file_name[dot_pos_end] != 'dll' {\n   |                         \
    \                                            ~~~~~\n\nerror: character literal\
    \ may only contain one codepoint\n  --> /tmp/tmp83utr6vw.rs:51:104\n   |\n51 |\
    \     if file_name[dot_pos_end] != 'txt' && file_name[dot_pos_end] != 'exe' &&\
    \ file_name[dot_pos_end] != 'dll' {\n   |                                    \
    \                                                                    ^^^^^\n \
    \  |\nhelp: if you meant to write a `str` literal, use double quotes\n   |\n51\
    \ |     if file_name[dot_pos_end] != 'txt' && file_name[dot_pos_end] != 'exe'\
    \ && file_name[dot_pos_end] != \"dll\" {\n   |                               \
    \                                                                         ~~~~~\n\
    \nerror: expected `;`, found keyword `if`\n  --> /tmp/tmp83utr6vw.rs:19:43\n \
    \  |\n19 |     let mut dot_pos = file_name.rfind('.')\n   |                  \
    \                         ^ help: add `;` here\n20 |     if dot_pos == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected expression, found `+`\n \
    \ --> /tmp/tmp83utr6vw.rs:31:31\n   |\n31 |                 dot_pos_start++;\n\
    \  "
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n  \
    \  if dot_pos == String::npos { \n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ { \n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::\n}\n\nfn main() {\n\
    \    let candidate = file_name_check;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjwrru_aj.rs:114:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n82  |  \
    \   if dot_pos == String::npos { \n    |                                - this\
    \ delimiter might not be properly closed...\n83  |         return String::\n84\
    \  | }\n    | - ...as it matches this but it has different indentation\n...\n\
    114 | }\n    |   ^\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:21:42\n   |\n21 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n22 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:25:42\n   |\n25 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n26 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:29:42\n\
    \   |\n29 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n30 |     if dot_pos == String::npos\
    \ { \n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpjwrru_aj.rs:33:42\n   |\n33 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n34 |    \
    \ if dot_pos == String::npos { \n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpjwrru_aj.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { \n   |    \
    \ -- unexpected token\n\nerror: expected "
  stdout: ''
  timestamp: 1659805604
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_2 = file_name.find('.')\n    if dot_pos_2 == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    let mut dot_pos_3 = file_name.find('.')\n\
    \    if dot_pos_3 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_4 = file_name.find('.')\n    if dot_pos_4 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_5 = file_name.find('.')\n\
    \    if dot_pos_5 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_6 = file_name.find('.')\n    if dot_pos_6 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_7 = file_name.find('.')\n\
    \    if dot_pos_7 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_8 = file_name.find('.')\n    if dot_pos_8 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_9 = file_name.find('.')\n\
    \    if dot_pos_9 == String::npos {\n        return String::from(\"No\");\n  \
    \  }\n    let mut dot_pos_10 = file_name.find('.')\n    if dot_pos_10 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_11 = file_name.find('.')\n\
    \    if dot_pos_11 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_12 = file_name.find('.')\n    if dot_pos_12 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_13 = file_name.find('.')\n\
    \    if dot_pos_13 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_14 = file_name.find('.')\n    if dot_pos_14 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_15 = file_name.find('.')\n\
    \    if dot_pos_15 == String::npos {\n        return String::from(\"No\");\n \
    \   }\n    let mut dot_pos_16 = file_name.find('.')\n    if dot_pos_16 == String::npos\
    \ {\n\n}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpj444k_g4.rs:110:3\n\
    \    |\n15  | fn file_name_check(file_name: String) -> String {\n    |       \
    \                                          - unclosed delimiter\n...\n78  |  \
    \   if dot_pos_16 == String::npos {\n    |                                   -\
    \ this delimiter might not be properly closed...\n79  | \n80  | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n110 | }\n    |   ^\n\n\
    error: expected `;`, found keyword `if`\n  --> /tmp/tmpj444k_g4.rs:17:42\n   |\n\
    17 |     let mut dot_pos = file_name.find('.')\n   |                         \
    \                 ^ help: add `;` here\n18 |     if dot_pos == String::npos {\n\
    \   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  -->\
    \ /tmp/tmpj444k_g4.rs:21:44\n   |\n21 |     let mut dot_pos_2 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n22 |  \
    \   if dot_pos_2 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpj444k_g4.rs:25:44\n   |\n25 |     let\
    \ mut dot_pos_3 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n26 |     if dot_pos_3 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpj444k_g4.rs:29:44\n\
    \   |\n29 |     let mut dot_pos_4 = file_name.find('.')\n   |                \
    \                            ^ help: add `;` here\n30 |     if dot_pos_4 == String::npos\
    \ {\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpj444k_g4.rs:33:44\n   |\n33 |     let mut dot_pos_5 = file_name.find('.')\n\
    \   |                                            ^ help: add `;` here\n34 |  \
    \   if dot_pos_5 == String::npos {\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpj444k_g4.rs:37:44\n   |\n37 |     let\
    \ mut dot_pos_6 = file_name.find('.')\n   |                                  \
    \          ^ help: add `;` here\n38 |     if dot_pos_6 == String::npos {\n   |\
    \     -- unexpected token\n\nerror: exp"
  stdout: ''
  timestamp: 1659821575
- exit_code: 1
  program: "/// Create a function which takes a string representing a file's name,\
    \ and returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    /// A file's name is considered to be valid if and only if all the following conditions\
    \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
    \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// -\
    \ The substring before the dot should not be empty, and it starts with a letter\
    \ from \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>>\
    \ file_name_check(String::from(\"example.txt\"))\n/// String::from(\"Yes\")\n\
    /// >>> file_name_check(String::from(\"1example.dll\"))\n/// String::from(\"No\"\
    )\nfn file_name_check(file_name: String) -> String {\n    let mut file_name =\
    \ file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos -\
    \ 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n \
    \       return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { return String::from(\"No\") }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') \n}\n\nfn main() {\n    let candidate = file_name_check;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpfwr_uh1k.rs:17:42\n\
    \   |\n17 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n18 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfwr_uh1k.rs:22:42\n   |\n22 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n23 |     if dot_pos == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfwr_uh1k.rs:27:42\n   |\n27 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n28 |    \
    \ if dot_pos == String::npos { return String::from(\"No\") }\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfwr_uh1k.rs:32:42\n\
    \   |\n32 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n33 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`\n  --> /tmp/tmpfwr_uh1k.rs:37:42\n   |\n37 |     let\
    \ mut dot_pos = file_name.find('.')\n   |                                    \
    \      ^ help: add `;` here\n38 |     if dot_pos == String::npos { return String::from(\"\
    No\") }\n   |     -- unexpected token\n\nerror: expected `;`, found keyword `if`\n\
    \  --> /tmp/tmpfwr_uh1k.rs:42:42\n   |\n42 |     let mut dot_pos = file_name.find('.')\n\
    \   |                                          ^ help: add `;` here\n43 |    \
    \ if dot_pos == String::npos { return String::from(\"No\") }\n   |     -- unexpected\
    \ token\n\nerror: expected `;`, found keyword `if`\n  --> /tmp/tmpfwr_uh1k.rs:47:42\n\
    \   |\n47 |     let mut dot_pos = file_name.find('.')\n   |                  \
    \                        ^ help: add `;` here\n48 |     if dot_pos == String::npos\
    \ { return String::from(\"No\") }\n   |     -- unexpected token\n\nerror: expected\
    \ `;`, found keyword `if`"
  stdout: ''
  timestamp: 1659821575
