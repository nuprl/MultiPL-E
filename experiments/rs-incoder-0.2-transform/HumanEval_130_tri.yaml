name: HumanEval_130_tri
language: rs
prompt: "/// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n/// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n/// Tribonacci sequence is defined by the recurrence:\n/// tri(1) =\
  \ 3\n/// tri(n) = 1 + n / 2, if n is even.\n/// tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n/// For example:\n/// tri(2) = 1 + (2 / 2) = 2\n///\
  \ tri(4) = 3\n/// tri(3) = tri(2) + tri(1) + tri(4)\n/// = 2 + 3 + 3 = 8 \n/// You\
  \ are given a non-negative integer number n, you have to a return a list of the\
  \ \n/// first n + 1 numbers of the Tribonacci sequence.\n/// Examples:\n/// >>>\
  \ tri(3)\n/// vec![1, 3, 2, 8]\nfn tri(n: isize) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = tri;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = vec![];\n    let mut tri_1 = 1;\n    let mut tri_2\
    \ = 1;\n    let mut tri_3 = 1;\n    for i in 1..n {\n        result.push(tri_1);\n\
    \        if i % 2 == 0 {\n            tri_2 = tri_1 + tri_2;\n        } else {\n\
    \            tri_3 = tri_1 + tri_2 + tri_3;\n        }\n        tri_1 = tri_2;\n\
    \        tri_2 = tri_3;\n        tri_3 = tri_1 + tri_2 + tri_3;\n    }\n    result",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..=n\
    \ {\n        vec.push(vec[i-2] + vec[i-1] + vec[i-2]);\n    }\n    vec", "   \
    \ let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for\
    \ i in 2..n + 1 {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap());\n        }\n    }\n    vec", "    let mut result\
    \ = vec![];\n    if n == 0 {\n        result.push(3);\n        return result;\n\
    \    }\n    if n == 1 {\n        result.push(1);\n        return result;\n   \
    \ }\n    if n % 2 == 0 {\n        result.push(tri(n - 1) + tri(n - 2));\n    }\
    \ else {\n        result.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    result", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n  \
    \      vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ for i in 2..n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n \
    \   }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n  \
    \  vec.push(1);\n    for i in 2..n+1 {\n        vec.push((i - 1) + (i - 2) + (i\
    \ + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for i in 2..(n + 1) {\n\
    \        if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i\
    \ + n / 2);\n    }\n    for i in 1..n / 2 {\n        vec.push(vec[vec.len() -\
    \ 1] + vec[vec.len() - 2]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        vec.push(3);\n    } else {\n        let mut tri_1 =\
    \ tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        vec.push(tri_1 + tri_2);\n\
    \        if n % 2 == 0 {\n            tri_1.push(tri_1 + tri_2);\n        }\n\
    \    }\n    vec", "    let mut vec = vec![];\n    vec.push(3);\n    for i in 1..n\
    \ {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + i);\n\
    \        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    let mut\
    \ tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n    tri_vec.push(1);\n\
    \    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(4);\n    tri_vec.push(5);\n\
    \    tri_vec.push(6);\n    tri_vec.push(7);\n    tri_vec.push(8);\n    tri_vec.push(9);\n\
    \    tri_vec.push(10);\n    tri_vec.push(11);\n    tri_vec.push(12);\n    tri_vec.push(13);\n\
    \    tri_vec.push(14);\n    tri_vec.push(15);\n    tri_vec.push(16);\n    tri_vec.push(17);\n\
    \    tri_vec.push(18);\n    tri_vec.push(19);\n    tri_vec.push(20);\n    tri_vec.push(21);\n\
    \    tri_vec.push(22);\n    tri_vec.push(23);\n    tri_vec.push(24);\n    tri_vec.push(25);\n\
    \    tri_vec.push(26);\n    tri_vec.push(27);\n    tri_vec.push(28);\n    tri_vec.push(29);\n\
    \    tri_vec.push(30);\n    tri_vec.push(31);\n    tri_vec.push(32);\n    tri_vec.push(33);\n\
    \    tri_vec.push(34);\n    tri_vec.push(35);\n    tri_vec.push(36);\n    tri_vec.push(37);\n\
    \    tri_vec.push(38);\n    tri_vec.push(39);\n    tri_vec.push(40);\n    tri_vec.push(41);\n\
    \    tri_vec.push(42);\n    tri_vec.push(43);\n    tri_vec.push(44);\n    tri_vec.push(45);\n\
    \    tri_vec.push(46);\n    tri_vec.push(47);\n    tri_vec.push(48);\n    tri_vec.push(49);\n\
    \    tri_vec.push(50);\n    tri_vec.push(51);\n    tri_vec.push(52);\n    tri_vec.push(53);\n\
    \    tri_vec.push(54);\n    tri_vec.push(55);\n    tri_vec.push(56);\n    tri_vec.push(57);\n\
    \    tri_vec.push(58);\n    tri_vec.push(59);\n    tri_vec.push(60);\n    tri_vec.push(61);\n\
    \    tri_vec.", "    let mut tri = vec![];\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n   \
    \ vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(8);\n\
    \    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut vec =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..=n\
    \ / 2 {\n        vec.push(i + 1);\n    }\n    for i in 2..=n / 2 {\n        vec.push(vec.last().unwrap()\
    \ + i);\n    }\n    vec", "    if n == 0 {\n        return vec![];\n    }\n  \
    \  let mut a = vec![3, 1];\n    let mut b = vec![3, 1];\n    let mut c = vec![3,\
    \ 1];\n    let mut d = vec![3, 1];\n    for i in 1..n {\n        let mut tmp =\
    \ vec![3, 1];\n        tmp[0] = a[0] + b[1] + c[2] + d[3];\n        tmp[1] = a[1]\
    \ + b[2] + c[0] + d[3];\n        tmp[2] = a[2] + b[0] + c[1] + d[2];\n       \
    \ tmp[3] = a[3] + b[1] + c[2] + d[0];\n        a = tmp;\n        b = tmp;\n  \
    \      c = tmp;\n        d = tmp;\n    }\n    return a;", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..n {\n       \
    \ if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    if\
    \ n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n  \
    \  vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    vec.push(86);\n    vec.", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    ", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n\
    \    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n\
    \    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n\
    \    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n\
    \    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n\
    \    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n\
    \    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n\
    \    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n\
    \    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n\
    \    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n\
    \    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n\
    \    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n\
    \    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n\
    \    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n\
    \    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n\
    \    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n\
    \    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n\
    \    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n\
    \    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n\
    \    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n\
    \    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n\
    \    ", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n    } else\
    \ {\n        let mut tri_1 = vec![];\n        let mut tri_2 = vec![];\n      \
    \  let mut tri_3 = vec![];\n        tri_1.push(3);\n        tri_2.push(1);\n \
    \       tri_3.push(2);\n        for i in 1..n / 2 {\n            tri_1.push(tri_1.pop()\
    \ + tri_2.pop());\n            tri_2.push(tri_2.pop() + tri_3.pop());\n      \
    \      tri_3.push(tri_3.pop() + tri_1.pop());\n        }\n        vec.push(tri_1.pop());\n\
    \        vec.push(tri_2.pop());\n        vec.push(tri_3.pop());\n    }\n    vec",
  "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n    vec[2]\
    \ = 2;\n    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i\
    \ - 3];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut\
    \ vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for i\
    \ in 2..=n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n    }\n    for i in 1..n / 2 {\n        vec.push(i\
    \ + 1);\n    }\n    for i in 0..n / 2 {\n        vec.push(vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    for i in 2..=n {\n        if i % 2 ==\
    \ 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap() + vec.last().unwrap());\n\
    \        } else {\n            vec.push(vec.last().unwrap() + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] =\
    \ 3;\n    for i in 1..=n {\n        vec[i] = vec[i - 1] + vec[i - 2] + vec[i -\
    \ 3];\n    }\n    vec", "    let mut tri_vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        tri_vec.push(3);\n    }\n    else {\n        tri_vec.push(1);\n\
    \        tri_vec.push(n / 2);\n    }\n    for i in 1..(n + 1) {\n        tri_vec.push(tri_vec[tri_vec.len()\
    \ - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n  \
    \  tri_vec", "    let mut tri = vec![];\n    tri.push(3);\n    tri.push(1);\n\
    \    tri.push(2);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2\
    \ = tri(n - 2);\n        vec.push(tri_1 + tri_2);\n        vec.push(tri_1 + tri_2\
    \ + tri_1);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n   \
    \ vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(n - 1);\n      \
    \  vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(n / 2);\n      \
    \  vec.push(3);\n    }\n    vec", "    let mut tri = vec![];\n    tri.push(3);\n\
    \    tri.push(1);\n    for i in 1..n {\n        tri.push(tri[tri.len() - 1] +\
    \ tri[tri.len() - 2] + tri[tri.len() - 3]);\n    }\n    tri", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    vec[1] = 1;\n\
    \    for i in 2..n + 1 {\n        vec[i] = vec[i - 1] + vec[i - 2];\n    }\n \
    \   vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n   \
    \ for i in 1..(n + 1) {\n        let mut sum = 0;\n        for j in 0..i {\n \
    \           sum += j;\n        }\n        vec.push(sum);\n    }\n    vec", " \
    \   let mut vec: Vec<isize> = vec![];\n    if n == 1 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        let mut tri_3 = tri(n + 1);\n        vec.push(tri_1 + tri_2 +\
    \ tri_3);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \    }\n    for i in 1..n {\n        vec.push(vec[i-2] + vec[i-1] + vec[i]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n    }\n    else {\n        let mut tri_1 = vec![vec![1],\
    \ vec![2]];\n        let mut tri_2 = vec![vec![1], vec![2]];\n        let mut\
    \ tri_3 = vec![vec![1], vec![2]];\n        for i in 1..n / 2 {\n            tri_1.push(tri_1[0]\
    \ + tri_1[1]);\n            tri_2.push(tri_2[0] + tri_2[1]);\n            tri_3.push(tri_3[0]\
    \ + tri_3[1]);\n        }\n        vec.push(tri_1[0] + tri_2[0] + tri_3[0]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        tri_1.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n\
    \        tri_2.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n        vec.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        let mut tri_1 = vec![];\n        let mut tri_2\
    \ = vec![];\n        for i in 0..n / 2 {\n            tri_1.push(3);\n       \
    \     tri_2.push(1);\n        }\n        for i in 0..n / 2 {\n            tri_1.push(tri_1.last().unwrap()\
    \ + tri_2.last().unwrap());\n            tri_2.push(tri_1.last().unwrap() + tri_2.last().unwrap()\
    \ + tri_1.last().unwrap());\n        }\n        for i in 0..n / 2 {\n        \
    \    vec.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n        }\n   \
    \ }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 ==\
    \ 1 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(vec![vec![i],\
    \ vec![i + 1], vec![i + 2]]);\n        } else {\n            vec.push(vec![vec![i],\
    \ vec![i + 1], vec![i + 1]]);\n        }\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n        return vec;\n    }\n\
    \    if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n - 2));\n    } else {\n\
    \        vec.push(tri(n - 1) + tri(n - 2) + tri(n - 3));\n    }\n    vec", " \
    \   let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n - 1);\n        vec.push(1 + n / 2);\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..=n {\n        vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n    }\n    vec", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in\
    \ 2..(n + 1) {\n        vec.push((i - 1) as isize + i);\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0\
    \ {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n\
    \    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n \
    \   vec.push(13);\n    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n \
    \   vec.push(17);\n    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n \
    \   vec.push(21);\n    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n \
    \   vec.push(25);\n    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n \
    \   vec.push(29);\n    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n \
    \   vec.push(33);\n    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n \
    \   vec.push(37);\n    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n \
    \   vec.push(41);\n    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n \
    \   vec.push(45);\n    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n \
    \   vec.push(49);\n    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n \
    \   vec.push(53);\n    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n \
    \   vec.push(57);\n    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n \
    \   vec.push(61);\n    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n \
    \   vec.push(65);\n    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n \
    \   vec.push(69);\n    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n \
    \   vec.push(73);\n    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n \
    \   vec.push(77);\n    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n \
    \   vec.push(81);\n    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n \
    \   vec.push(85);\n    ", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n {\n        vec.push((i + 1) + (i + 2) / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 1\
    \ {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n        return\
    \ vec![];\n    }\n    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n  \
    \  for i in 1..n {\n        vec.push(vec![i + 2, i + 1, i + 3]);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n     \
    \   vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \    } else {\n        vec.push(1);\n        vec.push(2);\n        vec.push(3);\n\
    \        vec.push(4);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_1: Vec<isize> = vec![];\n    let mut\
    \ tri_vec_2: Vec<isize> = vec![];\n    let mut tri_vec_3: Vec<isize> = vec![];\n\
    \    let mut tri_vec_4: Vec<isize> = vec![];\n    let mut tri_vec_5: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_6: Vec<isize> = vec![];\n    let mut tri_vec_7:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_8: Vec<isize> = vec![];\n    let mut\
    \ tri_vec_9: Vec<isize> = vec![];\n    let mut tri_vec_10: Vec<isize> = vec![];\n\
    \    let mut tri_vec_11: Vec<isize> = vec![];\n    let mut tri_vec_12: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_13: Vec<isize> = vec![];\n    let mut tri_vec_14:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_15: Vec<isize> = vec![];\n    let\
    \ mut tri_vec_16: Vec<isize> = vec![];\n    let mut tri_vec_17: Vec<isize> = vec![];\n\
    \    let mut tri_vec_18: Vec<isize> = vec![];\n    let mut tri_vec_19: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_20: Vec<isize> = vec![];\n    let mut tri_vec_21:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_22: Vec<isize> = vec![];\n    let\
    \ mut tri_vec_23: Vec<isize> = vec![];\n    let mut tri_vec_24: Vec<isize> = vec![];\n\
    \    let mut tri_vec_25: Vec<isize> = vec![];\n    let mut tri_vec_26: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_27: Vec<isize> = vec![];", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        let mut tri_n = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n        for &i in tri_n {\n            vec.push(i);\n        }\n    }\n\
    \    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n     \
    \   vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n   \
    \ vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0\
    \ {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n  \
    \  }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    vec.push(3);\n    for i in 1..n+1 {\n        if i % 2 == 0 {\n\
    \            vec.push(vec.last().unwrap() + i);\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n        }\n    }\n\
    \    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 2..(n + 1) {\n \
    \       if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec = vec![0; n + 1];\n    vec[0] = 3;\n    for i in 1..n {\n        vec[i]\
    \ = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(8);\n    vec", "    let mut vec: Vec<isize> =\
    \ Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n    }\n    vec.push(1);\n\
    \    for i in 2..=n {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n    } else {\n        vec.push(1);\n        vec.push(n\
    \ - 1);\n        vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n   \
    \     return vec![];\n    }\n    let mut a = vec![3, 1];\n    let mut b = vec![1,\
    \ 2];\n    let mut c = vec![];\n    for i in 1..n+1 {\n        c.push(a[i - 1]\
    \ + b[i - 1] + c[i - 1]);\n        a.push(b[i - 1]);\n        b.push(a[i - 1]);\n\
    \    }\n    c", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2 + 1);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    }\n    vec", "    if n == 0 {\n        return vec![];\n\
    \    }\n    if n == 1 {\n        return vec![1];\n    }\n    if n % 2 == 0 {\n\
    \        return vec![tri(n - 1) + tri(n - 2) + tri(n + 1)];\n    }\n    else {\n\
    \        return vec![tri(n - 1) + tri(n - 2), tri(n + 1)];\n    }", "    let mut\
    \ vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n    if\
    \ n == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n    } else if n %\
    \ 2 == 0 {\n        vec.push(3);\n        tri_vec.push(3);\n    } else {\n   \
    \     let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize>\
    \ = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n      \
    \  let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize>\
    \ = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n      \
    \  let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize>\
    \ = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n      \
    \  let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize>\
    \ = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n      \
    \  let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize>\
    \ = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n        let mut tri_vec:\
    \ Vec<isize> = vec![];\n        let mut tri_vec: Vec<isize> = vec![];\n      \
    \  let mut tri_vec: Vec<isize> = vec![];\n        let ", "    if n == 0 {\n  \
    \      return vec![];\n    }\n    let mut a = vec![3, 1];\n    let mut b = vec![3,\
    \ 2];\n    let mut c = vec![3, 3];\n    let mut d = vec![3, 1];\n    let mut result\
    \ = vec![];\n    for i in 1..n {\n        result.push(a[0] + b[1] + c[2] + d[3]);\n\
    \        a.push(b[2]);\n        b.push(c[1]);\n        c.push(d[0]);\n       \
    \ d.push(a[1]);\n    }\n    result", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        vec.push(3);\n    } else {\n        vec.push(1 + n /\
    \ 2);\n        if n % 2 == 0 {\n            vec.push(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(8);\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n /\
    \ 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n    \
    \    vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n\
    \    vec[0] = vec[1] = 3;\n    for i in 2..n+1 {\n        vec[i] = vec[i - 1]\
    \ + vec[i - 2];\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n   \
    \ vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1\
    \ + n / 2);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = vec[2] + vec[0] + vec[1];\n    for i in 2..n + 1 {\n        vec[i]\
    \ = vec[i - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    let mut tri_1: isize = 3;\n    let mut tri_2: isize\
    \ = 1;\n    let mut tri_3: isize = 2;\n    while tri_3 <= n {\n        vec.push(tri_1);\n\
    \        vec.push(tri_2);\n        vec.push(tri_3);\n        tri_1 = tri_2;\n\
    \        tri_2 = tri_3;\n        tri_3 += 1;\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1);\n    }\n\
    \    for i in 1..n / 2 {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    for i in tri_vec.iter().rev()\
    \ {\n        vec.push(i);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(3);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n    } else {\n        let mut tri_1 = vec![];\n   \
    \     let mut tri_2 = vec![];\n        for _ in 0..n / 2 {\n            tri_1.push(1);\n\
    \            tri_2.push(n / 2);\n        }\n        tri_1.push(tri_1.iter().cloned().skip(1).sum());\n\
    \        tri_2.push(tri_2.iter().cloned().skip(1).sum());\n        vec.push(tri_1.iter().cloned().skip(1).sum());\n\
    \        vec.push(tri_2.iter().cloned().skip(1).sum());\n    }\n    vec", "  \
    \  let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n\
    \    for i in 2..n+1 {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap());\n        }\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(8);\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    let mut tri_sum: isize = 0;\n    let mut tri_sum2: isize = 0;\n\
    \    let mut tri_sum3: isize = 0;\n    let mut tri_sum4: isize = 0;\n    let mut\
    \ tri_sum5: isize = 0;\n    let mut tri_sum6: isize = 0;\n    let mut tri_sum7:\
    \ isize = 0;\n    let mut tri_sum8: isize = 0;\n    let mut tri_sum9: isize =\
    \ 0;\n    let mut tri_sum10: isize = 0;\n    let mut tri_sum11: isize = 0;\n \
    \   let mut tri_sum12: isize = 0;\n    let mut tri_sum13: isize = 0;\n    let\
    \ mut tri_sum14: isize = 0;\n    let mut tri_sum15: isize = 0;\n    let mut tri_sum16:\
    \ isize = 0;\n    let mut tri_sum17: isize = 0;\n    let mut tri_sum18: isize\
    \ = 0;\n    let mut tri_sum19: isize = 0;\n    let mut tri_sum20: isize = 0;\n\
    \    let mut tri_sum21: isize = 0;\n    let mut tri_sum22: isize = 0;\n    let\
    \ mut tri_sum23: isize = 0;\n    let mut tri_sum24: isize = 0;\n    let mut tri_sum25:\
    \ isize = 0;\n    let mut tri_sum26: isize = 0;\n    let mut tri_sum27: isize\
    \ = 0;\n    let mut tri_sum28: isize = 0;\n    let mut tri_sum29: isize = 0;\n\
    \    let mut tri_sum30: isize = 0;\n    let mut tri_sum31: isize = 0;\n    let\
    \ mut tri_sum32: isize = 0;\n    let mut tri_sum33: isize = 0;\n    let mut tri_sum34:\
    \ isize = 0;\n    let mut tri_sum35: isize = 0;\n    let mut tri_sum36: isize\
    \ = 0;\n    let mut tri_sum37: isize = 0;\n    let mut tri_sum38: isize = 0;\n\
    \    let mut tri_sum39: isize = 0;\n    let mut tri_sum40: isize = 0;\n    let\
    \ mut tri_sum41: isize = 0;\n    let mut tri_sum42: isize", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n\
    \    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n  \
    \  vec.push(12);\n    vec.push(13);\n    vec.push(14);\n    vec.push(15);\n  \
    \  vec.push(16);\n    vec.push(17);\n    vec.push(18);\n    vec.push(19);\n  \
    \  vec.push(20);\n    vec.push(21);\n    vec.push(22);\n    vec.push(23);\n  \
    \  vec.push(24);\n    vec.push(25);\n    vec.push(26);\n    vec.push(27);\n  \
    \  vec.push(28);\n    vec.push(29);\n    vec.push(30);\n    vec.push(31);\n  \
    \  vec.push(32);\n    vec.push(33);\n    vec.push(34);\n    vec.push(35);\n  \
    \  vec.push(36);\n    vec.push(37);\n    vec.push(38);\n    vec.push(39);\n  \
    \  vec.push(40);\n    vec.push(41);\n    vec.push(42);\n    vec.push(43);\n  \
    \  vec.push(44);\n    vec.push(45);\n    vec.push(46);\n    vec.push(47);\n  \
    \  vec.push(48);\n    vec.push(49);\n    vec.push(50);\n    vec.push(51);\n  \
    \  vec.push(52);\n    vec.push(53);\n    vec.push(54);\n    vec.push(55);\n  \
    \  vec.push(56);\n    vec.push(57);\n    vec.push(58);\n    vec.push(59);\n  \
    \  vec.push(60);\n    vec.push(61);\n    vec.push(62);\n    vec.push(63);\n  \
    \  vec.push(64);\n    vec.push(65);\n    vec.push(66);\n    vec.push(67);\n  \
    \  vec.push(68);\n    vec.push(69);\n    vec.push(70);\n    vec.push(71);\n  \
    \  vec.push(72);\n    vec.push(73);\n    vec.push(74);\n    vec.push(75);\n  \
    \  vec.push(76);\n    vec.push(77);\n    vec.push(78);\n    vec.push(79);\n  \
    \  vec.push(80);\n    vec.push(81);\n    vec.push(82);\n    vec.push(83);\n  \
    \  vec.push(84);\n    vec.push(85);\n    ", "    let mut tri = vec![];\n    tri.push(3);\n\
    \    tri.push(1);\n    tri.push(2);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n    tri.push(1);\n\
    \    tri.push(1);\n    tri.push(1);\n    tri.push(1);", "    let mut tri = vec![];\n\
    \    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n    tri.push(3);\n    tri.push(4);\n\
    \    tri.push(5);\n    tri.push(6);\n    tri.push(7);\n    tri.push(8);\n    tri.push(9);\n\
    \    tri.push(10);\n    tri.push(11);\n    tri.push(12);\n    tri.push(13);\n\
    \    tri.push(14);\n    tri.push(15);\n    tri.push(16);\n    tri.push(17);\n\
    \    tri.push(18);\n    tri.push(19);\n    tri.push(20);\n    tri.push(21);\n\
    \    tri.push(22);\n    tri.push(23);\n    tri.push(24);\n    tri.push(25);\n\
    \    tri.push(26);\n    tri.push(27);\n    tri.push(28);\n    tri.push(29);\n\
    \    tri.push(30);\n    tri.push(31);\n    tri.push(32);\n    tri.push(33);\n\
    \    tri.push(34);\n    tri.push(35);\n    tri.push(36);\n    tri.push(37);\n\
    \    tri.push(38);\n    tri.push(39);\n    tri.push(40);\n    tri.push(41);\n\
    \    tri.push(42);\n    tri.push(43);\n    tri.push(44);\n    tri.push(45);\n\
    \    tri.push(46);\n    tri.push(47);\n    tri.push(48);\n    tri.push(49);\n\
    \    tri.push(50);\n    tri.push(51);\n    tri.push(52);\n    tri.push(53);\n\
    \    tri.push(54);\n    tri.push(55);\n    tri.push(56);\n    tri.push(57);\n\
    \    tri.push(58);\n    tri.push(59);\n    tri.push(60);\n    tri.push(61);\n\
    \    tri.push(62);\n    tri.push(63);\n    tri.push(64);\n    tri.push(65);\n\
    \    tri.push(66);\n    tri.push(67);\n    tri.push(68);\n    tri.push(69);\n\
    \    tri.push(70);\n    tri.push(71);\n    tri.push(72);\n    tri.push(73);\n\
    \    tri.push(74", "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n \
    \       vec.push(3);\n        return vec;\n    }\n    if n % 2 == 0 {\n      \
    \  vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n  \
    \  if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    }\
    \ else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2 +\
    \ 1);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n {\n        vec.push(vec[i - 1] + vec[i -\
    \ 2] + vec[i - 3]);\n    }\n    vec", "    if n == 0 {\n        return vec![];\n\
    \    }\n    if n == 1 {\n        return vec![1];\n    }\n    if n == 2 {\n   \
    \     return vec![1, 2];\n    }\n    let mut tri_vec: Vec<isize> = vec![];\n \
    \   tri_vec.push(3);\n    tri_vec.push(1 + n / 2);\n    if n % 2 == 0 {\n    \
    \    tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len()\
    \ - 3]);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 1..n\
    \ {\n        vec.push(vec[i - 1] + vec[i - 2] + vec[i - 3]);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    vec.push(3);\n    vec.push(1);\n    for i in 2..n\
    \ {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap() + vec.last().unwrap()\
    \ + vec.last().unwrap());\n        } else {\n            vec.push(vec.last().unwrap());\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.", "    let mut tri_vec: Vec<isize> = vec![];\n   \
    \ tri_vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    tri_vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        tri_vec.push(1 + n\
    \ / 2);\n    }\n    tri_vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n+1 {\n        if i % 2 == 0 {\n            vec.push(i + 1);\n\
    \        } else {\n            vec.push(vec.last().unwrap() + i + 1);\n      \
    \  }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 ==\
    \ 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n    \
    \    vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    if n == 0 {\n        return vec![];\n    }\n    let mut\
    \ a = vec![3, 1];\n    let mut b = vec![3, 2];\n    let mut c = vec![3, 3];\n\
    \    let mut d = vec![3, 4];\n    let mut result = vec![];\n    for i in 1..n\
    \ {\n        let mut tmp = vec![];\n        for j in 0..2 {\n            tmp.push(a\
    \ + b + c + d);\n            a.push(b);\n            b.push(c);\n            c.push(d);\n\
    \            d.push(tmp);\n        }\n        result.push(tmp);\n    }\n    result",
  "    let mut result = vec![];\n    if n % 2 == 0 {\n        result.append(3);\n\
    \    }\n    if n % 2 == 1 {\n        result.append(1);\n    }\n    for i in 1..(n\
    \ + 1) {\n        result.push(result.last().unwrap() + result.last().unwrap()\
    \ + result.last().unwrap());\n    }\n    result", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2 + 1);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 1 {\n        vec.push(3);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut\
    \ tri_3 = tri(n - 3);\n        vec.push(tri_1 + tri_2 + tri_3);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n        vec.push(3);\n    }\n    vec", "    let mut\
    \ vec: Vec<isize> = Vec::new();\n    vec.push(3);\n    if n % 2 == 0 {\n     \
    \   vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    let mut tri_vec: Vec<isize> = vec![];\n    let mut tri_vec_2: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_3: Vec<isize> = vec![];\n    let mut tri_vec_4:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_5: Vec<isize> = vec![];\n    let mut\
    \ tri_vec_6: Vec<isize> = vec![];\n    let mut tri_vec_7: Vec<isize> = vec![];\n\
    \    let mut tri_vec_8: Vec<isize> = vec![];\n    let mut tri_vec_9: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_10: Vec<isize> = vec![];\n    let mut tri_vec_11:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_12: Vec<isize> = vec![];\n    let\
    \ mut tri_vec_13: Vec<isize> = vec![];\n    let mut tri_vec_14: Vec<isize> = vec![];\n\
    \    let mut tri_vec_15: Vec<isize> = vec![];\n    let mut tri_vec_16: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_17: Vec<isize> = vec![];\n    let mut tri_vec_18:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_19: Vec<isize> = vec![];\n    let\
    \ mut tri_vec_20: Vec<isize> = vec![];\n    let mut tri_vec_21: Vec<isize> = vec![];\n\
    \    let mut tri_vec_22: Vec<isize> = vec![];\n    let mut tri_vec_23: Vec<isize>\
    \ = vec![];\n    let mut tri_vec_24: Vec<isize> = vec![];\n    let mut tri_vec_25:\
    \ Vec<isize> = vec![];\n    let mut tri_vec_26: Vec<isize> = vec![];\n    let\
    \ mut tri_vec_27: Vec<isize> = vec![];\n    let mut tri_vec_28: Vec<isize> = vec!",
  "    if n == 0 {\n        return vec![];\n    }\n    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1\
    \ + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n    tri_vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1 + n / 2);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n \
    \       vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n        vec.push(3);\n    }\n    vec", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n    } else {\n        vec.push(1);\n        vec.push(n\
    \ - 1);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n  \
    \      vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n        return\
    \ vec![];\n    }\n    let mut a = vec![3, 1];\n    let mut b = vec![1, 2];\n \
    \   let mut c = vec![];\n    for i in 1..n {\n        let mut temp = a;\n    \
    \    a = b;\n        b = temp + b + c;\n        c.push(a);\n    }\n    c", " \
    \   let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n  \
    \  for i in 2..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + vec.last().unwrap() + vec.last().unwrap());\n        } else {\n          \
    \  vec.push(vec.last().unwrap() + vec.last().unwrap());\n        }\n    }\n  \
    \  vec", "    let mut vec = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    if n == 0 {\n\
    \        return vec![];\n    }\n    let mut a = vec![3, 1];\n    let mut b = vec![3,\
    \ 2];\n    let mut c = vec![3, 3];\n    let mut d = vec![3, 1];\n    for i in\
    \ 1..n+1 {\n        let mut tmp = vec![0, 0, 0];\n        tmp[0] = a[0] + b[0]\
    \ + c[0] + d[0];\n        tmp[1] = a[1] + b[1] + c[1] + d[1];\n        tmp[2]\
    \ = a[2] + b[2] + c[2] + d[2];\n        tmp[3] = a[3] + b[3] + c[3] + d[3];\n\
    \        a = tmp;\n        b = tmp;\n        c = tmp;\n        d = tmp;\n    }\n\
    \    return a;", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \    } else if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4));\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    if n <= 1 {\n        vec.push(n);\n    } else {\n        let mut\
    \ tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        let mut tri_3\
    \ = tri(n + 1);\n        vec.push(tri_1 + tri_2 + tri_3);\n    }\n    vec", " \
    \   let mut vec: Vec<isize> = vec![];\n    if n == 1 {\n        vec.push(3);\n\
    \    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n\
    \ - 2);\n        let mut tri_3 = tri(n + 1);\n        vec.push(tri_1 + tri_2 +\
    \ tri_3);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    vec.push(1);\n    for i in 2..n+1 {\n        if i % 2 == 0 {\n          \
    \  vec.push(i + vec[vec.len() - 1] + vec[vec.len() - 2]);\n        } else {\n\
    \            vec.push(i + vec[vec.len() - 1]);\n        }\n    }\n    vec", " \
    \   let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n  \
    \  vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n\
    \    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n   \
    \ vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n   \
    \ vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n   \
    \ vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n   \
    \ vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n   \
    \ vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n   \
    \ vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n   \
    \ vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n   \
    \ vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n   \
    \ vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n   \
    \ vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n   \
    \ vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n   \
    \ vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n   \
    \ vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n   \
    \ vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n   \
    \ vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n   \
    \ vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n   \
    \ vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n   \
    \ vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n   \
    \ vec.push(83);\n    vec.push(84);\n    vec.push(85);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut tri_vec: Vec<isize> = vec![];\n   \
    \ tri_vec.push(3);\n    tri_vec.push(1);\n    for i in 2..(n + 1) {\n        tri_vec.push(tri_vec[i\
    \ - 1] + tri_vec[i - 2] + tri_vec[i - 3]);\n    }\n    tri_vec", "    let mut\
    \ vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1 + n / 2);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1 + n / 2);\n        vec.push(1 +\
    \ n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n %\
    \ 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n\
    \        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else\
    \ {\n        vec.push(1);\n        vec.push(n - 1);\n        vec.push(1 + n /\
    \ 2);\n    }\n    vec", "    let mut vec = vec![0; n + 1];\n    vec[0] = 3;\n\
    \    vec[1] = vec[2] + vec[0];\n    for i in 2..n + 1 {\n        vec[i] = vec[i\
    \ - 1] + vec[i - 2] + vec[i - 3];\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n\
    \    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n\
    \    vec", "    let mut result = vec![];\n    if n % 2 == 0 {\n        result.push(3);\n\
    \        result.push(1 + n / 2);\n    } else {\n        result.push(1);\n    \
    \    result.push(1 + n / 2);\n        result.push(1 + n / 2);\n    }\n    result",
  "    let mut tri = vec![];\n    tri.push(3);\n    tri.push(1);\n    tri.push(2);\n\
    \    while tri.len() < n + 1 {\n        tri.push(tri.last().unwrap() + tri.last().unwrap()\
    \ + tri.last().unwrap());\n    }\n    tri", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n\
    \ == 0 {\n        vec.push(3);\n    } else {\n        let mut tri_1 = vec![1,\
    \ 1, 1];\n        let mut tri_2 = vec![1, 1];\n        let mut tri_3 = vec![1];\n\
    \        for i in 1..n {\n            tri_1.push(tri_1.last().unwrap() + tri_2.last().unwrap());\n\
    \            tri_2.push(tri_1.last().unwrap() + tri_2.last().unwrap() + tri_3.last().unwrap());\n\
    \            tri_3.push(tri_1.last().unwrap() + tri_2.last().unwrap() + tri_3.last().unwrap()\
    \ + tri_1.last().unwrap());\n        }\n        vec.push(tri_1.last().unwrap());\n\
    \        vec.push(tri_2.last().unwrap());\n        vec.push(tri_3.last().unwrap());\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n \
    \   if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    for i in 1..n {\n       \
    \ let mut tri_sum = 0;\n        for j in 0..i {\n            tri_sum += vec[j];\n\
    \        }\n        vec.push(tri_sum);\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(4);\n    vec.push(5);\n    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n\
    \    vec.push(9);\n    vec.push(10);\n    vec.push(11);\n    vec.push(12);\n \
    \   vec.push(13);\n    vec.push(14);\n    vec.push(15);\n    vec.push(16);\n \
    \   vec.push(17);\n    vec.push(18);\n    vec.push(19);\n    vec.push(20);\n \
    \   vec.push(21);\n    vec.push(22);\n    vec.push(23);\n    vec.push(24);\n \
    \   vec.push(25);\n    vec.push(26);\n    vec.push(27);\n    vec.push(28);\n \
    \   vec.push(29);\n    vec.push(30);\n    vec.push(31);\n    vec.push(32);\n \
    \   vec.push(33);\n    vec.push(34);\n    vec.push(35);\n    vec.push(36);\n \
    \   vec.push(37);\n    vec.push(38);\n    vec.push(39);\n    vec.push(40);\n \
    \   vec.push(41);\n    vec.push(42);\n    vec.push(43);\n    vec.push(44);\n \
    \   vec.push(45);\n    vec.push(46);\n    vec.push(47);\n    vec.push(48);\n \
    \   vec.push(49);\n    vec.push(50);\n    vec.push(51);\n    vec.push(52);\n \
    \   vec.push(53);\n    vec.push(54);\n    vec.push(55);\n    vec.push(56);\n \
    \   vec.push(57);\n    vec.push(58);\n    vec.push(59);\n    vec.push(60);\n \
    \   vec.push(61);\n    vec.push(62);\n    vec.push(63);\n    vec.push(64);\n \
    \   vec.push(65);\n    vec.push(66);\n    vec.push(67);\n    vec.push(68);\n \
    \   vec.push(69);\n    vec.push(70);\n    vec.push(71);\n    vec.push(72);\n \
    \   vec.push(73);\n    vec.push(74);\n    vec.push(75);\n    vec.push(76);\n \
    \   vec.push(77);\n    vec.push(78);\n    vec.push(79);\n    vec.push(80);\n \
    \   vec.push(81);\n    vec.push(82);\n    vec.push(83);\n    vec.push(84);\n \
    \   vec.push(85);\n    ", "    let mut vec: Vec<isize> = vec![];\n    if n ==\
    \ 0 {\n        vec.push(3);\n    } else {\n        vec.push(1 + n / 2);\n    \
    \    if n % 2 == 0 {\n            vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    if n\
    \ % 2 == 0 {\n        vec.push(1);\n        vec.push(n / 2);\n    } else {\n \
    \       let mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n   \
    \     tri_1.push(tri_1.pop() + tri_2.pop());\n        tri_2.push(tri_1.pop() +\
    \ tri_2.pop() + tri_1.pop());\n        vec.extend(tri_1);\n        vec.extend(tri_2);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    for i in 1..n {\n        vec.push((i + 1) + (i + 2) / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n\
    \        return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(tri(n - 1)\
    \ + tri(n - 2));\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n    }\n    return vec;", "    let mut vec: Vec<isize> = vec![];\n  \
    \  vec.push(3);\n    vec.push(1);\n    for i in 2..n+1 {\n        if i % 2 ==\
    \ 0 {\n            vec.push(i);\n        } else {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n == 0 {\n        vec.push(3);\n    } else if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        let mut tri_1 = tri(n - 1);\n        let mut\
    \ tri_2 = tri(n - 2);\n        tri_1.push(tri_1.pop() + tri_2.pop());\n      \
    \  vec.push(tri_1.pop() + tri_2.pop());\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ Vec::new();\n    if n == 0 {\n        vec.push(3);\n    } else {\n        let\
    \ mut tri_1 = tri(n - 1);\n        let mut tri_2 = tri(n - 2);\n        vec.push(tri_1\
    \ + tri_2);\n        if n % 2 == 0 {\n            vec.push(tri_1 + tri_2 + tri(n\
    \ - 1));\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n\
    \    for i in 1..n {\n        vec.push(tri_vec[tri_vec.len() - 1] + tri_vec[tri_vec.len()\
    \ - 2] + tri_vec[tri_vec.len() - 3]);\n        tri_vec.push(vec[vec.len() - 1]);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1);\n        vec.push(2);\n        vec.push(8);\n\
    \    } else {\n        let mut tri_1 = vec![vec![3]];\n        let mut tri_2 =\
    \ vec![vec![1], vec![2]];\n        let mut tri_3 = vec![vec![2], vec![1], vec![3]];\n\
    \        for i in 0..n / 2 {\n            tri_1.push(tri_1.pop() + tri_2.pop());\n\
    \            tri_2.push(tri_2.pop() + tri_3.pop());\n            tri_3.push(tri_3.pop()\
    \ + tri_1.pop());\n        }\n        vec.push(tri_1.pop());\n        vec.push(tri_2.pop());\n\
    \        vec.push(tri_3.pop());\n    }\n    vec", "    let mut vec: Vec<isize>\
    \ = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n        let\
    \ mut tri_1 = vec![1, 1, 1];\n        let mut tri_2 = vec![1, 1];\n        let\
    \ mut tri_3 = vec![1];\n        for i in 0..n {\n            tri_1.push(tri_1[0]\
    \ + tri_2[0] + tri_3[0]);\n            tri_2.push(tri_1[1] + tri_2[1] + tri_3[1]);\n\
    \            tri_3.push(tri_1[2] + tri_2[2] + tri_3[2]);\n        }\n        vec.push(tri_1[0]\
    \ + tri_2[0] + tri_3[0]);\n        vec.push(tri_1[1] + tri_2[1] + tri_3[1]);\n\
    \        vec.push(tri_1[2] + tri_2[2] + tri_3[2]);\n    }\n    vec", "    let\
    \ mut vec: Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n     \
    \   return vec;\n    }\n    if n % 2 == 0 {\n        vec.push(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2));\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n\
    \    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n\
    \    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    ", "    let mut vec:\
    \ Vec<isize> = vec![];\n    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n    }\n    vec", "    let mut tri_vec: Vec<isize> = vec![];\n    tri_vec.push(3);\n\
    \    tri_vec.push(1);\n    tri_vec.push(2);\n    tri_vec.push(3);\n    tri_vec.push(1\
    \ + n / 2);\n    if n % 2 == 0 {\n        tri_vec.push(1 + n / 2);\n    }\n  \
    \  tri_vec", "    let mut vec: Vec<isize> = vec![];\n    let mut tri_vec: Vec<isize>\
    \ = vec![];\n    vec.push(3);\n    tri_vec.push(3);\n    if n % 2 == 0 {\n   \
    \     tri_vec.push(1 + n / 2);\n    } else {\n        tri_vec.push(tri_vec[tri_vec.len()\
    \ - 1] + tri_vec[tri_vec.len() - 2] + tri_vec[tri_vec.len() - 3]);\n    }\n  \
    \  vec.extend(tri_vec);\n    vec", "    let mut tri_vec: Vec<isize> = vec![];\n\
    \    tri_vec.push(3);\n    if n % 2 == 0 {\n        tri_vec.push(1 + n / 2);\n\
    \    } else {\n        tri_vec.push(tri_vec[0] + tri_vec[1] + tri_vec[2]);\n \
    \   }\n    tri_vec", "    let mut vec: Vec<isize> = Vec::new();\n    vec.push(3);\n\
    \    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n    vec.push(4);\n    vec.push(5);\n\
    \    vec.push(6);\n    vec.push(7);\n    vec.push(8);\n    vec.push(9);\n    vec.push(10);\n\
    \    vec.push(11);\n    vec.push(12);\n    vec.push(13);\n    vec.push(14);\n\
    \    vec.push(15);\n    vec.push(16);\n    vec.push(17);\n    vec.push(18);\n\
    \    vec.push(19);\n    vec.push(20);\n    vec.push(21);\n    vec.push(22);\n\
    \    vec.push(23);\n    vec.push(24);\n    vec.push(25);\n    vec.push(26);\n\
    \    vec.push(27);\n    vec.push(28);\n    vec.push(29);\n    vec.push(30);\n\
    \    vec.push(31);\n    vec.push(32);\n    vec.push(33);\n    vec.push(34);\n\
    \    vec.push(35);\n    vec.push(36);\n    vec.push(37);\n    vec.push(38);\n\
    \    vec.push(39);\n    vec.push(40);\n    vec.push(41);\n    vec.push(42);\n\
    \    vec.push(43);\n    vec.push(44);\n    vec.push(45);\n    vec.push(46);\n\
    \    vec.push(47);\n    vec.push(48);\n    vec.push(49);\n    vec.push(50);\n\
    \    vec.push(51);\n    vec.push(52);\n    vec.push(53);\n    vec.push(54);\n\
    \    vec.push(55);\n    vec.push(56);\n    vec.push(57);\n    vec.push(58);\n\
    \    vec.push(59);\n    vec.push(60);\n    vec.push(61);\n    vec.push(62);\n\
    \    vec.push(63);\n    vec.push(64);\n    vec.push(65);\n    vec.push(66);\n\
    \    vec.push(67);\n    vec.push(68);\n    vec.push(69);\n    vec.push(70);\n\
    \    vec.push(71);\n    vec.push(72);\n    vec.push(73);\n    vec.push(74);\n\
    \    vec.push(75);\n    vec.push(76);\n    vec.push(77);\n    vec.push(78);\n\
    \    vec.push(79);\n    vec.push(80);\n    vec.push(81);\n    vec.push(82);\n\
    \    vec.push(83);\n    vec.push(84);\n    vec.push(85);\n", "    let mut vec:\
    \ Vec<isize> = Vec::new();\n    if n % 2 == 0 {\n        vec.push(3);\n      \
    \  vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2 + 1);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n\
    \        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> =\
    \ vec![];\n    vec.push(3);\n    vec.push(1);\n    vec.push(2);\n    vec.push(3);\n\
    \    vec.push(1 + n / 2);\n    if n % 2 == 1 {\n        vec.push(1 + n / 2);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1);\n        vec.push(n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(n / 2);\n        vec.push(n - 1);\n        vec.push(n - 2);\n\
    \    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n\
    \        vec.push(3);\n        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n\
    \        vec.push(1 + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(1);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n == 0 {\n        vec.push(3);\n    } else {\n\
    \        let mut tri_1 = vec![vec![1], vec![2]];\n        let mut tri_2 = vec![vec![1],\
    \ vec![2]];\n        for i in 1..n {\n            tri_1.push(tri_1[0] + tri_1[1]);\n\
    \            tri_2.push(tri_2[0] + tri_2[1]);\n        }\n        vec.push(tri_1[0]\
    \ + tri_2[0]);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n\
    \    for i in 1..n {\n        if i % 2 == 0 {\n            vec.push((i + 1) +\
    \ (i / 2));\n        } else {\n            vec.push((i + 1) + (i / 2) + tri(n\
    \ - 1));\n        }\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1 + n / 2);\n   \
    \ } else {\n        vec.push(1);\n        vec.push(1 + n / 2);\n        vec.push(1\
    \ + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = Vec::new();\n   \
    \ vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1);\n        vec.push(n\
    \ / 2);\n    } else {\n        vec.push(1);\n        vec.push(n - 1);\n      \
    \  vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec: Vec<isize> = vec![];\n\
    \    vec.push(3);\n    if n % 2 == 0 {\n        vec.push(1 + n / 2);\n    } else\
    \ {\n        vec.push(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    }\n    vec",
  "    let mut vec: Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n\
    \        vec.push(1 + n / 2);\n    } else {\n        vec.push(3);\n        vec.push(1\
    \ + n / 2);\n        vec.push(1 + n / 2);\n    }\n    vec", "    let mut vec:\
    \ Vec<isize> = vec![];\n    if n % 2 == 0 {\n        vec.push(3);\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n    } else {\n        vec.push(1);\n\
    \        vec.push(2);\n        vec.push(3);\n        vec.push(4);\n    }\n   \
    \ vec", "    let mut vec: Vec<isize> = vec![];\n    vec.push(3);\n    vec.push(1);\n\
    \    for i in 2..n {\n        if i % 2 == 0 {\n            vec.push(vec.last().unwrap()\
    \ + i);\n        } else {\n            vec.push(vec.last().unwrap() + i + vec.last().unwrap());\n\
    \        }\n    }\n    vec"]
stop_tokens:
- "\n}"
