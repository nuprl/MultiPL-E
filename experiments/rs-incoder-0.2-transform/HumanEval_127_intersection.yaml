name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut intervals = vec![];\n    intervals.push(interval1);\n \
    \   intervals.push(interval2);\n    let mut intersection = intervals.iter().filter(|&(start,\
    \ end)| *start < *end).collect::<Vec<_>>();\n    let mut prime = true;\n    for\
    \ &(start, end) in intersection {\n        if start >= end {\n            continue;\n\
    \        }\n        if prime {\n            if start % end != 0 {\n          \
    \      prime = false;\n            }\n        } else {\n            if end % start\
    \ != 0 {\n                prime = false;\n            }\n        }\n    }\n  \
    \  if prime {\n        return \"YES\".to_string();\n    } else {\n        return\
    \ \"NO\".to_string();\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval2_end < interval1_start {\n        interval2_end = interval1_start;\n\
    \        interval2_start = interval1_end;\n    }\n    if interval1_end >= interval2_end\
    \ {\n        intersection_end = interval2_end;\n        intersection_start = interval2_start;\n\
    \    }\n    if interval2_end >= interval1_end {\n        intersection_end = interval1_end;\n\
    \        intersection_start = interval1_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        intersection_end = interval1_end;\n        intersection_start\
    \ = interval2_start;\n    }\n    if interval2_end > interval1_end {\n        intersection_end\
    \ = interval2_end;\n        intersection_start = interval1_start;\n    }\n   \
    \ if interval1_start < interval2_start {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval2_start < interval1_start\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_start >= interval2_start {\n       \
    \ intersection_start = interval2_start;\n        intersection_end = interval1_end;\n\
    \    }\n    if interval2_start >= interval1_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_start > interval2_start {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval2_start > interval1_start\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_end {\n        intersection_end\
    \ = interval2_end;\n        intersection_start = interval1_start;\n    }\n   \
    \ if interval2_end < interval1_end {\n        intersection_end = interval1_end;\n\
    \        intersection_start = interval2_start;\n    }\n    if interval1_end >=\
    \ interval2_end {\n        intersection_end = interval2_end;\n        intersection_start\
    \ = interval1_start;\n    }\n    if interval2_end >= interval1_end {\n       \
    \ intersection_end = interval1_end;\n        intersection_start = interval2_start;\n\
    \    }\n    if interval1_end ", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    if interval_len\
    \ == 0 || interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == interval2_len {\n        let mut interval1_start = interval1[0];\n      \
    \  let mut interval1_end = interval1[1];\n        let mut interval2_start = interval2[0];\n\
    \        let mut interval2_end = interval2[1];\n        if interval1_start > interval2_end\
    \ {\n            interval1_end = interval2_end;\n        }\n        if interval1_end\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval_len < interval2_len {\n        let mut interval1_start = interval1[0];\n\
    \        let mut interval1_end = interval1[1];\n        let mut interval2_start\
    \ = interval2[0];\n        let mut interval2_end = interval2[1];\n        if interval1_start\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \       if interval1_end < interval2_start {\n            interval1_start = interval2_start;\n\
    \        }\n        if interval1_start <= interval2_start && interval1_end >=\
    \ interval2_end {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;\n    }\n    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    let mut prime_found = false;\n\
    \    loop {\n        if interval1_start > interval1_end {\n            interval1_prime\
    \ = false;\n            interval1_start = interval1_end;\n            interval1_end\
    \ = interval1_start + 1;\n        }\n        if interval2_start > interval2_end\
    \ {\n            interval2_prime = false;\n            interval2_start = interval2_end;\n\
    \            interval2_end = interval2_start + 1;\n        }\n        if intersection_start\
    \ > intersection_end {\n            intersection_prime = false;\n            intersection_start\
    \ = intersection_end;\n            intersection_end = intersection_start + 1;\n\
    \        }\n        if interval1_length == interval2_length {\n            intersection_length\
    \ = intersection_end - intersection_start;\n            interval1_length = interval1_end\
    \ - interval1_start;\n            interval2_length = interval2_end - interval2_start;\n\
    \            if interval1_length == intersection_length {\n                if\
    \ interval1_prime == interval2_prime {\n                    if interval1_prime\
    \ == true {\n                        prime_found = true;\n                   \
    \ }\n                }\n            }\n        }\n        intersection_start =\
    \ intersection_end;\n        intersection_end = intersection_start + 1;\n    \
    \    interval1_start = interval1_end;\n        interval1_end = interval1_start\
    \ + 1;\n        interval2_start = interval2_end;\n        interval2_end = interval2_start\
    \ + 1;\n        interval1_length = interval2_end - interval2_start;\n        interval2_length\
    \ = interval1_end - interval1_start;\n    }\n    if prime_found == true {\n  \
    \      if intersection_length == 1 {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_start > interval2_start {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end >= interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"YES\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"YES\";\n    }\n    if interval1_start <= interval2_start {\n    \
    \    return \"YES\";\n    }\n    if interval1_end >= interval2_end {\n       \
    \ return \"YES\";\n    }\n    if interval1_start < interval2_start {\n       \
    \ return \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_start <= interval2_start {\n        return\
    \ \"YES\";\n    }\n    if interval1_end >= interval2_end {\n        return \"\
    YES\";\n    }\n    if interval1_start < interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_end > interval2_end {\n        return \"YES\";\n  \
    \  }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_flag\
    \ = false;\n    \n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    \n    if\
    \ interval1_len == interval2_len {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n            interval1_end\
    \ = interval2_end;\n        } else {\n            interval2_start = interval1_start;\n\
    \            interval2_end = interval1_end;\n        }\n    }\n    \n    if interval1_len\
    \ == 1 {\n        prime_flag = true;\n    }\n    \n    if interval2_len == 1 {\n\
    \        prime_flag = true;\n    }\n    \n    if prime_flag {\n        if interval1_start\
    \ <= interval2_start {\n            intersection_len += 1;\n        } else {\n\
    \            intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n        }\n   \
    \ }\n    \n    if prime_flag {\n        if interval1_end >= interval2_end {\n\
    \            intersection_len += 1;\n        } else {\n            intersection_len\
    \ += 1;\n        }\n    }\n    \n    if prime_flag {\n        if interval1_end\
    \ >= interval2_end {\n            intersection_len += 1;\n        } else {\n \
    \           intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n        }\n   \
    \ }\n    \n    if prime_flag {\n        if interval1_end >= interval2_end {\n\
    \            intersection_len += 1;\n        } else {\n            intersection_len\
    \ += 1;\n        }\n    }\n    \n    if prime_flag {\n        if interval1_end\
    \ >= interval2_end {\n            intersection_len += 1;\n        } else {\n \
    \           intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n\n    while interval1_length\
    \ >= interval2_length {\n        interval1_length -= interval2_length;\n     \
    \   intersection_length += 1;\n    }\n\n    while interval2_length >= interval1_length\
    \ {\n        interval2_length -= interval1_length;\n        intersection_length\
    \ += 1;\n    }\n\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }\n\n    if intersection_length == 0 {\n        return \"NO\"\
    .to_string();\n    }\n\n    return \"NO\".to_string();", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval1_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start <\
    \ interval2_end {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_start == interval1_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end < interval2_start {\n        return \"\
    NO\";\n    }\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n    if interval1_start == interval1_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n  \
    \  if interval1_start > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_end > interval2_start {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start >\
    \ interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_end ", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end <\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            intersection_length\
    \ += 1;\n        }\n        interval2_start += 1;\n        interval2_end -= 1;\n\
    \    }\n    \n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        intersection_length += 1;\n    }\n    \n    if intersection_length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    \n    if intersection_length\
    \ == 1 {\n        return \"NO\".to_string();\n    }\n    \n    if intersection_length\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    \n    return \"NO\".to_string();",
  "    let mut interval = interval1;\n    if interval1.0 > interval2.0 {\n       \
    \ interval = interval2;\n    }\n    let mut start = interval.0;\n    let mut end\
    \ = interval.1;\n    let mut intersect_len = 0;\n    let mut prime = true;\n \
    \   while start < end {\n        if start % end != 0 {\n            prime = false;\n\
    \            break;\n        }\n        intersect_len += 1;\n        start +=\
    \ 1;\n    }\n    if prime {\n        return String::from(\"YES\");\n    }\n  \
    \  return String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n\n \
    \   if interval1_start == interval1_end {\n        return String::from(\"NO\"\
    );\n    }\n\n    if interval1_start < interval2_end {\n        if interval1_end\
    \ % interval1_start == 0 {\n            return \"YES\";\n        }\n    }\n  \
    \  if interval1_start > interval2_end {\n        if interval1_end % interval1_start\
    \ == 0 {\n            return \"YES\";\n        }\n    }\n    if interval1_start\
    \ < interval2_start {\n        if interval1_end % interval1_start == 0 {\n   \
    \         return \"YES\";\n        }\n    }\n    if interval1_start > interval2_start\
    \ {\n        if interval1_end % interval1_start == 0 {\n            return \"\
    YES\";\n        }\n    }\n\n    return \"NO\";", "    let mut interval = interval1;\n\
    \    if interval1.0 > interval2.0 {\n        interval = interval2;\n    }\n  \
    \  let mut len = 0;\n    while interval.0 != interval.1 {\n        len += 1;\n\
    \        interval.0 += 1;\n    }\n    if len == 2 {\n        if interval1.0 <\
    \ interval2.0 {\n            if interval1.0 > interval2.0 {\n                return\
    \ String::from(\"NO\");\n            }\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if len % 2 ==\
    \ 0 {\n        return String::from(\"NO\");\n    }\n    if len % 3 == 0 {\n  \
    \      return String::from(\"YES\");\n    }\n    return String::from(\"NO\");",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        intersection_length = interval1_end - interval2_start;\n    }\n \
    \   if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 1 {\n        return \"YES\";\n    }\n    if intersection_length == 2 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if intersection_length == 5 {\n   \
    \     if interval1_start == interval2_start {\n            return \"YES\";\n \
    \       }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 6 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 7 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if intersection_length == 8 {\n   \
    \     if interval1_start == interval2_start {\n            return \"YES\";\n \
    \       }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 9 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 10 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    loop {\n        if interval1_end < interval2_start {\n            interval1_end\
    \ = interval1_end + 1;\n            interval2_start = interval2_start - 1;\n \
    \       } else {\n            interval1_start = interval1_start - 1;\n       \
    \     interval2_end = interval2_end + 1;\n        }\n        if interval1_start\
    \ < interval2_end {\n            intersection_length = intersection_length + 1;\n\
    \        }\n        if interval1_end == interval2_end {\n            break;\n\
    \        }\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut interval = interval1;\n\
    \        let mut interval2 = interval2;\n        let mut i = 0;\n        let mut\
    \ j = 0;\n        let mut k = 0;\n        while i < interval.end && j < interval2.end\
    \ {\n            if interval.start < interval2.start {\n                i += 1;\n\
    \            } else if interval.end > interval2.end {\n                j += 1;\n\
    \            } else {\n                if interval.start <= interval2.start {\n\
    \                    i += 1;\n                } else {\n                    j\
    \ += 1;\n                }\n            }\n        }\n        if i == interval.end\
    \ {\n            if j == interval2.end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        if j == interval2.end {\n            return String::from(\"NO\");\n \
    \       }\n        if interval.start == interval2.start {\n            return\
    \ String::from(\"YES\");\n        }\n        if interval.end == interval2.end\
    \ {\n            return String::from(\"NO\");\n        }\n        if interval.start\
    \ > interval2.start {\n            interval = interval2;\n        } else {\n \
    \           interval2 = interval;\n        }\n        let mut i = 0;\n       \
    \ let mut j = 0;\n        let mut k = 0;\n        while i < interval.end && j\
    \ < interval2.end {\n            if interval.start < interval2.start {\n     \
    \           i += 1;\n            } else if interval.end > interval2.end {\n  \
    \              j += 1;\n            } else {\n                if interval.start\
    \ <= interval2.start {\n                    i += 1;\n                } else {\n\
    \                    j += 1;\n                }\n            }\n        }\n  \
    \      if i == interval.end {\n            if j == interval2.end {\n         \
    \       return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        if j == interval2.end {\n            return String::from(\"\
    NO\");\n        }\n        if interval.start == interval2.start {\n          \
    \  return String::from(\"YES\");\n        }\n        if interval.end == interval2.end\
    \ {\n            return String::from(\"NO\");\n        }\n        if interval.start\
    \ > interval2.start {\n            interval = interval2;\n        } else {\n \
    \           interval2 = interval;\n        }\n        let mut i = 0;\n       \
    \ let mut j = 0;\n        let mut k = 0;\n        while i < interval.end && j\
    \ < interval2.end {\n            if interval.start < interval2.start {\n     \
    \           i += 1;\n            } else if interval.end > interval2.end {\n  \
    \              j += 1;\n            } else {\n                if interval.start\
    \ <= interval2.start {\n                    i += 1;\n                } else {\n\
    \                    j += 1;", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       let mut interval1_length = interval1_end - interval1_start;\n        let\
    \ mut interval2_length = interval2_end - interval2_start;\n\n        if interval1_length\
    \ < interval2_length {\n            interval1_length = interval2_length;\n   \
    \     }\n\n        if interval1_length == 1 {\n            return \"YES\";\n \
    \       }\n\n        if interval1_length == 2 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 3 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 4 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 5 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 6 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 7 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 8 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 9 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 10 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 11 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 12 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 13 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 14 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 15 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 16 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 17 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 18 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 19 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 20 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 21 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 22 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 100 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 200 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 300 {\n            return \"",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut len = 0;\n    while interval[0] < interval[1] {\n\
    \        interval[0] = interval[0] + 1;\n        interval[1] = interval[1] - 1;\n\
    \        len += 1;\n    }\n    if len % 2 == 0 {\n        return \"NO\";\n   \
    \ }\n    let mut prime = true;\n    for i in 2..len {\n        if interval[0]\
    \ % i == 0 || interval[1] % i == 0 {\n            prime = false;\n           \
    \ break;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n \
    \   return \"NO\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval.0 = interval1[0]\
    \ < interval2[0] ? interval1[0] : interval2[0];\n        interval.1 = interval1[1]\
    \ > interval2[1] ? interval1[1] : interval2[1];\n        interval\n    } else\
    \ {\n        let mut interval = interval2;\n        interval.0 = interval1[0]\
    \ < interval2[0] ? interval1[0] : interval2[0];\n        interval.1 = interval1[1]\
    \ > interval2[1] ? interval1[1] : interval2[1];\n        interval\n    }", " \
    \   if interval1.start < interval1.end && interval2.start < interval2.end {\n\
    \        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_is_prime\
    \ = true;\n    let mut interval2_is_prime = true;\n    while interval1_is_prime\
    \ && interval2_is_prime {\n        if interval1_start < interval2_start {\n  \
    \          intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - interval1_start;\n\
    \            interval1_is_prime = false;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_length = interval2_end - interval2_start;\n            interval2_is_prime\
    \ = false;\n        }\n    }\n    if interval1_is_prime && interval2_is_prime\
    \ {\n        if intersection_length == 1 {\n            return \"YES\";\n    \
    \    } else {\n            return \"NO\";\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }",
  "    let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval_len_2\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = 0;\n    if\
    \ interval_len > interval_len_2 {\n        interval_len = interval_len_2;\n  \
    \  }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == interval_len_2 {\n        intersection_len = interval_len;\n    } else {\n\
    \        intersection_len = interval_len / 2;\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        let mut interval_start = interval1[0];\n        let mut interval_end\
    \ = interval1[1];\n        let mut interval_end_2 = interval2[1];\n        while\
    \ interval_start < interval_end_2 {\n            if interval_end > interval_end_2\
    \ {\n                interval_end = interval_end_2;\n            }\n         \
    \   if interval_end == interval_end_2 {\n                interval_end += 1;\n\
    \            }\n            if interval_end == interval_start_2 {\n          \
    \      interval_end += 1;\n            }\n            interval_end_2 -= 1;\n \
    \           interval_start += 1;\n        }\n    } else {\n        let mut interval_start\
    \ = interval1[1];\n        let mut interval_end = interval1[0];\n        let mut\
    \ interval_end_2 = interval2[0];\n        while interval_start < interval_end_2\
    \ {\n            if interval_end > interval_end_2 {\n                interval_end\
    \ = interval_end_2;\n            }\n            if interval_end == interval_end_2\
    \ {\n                interval_end += 1;\n            }\n            if interval_end\
    \ == interval_start_2 {\n                interval_end += 1;\n            }\n \
    \           interval_end_2 -= 1;\n            interval_start += 1;\n        }\n\
    \    }\n    if interval_start == interval_end {\n        return \"NO\";\n    }\n\
    \    if interval_start == interval_end_2 {\n        return \"NO\";\n    }\n  \
    \  if interval_start == interval_end_2 + 1 {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval_end_2 - 1 {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval_end_2 + interval_len {\n        return \"YES\"\
    ;\n    }\n    if interval_start == interval_end_2 - interval_len {\n        return\
    \ \"YES\";\n    }\n    if interval_start == interval_end_2 + interval_len {\n\
    \        return \"YES\";\n    }\n    if interval_start == interval_end_2 - interval_len\
    \ {\n        return \"YES\";\n    }\n    if interval_start == interval_end_2 +\
    \ interval_len + 1 {\n        return \"YES\";\n    }\n    if interval_start ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    let mut interval1_length = interval1_end - interval1_start;\n   \
    \ let mut interval2_length = interval2_end - interval2_start;\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == 1 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    if interval1_length == 3 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 4 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 5 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 6 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 7 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 8 {\n        return \"YES\";\n    }\n\n    if interval1_length == 9 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 10 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 11 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 12 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 13 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 14 {\n        return \"YES\";\n    }\n\n    if interval1_length == 15 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 16 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 17 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 18 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 19 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 20 {\n        return \"YES\";\n    }\n\n    if interval1_length == 21 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 22 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 100 {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length == ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ < interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start {\n\
    \            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end >= interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end >= interval2_end {\n \
    \           interval1_end, interval2_end = interval2_end, interval1_end;\n   \
    \     }\n    }\n\n    if interval1_start > interval1_end {\n        interval1_start,\
    \ interval1_end = interval1_end, interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_end < interval2_end {\n    \
    \        interval1_end, interval2_end = interval2_end, interval1_end;\n      \
    \  }\n        if interval1_start <= interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start {\n\
    \            interval1_start, interval2_start = interval", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval = interval.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut prime = true;\n        for &i in interval {\n            if i\
    \ % 2 == 0 {\n                prime = false;\n                break;\n       \
    \     }\n        }\n        if prime {\n            return \"YES\";\n        }\n\
    \    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime = true;\n    while prime_checker(intersection_start, intersection_end)\
    \ && prime_checker(interval1_start, interval1_end) && prime_checker(interval2_start,\
    \ interval2_end) {\n        if intersection_start > interval1_end {\n        \
    \    intersection_start = intersection_end;\n            intersection_end = interval1_end;\n\
    \            intersection_length = interval1_end - intersection_start;\n     \
    \       interval1_length = interval2_end - intersection_start;\n            prime\
    \ = false;\n        }\n        if intersection_end < interval1_start {\n     \
    \       intersection_start = intersection_end;\n            intersection_end =\
    \ interval1_start;\n            intersection_length = interval1_end - intersection_start;\n\
    \            interval1_length = interval2_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_end > interval2_end {\n\
    \            intersection_start = intersection_end;\n            intersection_end\
    \ = interval2_end;\n            intersection_length = interval2_end - intersection_start;\n\
    \            interval2_length = interval1_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_start < interval2_start\
    \ {\n            intersection_start = intersection_end;\n            intersection_end\
    \ = interval2_start;\n            intersection_length = interval2_end - intersection_start;\n\
    \            interval2_length = interval1_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_length == 0 {\n      \
    \      prime = false;\n        }\n        if interval1_length == 0 {\n       \
    \     prime = false;\n        }\n        if interval2_length == 0 {\n        \
    \    prime = false;\n        }\n        if intersection_length == interval1_length\
    \ && intersection_length == interval2_length {\n            prime = true;\n  \
    \      }\n        if intersection_length == interval1_length {\n            interval1_prime\
    \ = false;\n        }\n        if intersection_length == interval2_length {\n\
    \            interval2_prime = false;\n        }\n    }\n    if prime_checker(intersection_start,\
    \ intersection_end) {\n        if interval1_prime && interval2_prime {\n     \
    \       return String::from(\"YES\");\n        }\n        if interval1_prime {\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start == interval2_start {\n   \
    \     if interval1_end == interval2_end {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_length\
    \ == 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_length = interval1_length;\n    }\n\n\
    \    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start ==\
    \ interval2_start {\n        if interval1_end == interval2_end {\n           \
    \ return \"YES\";\n        } else {\n            return \"NO\";\n        }\n \
    \   }\n    let mut interval1_length = interval1_end - interval1_start + 1;\n \
    \   let mut interval2_length = interval2_end - interval2_start + 1;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval2_start {\n    \
    \        interval1_length = interval2_start - interval1_start + 1;\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_length = interval2_end\
    \ - interval1_start + 1;\n        }\n    }\n    if interval1_length == 1 {\n \
    \       return \"NO\";\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end < interval2_end\
    \ {\n            interval1_length = interval2_end - interval1_start + 1;\n   \
    \     }\n    }\n    if interval1_length == 5 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ < interval2_end {\n            interval1_length = interval2_end - interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n   \
    \ if interval1_end == interval2_end {\n        return \"YES\";\n    }\n    let\
    \ mut interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if interval1_length == 3 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 4 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 5 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 6 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 7 {\n        return \"YES\";\n    }\n    if interval1_length == 8 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 9 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 10 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 11 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 12 {\n        return \"YES\";\n    }\n    if interval1_length == 13 {\n \
    \       return \"YES\";\n    }\n    if interval1_length == 14 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 15 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 16 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 17 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 18 {\n        return \"YES\";\n    }\n    if interval1_length == 19 {\n \
    \       return \"YES\";\n    }\n    if interval1_length == 20 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 21 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 22 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 100 {\n        return \"YES", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            return String::from(\"NO\");\n        }\n        if interval1[1]\
    \ > interval2[1] {\n            return String::from(\"NO\");\n        }\n    \
    \    let mut interval = interval1;\n        let mut interval2 = interval2;\n \
    \       let mut len = 0;\n        while interval[0] < interval[1] {\n        \
    \    if interval[0] == interval2[0] {\n                len += 1;\n           \
    \     interval[0] = interval1[1];\n                interval[1] = interval2[1];\n\
    \            } else {\n                len += 1;\n                interval[0]\
    \ = interval[0];\n                interval[1] = interval2[0];\n            }\n\
    \        }\n        if len % 2 == 0 {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval1_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval2_start > interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval2_start == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut intersection = interval1;\n    let mut intersection2 = interval2;\n    let\
    \ mut intersection_length = interval1.0;\n    let mut intersection_length2 = interval2.0;\n\
    \    let mut interval_length = interval1.0;\n    let mut interval_length2 = interval2.0;\n\
    \    let mut prime = true;\n    while prime == true {\n        if interval_length\
    \ == interval_length2 {\n            prime = false;\n        }\n        else {\n\
    \            intersection_length += interval_length;\n            intersection_length2\
    \ += interval_length2;\n            intersection = intersection.0;\n         \
    \   intersection2 = intersection2.0;\n            interval_length = interval1.0;\n\
    \            interval_length2 = interval2.0;\n        }\n        if intersection_length\
    \ == intersection_length2 {\n            prime = false;\n        }\n        else\
    \ {\n            intersection_length += interval_length;\n            intersection_length2\
    \ += interval_length2;\n            intersection = intersection.0;\n         \
    \   intersection2 = intersection2.0;\n            interval_length = interval1.0;\n\
    \            interval_length2 = interval2.0;\n        }\n    }\n    if prime ==\
    \ true {\n        String::from(\"YES\")\n    }\n    else {\n        String::from(\"\
    NO\")\n    }", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    } else {\n        return String::from(\"NO\");\n    }", "    let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n    let mut interval2_len = interval2[1]\
    \ - interval2[0] + 1;\n    if interval_len > interval2_len {\n        interval_len\
    \ = interval2_len;\n    }\n    let mut interval_start = interval1[0];\n    let\
    \ mut interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval_end > interval2_end\
    \ {\n        interval_end = interval2_end;\n    }\n    if interval_start < interval2_start\
    \ {\n        interval_start = interval2_start;\n    }\n    if interval_start ==\
    \ interval_end {\n        return \"NO\";\n    }\n    if interval_start > interval_end\
    \ {\n        return \"NO\";\n    }\n    if interval_len == 1 {\n        return\
    \ \"YES\";\n    }\n    if interval_len == 2 {\n        if interval_start == interval_end\
    \ {\n            return \"YES\";\n        }\n        if interval_start < interval_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval_len % 2 ==\
    \ 0 {\n        if interval_start == interval_end {\n            return \"YES\"\
    ;\n        }\n        if interval_start < interval_end {\n            return \"\
    YES\";\n        }\n    }\n    let mut interval_mid = (interval_start + interval_end)\
    \ / 2;\n    let mut interval2_mid = (interval2_start + interval2_end) / 2;\n \
    \   if interval_start == interval_end {\n        return \"NO\";\n    }\n    if\
    \ interval2_start == interval2_end {\n        return \"NO\";\n    }\n    if interval_start\
    \ < interval_end {\n        if interval_mid == interval2_mid {\n            return\
    \ \"YES\";\n        }\n        if interval_mid < interval2_mid {\n           \
    \ return \"YES\";\n        }\n    }\n    if interval_start > interval_end {\n\
    \        if interval_mid == interval2_mid {\n            return \"YES\";\n   \
    \     }\n        if interval_mid > interval2_mid {\n            return \"YES\"\
    ;\n        }\n    }\n    if interval_start < interval2_start {\n        if interval_mid\
    \ == interval2_mid {\n            return \"YES\";\n        }\n        if interval_mid\
    \ < interval2_mid {\n            return \"YES\";\n        }\n    }\n    if interval_start\
    \ > interval2_end {\n        if interval_mid == interval2_mid {\n            return\
    \ \"YES\";\n        }\n        if interval_mid > interval2_mid {\n           \
    \ return \"YES\";\n        }\n    }\n    if interval_start == interval2_start\
    \ {\n        if interval_mid == interval2_", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            String::from(\"NO\")\n        } else {\n            String::from(\"\
    YES\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval_length(interval)\n    }\
    \ else if interval1[0] < interval1[1] && interval2[0] > interval2[1] {\n     \
    \   let mut interval = interval1;\n        interval[0] = interval1[0];\n     \
    \   interval[1] = interval2[1];\n        interval_length(interval)\n    } else\
    \ if interval1[0] > interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval2;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[1];\n        interval_length(interval)\n    } else {\n        let\
    \ mut interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval1[1];\n        interval_length(interval)\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n        interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n        interval2_start, interval2_end =\
    \ interval1_start, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n            interval2_start,\
    \ interval2_end = interval1_start, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \            interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \        }\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n        interval2_start, interval2_end\
    \ = interval1_start, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \        interval2_start, interval2_end = interval1_start, interval1_end;\n  \
    \  }\n    if interval1_start <= interval2_start {\n        if interval1_end <\
    \ interval2_end {\n            interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        }\n        if interval1_end == interval2_end {\n   \
    \         if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n            interval2_start, interval2_end\
    \ = interval1_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n        interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start +\
    \ 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n  \
    \  let mut intersection_length = interval1_length + interval2_length - 1;\n  \
    \  if interval1_length == interval2_length {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length = interval1_length + 1;\n        } else {\n\
    \            intersection_length = interval2_length + 1;\n        }\n    }\n \
    \   if intersection_length == 2 {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length += 1;\n        } else {\n            intersection_length\
    \ += 1;\n        }\n    }\n    if intersection_length == 1 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if intersection_length == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_length == 1 {\n        if interval1_start < interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 3 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start < interval2_start {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if intersection_length ==\
    \ 1 {\n        if interval1_start < interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if intersection_length == 0 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 4 {\n        if\
    \ interval1_start == interval2_start {\n            return \"YES\";\n        }\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"YES\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n \
    \   let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length > interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 1 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut prime = true;\n    loop {\n \
    \       if interval[0] >= interval[1] {\n            interval = interval2;\n \
    \           interval2 = interval1;\n            prime = false;\n        }\n  \
    \      if prime {\n            if interval[0] < interval[1] {\n              \
    \  interval[0] = interval[0] + 1;\n            } else {\n                interval[1]\
    \ = interval[1] - 1;\n            }\n        } else {\n            if interval[0]\
    \ < interval[1] {\n                interval[0] = interval[0] + 1;\n          \
    \  } else {\n                interval[1] = interval[1] - 1;\n            }\n \
    \       }\n        if interval[0] >= interval[1] {\n            break;\n     \
    \   }\n    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    let mut intersection_length = interval1_length +\
    \ interval2_length;\n    if intersection_length == 2 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == ", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    \n    if interval1.0 > interval2.0 {\n\
    \        interval = interval2;\n        interval2 = interval1;\n    }\n    \n\
    \    if interval1.1 == interval2.1 {\n        return String::from(\"NO\");\n \
    \   }\n    \n    if interval1.1 > interval2.1 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.2 > interval2.2\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.3 == interval2.3 {\n        return String::from(\"NO\");\n\
    \    }\n    \n    if interval1.3 > interval2.3 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.4 > interval2.4\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.5 > interval2.5 {\n        interval = interval1;\n     \
    \   interval1 = interval2;\n    }\n    \n    if interval1.6 > interval2.6 {\n\
    \        interval = interval1;\n        interval1 = interval2;\n    }\n    \n\
    \    if interval1.7 > interval2.7 {\n        interval = interval1;\n        interval1\
    \ = interval2;\n    }\n    \n    if interval1.8 > interval2.8 {\n        interval\
    \ = interval1;\n        interval1 = interval2;\n    }\n    \n    if interval1.9\
    \ > interval2.9 {\n        interval = interval1;\n        interval1 = interval2;\n\
    \    }\n    \n    if interval1.10 > interval2.10 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.11 > interval2.11\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.12 > interval2.12 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.13 > interval2.13\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.14 > interval2.14 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.15 > interval2.15\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.16 > interval2.16 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.17 > interval2.17\
    \ {\n        interval = interval1;\n        interval1 = interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length > interval2_length {\n     \
    \   interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start < interval2_end {\n            interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_start {\n            interval1_end, interval2_start = interval2_start,\
    \ interval1_end;\n        }\n        if interval1_start == interval1_end {\n \
    \           if interval2_start == interval2_end {\n                return \"YES\"\
    .to_string();\n            } else {\n                return \"NO\".to_string();\n\
    \            }\n        }\n    }\n    if interval1_length < interval2_length {\n\
    \        interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start < interval2_end {\n            interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_", "    if interval1.start > interval2.start {\n        let (start,\
    \ end) = interval1;\n        intersection(interval2, (start, end - 1))\n    }\
    \ else if interval1.end < interval2.end {\n        let (start, end) = interval1;\n\
    \        intersection((start, end - 1), interval2)\n    } else {\n        let\
    \ (start, end) = interval1;\n        let (end1, end2) = interval2;\n        if\
    \ start < end1 {\n            if end < end2 {\n                return \"NO\";\n\
    \            }\n            return \"YES\";\n        }\n        if start > end2\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }", " \
    \   if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[0];\n        interval\n    } else {\n        let mut interval =\
    \ interval2;\n        interval[0] = interval2[0];\n        interval[1] = interval1[1];\n\
    \        interval\n    }\n    let mut prime = true;\n    for i in interval {\n\
    \        if i % 2 == 0 {\n            prime = false;\n            break;\n   \
    \     }\n    }\n    if prime {\n        \"YES\"\n    } else {\n        \"NO\"\n\
    \    }"]
stop_tokens:
- "\n}"
