name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!(candidate((1,\
  \ 2), (2, 3)), String::from(\"NO\"));\n    assert_eq!(candidate((-1, 1), (0, 4)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-3, -1), (-5, 5)), String::from(\"\
  YES\"));\n    assert_eq!(candidate((-2, 2), (-4, 0)), String::from(\"YES\"));\n\
  \    assert_eq!(candidate((-11, 2), (-1, -1)), String::from(\"NO\"));\n    assert_eq!(candidate((1,\
  \ 2), (3, 5)), String::from(\"NO\"));\n    assert_eq!(candidate((1, 2), (1, 2)),\
  \ String::from(\"NO\"));\n    assert_eq!(candidate((-2, -2), (-3, -2)), String::from(\"\
  NO\"));\n}\n"
completions: ["    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval_length == interval2_length {\n \
    \               return String::from(\"YES\");\n            }\n            else\
    \ {\n                return String::from(\"NO\");\n            }\n        }\n\
    \        else {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    if interval2_start == interval2_end {\n        if interval_length == interval2_length\
    \ {\n            return String::from(\"YES\");\n        }\n        else {\n  \
    \          return String::from(\"NO\");\n        }\n    }\n    if interval_length\
    \ == interval2_length {\n        if interval_length == interval1_length {\n  \
    \          return String::from(\"YES\");\n        }\n        else {\n        \
    \    return String::from(\"NO\");\n        }\n    }\n    if interval_length <\
    \ interval2_length {\n        interval_length = interval2_length;\n        interval2_length\
    \ = interval1_length;\n        interval1_length = interval_length;\n    }\n  \
    \  if interval_length < interval1_length {\n        interval_length = interval1_length;\n\
    \        interval2_length = interval1_length;\n        interval1_length = interval_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_length\
    \ == interval_length {\n            return String::from(\"YES\");\n        }\n\
    \        else {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \        interval2_length = interval1_length;\n        interval1_length = interval_length;\n\
    \    }\n    if interval1_length < interval_length {\n        interval1_length\
    \ = interval_length;\n        interval2_length = interval1_length;\n", "    let\
    \ mut interval_len = interval1.0;\n    let mut interval_end = interval1.1;\n \
    \   let mut interval_start = interval2.0;\n    let mut interval_end_2 = interval2.1;\n\
    \n    if interval_end > interval_start {\n        interval_len = interval_end\
    \ - interval_start;\n    }\n\n    if interval_end_2 > interval_start {\n     \
    \   interval_end_2 = interval_end_2 - interval_start;\n    }\n\n    if interval_len\
    \ == interval_end_2 {\n        if interval_len % 2 == 0 {\n            if interval_len\
    \ == 2 {\n                return String::from(\"YES\");\n            }\n     \
    \       else {\n                return String::from(\"NO\");\n            }\n\
    \        }\n        else {\n            return String::from(\"NO\");\n       \
    \ }\n    }\n    else {\n        return String::from(\"NO\");\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    if interval1_end <\
    \ interval2_start {\n        interval1_end = interval2_start;\n        interval1_length\
    \ = interval2_end - interval2_start;\n    }\n    if interval2_end < interval1_start\
    \ {\n        interval2_end = interval1_start;\n        interval2_length = interval1_end\
    \ - interval1_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_length = interval2_end - interval2_start;\n\
    \    }\n    if interval2_end > interval1_end {\n        interval2_end = interval1_end;\n\
    \        interval2_length = interval1_end - interval1_start;\n    }\n    if interval1_end\
    \ == interval2_end {\n        if interval1_length == interval2_length {\n    \
    \        if interval1_start <= interval2_start {\n                intersection_start\
    \ = interval1_start;\n                intersection_end = interval1_end;\n    \
    \            intersection_length = interval1_length;\n            } else {\n \
    \               intersection_start = interval2_start;\n                intersection_end\
    \ = interval2_end;\n                intersection_length = interval2_length;\n\
    \            }\n        } else {\n            intersection_start = interval1_start;\n\
    \            intersection_end = interval1_end;\n            intersection_length\
    \ = interval1_length;\n        }\n    } else {\n        if interval1_length ==\
    \ interval2_length {\n            if interval1_start <= interval2_start {\n  \
    \              intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n                intersection_length = interval1_length;\n\
    \            } else {\n                intersection_start = interval2_start;\n\
    \                intersection_end = interval2_end;\n                intersection_length\
    \ = interval2_length;\n            }\n        } else {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        \
    \    intersection_length = interval1_length;\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        if intersection_start == intersection_end {\n            if\
    \ interval1_start <= interval2_start {\n                return String::from(\"\
    YES\");\n            } else {\n                return String::from(\"NO\");\n\
    \            }\n        } else {\n            return String::from(\"NO\");\n \
    \       }\n    } else {\n        if intersection_length == 2 {\n            if\
    \ intersection_start == intersection_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime\
    \ = true;\n    \n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_len = interval2_len;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_len\
    \ = interval2_len;\n    }\n    \n    while interval1_len > 0 || interval2_len\
    \ > 0 {\n        if interval1_len > 0 && interval2_len > 0 {\n            if interval1_start\
    \ > interval2_start {\n                interval1_start -= 1;\n               \
    \ interval1_len -= 1;\n            } else {\n                interval2_start -=\
    \ 1;\n                interval2_len -= 1;\n            }\n        }\n        if\
    \ interval1_len > 0 {\n            interval1_len -= 1;\n        }\n        if\
    \ interval2_len > 0 {\n            interval2_len -= 1;\n        }\n    }\n   \
    \ \n    if prime{\n        return String::from(\"YES\");\n    } else {\n     \
    \   return String::from(\"NO\");\n    }", "    let mut intervals = vec![];\n \
    \   intervals.push(interval1);\n    intervals.push(interval2);\n    let mut intersection\
    \ = intervals.iter().filter(|&(_, end)| end > 0).collect::<Vec<_>>();\n    if\
    \ intersection.len() == 2 {\n        if interval1[0] < interval1[1] {\n      \
    \      intersection.swap(0, 1);\n        }\n        if interval2[0] < interval2[1]\
    \ {\n            intersection.swap(1, 2);\n        }\n        if intersection[0]\
    \ > intersection[1] {\n            intersection.swap(0, 1);\n        }\n     \
    \   if intersection[0] < intersection[1] {\n            intersection.swap(1, 2);\n\
    \        }\n        if intersection[0] > intersection[1] {\n            intersection.swap(0,\
    \ 1);\n        }\n        if intersection[0] < intersection[1] {\n           \
    \ intersection.swap(1, 2);\n        }\n        if intersection[0] > intersection[1]\
    \ {\n            intersection.swap(0, 1);\n        }\n        if intersection[0]\
    \ < intersection[1] {\n            intersection.swap(1, 2);\n        }\n     \
    \   if intersection[0] > intersection[1] {\n            intersection.swap(0, 1);\n\
    \        }\n        if intersection[0] < intersection[1] {\n            intersection.swap(1,\
    \ 2);\n        }\n        if intersection[0] > intersection[1] {\n           \
    \ intersection.swap(0, 1);\n        }\n        if intersection[0] < intersection[1]\
    \ {\n            intersection.swap(1, 2);\n        }\n        if intersection[0]\
    \ > intersection[1] {\n            intersection.swap(0, 1);\n        }\n     \
    \   if intersection[0] < intersection[1] {\n            intersection.swap(1, 2);\n\
    \        }\n        if intersection[0] > intersection[1] {\n            intersection.swap(0,\
    \ 1);\n        }\n        if intersection[0] < intersection[1] {\n           \
    \ intersection.swap(1, 2);\n        }\n        if intersection[0] > intersection[1]\
    \ {\n            intersection.swap(0, 1);\n        }\n        if intersection[0]\
    \ < intersection[1] {\n            intersection.swap(1, 2);\n        }\n     \
    \   if intersection[0] > intersection[1] {\n            intersection.swap(0, 1);\n\
    \        }\n        if intersection[0] < intersection[1] {\n            intersection.swap(1,\
    \ 2);\n        }\n        if intersection[0] > intersection[1] {\n           \
    \ intersection.swap(0, 1);\n        }\n        if intersection[0] < intersection[1]\
    \ {\n            intersection.swap(1, 2);\n        }\n        if intersection[0]\
    \ > intersection[1] {\n            intersection.swap(0, 1);\n        }\n     \
    \   if intersection[0] < intersection[1] {\n            intersection.swap(1, 2);\n\
    \        }\n        if intersection[0] > intersection[1] {\n            intersection.swap(0,\
    \ 1);\n        }\n        if intersection[0] < intersection[1] {\n           \
    \ intersection.swap(1, 2);\n        }\n        if intersection[0] > intersection[1]\
    \ {\n            intersection.", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    if interval1_length < interval2_length {\n        interval1_end = interval2_end;\n\
    \        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval2_start {\n    \
    \        interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \   }\n    if interval1_length == 1 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval2_length == 1 {\n        if interval2_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 2 {\n        if interval1_start == interval1_end {\n   \
    \         return \"YES\";\n        }\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start < interval2_start\
    \ {\n            interval1_start = interval2_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \   }\n    if interval2_length == 2 {\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start < interval2_start\
    \ {\n            interval2_start = interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \   }\n    if interval1_length == 3 && interval2_length == 3 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_end > interval2_end {\n            interval1_end =\
    \ interval2_end;\n        }\n    }\n    if interval1_length == 3 {\n        if\
    \ interval1_start == interval1_end {\n            return \"YES\";\n        }\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n        if interval1_start < interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end = interval2_end;", "    let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n    let mut interval2_len = interval2[1] - interval2[0]\
    \ + 1;\n    if interval_len > interval2_len {\n        interval_len = interval2_len;\n\
    \    }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    let mut\
    \ interval_start = interval1[0];\n    let mut interval_end = interval1[1];\n \
    \   let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_len = interval_end - interval_start + 1;\n    let mut interval2_len\
    \ = interval2_end - interval2_start + 1;\n    if interval_len > interval2_len\
    \ {\n        interval_len = interval2_len;\n    }\n    if interval_len == 0 {\n\
    \        return \"NO\";\n    }\n    if interval_start > interval2_start {\n  \
    \      interval_start = interval2_start;\n    }\n    if interval_end < interval2_end\
    \ {\n        interval_end = interval2_end;\n    }\n    if interval_start == interval_end\
    \ {\n        return \"NO\";\n    }\n    if interval_start > interval_end {\n \
    \       interval_len = interval_end - interval_start + 1;\n    }\n    if interval_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval_len == interval_start\
    \ {\n        return \"YES\";\n    }\n    if interval_len == interval_end {\n \
    \       return \"YES\";\n    }\n    let mut interval_start = interval1[0];\n \
    \   let mut interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_len = interval_end\
    \ - interval_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n    if interval_len > interval2_len {\n        interval_len = interval2_len;\n\
    \    }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval_start\
    \ > interval2_start {\n        interval_start = interval2_start;\n    }\n    if\
    \ interval_end < interval2_end {\n        interval_end = interval2_end;\n    }\n\
    \    if interval_start == interval_end {\n        return \"NO\";\n    }\n    if\
    \ interval_start > interval_end {\n        interval_len = interval_end - interval_start\
    \ + 1;\n    }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n   \
    \ if interval_len == interval_start {\n        return \"YES\";\n    }\n    if\
    \ interval_len == interval_end {\n        return \"YES\";\n    }\n    let mut\
    \ interval_start = interval1[0];\n    let ", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut intersection = interval1;\n \
    \   let mut intersection2 = interval2;\n    let mut prime = true;\n    loop {\n\
    \        if interval1.start < interval2.start {\n            intersection.start\
    \ = interval1.start;\n            intersection.end = interval2.start;\n      \
    \  } else {\n            intersection.start = interval2.start;\n            intersection.end\
    \ = interval1.start;\n        }\n        if intersection.end > interval1.end {\n\
    \            intersection.end = interval1.end;\n        }\n        if intersection.end\
    \ > interval2.end {\n            intersection.end = interval2.end;\n        }\n\
    \        if intersection.end == interval1.end {\n            prime = false;\n\
    \        }\n        if intersection.end == interval2.end {\n            prime\
    \ = false;\n        }\n        if intersection.end == interval1.end {\n      \
    \      prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval1.end\
    \ {\n            prime = false;\n        }\n        if intersection.end == interval2.end\
    \ {\n            prime = false;\n        }\n", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end < interval2_end {\n        let\
    \ mut interval1_length = interval1_end - interval1_start + 1;\n        let mut\
    \ interval2_length = interval2_end - interval2_start + 1;\n        if interval1_length\
    \ == interval2_length {\n            let mut interval1_prime = true;\n       \
    \     let mut interval2_prime = true;\n            for i in 1..interval1_length\
    \ {\n                if interval1_start + i == interval2_start {\n           \
    \         interval1_prime = false;\n                }\n                if interval1_start\
    \ + i == interval2_end {\n                    interval1_prime = false;\n     \
    \           }\n            }\n            for i in 1..interval2_length {\n   \
    \             if interval1_start + i == interval2_start {\n                  \
    \  interval2_prime = false;\n                }\n                if interval1_start\
    \ + i == interval2_end {\n                    interval2_prime = false;\n     \
    \           }\n            }\n            if interval1_prime && interval2_prime\
    \ {\n                return \"YES\";\n            }\n        }\n    }\n    return\
    \ \"NO\";", "    if interval1.start < interval1.end && interval2.start < interval2.end\
    \ {\n        let mut start = interval1.start;\n        let mut end = interval1.end;\n\
    \        let mut length = interval1.end - start;\n        let mut prime = true;\n\
    \        while start < interval2.end {\n            if interval1.start == interval2.start\
    \ {\n                prime = false;\n                break;\n            }\n \
    \           if interval1.end == interval2.end {\n                prime = false;\n\
    \                break;\n            }\n            if interval1.start == end\
    \ {\n                prime = false;\n                break;\n            }\n \
    \           if interval1.end == start {\n                prime = false;\n    \
    \            break;\n            }\n            start += 1;\n            length\
    \ += 1;\n        }\n        if prime {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_is_prime = true;\n    let mut interval2_is_prime\
    \ = true;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_is_prime =\
    \ true;\n                    interval2_is_prime = true;\n                    break;\n\
    \                }\n                if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_is_prime =\
    \ true;\n                    interval2_is_prime = false;\n                   \
    \ break;\n                }\n            }\n            if interval2_start < interval2_end\
    \ {\n                if interval1_start <= interval2_end && interval1_end >= interval2_start\
    \ {\n                    intersection_start = interval1_start;\n             \
    \       intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_is_prime =\
    \ true;\n                    interval2_is_prime = false;\n                   \
    \ break;\n                }\n                if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                    intersection_start\
    \ = interval1_start;\n                    intersection_end = interval1_end;\n\
    \                    intersection_length = interval1_end - interval1_start;\n\
    \                    interval1_is_prime = true;\n                    interval2_is_prime\
    \ = false;\n                    break;\n                }\n            }\n   \
    \     }\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                    intersection_length\
    \ = interval1_end - interval1_start;\n                    interval1_is_prime =\
    \ true;\n                    interval2_is_prime = true;\n                    break;\n\
    \                }\n                if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_", "    if interval1.start <\
    \ interval1.end && interval2.start < interval2.end {\n        let mut interval\
    \ = interval1;\n        interval.start = interval.end;\n        interval.end =\
    \ interval.start;\n        interval.start += 1;\n        interval.end -= 1;\n\
    \        let mut interval2 = interval2;\n        interval2.start = interval2.end;\n\
    \        interval2.end = interval2.start;\n        interval2.start += 1;\n   \
    \     interval2.end -= 1;\n        let mut intersection = interval;\n        let\
    \ mut intersection2 = interval2;\n        let mut intersection_len = intersection.end\
    \ - intersection.start + 1;\n        let mut intersection2_len = intersection2.end\
    \ - intersection2.start + 1;\n        let mut prime = true;\n        while intersection_len\
    \ > 0 && intersection2_len > 0 {\n            if intersection.start % intersection2.start\
    \ == 0 && intersection.end % intersection2.end == 0 {\n                intersection_len\
    \ -= 1;\n                intersection2_len -= 1;\n            } else {\n     \
    \           prime = false;\n                break;\n            }\n        }\n\
    \        if prime {\n            return \"YES\".to_string();\n        } else {\n\
    \            return \"NO\".to_string();\n        }\n    } else {\n        return\
    \ \"NO\".to_string();\n    }", "    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    if interval1.start > interval2.start {\n       \
    \ interval = interval2;\n        interval2 = interval1;\n    }\n    if interval1.end\
    \ < interval2.end {\n        interval = interval2;\n        interval2 = interval1;\n\
    \    }\n    if interval1.start > interval2.end {\n        return \"NO\";\n   \
    \ }\n    if interval1.end < interval2.start {\n        return \"NO\";\n    }\n\
    \    if interval1.start == interval2.start {\n        return \"NO\";\n    }\n\
    \    if interval1.end == interval2.end {\n        return \"NO\";\n    }\n    if\
    \ interval1.start < interval2.start {\n        return \"NO\";\n    }\n    if interval1.end\
    \ > interval2.end {\n        return \"NO\";\n    }\n    if interval1.start ==\
    \ interval2.end {\n        return \"YES\";\n    }\n    if interval1.end == interval2.start\
    \ {\n        return \"YES\";\n    }\n    if interval1.start < interval2.end {\n\
    \        return \"YES\";\n    }\n    if interval1.end > interval2.start {\n  \
    \      return \"YES\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_len =\
    \ interval1_end - interval1_start;\n    let mut interval1_len = interval2_end\
    \ - interval2_start;\n    let mut interval2_len = interval1_end - interval1_start;\n\
    \    let mut prime = true;\n    \n    while prime{\n        if interval1_start\
    \ < interval2_start {\n            interval1_start += interval1_len;\n       \
    \     interval1_len -= 1;\n        } else {\n            interval2_start += interval2_len;\n\
    \            interval2_len -= 1;\n        }\n        if interval1_end > interval2_end\
    \ {\n            interval1_end -= 1;\n        } else {\n            interval2_end\
    \ -= 1;\n        }\n        if interval1_end < interval2_end {\n            prime\
    \ = false;\n        }\n    }\n    if interval1_start == interval1_end {\n    \
    \    if interval2_start == interval2_end {\n            if interval1_start < interval1_end\
    \ {\n                intersection_start = interval1_start;\n                intersection_end\
    \ = interval1_end;\n            } else {\n                intersection_start =\
    \ interval2_start;\n                intersection_end = interval2_end;\n      \
    \      }\n        } else {\n            intersection_start = interval1_start;\n\
    \            intersection_end = interval1_end;\n        }\n    } else {\n    \
    \    intersection_start = interval1_start;\n        intersection_end = interval1_end;\n\
    \    }\n    if intersection_start == intersection_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           intersection_len = interval1_end - intersection_start;\n         \
    \   } else {\n                intersection_len = interval2_end - intersection_start;\n\
    \            }\n        } else {\n            intersection_len = interval1_end\
    \ - intersection_start;\n        }\n    } else {\n        intersection_len = interval1_end\
    \ - intersection_start;\n    }\n    if intersection_len == 1 {\n        return\
    \ String::from(\"YES\");\n    } else {\n        return String::from(\"NO\");\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start,\
    \ interval1_end = interval1_end, interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval1_start {\n        interval1_end, interval1_start\
    \ = interval1_start, interval1_end;\n    }\n    if interval2_end < interval2_start\
    \ {\n        interval2_end, interval2_start = interval2_start, interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start == interval1_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        return String::from(\"NO\");\n   \
    \ }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval1_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start < interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start > interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end < interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end > interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    let mut interval1_len = interval1_end - interval1_start +\
    \ 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n    let\
    \ mut interval1_prime = true;\n    let mut interval2_prime = true;\n    let mut\
    \ prime_number = 0;\n    let mut prime_number_len = 0;\n    let mut prime_number_prime\
    \ = true;\n    let mut prime_number_prime_len = 0;\n    let mut prime_number_prime_prime\
    \ = true;\n    let mut prime_number_prime_prime_len = 0;\n    let mut prime_number_prime_prime_prime\
    \ = true;\n    let mut prime_number_prime_prime_prime_len = 0;\n    let mut ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start < interval2_start {\n        \
    \    intersection_start = interval1_start;\n        } else {\n            intersection_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            intersection_end = interval1_end;\n        } else {\n           \
    \ intersection_end = interval2_end;\n        }\n        if intersection_start\
    \ > intersection_end {\n            break;\n        }\n        interval1_start\
    \ += 1;\n        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        } else\
    \ {\n            return String::from(\"NO\");\n        }\n    } else {\n     \
    \   if interval2_start == interval2_end {\n            return String::from(\"\
    NO\");\n        } else {\n            return String::from(\"YES\");\n        }\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    while interval1_start <\
    \ interval2_end {\n        intersection_start = interval1_start;\n        intersection_end\
    \ = interval1_end;\n        if interval1_start < interval2_start {\n         \
    \   interval1_start = interval2_start;\n            interval1_end = interval2_end;\n\
    \            interval2_start = interval1_start;\n            interval2_end = interval1_end;\n\
    \        }\n        if interval1_end < interval2_end {\n            interval1_end\
    \ = interval2_end;\n            interval1_start = interval2_start;\n         \
    \   interval2_end = interval1_end;\n            interval2_start = interval1_start;\n\
    \        }\n        if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            return String::from(\"NO\");\n        }\n        if interval1_end\
    \ == interval2_end {\n            return String::from(\"NO\");\n        }\n  \
    \  }\n    return String::from(\"NO\");", "    if interval1[0] < interval1[1] {\n\
    \        if interval2[0] < interval2[1] {\n            if interval1[0] < interval2[0]\
    \ {\n                if interval1[1] > interval2[1] {\n                    String::from(\"\
    NO\")\n                } else {\n                    String::from(\"YES\")\n \
    \               }\n            } else {\n                String::from(\"NO\")\n\
    \            }\n        } else {\n            String::from(\"NO\")\n        }\n\
    \    } else {\n        if interval2[0] < interval2[1] {\n            if interval1[0]\
    \ < interval2[0] {\n                String::from(\"NO\")\n            } else {\n\
    \                String::from(\"YES\")\n            }\n        } else {\n    \
    \        String::from(\"NO\")\n        }\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start +\
    \ 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n  \
    \  if interval1_length == interval2_length {\n        if interval1_length == 1\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   let mut interval1_prime_number: isize = 1;\n    let mut interval2_prime_number:\
    \ isize = 1;\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    while interval1_start < interval1_end {\n        if interval1_start\
    \ % interval2_start == 0 {\n            interval1_prime_number += 1;\n       \
    \ }\n        interval1_start += 1;\n    }\n    while interval2_start < interval2_end\
    \ {\n        if interval2_start % interval1_start == 0 {\n            interval2_prime_number\
    \ += 1;\n        }\n        interval2_start += 1;\n    }\n    if interval1_prime_number\
    \ == interval2_prime_number {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n \
    \   let mut interval_len = interval1.0;\n    let mut interval2_len = interval2.0;\n\
    \    let mut interval_end = interval1.0;\n    let mut interval2_end = interval2.0;\n\
    \    let mut interval_start = interval1.0;\n    let mut interval2_start = interval2.0;\n\
    \    let mut interval_start_end = interval1.0;\n    let mut interval2_start_end\
    \ = interval2.0;\n    let mut interval_end_start = interval1.0;\n    let mut interval2_end_start\
    \ = interval2.0;\n    let mut interval_start_end_end = interval1.0;\n    let mut\
    \ interval2_start_end_end = interval2.0;\n    let mut interval_start_end_end_end\
    \ = interval1.0;\n    let mut interval2_start_end_end_end = interval2.0;\n   \
    \ let mut interval_start_end_end_end_end = interval1.0;\n    let mut interval2_start_end_end_end_end\
    \ = interval2.0;\n    let mut interval_start_end_end_end_end_end = interval1.0;\n\
    \    let mut interval2_start_end_end_end_end_end = interval2.0;\n    let mut interval_start_end_end_end_end_end_end\
    \ = interval1.0;\n    let mut interval2_start_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_start_end_end_end_end_end_end = interval1.0;\n    let mut\
    \ interval2_start_end_end_end_end_end_end = interval2.0;\n    let mut interval_start_end_end_end_end_end_end_end\
    \ = interval1.0;\n    let mut interval2_start_end_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_end_end = interval1.0;\n \
    \   let mut interval2_start_end_end_end_end_end_end_end_end = interval2.0;\n \
    \   let mut interval_start_end_end_end_end_end_end_end_end = interval1.0;\n  \
    \  let mut interval2_start_end_end_end_end_end_end_end_end = interval2.0;\n  \
    \  let mut interval_start_end_end_end_end_end_end_end_end_end = interval1.0;\n\
    \    let mut interval2_start_end_end_end_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_end_end_end_end = interval1.0;\n\
    \    let mut interval2_start_end_end_end_end_end_end_end_end_end_end = interval2.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_end_end_end_end_end = interval1.0;\n\
    \    let mut interval2_start_end_end_end_end_end_end_end_end_end_", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval1_start <= interval2_end {\n       \
    \ intersection_start = interval1_start;\n        intersection_end = interval1_end;\n\
    \    }\n    if interval1_end >= interval2_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start <= intersection_end {\n        if interval1_start < interval2_start\
    \ {\n            if interval1_end < interval2_end {\n                if interval1_end\
    \ == interval2_end {\n                    return String::from(\"YES\");\n    \
    \            }\n                else {\n                    return String::from(\"\
    NO\");\n                }\n            }\n            else {\n               \
    \ return String::from(\"NO\");\n            }\n        }\n        else {\n   \
    \         return String::from(\"NO\");\n        }\n    }\n    else {\n       \
    \ return String::from(\"NO\");\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"YES\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \n    if interval1_length == interval2_length {\n        return \"YES\";\n   \
    \ }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == interval2_length {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == interval2_length {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == interval2_length {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == interval2_length {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == interval2_length {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n\n    if\
    \ interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n\n    if interval1_end < interval2_end {\n      \
    \  interval1_end = interval2_end;\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n\n    if interval1_length == interval2_length {\n  \
    \      if interval1_length == 1 {\n            return \"YES\";\n        }\n  \
    \      return \"NO\";\n    }\n\n    if interval1_length < interval2_length {\n\
    \        interval1_length = interval2_length;\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n\n    if interval1_length == 2\
    \ {\n        interval1_prime = false;\n    }\n\n    if interval2_length == 2 {\n\
    \        interval2_prime = false;\n    }\n\n    if interval1_length == 1 {\n \
    \       interval1_prime = false;\n    }\n\n    if interval2_length == 1 {\n  \
    \      interval2_prime = false;\n    }\n\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n\n    if interval1_length == 2 {\n      \
    \  interval1_prime = false;\n    }\n\n    if interval2_length == 2 {\n       \
    \ interval2_prime = false;\n    }\n\n    if interval1_length == 1 {\n        interval1_prime\
    \ = false;\n    }\n\n    if interval2_length == 1 {\n        interval2_prime =\
    \ false;\n    }\n\n    if interval1_length == interval2_length {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 2 {\n        interval1_prime =\
    \ false;\n    }\n\n    if interval2_length == 2 {\n        interval2_prime = false;\n\
    \    }\n\n    if interval1_length == 1 {\n        interval1_prime = false;\n \
    \   }\n\n    if interval2_length == 1 {\n        interval2_prime = false;\n  \
    \  }\n\n    if interval1_length == interval2_length {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length == 2 {\n        interval1_prime = false;\n\
    \    }\n\n    if interval2_length", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = 0;\n\
    \    let mut intersection_end = 0;\n    let mut intersection_length = 0;\n   \
    \ let mut interval_length = 0;\n    let mut interval_start = 0;\n    let mut interval_end\
    \ = 0;\n    let mut interval_prime = false;\n    let mut interval_prime_length\
    \ = 0;\n    let mut interval_prime_start = 0;\n    let mut interval_prime_end\
    \ = 0;\n    let mut interval_prime_prime = false;\n    let mut interval_prime_prime_length\
    \ = 0;\n    let mut interval_prime_prime_start = 0;\n    let mut interval_prime_prime_end\
    \ = 0;\n    let mut interval_prime_prime_prime = false;\n    let mut interval_prime_prime_prime_length\
    \ = 0;\n    let mut interval_prime_prime_prime_start = 0;\n    let mut interval_prime_prime_prime_end\
    \ = 0;\n    let mut interval_prime_prime_prime_prime = false;\n    let mut interval_prime_prime_prime_prime_length\
    \ = 0;\n    let mut interval_prime_prime_prime_prime_start = 0;\n    let mut interval_prime_prime_prime_prime_end\
    \ = 0;\n    let mut interval_prime_prime_prime_prime_length = 0;\n    let mut\
    \ interval_prime_prime_prime_prime_start = 0;\n    let mut interval_prime_prime_prime_prime_end\
    \ = 0;\n    let mut interval_prime_prime_prime_prime_prime_length = 0;\n    let\
    \ mut interval_prime_prime_prime_prime_prime_start = 0;\n    let mut interval_prime_prime_prime_prime_prime_end\
    \ = 0;\n    let mut interval_prime_prime_prime_prime_prime_prime_length = 0;\n\
    \    let mut interval_prime_prime_prime_prime_prime_prime_start = 0;\n    let\
    \ mut interval_prime_prime_prime_prime_prime_prime_end = 0;\n    let mut interval_prime_prime_prime_prime_prime_prime_length\
    \ = 0;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_start =\
    \ 0;\n    let mut interval_prime_prime_prime_prime_prime_prime_prime_end", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_start = interval1[0];\n        interval2_end = interval1[1];\n\
    \    }\n    if interval1_len < interval2_len {\n        interval1_start = interval2[0];\n\
    \        interval1_end = interval2[1];\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_len = interval2_end - interval1_start;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_len = interval2_start - interval1_end;\n\
    \        interval2_end = interval1[1];\n    }\n    if interval1_len == 1 {\n \
    \       if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval1_len ==\
    \ 2 {\n        if interval1_start == interval1_end {\n            return \"YES\"\
    .to_string();\n        }\n        if interval2_start == interval2_end {\n    \
    \        return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    let mut prime_number: isize = 1;\n    let mut prime_number_len: isize\
    \ = 1;\n    let mut prime_number_start: isize = 1;\n    let mut prime_number_end:\
    \ isize = 1;\n    let mut prime_number_len2: isize = 1;\n    let mut prime_number_start2:\
    \ isize = 1;\n    let mut prime_number_end2: isize = 1;\n    let mut prime_number_len3:\
    \ isize = 1;\n    let mut prime_number_start3: isize = 1;\n    let mut prime_number_end3:\
    \ isize = 1;\n    let mut prime_number_len4: isize = 1;\n    let mut prime_number_start4:\
    \ isize = 1;\n    let mut prime_number_end4: isize = 1;\n    let mut prime_number_len5:\
    \ isize = 1;\n    let mut prime_number_start5: isize = 1;\n    let mut prime_number_end5:\
    \ isize = 1;\n    let mut prime_number_len6: isize = 1;\n    let mut prime_number_start6:\
    \ isize = 1;\n    let mut prime_number_end6: isize = 1;", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n\
    \        interval_length(interval)\n    } else {\n        let mut interval = interval2;\n\
    \        interval[0] = interval2[1];\n        interval[1] = interval1[0];\n  \
    \      interval_length(interval)\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval2_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    let mut prime_number: isize = 1;\n\
    \    let mut prime_number_start: isize = 1;\n    let mut prime_number_end: isize\
    \ = 1;\n    let mut prime_number_length: isize = 1;\n    let mut prime_number_length_start:\
    \ isize = 1;\n    let mut prime_number_length_end: isize = 1;\n    let mut prime_number_length_length_start:\
    \ isize = 1;\n    let mut prime_number_length_length_end: isize = 1;\n    let\
    \ mut prime_number_length_length_length_start: isize = 1;\n    let mut prime_number_length_length_length_end:\
    \ isize = 1;\n    let mut prime_number_length_length_length_length_start: isize\
    \ = 1;\n    let mut prime_number_length_length_length_end: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_start: isize = 1;\n    let mut\
    \ prime_number_length_length_length_length_end: isize = 1;\n    let mut prime_number_length_length_length_length_length_start:\
    \ isize = 1;\n    let mut prime_number_length_length_length_length_end: isize\
    \ = 1;\n    let mut prime_number_length_length_length_length_length_start: isize\
    \ = 1;\n    let mut prime_number_length_length_length_length_end: isize = 1;\n\
    \    let mut prime_number_length_length_length_length_length_start: isize = 1;\n\
    \    let mut prime_number_length_length_length_length_end: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_length_start: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_length_end: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_length_start: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_length_end: isize = 1;\n    let\
    \ mut prime_number_length_length_length_length_length_length_start: isize = 1;\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            intersection_start = interval1_start;\n     \
    \       intersection_end = interval1_end;\n            intersection_length +=\
    \ 1;\n        }\n        interval1_start += 1;\n        interval1_end += 1;\n\
    \    }\n    while interval2_start <= interval2_end {\n        if interval2_start\
    \ < interval2_end {\n            interval2_start = interval2_end;\n          \
    \  interval2_end += 1;\n            interval2_length += 1;\n        }\n    }\n\
    \    if interval1_start <= interval1_end && interval2_start <= interval2_end {\n\
    \        if intersection_length == interval1_length && intersection_length ==\
    \ interval2_length {\n            if intersection_start == intersection_end {\n\
    \                return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    return String::from(\"NO\");",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start < interval2_start {\n        \
    \    intersection_start = interval1_start;\n        } else {\n            intersection_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            intersection_end = interval1_end;\n        } else {\n           \
    \ intersection_end = interval2_end;\n        }\n        if intersection_start\
    \ > intersection_end {\n            intersection_end = intersection_start;\n \
    \       }\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    } else {\n       \
    \ if intersection_start == intersection_end {\n            return \"NO\".to_string();\n\
    \        } else {\n            return \"YES\".to_string();\n        }\n    }",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        if\
    \ interval1[0] < interval2[0] {\n            String::from(\"NO\")\n        } else\
    \ {\n            String::from(\"YES\")\n        }\n    } else {\n        String::from(\"\
    NO\")\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut interval_length =\
    \ interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    loop {\n        if interval1_start <= interval2_start {\n    \
    \        interval1_start += 1;\n            interval1_end += 1;\n            intersection_start\
    \ += 1;\n            interval_length += 1;\n        } else {\n            interval2_start\
    \ += 1;\n            interval2_end += 1;\n            intersection_end += 1;\n\
    \            interval_length += 1;\n        }\n        if interval1_end >= interval2_end\
    \ {\n            prime_number_found = true;\n            break;\n        }\n \
    \       if interval_length == prime_number {\n            prime_number_found =\
    \ true;\n            break;\n        }\n        if interval_length < prime_number\
    \ {\n            prime_number = interval_length;\n        }\n    }\n    if prime_number_found\
    \ {\n        String::from(\"YES\")\n    } else {\n        String::from(\"NO\"\
    )\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start ", "    if interval1.0 > interval2.0\
    \ || interval1.1 > interval2.1 {\n        return \"NO\";\n    }\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut count = 0;\n \
    \   while interval.0 != interval2.0 {\n        if interval.0 > interval2.0 {\n\
    \            interval = interval2;\n            interval2 = interval1;\n     \
    \   } else {\n            interval = interval1;\n            interval2 = interval2;\n\
    \        }\n        count += 1;\n    }\n    if count % 2 == 0 {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";", "    let mut intervals = vec![];\n   \
    \ intervals.push(interval1);\n    intervals.push(interval2);\n    let mut intersection\
    \ = intervals.iter().filter(|&interval| interval[0] < interval[1]).collect::<Vec<_>>();\n\
    \    let mut prime = true;\n    for interval in intersection {\n        if interval[0]\
    \ % interval[1] != 0 {\n            prime = false;\n            break;\n     \
    \   }\n    }\n    if prime {\n        return \"YES\".to_string();\n    }\n   \
    \ return \"NO\".to_string();", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    \n    while prime_number < interval1_length\
    \ && prime_number < interval2_length {\n        if interval1_start <= intersection_end\
    \ && intersection_end <= interval2_start {\n            intersection_start = intersection_end;\n\
    \            intersection_end = interval2_start;\n            intersection_length\
    \ = interval2_end - intersection_start;\n        }\n        if interval1_start\
    \ <= intersection_end && intersection_end <= interval2_end {\n            intersection_start\
    \ = intersection_end;\n            intersection_end = interval2_end;\n       \
    \     intersection_length = interval2_end - intersection_start;\n        }\n \
    \       if interval1_start <= intersection_end && intersection_end <= interval1_end\
    \ {\n            intersection_start = intersection_end;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - intersection_start;\n\
    \        }\n        if interval1_start <= intersection_end && intersection_end\
    \ <= interval2_end {\n            intersection_start = intersection_end;\n   \
    \         intersection_end = interval2_end;\n            intersection_length =\
    \ interval2_end - intersection_start;\n        }\n        if interval1_start <=\
    \ intersection_end && intersection_end <= interval1_end {\n            intersection_start\
    \ = intersection_end;\n            intersection_end = interval1_end;\n       \
    \     intersection_length = interval1_end - intersection_start;\n        }\n \
    \       prime_number += 1;\n    }\n    if prime_number == interval1_length &&\
    \ prime_number == interval2_length {\n        if interval1_start <= intersection_end\
    \ && intersection_end <= interval2_end {\n            String::from(\"YES\")\n\
    \        } else {\n            String::from(\"NO\")\n        }\n    } else {\n\
    \        String::from(\"NO\")\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval1_end -= 1;\n        }\n      \
    \  if interval2_start < interval2_end {\n            interval2_start += 1;\n \
    \       } else {\n            interval2_end -= 1;\n        }\n        intersection_length\
    \ += 1;\n    }\n    if interval1_start > interval1_end {\n        intersection_length\
    \ -= 1;\n        interval1_start -= 1;\n    }\n    if interval2_start > interval2_end\
    \ {\n        intersection_length -= 1;\n        interval2_start -= 1;\n    }\n\
    \    if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 1 {\n        return \"YES\";\n    }\n    if intersection_length == 2 {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\";\n\
    \        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n    }\n    if intersection_length == 3 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    if intersection_length == 5 {\n     \
    \   if interval1_start == interval1_end {\n            return \"YES\";\n     \
    \   }\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if intersection_length == 6 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 7 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    if intersection_length == 8 {\n     \
    \   if interval1_start == interval1_end {\n            return \"YES\";\n     \
    \   }\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if intersection_length == 9 {\n        if interval1_start\
    \ == interval1_", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut interval1_len = interval2_end - interval2_start;\n\
    \    let mut interval2_len = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    while interval1_len > 0 ||\
    \ interval2_len > 0 {\n        if interval1_len == 0 {\n            interval1_prime\
    \ = false;\n            interval1_start = interval1_end;\n            interval1_end\
    \ = interval1_end + 1;\n            interval1_len = interval1_end - interval1_start;\n\
    \        }\n        if interval2_len == 0 {\n            interval2_prime = false;\n\
    \            interval2_start = interval2_end;\n            interval2_end = interval2_end\
    \ + 1;\n            interval2_len = interval2_end - interval2_start;\n       \
    \ }\n        if intersection_end > interval1_end {\n            intersection_end\
    \ = intersection_end + 1;\n            intersection_len = intersection_end - intersection_start;\n\
    \        }\n        if intersection_end > interval2_end {\n            intersection_end\
    \ = intersection_end + 1;\n            intersection_len = intersection_end - intersection_start;\n\
    \        }\n        if intersection_end == interval1_end {\n            intersection_end\
    \ = intersection_end + 1;\n            intersection_len = intersection_end - intersection_start;\n\
    \        }\n        if intersection_end == interval2_end {\n            intersection_end\
    \ = intersection_end + 1;\n            intersection_len = intersection_end - intersection_start;\n\
    \        }\n    }\n    if interval1_prime && interval2_prime {\n        return\
    \ \"YES\";\n    }\n    if interval1_prime && !interval2_prime {\n        return\
    \ \"NO\";\n    }\n    if !interval1_prime && interval2_prime {\n        return\
    \ \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut prime_numbers = vec![];\n\
    \    \n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            if interval2_start\
    \ < interval2_end {\n                if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n                    intersection_start = interval1_start;\n\
    \                    intersection_end = interval1_end;\n                }\n  \
    \              else {\n                    intersection_start = interval2_start;\n\
    \                    intersection_end = interval2_end;\n                }\n  \
    \          }\n            else {\n                intersection_start = interval1_start;\n\
    \                intersection_end = interval1_end;\n            }\n        }\n\
    \        else {\n            intersection_start = interval2_start;\n         \
    \   intersection_end = interval2_end;\n        }\n        prime_numbers.push(intersection_end\
    \ - intersection_start);\n        interval1_start += 1;\n        interval1_end\
    \ += 1;\n        interval2_start += 1;\n        interval2_end += 1;\n    }\n \
    \   \n    if interval1_start > interval1_end {\n        prime_numbers.push(interval1_end\
    \ - interval1_start);\n    }\n    if interval2_start > interval2_end {\n     \
    \   prime_numbers.push(interval2_end - interval2_start);\n    }\n    \n    if\
    \ prime_numbers.iter().all(|&x| x.is_prime()) {\n        return \"YES\".to_string();\n\
    \    }\n    else {\n        return \"NO\".to_string();\n    }", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut intersection\
    \ = interval1;\n        intersection[0] = interval2[0];\n        intersection[1]\
    \ = interval1[1];\n        intersection.len()\n    } else {\n        let mut intersection\
    \ = interval2;\n        intersection[0] = interval1[0];\n        intersection[1]\
    \ = interval2[1];\n        intersection.len()\n    }\n    if intersection.len()\
    \ == 1 {\n        String::from(\"NO\")\n    } else {\n        String::from(\"\
    YES\")\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    while interval1_start\
    \ < interval1_end && interval2_start < interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval1_end + 1;\n    \
    \    }\n        if interval1_end > interval2_end {\n            interval1_end\
    \ = interval1_end - 1;\n        }\n        intersection_length += 1;\n       \
    \ if interval1_start < interval2_end {\n            interval2_start = interval2_end\
    \ + 1;\n        }\n        if interval1_end > interval2_end {\n            interval2_end\
    \ = interval2_end - 1;\n        }\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            if interval1_start\
    \ == interval1_end {\n                return String::from(\"YES\");\n        \
    \    }\n            return String::from(\"NO\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval2_start == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval1_end {\n            return String::from(\"YES\");\n        }\n    \
    \    return String::from(\"NO\");\n    }\n    if intersection_length == 1 {\n\
    \        if interval1_start == interval1_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval2_start == interval2_end {\n          \
    \  return String::from(\"YES\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n    if intersection_length == 0 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection_length == 1 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 2 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 3 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 4 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 5 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 6 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 7 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 8 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 9 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection_length == 10 {\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    if interval2_length < interval1_length {\n     \
    \   interval2_length = interval1_length;\n        interval1_start = interval2[0];\n\
    \        interval1_end = interval2[1];\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_length = interval2_end - interval1_start;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_start\
    \ > interval1_end {\n        interval2_length = interval1_end - interval2_start;\n\
    \        interval1_start = interval2[0];\n        interval1_end = interval2[1];\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_start = interval1[0];\n\
    \        interval2_end = interval1[1];\n    }\n    if interval2_length < interval1_length\
    \ {\n        interval2_length = interval1_length;\n        interval1_start = interval2[0];\n\
    \        interval1_end = interval2[1];\n    }\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_start = interval1[0];\n        interval2_end = interval1[1];\n   \
    \ }\n    if interval2_length < interval1_length {\n        interval2_length =\
    \ interval1_length;\n        interval1_start = interval2[0];\n        interval1_end\
    \ = interval2[1];\n    }\n    if interval1_length == interval2_length {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_start = interval1[0];\n        interval2_end = interval1[1];\n   \
    \ }\n    if interval2_length < interval1_length {\n        interval2_length = ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1[0];\n    let mut end = interval1[1];\n\
    \    let mut length = interval1[1] - interval1[0] + 1;\n    let mut prime = true;\n\
    \    loop {\n        prime = true;\n        for &(start, end) in intervals {\n\
    \            if start < end {\n                prime = false;\n              \
    \  break;\n            }\n        }\n        if prime {\n            break;\n\
    \        }\n        intervals.push(intervals.clone());\n        start = intervals[intervals.len()\
    \ - 1][1];\n        end = intervals[intervals.len() - 1][0];\n        length +=\
    \ 1;\n    }\n    if length == 2 {\n        return \"NO\".to_string();\n    }\n\
    \    if length == 1 {\n        return \"YES\".to_string();\n    }\n    if length\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n  \
    \      return \"YES\".to_string();\n    }\n    if length == 1 {\n        return\
    \ \"NO\".to_string();\n    }\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    if length == 1 {\n        return \"\
    NO\".to_string();\n    }\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    if length == 1 {\n        return \"\
    NO\".to_string();\n    }\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    if length == 1 {\n        return \"\
    NO\".to_string();\n    }\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n    if length == 2 {\n        return \"YES\".to_string();\n    }\n   \
    \ if length == 1 {\n        return \"NO\".to_string();\n    }\n    if length ==\
    \ 0 {\n        return \"NO\".to_string();\n    }\n    if length == 2 {\n     \
    \   return \"YES\".to_string();\n    }\n    if length == 1 {\n        return \"\
    NO\".to_string();\n    }\n    if length == 0 {\n        return \"NO\".to_string();\n\
    \    }\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = 0;\n    let mut intersection_end\
    \ = 0;\n    let mut prime_number: isize = 0;\n    let mut prime_number_found =\
    \ false;\n    let mut prime_number_found2 = false;\n    let mut prime_number_found3\
    \ = false;\n    let mut prime_number_found4 = false;\n    let mut prime_number_found5\
    \ = false;\n    let mut prime_number_found6 = false;\n    let mut prime_number_found7\
    \ = false;\n    let mut prime_number_found8 = false;\n    let mut prime_number_found9\
    \ = false;\n    let mut prime_number_found10 = false;\n    let mut prime_number_found11\
    \ = false;\n    let mut prime_number_found12 = false;\n    let mut prime_number_found13\
    \ = false;\n    let mut prime_number_found14 = false;\n    let mut prime_number_found15\
    \ = false;\n    let mut prime_number_found16 = false;\n    let mut prime_number_found17\
    \ = false;\n    let mut prime_number_found18 = false;\n    let mut prime_number_found19\
    \ = false;\n    let mut prime_number_found20 = false;\n    let mut prime_number_found21\
    \ = false;\n    let mut prime_number_found22 = false;\n    let mut prime_number_found23\
    \ = false;\n    let mut prime_number_found24 = false;\n    let mut prime_number_found25\
    \ = false;\n    let mut prime_number_found26 = false;\n    let mut prime_number_found27\
    \ = false;\n    let mut prime_number_found28 = false;\n    let mut prime_number_found29\
    \ = false;\n    let mut prime_number_found30 = false;\n    let mut prime_number_found31\
    \ = false;\n    let mut prime_number_found32 = false;\n    let mut prime_number_found33\
    \ = false;\n    let mut prime_number_found34 = false;\n    let mut prime_number_found35\
    \ = false;\n    let mut prime_number_found36 = false;\n    let mut prime_number_found37\
    \ = false;\n    let mut prime_number_found38 = false;\n    let mut prime_number_found39\
    \ = false;\n    let mut prime_number_found40 = false;\n    let mut prime_number_found41\
    \ = false;\n    let mut prime_number_found42 = false;\n    let mut prime_number_found43\
    \ = false;\n    let mut prime_number_found44 = false;\n    let ", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[0];\n        interval[1] = interval1[1];\n\
    \        interval = interval2;\n        interval[0] = interval2[0];\n        interval[1]\
    \ = interval2[1];\n        let mut len = 0;\n        let mut i = 0;\n        let\
    \ mut j = 0;\n        while i < interval[0] && j < interval[1] {\n           \
    \ if interval[i] < interval[j] {\n                i += 1;\n            } else\
    \ {\n                j += 1;\n            }\n            len += 1;\n        }\n\
    \        if len == 2 {\n            if interval[0] == interval[1] {\n        \
    \        return String::from(\"YES\");\n            } else {\n               \
    \ return String::from(\"NO\");\n            }\n        } else {\n            return\
    \ String::from(\"NO\");\n        }\n    } else {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        }\n        if\
    \ interval2_start < interval2_end {\n            intersection_end = interval2_start;\n\
    \        }\n        if intersection_start <= intersection_end {\n            interval1_start\
    \ += 1;\n            interval1_end += 1;\n        } else {\n            interval2_start\
    \ += 1;\n            interval2_end += 1;\n        }\n    }\n    if interval1_start\
    \ > interval1_end {\n        intersection_start = interval1_end;\n    }\n    if\
    \ interval2_start > interval2_end {\n        intersection_end = interval2_end;\n\
    \    }\n    if intersection_start > intersection_end {\n        intersection_start\
    \ = intersection_end;\n    }\n    if interval1_start == interval1_end {\n    \
    \    if interval2_start == interval2_end {\n            return \"YES\".to_string();\n\
    \        } else {\n            return \"NO\".to_string();\n        }\n    } else\
    \ {\n        if intersection_start == intersection_end {\n            return \"\
    YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_start = interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval2_start = interval1_start;\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n\n    if interval1_end % interval2_end == 0 {\n        if\
    \ interval1_start % interval2_start == 0 {\n            return \"YES\";\n    \
    \    } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_end\
    \ % interval2_start == 0 {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ % interval2_end == 0 {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ % interval2_start == 0 {\n        return \"NO\";\n    }\n\n    return \"NO\"\
    ;", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n \
    \       return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut length = 0;\n    while interval[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval[0] == interval2[0] {\n\
    \            interval[0] = interval[0] + 1;\n            interval2[0] = interval2[0]\
    \ + 1;\n            length += 1;\n        } else {\n            interval[0] =\
    \ interval[0] + 1;\n        }\n        if interval[0] == interval1[1] {\n    \
    \        interval[0] = interval[0] - 1;\n            interval2[0] = interval2[0]\
    \ - 1;\n            length += 1;\n        } else {\n            interval[0] =\
    \ interval[0] - 1;\n        }\n        if interval[0] == interval2[1] {\n    \
    \        interval[0] = interval[0] - 1;\n            interval2[0] = interval2[0]\
    \ - 1;\n            length += 1;\n        } else {\n            interval[0] =\
    \ interval[0] - 1;\n        }\n    }\n    if interval[0] == interval1[1] && interval2[0]\
    \ == interval2[1] {\n        if length == 2 {\n            return \"YES\";\n \
    \       } else {\n            return \"NO\";\n        }\n    }\n    return \"\
    NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval2_end > interval1_start {\n      \
    \  interval2_end = interval1_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_end == interval2_start\
    \ {\n            if interval1_start == interval2_end {\n                return\
    \ String::from(\"YES\");\n            }\n            else {\n                return\
    \ String::from(\"NO\");\n            }\n        }\n        else {\n          \
    \  return String::from(\"NO\");\n        }\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            if interval1_start\
    \ == interval2_start {\n                return String::from(\"YES\");\n      \
    \      }\n            else {\n                return String::from(\"NO\");\n \
    \           }\n        }\n        else {\n            return String::from(\"NO\"\
    );\n        }\n    }\n    if interval1_start == interval2_end {\n        if interval1_end\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        else {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    if interval1_end == interval2_start {\n        if interval1_end == interval2_end\
    \ {\n            return String::from(\"YES\");\n        }\n        else {\n  \
    \          return String::from(\"NO\");\n        }\n    }\n    if interval1_end\
    \ == interval2_end {\n        if interval1_start == interval2_start {\n      \
    \      return String::from(\"YES\");\n        }\n        else {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        else {\n            return String::from(\"NO\");\n\
    \        }\n    }\n    if interval1_start == interval2_end {\n        if interval1_end\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        else {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    if interval1_start == interval2_start {\n        if interval1_end == interval2_end\
    \ {\n            return String::from(\"YES\");\n        }\n        else {\n  \
    \          return String", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_end > interval2_end {\n            interval1_end =\
    \ interval2_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start = interval2_start;\n            }\n            if\
    \ interval1_end > interval2_end {\n                interval1_end = interval2_end;\n\
    \            }\n            if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                if interval1_start < interval2_start {\n\
    \                    interval1_start = interval2_start;\n                }\n \
    \               if interval1_end > interval2_end {\n                    interval1_end\
    \ = interval2_end;\n                }\n                if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                    if interval1_start\
    \ < interval2_start {\n                        interval1_start = interval2_start;\n\
    \                    }\n                    if interval1_end > interval2_end {\n\
    \                        interval1_end = interval2_end;\n                    }\n\
    \                    if interval1_start <= interval1_end && interval2_start <=\
    \ interval2_end {\n                        if interval1_start < interval2_start\
    \ {\n                            interval1_start = interval2_start;\n        \
    \                }\n                        if interval1_end > interval2_end {\n\
    \                            interval1_end = interval2_end;\n                \
    \        }\n                        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                            if interval1_start < interval2_start\
    \ {\n                                interval1_start = interval2_start;\n    \
    \                        }\n                            if interval1_end > interval2_end\
    \ {\n                                interval1_end = interval2_end;\n        \
    \                    }\n                            if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                                if interval1_start\
    \ < interval2_start {\n                                    interval1_start = interval2_start;\n\
    \                                }\n                                if interval1_end\
    \ > interval2_end {\n                                    interval1_end = interval2_end;\n\
    \                                }\n                                if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \                 if interval1_start < ", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut intersection = interval1;\n\
    \        intersection.0 = interval1[0];\n        intersection.1 = interval1[1];\n\
    \        intersection.0 = interval2[0];\n        intersection.1 = interval2[1];\n\
    \        let mut prime = true;\n        let mut prime_length = 1;\n        let\
    \ mut prime_length2 = 1;\n        let mut prime_length3 = 1;\n        let mut\
    \ prime_length4 = 1;\n        let mut prime_length5 = 1;\n        let mut prime_length6\
    \ = 1;\n        let mut prime_length7 = 1;\n        let mut prime_length8 = 1;\n\
    \        let mut prime_length9 = 1;\n        let mut prime_length10 = 1;\n   \
    \     let mut prime_length11 = 1;\n        let mut prime_length12 = 1;\n     \
    \   let mut prime_length13 = 1;\n        let mut prime_length14 = 1;\n       \
    \ let mut prime_length15 = 1;\n        let mut prime_length16 = 1;\n        let\
    \ mut prime_length17 = 1;\n        let mut prime_length18 = 1;\n        let mut\
    \ prime_length19 = 1;\n        let mut prime_length20 = 1;\n        let mut prime_length21\
    \ = 1;\n        let mut prime_length22 = 1;\n        let mut prime_length23 =\
    \ 1;\n        let mut prime_length24 = 1;\n        let mut prime_length25 = 1;\n\
    \        let mut prime_length26 = 1;\n        let mut prime_length27 = 1;\n  \
    \      let mut prime_length28 = 1;\n        let mut prime_length29 = 1;\n    \
    \    let mut prime_length30 = 1;\n        let mut prime_length31 = 1;\n      \
    \  let mut prime_length32 = 1;\n        let mut prime_length33 = 1;\n        let\
    \ mut prime_length34 = 1;\n        let mut prime_length35 = 1;\n        let mut\
    \ prime_length36 = 1;\n        let mut prime_length37 = 1;\n        let mut prime_length38\
    \ = 1;\n        let mut prime_length39 = 1;\n        let mut prime_length40 =\
    \ 1;\n        let mut prime_length41 = 1;\n        let mut prime_length42 = 1;\n\
    \        let mut prime_length43 = 1;\n        let mut prime_length44 = 1;\n  \
    \      let mut prime_length45 = 1;\n        let mut prime_length46 = 1;\n    \
    \    let mut prime_length47 = 1;\n        let mut prime_length48 = 1;\n      \
    \  let mut prime_length49 = 1;\n        let mut prime_length50", "    let mut\
    \ interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len =\
    \ interval2[1] - interval2[0] + 1;\n    if interval_len > interval2_len {\n  \
    \      interval_len = interval2_len;\n    }\n    if interval_len == 0 {\n    \
    \    return \"NO\";\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mut interval_start = interval1[0];\n        let mut interval_end = interval1[1];\n\
    \        let mut interval2_start = interval2[0];\n        let mut interval2_end\
    \ = interval2[1];\n        while interval_start <= interval_end && interval2_start\
    \ <= interval2_end {\n            if interval_start == interval2_start {\n   \
    \             interval_len += 1;\n            }\n            if interval_end ==\
    \ interval2_end {\n                interval_len += 1;\n            }\n       \
    \     interval_start += 1;\n            interval_end += 1;\n            interval2_start\
    \ += 1;\n            interval2_end += 1;\n        }\n        if interval_start\
    \ > interval_end {\n            return \"NO\";\n        }\n        if interval2_start\
    \ > interval2_end {\n            return \"NO\";\n        }\n        if interval_len\
    \ == 1 {\n            return \"YES\";\n        }\n        if interval_len % 2\
    \ == 0 {\n            return \"NO\";\n        }\n        return \"YES\";\n   \
    \ }\n    if interval1[1] > interval2[1] {\n        let mut interval_start = interval1[0];\n\
    \        let mut interval_end = interval1[1];\n        let mut interval2_start\
    \ = interval2[0];\n        let mut interval2_end = interval2[1];\n        while\
    \ interval_start <= interval_end && interval2_start <= interval2_end {\n     \
    \       if interval_start == interval2_start {\n                interval_len +=\
    \ 1;\n            }\n            if interval_end == interval2_end {\n        \
    \        interval_len += 1;\n            }\n            interval_start += 1;\n\
    \            interval_end += 1;\n            interval2_start += 1;\n         \
    \   interval2_end += 1;\n        }\n        if interval_start > interval_end {\n\
    \            return \"NO\";\n        }\n        if interval2_start > interval2_end\
    \ {\n            return \"NO\";\n        }\n        if interval_len == 1 {\n \
    \           return \"YES\";\n        }\n        if interval_len % 2 == 0 {\n \
    \           return \"NO\";\n        }\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_length\
    \ = interval2_length - interval1_length;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_length = interval2_length\
    \ - interval1_length;\n    }\n    if interval1_length == 0 || interval2_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        let mut interval1_prime = true;\n        let mut interval2_prime\
    \ = true;\n        let mut prime_length = 1;\n        while interval1_length <\
    \ interval2_length {\n            if interval1_start % interval2_length == 0 {\n\
    \                interval1_prime = false;\n            }\n            if interval1_end\
    \ % interval2_length == 0 {\n                interval1_prime = false;\n      \
    \      }\n            if interval2_start % interval1_length == 0 {\n         \
    \       interval2_prime = false;\n            }\n            if interval2_end\
    \ % interval1_length == 0 {\n                interval2_prime = false;\n      \
    \      }\n            prime_length += 1;\n            interval1_length += 1;\n\
    \            interval2_length += 1;\n        }\n        if prime_length == 2 {\n\
    \            return \"YES\";\n        }\n        if prime_length == 3 {\n    \
    \        return \"NO\";\n        }\n        if prime_length == 4 {\n         \
    \   return \"YES\";\n        }\n        if prime_length == 5 {\n            return\
    \ \"NO\";\n        }\n        if prime_length == 6 {\n            return \"YES\"\
    ;\n        }\n        if prime_length == 7 {\n            return \"NO\";\n   \
    \     }\n        if prime_length == 8 {\n            return \"YES\";\n       \
    \ }\n        if prime_length == 9 {\n            return \"NO\";\n        }\n \
    \       if prime_length == 10 {\n            return \"YES\";\n        }\n    \
    \    if prime_length == 11 {\n            return \"NO\";\n        }\n        if\
    \ prime_length == 12 {\n            return \"YES\";\n        }\n        if prime_length\
    \ == 13 {\n            return \"NO\";\n        }\n        if prime_length == 14\
    \ {\n            return \"YES\";\n        }\n        if prime_length == 15 {\n\
    \            return \"NO\";\n        }\n        if prime_length == 16", "    if\
    \ interval1.start < interval1.end && interval2.start < interval2.end {\n     \
    \   let mut interval = interval1;\n        interval.start = interval.end;\n  \
    \      interval.end = interval.start;\n        interval.start += 1;\n        interval.end\
    \ += 1;\n        let mut interval2 = interval2;\n        interval2.start = interval2.end;\n\
    \        interval2.end = interval2.start;\n        interval2.start += 1;\n   \
    \     interval2.end += 1;\n        let mut intersection = interval;\n        let\
    \ mut intersection2 = interval2;\n        let mut length = 0;\n        while intersection.start\
    \ < intersection.end {\n            if intersection2.start < intersection2.end\
    \ {\n                intersection.start += 1;\n                intersection.end\
    \ += 1;\n                intersection2.start += 1;\n                intersection2.end\
    \ += 1;\n            } else {\n                intersection.start += 1;\n    \
    \            intersection.end += 1;\n                intersection2.start += 1;\n\
    \                intersection2.end += 1;\n                length += 1;\n     \
    \       }\n        }\n        if length == 2 {\n            if intersection.start\
    \ == intersection.end {\n                return String::from(\"YES\");\n     \
    \       }\n            if intersection2.start == intersection2.end {\n       \
    \         return String::from(\"YES\");\n            }\n            if intersection.start\
    \ == intersection2.start {\n                return String::from(\"YES\");\n  \
    \          }\n            if intersection.end == intersection2.end {\n       \
    \         return String::from(\"YES\");\n            }\n        }\n        if\
    \ length == 1 {\n            if intersection.start == intersection.end {\n   \
    \             return String::from(\"YES\");\n            }\n            if intersection2.start\
    \ == intersection2.end {\n                return String::from(\"YES\");\n    \
    \        }\n            if intersection.start == intersection2.start {\n     \
    \           return String::from(\"YES\");\n            }\n            if intersection.end\
    \ == intersection2.end {\n                return String::from(\"YES\");\n    \
    \        }\n        }\n        if length == 0 {\n            return String::from(\"\
    NO\");\n        }\n    }\n    return String::from(\"NO\");", "    if interval1.start\
    \ > interval1.end || interval2.start > interval2.end {\n        return \"NO\"\
    .to_string();\n    }\n    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut prime_numbers = vec![];\n    let\
    \ mut prime_numbers_count = vec![];\n    let mut prime_numbers_count_max = vec![];\n\
    \    let mut prime_numbers_count_min = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n    let mut prime_numbers_count_min\
    \ = vec![];\n    let mut prime_numbers_count_max = vec![];\n", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] >=\
    \ interval2[0] && interval1[1] < interval2[1] {\n            String::from(\"YES\"\
    )\n        } else {\n            String::from(\"NO\")\n        }\n    } else {\n\
    \        String::from(\"NO\")\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n            return String::from(\"NO\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end < interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start > interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    return String::from(\"NO\");", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    while interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n        if interval1_start < interval1_end {\n         \
    \   intersection_start = interval1_start;\n            intersection_end = interval1_end;\n\
    \            intersection_length += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval1_length += 1;\n            interval2_length\
    \ += 1;\n        }\n        interval1_start += 1;\n        interval1_end += 1;\n\
    \        interval2_start += 1;\n        interval2_end += 1;\n    }\n    if interval1_start\
    \ > interval1_end {\n        intersection_start = interval1_start;\n        intersection_end\
    \ = interval1_end;\n        intersection_length += 1;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval1_length += 1;\n        interval2_length\
    \ += 1;\n    }\n    if intersection_length == 0 {\n        return \"NO\";\n  \
    \  }\n    if intersection_length == 1 {\n        if interval1_length == 1 {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ intersection_length == 2 {\n        if interval1_length == 2 && interval2_length\
    \ == 2 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if intersection_length == 3 {\n        if interval1_length == 3 && interval2_length\
    \ == 3 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if intersection_length == 4 {\n        if interval1_length == 4 && interval2_length\
    \ == 4 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if intersection_length == 5 || intersection_length == 6 {\n        if\
    \ interval1_length == 5 && interval2_length == 6 {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if intersection_length == 7 ||\
    \ intersection_length == 8 {\n        if interval1_length == 7 && interval2_length\
    \ == 8 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if intersection_length == 9 || intersection_length == 10 {\n        if\
    \ interval1_length == 9 && interval2_length == 10 {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if intersection_", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            interval1_start += 1;\n        } else {\n            interval1_end\
    \ -= 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        } else {\n            interval2_end -= 1;\n \
    \       }\n        intersection_length += 1;\n    }\n    \n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end - 1;\n    }\n   \
    \ if interval2_start > interval2_end {\n        interval2_start = interval2_end\
    \ - 1;\n    }\n    \n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval1_end {\n            if interval2_start == interval2_end {\n    \
    \            return String::from(\"YES\");\n            } else {\n           \
    \     return String::from(\"NO\");\n            }\n        } else {\n        \
    \    return String::from(\"NO\");\n        }\n    } else {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n    }\n    if interval2_start > interval2_end {\n        interval2_start\
    \ = interval2_end;\n    }\n    if interval1_start < interval2_start {\n      \
    \  interval1_start = interval2_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_start <=\
    \ interval2_start {\n        return \"NO\";\n    }\n    if interval1_end >= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_end {\n\
    \        return \"YES\";\n    }\n    if interval1_end >= interval2_start {\n \
    \       return \"YES\";\n    }\n    if interval1_start < interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_end > interval2_start {\n     \
    \   return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_length\
    \ = interval1_end - interval1_start;\n    let mut interval_length_2 = interval2_end\
    \ - interval2_start;\n    if interval_length == interval_length_2 {\n        if\
    \ interval1_start <= interval2_start {\n            interval_length = interval1_end\
    \ - interval2_start;\n        } else {\n            interval_length = interval2_end\
    \ - interval1_start;\n        }\n    }\n    if interval_length == 2 {\n      \
    \  if interval1_start <= interval2_start {\n            interval_length = interval1_end\
    \ - interval2_start;\n        } else {\n            interval_length = interval2_end\
    \ - interval1_start;\n        }\n    }\n    if interval_length == 1 {\n      \
    \  if interval1_start <= interval2_start {\n            interval_length = interval1_end\
    \ - interval2_start;\n        } else {\n            interval_length = interval2_end\
    \ - interval1_start;\n        }\n    }\n    if interval_length == 0 {\n      \
    \  return \"NO\";\n    }\n    if interval_length == 2 {\n        if interval1_start\
    \ <= interval2_start {\n            interval_length = interval1_end - interval2_start;\n\
    \        } else {\n            interval_length = interval2_end - interval1_start;\n\
    \        }\n    }\n    if interval_length == 1 {\n        if interval1_start <=\
    \ interval2_start {\n            interval_length = interval1_end - interval2_start;\n\
    \        } else {\n            interval_length = interval2_end - interval1_start;\n\
    \        }\n    }\n    if interval_length == 0 {\n        return \"NO\";\n   \
    \ }\n    if interval_length == 2 {\n        if interval1_start <= interval2_start\
    \ {\n            interval_length = interval1_end - interval2_start;\n        }\
    \ else {\n            interval_length = interval2_end - interval1_start;\n   \
    \     }\n    }\n    if interval_length == 1 {\n        if interval1_start <= interval2_start\
    \ {\n            interval_length = interval1_end - interval2_start;\n        }\
    \ else {\n            interval_length = interval2_end - interval1_start;\n   \
    \     }\n    }\n    if interval_length == 0 {\n        return \"NO\";\n    }\n\
    \    if interval_length == 2 {\n        if interval1_start <= interval2_start\
    \ {\n            interval_length = interval1_end - interval2_start;\n        }\
    \ else {\n            interval_length = interval2_end - interval1_start;\n   \
    \     }\n    }\n    if interval_length == 1 {\n        if interval1_start <= interval2_start\
    \ {\n            interval_length = interval1_end - interval2_start;\n        }\
    \ else {\n            interval_length = interval2_end - interval1_start;\n   \
    \     }\n", "    let mut interval = interval1;\n    if interval1.0 > interval2.0\
    \ {\n        interval = interval2;\n    }\n    let mut start = interval.0;\n \
    \   let mut end = interval.1;\n    let mut length = 0;\n    while start < end\
    \ {\n        if start % interval1.1 == 0 && end % interval2.1 == 0 {\n       \
    \     length += 1;\n        }\n        start += 1;\n        end += 1;\n    }\n\
    \    if length == 2 {\n        if start % interval1.1 == 0 && end % interval2.1\
    \ == 0 {\n            String::from(\"YES\")\n        } else {\n            String::from(\"\
    NO\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start + interval2_end\
    \ - interval2_start;\n    let mut interval_length_prime = true;\n    \n    while\
    \ interval_length != 0 {\n        if interval1_start < interval2_start {\n   \
    \         interval1_start += interval_length;\n        } else {\n            interval1_end\
    \ += interval_length;\n        }\n        interval_length = interval1_end - interval1_start\
    \ + interval2_end - interval2_start;\n    }\n    \n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    } else {\n   \
    \     if interval2_start == interval2_end {\n            return \"NO\";\n    \
    \    } else {\n            return \"YES\";\n        }\n    }", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            if interval1[1] > interval2[1] {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            if interval1[1] > interval2[0]\
    \ {\n                return String::from(\"NO\");\n            }\n        }\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval1[0] < interval2[0] {\n            if interval1[1] > interval2[1]\
    \ {\n                return String::from(\"NO\");\n            }\n        } else\
    \ {\n            if interval1[1] > interval2[0] {\n                return String::from(\"\
    NO\");\n            }\n        }\n    }\n    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          if interval1[1] > interval2[1] {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            if interval1[1] > interval2[0]\
    \ {\n                return String::from(\"NO\");\n            }\n        }\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval1[0] < interval2[0] {\n            if interval1[1] > interval2[1]\
    \ {\n                return String::from(\"NO\");\n            }\n        } else\
    \ {\n            if interval1[1] > interval2[0] {\n                return String::from(\"\
    NO\");\n            }\n        }\n    }\n    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          if interval1[1] > interval2[1] {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            if interval1[1] > interval2[0]\
    \ {\n                return String::from(\"NO\");\n            }\n        }\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        if interval1[0] < interval2[0] {\n            if interval1[1] > interval2[1]\
    \ {\n                return String::from(\"NO\");\n            }\n        } else\
    \ {\n            if interval1[1] > interval2[0] {\n                return String::from(\"\
    NO\");\n            }\n        }\n    }\n    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          if interval1[1] > interval2[1] {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            if interval1[1] > interval2[0]\
    \ {\n                return String::from(\"NO\");\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval1_len\
    \ = interval1_end - interval1_start;\n    let mut interval2_len = interval2_end\
    \ - interval2_start;\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    \n    while interval1_len > 0 && interval2_len > 0 {\n        if\
    \ interval1_start > interval2_start {\n            interval1_start -= 1;\n   \
    \         interval1_len -= 1;\n        } else {\n            interval2_start -=\
    \ 1;\n            interval2_len -= 1;\n        }\n    }\n    \n    while interval1_len\
    \ > 0 {\n        interval1_start -= 1;\n        interval1_len -= 1;\n        interval1_prime\
    \ = false;\n    }\n    \n    while interval2_len > 0 {\n        interval2_start\
    \ -= 1;\n        interval2_len -= 1;\n        interval2_prime = false;\n    }\n\
    \    \n    if interval1_prime && interval2_prime {\n        String::from(\"YES\"\
    )\n    } else {\n        String::from(\"NO\")\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        } else {\n         \
    \   return \"NO\";\n        }\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length == 1 {\n        return \"\
    NO\";\n    }\n    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    let mut prime_number: isize = 2;\n    let mut prime_number_found\
    \ = false;\n    while prime_number_found == false {\n        if interval1_start\
    \ % prime_number == 0 && interval1_end % prime_number == 0 {\n            prime_number_found\
    \ = true;\n        }\n        prime_number += 2;\n    }\n    if prime_number_found\
    \ == false {\n        return \"NO\";\n    }\n    let mut prime_number_found =\
    \ false;\n    while prime_number_found == false {\n        if interval2_start\
    \ % prime_number == 0 && interval2_end % prime_number == 0 {\n            prime_number_found\
    \ = true;\n        }\n        prime_number += 2;\n    }\n    if prime_number_found\
    \ == false {\n        return \"NO\";\n    }\n    let mut prime_number_found =\
    \ false;\n    while prime_number_found == false {\n        if interval1_start\
    \ % prime_number == 0 && interval1_end % prime_number == 0 {\n            prime_number_found\
    \ = true;\n        }\n        prime_number += 2;\n    }\n    if prime_number_found\
    \ == false {\n        return \"NO\";\n    }\n    let mut prime_number_found =\
    \ false;\n    while prime_number_found == false {\n        if interval2_start\
    \ % prime_number == 0 && interval2_end % prime_number == 0 {\n            prime_number_found",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n        interval1_end = interval2_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n        interval1_start\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   if interval1_start == interval2_start {\n            return \"YES\";\n   \
    \     }\n        return \"NO\";\n    }\n\n    if interval1_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_start <\
    \ interval2_end {\n        interval1_start = interval2_end;\n        interval1_end\
    \ = interval2_start;\n    }\n\n    if interval1_end > interval2_start {\n    \
    \    interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n\n    if interval1_start == interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_start {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    YES\";\n    }\n\n    if interval1_start < interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n\n    if\
    \ interval1_end > interval2_end {\n        interval1_end = interval2_end;\n  \
    \      interval1_start = interval2_start;\n    }\n\n    if interval1_start < interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_end ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            if interval1_start\
    \ < interval1_end {\n                return String::from(\"YES\");\n         \
    \   } else {\n                return String::from(\"NO\");\n            }\n  \
    \      } else {\n            return String::from(\"NO\");\n        }\n    } else\
    \ {\n        if interval1_start < interval1_end {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut prime_number: isize = 1;\n\
    \    let mut prime_number_found = false;\n    loop {\n        if interval1_start\
    \ > interval2_end {\n            break;\n        }\n        if interval1_end <\
    \ interval2_start {\n            break;\n        }\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start += 1;\n        }\n       \
    \ if interval1_end >= interval2_end {\n            interval1_end -= 1;\n     \
    \   }\n        if interval1_start <= intersection_end {\n            intersection_start\
    \ += 1;\n        }\n        if interval1_end >= intersection_start {\n       \
    \     intersection_end -= 1;\n        }\n        if intersection_start <= interval2_end\
    \ {\n            prime_number_found = true;\n        }\n        if intersection_end\
    \ >= interval2_start {\n            prime_number_found = true;\n        }\n  \
    \      if prime_number_found {\n            prime_number += 1;\n        }\n  \
    \  }\n    if prime_number == 1 {\n        return \"YES\";\n    }\n    else {\n\
    \        return \"NO\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            intersection_length\
    \ += 1;\n            interval1_start += 1;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            intersection_length += 1;\n            interval1_end\
    \ -= 1;\n        }\n        if interval1_start <= interval2_end {\n          \
    \  intersection_length += 1;\n            interval2_start += 1;\n        }\n \
    \       if interval1_end >= interval2_end {\n            intersection_length +=\
    \ 1;\n            interval2_end -= 1;\n        }\n    }\n    if interval1_start\
    \ <= interval1_end {\n        intersection_length += 1;\n    }\n    if interval2_start\
    \ <= interval2_end {\n        intersection_length += 1;\n    }\n    if intersection_length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n    if intersection_length\
    \ == 1 {\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut prime_number: isize = 1;\n\
    \    while prime_number < interval1_end && prime_number < interval2_end {\n  \
    \      if interval1_start < interval2_start {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        }\
    \ else {\n            intersection_start = interval2_start;\n            intersection_end\
    \ = interval2_end;\n        }\n        if intersection_start <= intersection_end\
    \ {\n            prime_number += 1;\n        }\n    }\n    if prime_number ==\
    \ interval1_end {\n        return \"YES\";\n    }\n    if prime_number == interval2_end\
    \ {\n        return \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end >= interval2_start {\n        \
    \    if interval1_end < interval2_end {\n                if interval1_end % interval2_end\
    \ != 0 {\n                    return \"NO\";\n                }\n            }\
    \ else {\n                if interval1_start % interval2_start != 0 {\n      \
    \              return \"NO\";\n                }\n            }\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\"\
    ;\n    }\n    \"YES\"", "    let mut intervals = vec![interval1, interval2];\n\
    \    intervals.sort();\n    let mut intersection = intervals[0];\n    let mut\
    \ i = 1;\n    while i < intervals.len() {\n        if intervals[i].0 > intersection.1\
    \ {\n            intersection = intervals[i];\n        }\n        i += 1;\n  \
    \  }\n    if intersection.1 == intervals[0].1 {\n        \"YES\"\n    } else {\n\
    \        \"NO\"\n    }", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime = true;\n    let mut prime_found = false;\n    \n    while prime_found\
    \ == false {\n        if interval1_start < interval2_start {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        \
    \    intersection_length = interval1_length;\n            interval1_prime = true;\n\
    \            interval1_length = interval1_end - interval1_start;\n        } else\
    \ {\n            intersection_start = interval2_start;\n            intersection_end\
    \ = interval2_end;\n            intersection_length = interval2_length;\n    \
    \        interval2_prime = true;\n            interval2_length = interval2_end\
    \ - interval2_start;\n        }\n        prime = true;\n        prime_found =\
    \ false;\n        for _ in 0..intersection_length {\n            if intersection_start\
    \ % interval1_end == 0 && intersection_end % interval2_end == 0 {\n          \
    \      prime = false;\n                prime_found = true;\n                break;\n\
    \            }\n            intersection_start += 1;\n            intersection_end\
    \ += 1;\n        }\n    }\n    if prime_found == true {\n        if intersection_length\
    \ == interval1_length {\n            return \"YES\";\n        } else {\n     \
    \       return \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval = interval1;\n    interval[0] =\
    \ interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n    interval[1]\
    \ = interval1[1] > interval2[1] ? interval1[1] : interval2[1];\n    let mut length\
    \ = 1;\n    while interval[0] < interval[1] {\n        interval[0] += 1;\n   \
    \     interval[1] += 1;\n        length += 1;\n    }\n    if length == 2 {\n \
    \       return \"YES\";\n    }\n    if length == 1 {\n        return \"NO\";\n\
    \    }\n    if length == 0 {\n        return \"NO\";\n    }\n    return \"NO\"\
    ;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2_end;\n    }\n    if interval1_start < interval1_end\
    \ {\n        let mut interval1_length = interval1_end - interval1_start;\n   \
    \     let mut interval2_length = interval2_end - interval2_start;\n        if\
    \ interval1_length > interval2_length {\n            interval1_length = interval2_length;\n\
    \        }\n        if interval1_length == 1 {\n            return \"YES\";\n\
    \        }\n        if interval1_length == 2 {\n            if interval1_start\
    \ == interval2_start {\n                return \"YES\";\n            }\n     \
    \       if interval1_end == interval2_end {\n                return \"YES\";\n\
    \            }\n        }\n        if interval1_length == 3 {\n            if\
    \ interval1_start == interval2_start {\n                if interval1_end == interval2_end\
    \ {\n                    return \"YES\";\n                }\n            }\n \
    \           if interval1_end == interval2_end {\n                if interval1_start\
    \ == interval2_start {\n                    return \"YES\";\n                }\n\
    \            }\n        }\n        if interval1_length == 4 {\n            if\
    \ interval1_start == interval2_start {\n                if interval1_end == interval2_end\
    \ {\n                    if interval1_start == interval2_end {\n             \
    \           return \"YES\";\n                    }\n                }\n      \
    \      }\n            if interval1_end == interval2_end {\n                if\
    \ interval1_start == interval2_start {\n                    if interval1_end ==\
    \ interval2_end {\n                        return \"YES\";\n                 \
    \   }\n                }\n            }\n        }\n        if interval1_length\
    \ == 5 {\n            if interval1_start == interval2_start {\n              \
    \  if interval1_end == interval2_end {\n                    if interval1_start\
    \ == interval2_end {\n                        if interval1_end == interval2_end\
    \ {\n                            return \"YES\";\n                        }\n\
    \                    }\n                }\n            }\n            if interval1_end\
    \ == interval2_end {\n                if interval1_start == interval2_start {\n\
    \                    if interval1_end == interval2_end {\n                   \
    \     if interval1_start == interval2_end {\n                            if interval1_end\
    \ == interval2_end {\n                                return \"YES\";\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n        if interval1_length == 6\
    \ {\n            if interval1_start == interval2_start {\n                if interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length_2 = interval2_end - interval2_start;\n\
    \    if interval_length == interval_length_2 {\n        if interval1_start <=\
    \ interval2_start {\n            interval1_start = interval2_start;\n        }\
    \ else {\n            interval1_end = interval2_end;\n        }\n    }\n    if\
    \ interval_length == interval_length_2 {\n        if interval1_end >= interval2_end\
    \ {\n            interval1_end = interval2_end;\n        } else {\n          \
    \  interval1_start = interval2_start;\n        }\n    }\n    if interval_length\
    \ == interval_length_2 {\n        if interval1_start <= interval2_start {\n  \
    \          interval1_start = interval2_start;\n        } else {\n            interval1_end\
    \ = interval2_end;\n        }\n    }\n    if interval_length == interval_length_2\
    \ {\n        if interval1_end >= interval2_end {\n            interval1_end =\
    \ interval2_end;\n        } else {\n            interval1_start = interval2_start;\n\
    \        }\n    }\n    if interval_length == interval_length_2 {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start = interval2_start;\n     \
    \   } else {\n            interval1_end = interval2_end;\n        }\n    }\n \
    \   if interval_length == interval_length_2 {\n        if interval1_end >= interval2_end\
    \ {\n            interval1_end = interval2_end;\n        } else {\n          \
    \  interval1_start = interval2_start;\n        }\n    }\n    if interval_length\
    \ == interval_length_2 {\n        if interval1_start <= interval2_start {\n  \
    \          interval1_start = interval2_start;\n        } else {\n            interval1_end\
    \ = interval2_end;\n        }\n    }\n    if interval_length == interval_length_2\
    \ {\n        if interval1_end >= interval2_end {\n            interval1_end =\
    \ interval2_end;\n        } else {\n            interval1_start = interval2_start;\n\
    \        }\n    }\n    if interval_length == interval_length_2 {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start = interval2_start;\n     \
    \   } else {\n            interval1_end = interval2_end;\n        }\n    }\n \
    \   if interval_length == interval_length_2 {\n        if interval1_end >= interval2_end\
    \ {\n            interval1_end = interval2_end;\n        } else {\n          \
    \  interval1_start = interval2_start;\n        }\n    }\n    if interval_length\
    \ == interval_length_2 {\n        if interval1_start <= interval2_start {\n  \
    \          interval1_start = interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval2_end = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_end < interval2_start {\n        interval1_end,\
    \ interval2_start = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    loop {\n        if interval1_start\
    \ > interval2_end {\n            break;\n        }\n        if interval1_end <\
    \ interval2_start {\n            break;\n        }\n        intersection_length\
    \ += 1;\n        interval1_start += 1;\n        interval1_end -= 1;\n        interval2_start\
    \ += 1;\n        interval2_end -= 1;\n    }\n    if intersection_length == 2 {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\";\n\
    \        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval1_end {\n            return \"\
    NO\";\n        }\n        if interval2_start == interval2_end {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start < interval2_end {\n        if interval1_end < interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n    if interval1_start >\
    \ interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ < interval2_end {\n        if interval1_end < interval2_start {\n          \
    \  interval1_start, interval2_start = interval2_start, interval1_start;\n    \
    \    }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n    if interval1_start >\
    \ interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ < interval2_end {\n        if interval1_end < interval2_start {\n          \
    \  interval1_start, interval2_start = interval2_start, interval1_start;\n    \
    \    }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\";\n        }\n        return \"NO", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    if interval1_length > interval2_length {\n        interval1_length, interval2_length\
    \ = interval2_length, interval1_length;\n    }\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        } else {\n            return \"NO\".to_string();\n    \
    \    }\n    }\n    if interval1_length < interval2_length {\n        interval1_length,\
    \ interval2_length = interval2_length, interval1_length;\n    }\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return \"YES\".to_string();\n        } else {\n            return \"\
    NO\".to_string();\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    if interval1_length\
    \ < interval2_length {\n        interval1_length, interval2_length = interval2_length,\
    \ interval1_length;\n    }\n    if interval1_length == interval2_length {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\".to_string();\n\
    \        } else {\n            return \"NO\".to_string();", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return \"NO\";\n        }\n        if interval1[1] > interval2[1]\
    \ {\n            return \"NO\";\n        }\n        let mut interval = interval1;\n\
    \        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n  \
    \      interval_length(interval)\n    } else {\n        return \"NO\";\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    let mut prime_numbers = vec![true];\n\
    \    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = prime_numbers_length.iter().cloned().collect::<Vec<_>>();\n    let mut prime_numbers_length\
    \ = ", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n\
    \        return \"NO\";\n    }\n\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            interval1_start += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval2_start += 1;\n        }\n    }\n\n \
    \   if interval1_start > interval1_end {\n        interval1_end = interval1_start\
    \ + 1;\n    }\n    if interval2_start > interval2_end {\n        interval2_end\
    \ = interval2_start + 1;\n    }\n\n    if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n        return \"YES\";\n    }\n    if interval2_start\
    \ <= interval1_start && interval2_end >= interval1_end {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \n    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_length == 3 {\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_end == interval2_end {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n   \
    \ if interval1_length == 5 {\n        if interval1_end == interval2_end {\n  \
    \          return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if\
    \ interval1_length == 6 {\n        if interval1_end == interval2_end {\n     \
    \       return \"YES\";\n        }\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 7 {\n        if interval1_end == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n\n    if interval1_length == 8 {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n\n    if interval1_length == 9 {\n  \
    \      if interval1_end == interval2_end {\n            return \"", "    let mut\
    \ interval_1 = interval1.0;\n    let mut interval_2 = interval2.0;\n    let mut\
    \ intersection = interval_1;\n    let mut interval_1_end = interval_1;\n    let\
    \ mut interval_2_end = interval_2;\n    let mut interval_1_start = interval_1;\n\
    \    let mut interval_2_start = interval_2;\n    let mut interval_1_start_end\
    \ = interval_1;\n    let mut interval_2_start_end = interval_2;\n    let mut interval_1_end_start\
    \ = interval_1;\n    let mut interval_2_end_start = interval_2;\n    let mut interval_1_start_end_end\
    \ = interval_1;\n    let mut interval_2_start_end_end = interval_2;\n    let mut\
    \ interval_1_start_end_end_end = interval_1;\n    let mut interval_2_start_end_end_end\
    \ = interval_2;\n    let mut interval_1_start_end_end_end_end = interval_1;\n\
    \    let mut interval_2_start_end_end_end_end = interval_2;\n    let mut interval_1_start_end_end_end_end_end\
    \ = interval_1;\n    let mut interval_2_start_end_end_end_end_end = interval_2;\n\
    \    let mut interval_1_start_end_end_end_end_end_end = interval_1;\n    let mut\
    \ interval_2_start_end_end_end_end_end_end = interval_2;\n    let mut interval_1_start_end_end_end_end_end_end_end\
    \ = interval_1;\n    let mut interval_2_start_end_end_end_end_end_end_end = interval_2;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end = interval_1;\n\
    \    let mut interval_2_start_end_end_end_end_end_end_end_end_end = interval_2;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end_end = interval_1;\n\
    \    let mut interval_2_start_end_end_end_end_end_end_end_end_end = interval_2;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end = interval_1;\n\
    \    let mut interval_2_start_end_end_end_end_end_end_end_end_end_end_end = interval_2;\n\
    \    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end_end = interval_1;\n\
    \    let mut interval_2_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = interval_2;\n    let mut interval_1_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = interval_1;\n    let mut interval_2_start_end_end_end_end_end_end_end_", " \
    \   if interval1.start >= interval1.end || interval2.start >= interval2.end {\n\
    \        return \"NO\";\n    }\n    let mut interval = interval1;\n    if interval1.start\
    \ < interval1.end {\n        interval = interval2;\n    }\n    let mut len = 0;\n\
    \    let mut i = interval.start;\n    while i <= interval.end {\n        if interval1.start\
    \ <= i && i <= interval1.end {\n            len += 1;\n        }\n        if interval2.start\
    \ <= i && i <= interval2.end {\n            len += 1;\n        }\n        i +=\
    \ 1;\n    }\n    if len % 2 == 0 {\n        return \"NO\";\n    }\n    if len\
    \ % 3 == 0 {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            return \"NO\"\
    ;\n        }\n        if interval1_end > interval2_end {\n            return \"\
    NO\";\n        }\n        if interval1_start == interval2_start {\n          \
    \  return \"YES\";\n        }\n        if interval1_end == interval2_end {\n \
    \           return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut intersection =\
    \ interval1;\n    let mut interval1_end = interval1[1];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_start = interval1[0];\n    let mut interval2_start\
    \ = interval2[0];\n    while interval1_end <= interval2_end {\n        if interval1_start\
    \ > interval2_start {\n            intersection = (interval1_start, intersection[1]);\n\
    \            interval1_end = intersection[1];\n        } else {\n            intersection\
    \ = (intersection[0], interval2_start);\n            interval2_end = interval2_start;\n\
    \        }\n        interval1_start = intersection[0];\n        interval2_start\
    \ = interval2[0];\n    }\n    if interval1_start <= interval2_start {\n      \
    \  intersection = (intersection[0], interval1_end);\n    }\n    if interval1_end\
    \ <= interval2_end {\n        intersection = (intersection[0], interval2_end);\n\
    \    }\n    if intersection[0] == intersection[1] {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_end > interval2_start\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval2_end > interval1_start {\n        interval2_end = interval1_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval2_end = interval1_start;\n\
    \    }\n    if interval2_start > interval1_end {\n        interval2_start = interval1_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        } else {\n            return \"NO\";\n        }\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\";\n    }\n    if interval1_start ==\
    \ interval1_end {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_start {\n  \
    \      return \"NO\";\n    }\n    if interval1_end < interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start == interval1_end {\n        if\
    \ interval2_start == interval2_end {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"NO\";\n    }\n    if interval1_end < interval2_end {\n      \
    \  return \"NO\";\n    }\n    if interval1_start < interval2_start {\n       \
    \ return \"NO\";\n    }\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"NO\";\n    }\n    if interval1_end < interval2_end {\n      \
    \  return \"NO\";\n    }\n    if interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  while interval1_length >= interval2_length {\n        interval1_length -= 1;\n\
    \        interval2_length -= 1;\n    }\n    while interval1_length < interval2_length\
    \ {\n        interval1_length += 1;\n        interval2_length += 1;\n    }\n \
    \   if interval1_length == interval2_length {\n        if interval1_start == interval1_end\
    \ {\n            if interval2_start == interval2_end {\n                return\
    \ \"YES\";\n            }\n            return \"NO\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"NO\";\n        }\n        if interval1_start\
    \ < interval2_start {\n            return \"NO\";\n        }\n        if interval1_end\
    \ > interval2_end {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 1 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval2_length == 1\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_length == 2 {\n\
    \        if interval1_start == interval1_end {\n            return \"YES\";\n\
    \        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n        return \"NO", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            if interval1[1] > interval2[1] {\n                String::from(\"\
    NO\")\n            } else {\n                String::from(\"YES\")\n         \
    \   }\n        } else {\n            if interval1[1] > interval2[1] {\n      \
    \          String::from(\"NO\")\n            } else {\n                String::from(\"\
    YES\")\n            }\n        }\n    } else {\n        String::from(\"NO\")\n\
    \    }", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut inter = interval1;\n    inter.0\
    \ = interval1[0] < interval1[1] ? interval1[0] : interval1[1];\n    inter.1 =\
    \ interval1[0] < interval1[1] ? interval1[1] : interval1[0];\n    inter.1 = interval2[0]\
    \ < interval2[1] ? interval2[0] : interval2[1];\n    inter.1 = interval2[0] <\
    \ interval2[1] ? interval2[1] : interval2[0];\n    if inter.0 > inter.1 {\n  \
    \      return \"NO\";\n    }\n    let mut i = 1;\n    while i < inter.0 {\n  \
    \      if inter.0 % i == 0 {\n            i += 1;\n        }\n    }\n    if inter.0\
    \ % i == 0 {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut\
    \ intervals = Vec::new();\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut interval = intervals.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut prime = true;\n    let mut prime_length = 0;\n    let mut prime_length2\
    \ = 0;\n    let mut prime_length3 = 0;\n    let mut prime_length4 = 0;\n    let\
    \ mut prime_length5 = 0;\n    let mut prime_length6 = 0;\n    let mut prime_length7\
    \ = 0;\n    let mut prime_length8 = 0;\n    let mut prime_length9 = 0;\n    let\
    \ mut prime_length10 = 0;\n    let mut prime_length11 = 0;\n    let mut prime_length12\
    \ = 0;\n    let mut prime_length13 = 0;\n    let mut prime_length14 = 0;\n   \
    \ let mut prime_length15 = 0;\n    let mut prime_length16 = 0;\n    let mut prime_length17\
    \ = 0;\n    let mut prime_length18 = 0;\n    let mut prime_length19 = 0;\n   \
    \ let mut prime_length20 = 0;\n    let mut prime_length21 = 0;\n    let mut prime_length22\
    \ = 0;\n    let mut prime_length23 = 0;\n    let mut prime_length24 = 0;\n   \
    \ let mut prime_length25 = 0;\n    let mut prime_length26 = 0;\n    let mut prime_length27\
    \ = 0;\n    let mut prime_length28 = 0;\n    let mut prime_length29 = 0;\n   \
    \ let mut prime_length30 = 0;\n    let mut prime_length31 = 0;\n    let mut prime_length32\
    \ = 0;\n    let mut prime_length33 = 0;\n    let mut prime_length34 = 0;\n   \
    \ let mut prime_length35 = 0;\n    let mut prime_length36 = 0;\n    let mut prime_length37\
    \ = 0;\n    let mut prime_length38 = 0;\n    let mut prime_length39 = 0;\n   \
    \ let mut prime_length40 = 0;\n    let mut prime_length41 = 0;\n    let mut prime_length42\
    \ = 0;\n    let mut prime_length43 = 0;\n    let mut prime_length44 = 0;\n   \
    \ let mut prime_length45 = 0;\n    let mut prime_length46 = 0;\n    let mut prime_length47\
    \ = 0;\n    let mut prime_length48 = 0;\n    let mut prime_length49 = 0;\n   \
    \ let mut prime_length50 = 0;\n    let mut prime_length51 = 0;\n    let mut prime_length52\
    \ = 0;\n    let ", "    let mut intervals = vec![interval1, interval2];\n    let\
    \ mut intervals_len = intervals.len();\n    let mut intervals_len = intervals_len\
    \ % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let mut intervals_len\
    \ = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let\
    \ mut intervals_len = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len\
    \ / 2 + 1;\n    let mut intervals_len = intervals_len % 2 == 0 ? intervals_len\
    \ / 2 : intervals_len / 2 + 1;\n    let mut intervals_len = intervals_len % 2\
    \ == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let mut intervals_len\
    \ = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let\
    \ mut intervals_len = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len\
    \ / 2 + 1;\n    let mut intervals_len = intervals_len % 2 == 0 ? intervals_len\
    \ / 2 : intervals_len / 2 + 1;\n    let mut intervals_len = intervals_len % 2\
    \ == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let mut intervals_len\
    \ = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let\
    \ mut intervals_len = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len\
    \ / 2 + 1;\n    let mut intervals_len = intervals_len % 2 == 0 ? intervals_len\
    \ / 2 : intervals_len / 2 + 1;\n    let mut intervals_len = intervals_len % 2\
    \ == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let mut intervals_len\
    \ = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let\
    \ mut intervals_len = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len\
    \ / 2 + 1;\n    let mut intervals_len = intervals_len % 2 == 0 ? intervals_len\
    \ / 2 : intervals_len / 2 + 1;\n    let mut intervals_len = intervals_len % 2\
    \ == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let mut intervals_len\
    \ = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len / 2 + 1;\n    let\
    \ mut intervals_len = intervals_len % 2 == 0 ? intervals_len / 2 : intervals_len\
    \ / 2 + 1;\n    let mut intervals_len = intervals_len % 2 == 0 ? intervals_len\
    \ / 2 : intervals_len / 2 + 1;\n    let mut intervals_len = intervals_len", " \
    \   if interval1[0] >= interval2[1] || interval1[1] < interval2[0] {\n       \
    \ return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    let mut prime = true;\n    while i < interval1[0] &&\
    \ j < interval2[0] {\n        if interval[i] > interval[j] {\n            i +=\
    \ 1;\n        } else {\n            j += 1;\n        }\n    }\n    if i == interval1[0]\
    \ {\n        if j == interval2[0] {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if j == interval2[0] {\n        return \"\
    NO\";\n    }\n    if interval[i] < interval[j] {\n        interval = interval1;\n\
    \    } else {\n        interval = interval2;\n    }\n    while i < interval[0]\
    \ && j < interval[1] {\n        if interval[i] > interval[j] {\n            i\
    \ += 1;\n        } else {\n            j += 1;\n        }\n    }\n    if i ==\
    \ interval[0] {\n        if j == interval[1] {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if j == interval[1] {\n       \
    \ return \"NO\";\n    }\n    if interval[i] < interval[j] {\n        prime = false;\n\
    \    } else {\n        prime = true;\n    }\n    if prime {\n        return \"\
    YES\";\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n    let mut interval1_len = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_len = interval2_end - interval2_start + 1;\n   \
    \ let mut interval1_prime = true;\n    let mut interval2_prime = true;\n    let\
    \ mut prime_len = interval1_len + interval2_len;\n    let mut prime_prime = true;\n\
    \    let mut prime_prime_len = prime_len;\n    let mut prime_prime_prime = true;\n\
    \    let mut prime_prime_prime_len = prime_prime_len;\n    let mut prime_prime_prime_prime\
    \ = true;\n    let mut prime_prime_prime_prime_len = prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_len = prime_prime_prime_prime_len;\n    let\
    \ mut prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n    if interval1_start < interval2_end\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end > interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start < interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end > interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut prime_number: isize = 1;\n    let mut prime_number_found\
    \ = false;\n    while prime_number_found == false {\n        if interval1_start\
    \ <= interval2_end {\n            if interval1_end <= interval2_start {\n    \
    \            prime_number_found = true;\n                prime_number = interval1_end\
    \ - interval1_start + 1;\n            } else {\n                prime_number_found\
    \ = true;\n                prime_number = interval2_end - interval2_start + 1;\n\
    \            }\n        } else {\n            if interval1_end <= interval2_start\
    \ {\n                prime_number_found = true;\n                prime_number\
    \ = interval2_end - interval2_start + 1;\n            } else {\n             \
    \   prime_number_found = true;\n                prime_number = interval1_end -\
    \ interval1_start + 1;\n            }\n        }\n        intersection_start =\
    \ interval1_start;\n        intersection_end = interval1_end;\n        interval1_start\
    \ = interval1_start + 1;\n        interval1_end = interval1_end - 1;\n       \
    \ interval2_start = interval2_start + 1;\n        interval2_end = interval2_end\
    \ - 1;\n    }\n    if prime_number == 1 {\n        return \"NO\";\n    } else\
    \ {\n        return \"YES\";\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length += 1;\n        }\n      \
    \  if interval1_end >= interval2_end {\n            interval1_length += 1;\n \
    \       }\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n        }\n    }\n\n\
    \    if interval1_length == 1 {\n        if interval1_start == interval2_start\
    \ {\n            if interval1_end == interval2_end {\n                return String::from(\"\
    YES\");\n            }\n        }\n    }\n\n    if interval1_length == 0 {\n \
    \       if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"NO\");\n         \
    \   }\n        }\n    }\n\n    if interval1_length == interval2_length {\n   \
    \     if interval1_start <= interval2_start {\n            interval1_length +=\
    \ 1;\n        }\n        if interval1_end >= interval2_end {\n            interval1_length\
    \ += 1;\n        }\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n        }\n    }\n\n\
    \    if interval1_length == 1 {\n        if interval1_start == interval2_start\
    \ {\n            if interval1_end == interval2_end {\n                return String::from(\"\
    YES\");\n            }\n        }\n    }\n\n    if interval1_length == 0 {\n \
    \       if interval1_start == interval2_start {\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"NO\");\n         \
    \   }\n        }\n    }\n\n    if interval1_length == interval2_length {\n   \
    \     if interval1_start <= interval2_start {\n            interval1_length +=\
    \ 1;\n        }\n        if interval1_end >= interval2_end {\n            interval1_length\
    \ += 1;\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_len = interval1_end - interval1_start;\n\
    \    let mut interval2_len = interval2_end - interval2_start;\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval2_len\
    \ > interval1_len {\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_len = interval2_end - interval1_start;\n\
    \        interval2_start = interval1[0];\n        interval2_end = interval1[1];\n\
    \    }\n    if interval2_start > interval1_end {\n        interval2_len = interval1_end\
    \ - interval2_start;\n        interval1_start = interval2[0];\n        interval1_end\
    \ = interval2[1];\n    }\n    if interval1_len == interval2_len {\n        if\
    \ interval1_start == interval2_start {\n            if interval1_end == interval2_end\
    \ {\n                return String::from(\"YES\");\n            }\n        }\n\
    \    }\n    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_start = interval1[0];\n        interval2_end = interval1[1];\n\
    \    }\n    if interval2_len > interval1_len {\n        interval2_len = interval1_len;\n\
    \        interval1_start = interval2[0];\n        interval1_end = interval2[1];\n\
    \    }\n    if interval1_len == interval2_len {\n        if interval1_start ==\
    \ interval2_start {\n            if interval1_end == interval2_end {\n       \
    \         return String::from(\"YES\");\n            }\n        }\n    }\n   \
    \ if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_start = interval1[0];\n        interval2_end = interval1[1];\n\
    \    }\n    if interval2_len > interval1_len {\n        interval2_len = interval1_len;\n\
    \        interval1_start = interval2[0];\n        interval1_end = interval2[1];\n\
    \    }\n    if interval1_len == interval2_len {\n        if interval1_start ==\
    \ interval2_start {\n            if interval1_end == interval2_end {\n       \
    \         return String::from(\"YES\");\n            }\n        }\n    }\n   \
    \ if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    let mut intersection_length = interval1_length + interval2_length;\n    let\
    \ mut prime_number: isize = 1;\n    let mut prime_number_flag = true;\n    while\
    \ prime_number_flag {\n        if interval1_start < interval2_start {\n      \
    \      interval1_start += interval1_length;\n            interval1_length += 1;\n\
    \        } else {\n            interval2_start += interval2_length;\n        \
    \    interval2_length += 1;\n        }\n        if interval1_start > interval2_end\
    \ {\n            prime_number_flag = false;\n        }\n        if interval1_end\
    \ < interval2_end {\n            prime_number_flag = false;\n        }\n     \
    \   if prime_number_flag {\n            prime_number += 1;\n        }\n    }\n\
    \    if prime_number == interval1_length + interval2_length {\n        return\
    \ \"YES\".to_string();\n    }\n    return \"NO\".to_string();", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut intersection = interval1;\n    intersection[0] = min(interval1[0],\
    \ interval2[0]);\n    intersection[1] = max(interval1[1], interval2[1]);\n   \
    \ if intersection[0] >= intersection[1] {\n        return \"NO\";\n    }\n   \
    \ if interval1[0] < interval2[0] {\n        let mut temp = interval1;\n      \
    \  temp[0] = interval2[0];\n        temp[1] = interval1[1];\n        temp = temp;\n\
    \    }\n    if interval1[1] > interval2[1] {\n        let mut temp = interval1;\n\
    \        temp[0] = interval1[0];\n        temp[1] = interval2[1];\n        temp\
    \ = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let mut temp =\
    \ interval1;\n        temp[0] = interval1[0];\n        temp[1] = interval2[0];\n\
    \        temp = temp;\n    }\n    if interval1[1] > interval2[1] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[1];\n        temp[1] = interval2[1];\n\
    \        temp = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[0];\n        temp[1] = interval1[1];\n\
    \        temp = temp;\n    }\n    if interval1[1] > interval2[1] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[1];\n        temp[1] = interval1[0];\n\
    \        temp = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[0];\n        temp[1] = interval1[0];\n\
    \        temp = temp;\n    }\n    if interval1[1] > interval2[1] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[1];\n        temp[1] = interval1[1];\n\
    \        temp = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[0];\n        temp[1] = interval1[0];\n\
    \        temp = temp;\n    }\n    if interval1[1] > interval2[1] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[1];\n        temp[1] = interval1[1];\n\
    \        temp = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[0];\n        temp[1] = interval1[0];\n\
    \        temp = temp;\n    }\n    if interval1[1] > interval2[1] {\n        let\
    \ mut temp = interval1;\n        temp[0] = interval1[1];\n        temp[1] = interval1[1];\n\
    \        temp = temp;\n    }\n    if interval1[0] < interval2[0] {\n        let\
    \ mu", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n\
    \        return \"NO\";\n    }\n    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut prime_number: isize\
    \ = 1;\n    while prime_number < interval1_end && prime_number < interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            intersection_start\
    \ = interval1_start;\n            intersection_end = interval1_end;\n        }\
    \ else {\n            intersection_start = interval2_start;\n            intersection_end\
    \ = interval2_end;\n        }\n        if intersection_start <= intersection_end\
    \ {\n            prime_number += 1;\n        }\n    }\n    if prime_number ==\
    \ interval1_end {\n        return \"YES\";\n    }\n    return \"NO\";", "    let\
    \ mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut intersection = intervals.iter().filter(|&interval| interval[0] <\
    \ interval[1]).collect::<Vec<_>>();\n    intersection.sort();\n    let mut prime\
    \ = true;\n    for interval in intersection {\n        if interval[0] % interval[1]\
    \ == 0 {\n            prime = false;\n            break;\n        }\n    }\n \
    \   if prime {\n        return \"YES\".to_string();\n    }\n    return \"NO\"\
    .to_string();", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval1;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        let mut interval = interval2;\n        interval.0 = interval.1;\n",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut len = 0;\n    for &(start, end) in interval1\
    \ {\n        if start >= end {\n            return \"NO\";\n        }\n      \
    \  len += 1;\n    }\n    for &(start, end) in interval2 {\n        if start >=\
    \ end {\n            return \"NO\";\n        }\n        len += 1;\n    }\n   \
    \ if len == 2 {\n        return \"YES\";\n    }\n    if len % 2 == 0 {\n     \
    \   return \"NO\";\n    }\n    if len % 3 == 0 {\n        return \"YES\";\n  \
    \  }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_end > interval2_start\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    if interval1_length > interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == 1 {\n        return String::from(\"YES\");\n    }\n    if interval1_length\
    \ == 2 {\n        if interval2_length == 2 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 3 {\n        if interval2_length == 3 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 4 {\n        if interval2_length == 4 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 5 || interval1_length == 6 {\n        if interval2_length == 5 || interval2_length\
    \ == 6", "    let mut intervals = vec![];\n    intervals.push(interval1);\n  \
    \  intervals.push(interval2);\n    let mut intervals_len = intervals.len();\n\
    \    let mut intervals_len2 = intervals_len * intervals_len;\n    let mut intervals_len3\
    \ = intervals_len2 * intervals_len;\n    let mut intervals_len4 = intervals_len3\
    \ * intervals_len;\n    let mut intervals_len5 = intervals_len4 * intervals_len;\n\
    \    let mut intervals_len6 = intervals_len5 * intervals_len;\n    let mut intervals_len7\
    \ = intervals_len6 * intervals_len;\n    let mut intervals_len8 = intervals_len7\
    \ * intervals_len;\n    let mut intervals_len9 = intervals_len8 * intervals_len;\n\
    \    let mut intervals_len10 = intervals_len9 * intervals_len;\n    let mut intervals_len11\
    \ = intervals_len10 * intervals_len;\n    let mut intervals_len12 = intervals_len11\
    \ * intervals_len;\n    let mut intervals_len13 = intervals_len12 * intervals_len;\n\
    \    let mut intervals_len14 = intervals_len13 * intervals_len;\n    let mut intervals_len15\
    \ = intervals_len14 * intervals_len;\n    let mut intervals_len16 = intervals_len15\
    \ * intervals_len;\n    let mut intervals_len17 = intervals_len16 * intervals_len;\n\
    \    let mut intervals_len18 = intervals_len17 * intervals_len;\n    let mut intervals_len19\
    \ = intervals_len18 * intervals_len;\n    let mut intervals_len20 = intervals_len19\
    \ * intervals_len;\n    let mut intervals_len21 = intervals_len20 * intervals_len;\n\
    \    let mut intervals_len22 = intervals_len21 * intervals_len;\n    let mut intervals_len23\
    \ = intervals_len22 * intervals_len;\n    let mut intervals_len24 = intervals_len23\
    \ * intervals_len;\n    let mut intervals_len25 = intervals_len24 * intervals_len;\n\
    \    let mut intervals_len26 = intervals_len25 * intervals_len;\n    let mut intervals_len27\
    \ = intervals_len26 * intervals_len;\n    let mut intervals_len28 = intervals_len27\
    \ * intervals_len;\n    let mut intervals_len29 = intervals_len28 * intervals_len;\n\
    \    let mut intervals_len30 = intervals_len29 * intervals_len;\n    let mut intervals_",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start;\n    let mut interval_length2\
    \ = interval2_end - interval2_start;\n    let mut interval_length3 = interval_length\
    \ * interval_length;\n    let mut interval_length4 = interval_length2 * interval_length2;\n\
    \    let mut interval_length5 = interval_length3 * interval_length3;\n    let\
    \ mut interval_length6 = interval_length4 * interval_length4;\n    let mut interval_length7\
    \ = interval_length5 * interval_length5;\n    let mut interval_length8 = interval_length6\
    \ * interval_length6;\n    let mut interval_length9 = interval_length7 * interval_length7;\n\
    \    let mut interval_length10 = interval_length8 * interval_length8;\n    let\
    \ mut interval_length11 = interval_length9 * interval_length9;\n    let mut interval_length12\
    \ = interval_length10 * interval_length10;\n    let mut interval_length13 = interval_length11\
    \ * interval_length11;\n    let mut interval_length14 = interval_length12 * interval_length12;\n\
    \    let mut interval_length15 = interval_length13 * interval_length13;\n    let\
    \ mut interval_length16 = interval_length14 * interval_length14;\n    let mut\
    \ interval_length17 = interval_length15 * interval_length15;\n    let mut interval_length18\
    \ = interval_length16 * interval_length16;\n    let mut interval_length19 = interval_length17\
    \ * interval_length17;\n    let mut interval_length20 = interval_length18 * interval_length18;\n\
    \    let mut interval_length21 = interval_length19 * interval_length19;\n    let\
    \ mut interval_length22 = interval_length20 * interval_length20;\n    let mut\
    \ interval_length23 = interval_length21 * interval_length21;\n    let mut interval_length24\
    \ = interval_length22 * interval_length22;\n    let mut interval_length25 = interval_length23\
    \ * interval_length23;\n    let mut interval_length26 = interval_length24 * interval_length24;\n\
    \    let mut interval_length27 = interval_length25 * interval_length25;\n    let\
    \ mut interval_", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval2_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval1_start;\n    }\n    if interval1_start > interval2_end {\n      \
    \  return \"NO\";\n    }\n    if interval1_end < interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_end == interval2_end {\n        return \"YES\"\
    ;\n    }\n    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    while intersection_start < interval2_end {\n        if\
    \ interval1_end % intersection_start == 0 {\n            intersection_end = intersection_end\
    \ + 1;\n        }\n        intersection_start = intersection_start + 1;\n    }\n\
    \    if intersection_start == interval2_end {\n        return \"YES\";\n    }\n\
    \    if intersection_start == interval1_end {\n        return \"NO\";\n    }\n\
    \    if intersection_end == interval2_end {\n        return \"NO\";\n    }\n \
    \   if intersection_end == interval1_end {\n        return \"YES\";\n    }\n \
    \   if intersection_end % intersection_start == 0 {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_end;\n    }\n    if\
    \ interval1_start == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_end == interval2_end {\n      \
    \  return \"YES\";\n    }\n    if interval1_start == interval1_end {\n       \
    \ return \"YES\";\n    }\n    if interval1_start < interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end == interval2_end {\n        return \"\
    YES\";\n    }\n    if interval1_start == interval1_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start < interval2_end {\n        return \"YES\";\n\
    \    }\n    if interval1_end == interval2_end {\n        return \"YES\";\n   \
    \ }\n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\
    \    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n  \
    \  if interval1_end == interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start == interval1_end {\n        return \"YES\";\n    }\n    if interval1_start\
    \ < interval2_end {\n        return \"YES\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"YES\";\n    }\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n    if interval1_end == interval2_end {\n     \
    \   return \"YES\";\n    }\n    if interval1_start == interval1_end {\n      \
    \  return \"YES\";\n    }\n    if interval1_start < interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end == interval2_end {\n        return \"\
    YES\";\n    }\n    if interval1_start == interval1_end ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end {\n        if interval1_end >=\
    \ interval2_start {\n            if interval1_end > interval2_start {\n      \
    \          if interval1_end % interval2_start == 0 {\n                    return\
    \ String::from(\"YES\");\n                }\n            }\n        }\n    }\n\
    \    return String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end && interval1_end >= interval2_start\
    \ {\n        if interval1_start < interval2_end {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_start {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n            if interval1_start < interval2_end {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_start {\n           \
    \     interval1_end, interval2_end = interval2_end, interval1_end;\n         \
    \   }\n            if interval1_start <= interval2_end && interval1_end >= interval2_start\
    \ {\n                if interval1_start < interval2_end {\n                  \
    \  interval1_start, interval2_start = interval2_start, interval1_start;\n    \
    \            }\n                if interval1_end > interval2_start {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n                    if interval1_start < interval2_end\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_start {\n                        interval1_end, interval2_end =\
    \ interval2_end, interval1_end;\n                    }\n                    if\
    \ interval1_start <= interval2_end && interval1_end >= interval2_start {\n   \
    \                     if interval1_start < interval2_end {\n                 \
    \           interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \                        }\n                        if interval1_end > interval2_start\
    \ {\n                            interval1_end, interval2_end = interval", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_end\
    \ == interval2_end {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_end < interval2_end {\n        interval1_end =\
    \ interval2_end;\n        interval2_start = interval1_start;\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_start < interval2_start {\n    \
    \    interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_end\
    \ == interval2_end {\n        if interval1_start == interval2_start {\n      \
    \      return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval", "    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          let mut start = interval1[0];\n            let mut end = interval1[1];\n\
    \            while start < end {\n                start = interval1[1];\n    \
    \            end = interval1[1];\n            }\n            start = interval2[0];\n\
    \            end = interval2[1];\n            while start < end {\n          \
    \      start = interval2[1];\n                end = interval2[1];\n          \
    \  }\n            if start == end {\n                return String::from(\"YES\"\
    );\n            }\n        }\n    }\n    String::from(\"NO\")", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval1_start = interval2_end, interval1_start;\n    }\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n            if interval1_start < interval2_start {\n                interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n            }\n       \
    \     if interval1_end > interval2_end {\n                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n            }\n            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                if interval1_start\
    \ < interval2_start {\n                    interval1_start, interval2_start =\
    \ interval2_start, interval1_start;\n                }\n                if interval1_end\
    \ > interval2_end {\n                    interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                }\n                if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                    if interval1_start\
    \ < interval2_start {\n                        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                    }\n               \
    \     if interval1_end > interval2_end {\n                        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n                    }\n     \
    \               if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                        if interval1_start < interval2_start {\n        \
    \                    interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \                        }\n                        if interval1_end > interval2_end\
    \ {\n                            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                        }\n                        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \         if interval1_start < interval2_start {\n                           \
    \     interval1_start, interval2_start = interval2_start, interval1_start;\n \
    \                           }\n                            if interval1_end >\
    \ interval2_end {\n                                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                            }\n", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start ", "    if interval1[0] >= interval2[1] || interval1[1]\
    \ < interval2[0] {\n        return \"NO\";\n    }\n    let mut prime_numbers =\
    \ vec![];\n    let mut prime_numbers_set = HashSet::new();\n    let mut prime_numbers_set_size\
    \ = prime_numbers_set.len();\n    let mut prime_numbers_set_size = prime_numbers_set_size\
    \ as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n\
    \    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let\
    \ mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size\
    \ = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size\
    \ as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n\
    \    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let\
    \ mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size\
    \ = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size\
    \ as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n\
    \    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let\
    \ mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size\
    \ = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size\
    \ as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n\
    \    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let\
    \ mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size\
    \ = prime_numbers_set_size as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size\
    \ as usize;\n    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n\
    \    let mut prime_numbers_set_size = prime_numbers_set_size as usize;\n    let\
    \ mut prime_numbers_set_size = ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n\n    if interval1_start < interval1_end\
    \ {\n        let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \        let mut interval2_length = interval2_end - interval2_start + 1;\n\n \
    \       if interval1_length == interval2_length {\n            if interval1_start\
    \ == interval2_start {\n                return \"YES\";\n            }\n     \
    \       return \"NO\";\n        }\n\n        let mut interval1_prime_length =\
    \ 1;\n        let mut interval2_prime_length = 1;\n\n        for i in 1..interval1_length\
    \ {\n            if interval1_start % i == 0 && interval1_end % i == 0 {\n   \
    \             interval1_prime_length += 1;\n            }\n        }\n\n     \
    \   for i in 1..interval2_length {\n            if interval2_start % i == 0 &&\
    \ interval2_end % i == 0 {\n                interval2_prime_length += 1;\n   \
    \         }\n        }\n\n        if interval1_prime_length == interval2_prime_length\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    return \"NO\";", "    let mut interval = interval1;\n    if interval1.0 >\
    \ interval2.0 {\n        interval = interval2;\n    }\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let mut interval_len\
    \ = interval.1;\n    let mut interval_start = interval.0;\n    let mut interval_end\
    \ = interval.1;\n    let mut interval_len = interval.1;\n    let mut interval_start\
    \ = interval.0;\n    let mut interval_end = interval.1;\n    let ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start <= interval2_end {\n        if interval1_end <\
    \ interval2_start {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_end == interval2_end {\n   \
    \         if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        let mut interval1_length = interval1_end - interval1_start;\n       \
    \ let mut interval2_length = interval2_end - interval2_start;\n        let mut\
    \ interval_length = interval1_length + interval2_length;\n        let mut prime\
    \ = true;\n        let mut i = 1;\n        while prime && i <= interval_length\
    \ {\n            if interval1_start % i == 0 && interval2_start % i == 0 {\n \
    \               prime = false;\n            }\n            i += 1;\n        }\n\
    \        if prime {\n            return String::from(\"YES\");\n        }\n  \
    \      return String::from(\"NO\");\n    }\n    return String::from(\"NO\");",
  "    let mut intervals = vec![];\n    let mut start = interval1[0];\n    let mut\
    \ end = interval1[1];\n    let mut interval = vec![];\n    while start <= end\
    \ {\n        interval.push(start);\n        start = interval1[1];\n    }\n   \
    \ start = interval2[0];\n    end = interval2[1];\n    while start <= end {\n \
    \       interval.push(start);\n        start = interval2[1];\n    }\n    if intervals.len()\
    \ == 0 {\n        return \"NO\";\n    }\n    if intervals.len() == 1 {\n     \
    \   return \"YES\";\n    }\n    let mut prime = true;\n    for i in 0..intervals.len()\
    \ {\n        let mut j = intervals[i];\n        let mut k = intervals[i];\n  \
    \      while j != k {\n            if j % i == 0 {\n                prime = false;\n\
    \                break;\n            }\n            j = j + i;\n        }\n  \
    \  }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    let mut prime_found = false;\n\
    \    while intersection_start <= intersection_end {\n        if interval1_start\
    \ <= intersection_end {\n            if interval2_start <= intersection_end {\n\
    \                if interval1_start <= intersection_end {\n                  \
    \  if interval2_start <= intersection_end {\n                        if interval1_start\
    \ <= intersection_end {\n                            if interval2_start <= intersection_end\
    \ {\n                                if interval1_start <= intersection_end {\n\
    \                                    if interval2_start <= intersection_end {\n\
    \                                        if interval1_start <= intersection_end\
    \ {\n                                            if interval2_start <= intersection_end\
    \ {\n                                                if interval1_start <= intersection_end\
    \ {\n                                                    if interval2_start <=\
    \ intersection_end {\n                                                       \
    \ if interval1_start <= intersection_end {\n                                 \
    \                           if interval2_start <= intersection_end {\n       \
    \                                                         if interval1_start <=\
    \ intersection_end {\n                                                       \
    \             if interval2_start <= intersection_end {\n                     \
    \                                                   if interval1_start <= intersection_end\
    \ {\n                                                            if interval2_start\
    \ <= intersection_end {\n                                                    \
    \            if interval1_start <= intersection_end {\n                      \
    \                                              if interval2_start <= intersection_end\
    \ {\n                                                                        if\
    \ interval1_start <= intersection_end {\n                                    \
    \                                        if interval2_start <= intersection_end\
    \ {\n                                                                        \
    \        if interval1_start <= intersection_end {\n                          \
    \                                                          if interval2_start\
    \ <= intersection_end {\n                                                    \
    \                                    if interval1_start <= intersection_end {\n\
    \                                                                            \
    \                if interval2_start <= intersection_end {\n                  \
    \                                                                            \
    \  if interval1_start <= intersection_end {\n                                \
    \                                                                    if interval2_start\
    \ <= intersection_end {\n                                                    \
    \                                                    if interval1_start <= intersection_end\
    \ {\n                                                                        \
    \                                    if interval2_start <= intersection_end {\n\
    \                                                                            \
    \                                    if interval1_start <= intersection_end {\n\
    \                                                                            \
    \                                        if interval2_start <= intersection_end\
    \ {\n                                                                        \
    \                                                if interval1_start <= intersection_end\
    \ {\n                                                                        \
    \                                                    if interval2_start <= intersection_end\
    \ {\n                                                                ", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval1_end {\n        return \"NO\";\n   \
    \ }\n    if interval2_start > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   let mut prime_number: isize = 1;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut prime_number_end = false;\n\
    \    let mut prime_number_start = false;\n    let mut ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    while interval1_start < interval1_end && interval2_start\
    \ < interval2_end {\n        if interval1_start < interval1_end {\n          \
    \  interval1_start = interval1_end + 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval2_start = interval2_end + 1;\n      \
    \  }\n        if interval1_start == interval1_end && interval2_start == interval2_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - interval1_start;\n\
    \            interval1_length = interval2_end - interval2_start;\n           \
    \ interval2_length = interval1_end - interval1_start;\n        }\n    }\n    if\
    \ interval1_start == interval1_end && interval2_start == interval2_end {\n   \
    \     if interval1_length == interval2_length {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_length == interval1_length {\n    \
    \        return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval2_start == interval2_end {\n        if interval1_length\
    \ == interval2_length {\n            return \"YES\".to_string();\n        }\n\
    \        return \"NO\".to_string();\n    }\n    if interval1_start == interval1_end\
    \ && interval2_start == interval2_end {\n        if intersection_length == interval1_length\
    \ && intersection_length == interval2_length {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if intersection_length\
    \ == interval1_length && intersection_length == interval2_length {\n        return\
    \ \"YES\".to_string();\n    }\n    return \"NO\".to_string();", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval2;\n        let mut interval\
    \ = interval1;\n        let mut interval2 = interval", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        }\n        intersection_length += 1;\n    }\n\
    \    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n    if intersection_length == 0 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 1 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    if interval1_start == interval1_end {\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval1_end {\n\
    \        if interval2_start < interval2_end {\n            return \"YES\";\n \
    \       }\n        return \"NO\";\n    }\n    if interval2_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n    return \"NO\";", "    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval1[0];\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval2[0];\n    }\n    if interval1_start > interval2_start {\n       \
    \ interval1_start = interval2_start;\n        interval1_end = interval2[1];\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2[0];\n    }\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1[0];\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval2_start\
    \ == interval2_end {\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval1_end {\n        return String::from(\"NO\");\n    }\n    if interval2_start\
    \ < interval2_end {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start;\n    let mut interval2_length\
    \ = interval2_end - interval2_start;\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start < interval1_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ < interval2_length {\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval1_end {\n      \
    \      return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    let mut interval1_prime = true;\n    let mut interval2_prime\
    \ = true;\n    let mut prime_length = interval1_length + interval2_length;\n \
    \   let mut prime_start = interval1_start;\n    let mut prime_end = interval1_end;\n\
    \    while prime_length > 1 {\n        if prime_start == interval1_end {\n   \
    \         prime_prime = false;\n        }\n        if prime_end == interval2_end\
    \ {\n            prime", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end <= interval2_end {\n    \
    \            if interval1_start <= interval2_end {\n                    if interval1_end\
    \ >= interval2_start {\n                        if interval1_end <= interval2_end\
    \ {\n                            if interval1_start <= interval2_end {\n     \
    \                           if interval1_end >= interval2_start {\n          \
    \                          if interval1_end <= interval2_end {\n             \
    \                           if interval1_start <= interval2_end {\n          \
    \                                  if interval1_end >= interval2_start {\n   \
    \                                             if interval1_end <= interval2_end\
    \ {\n                                                    if interval1_start <=\
    \ interval2_end {\n                                                        if\
    \ interval1_end >= interval2_start {\n                                       \
    \                     if interval1_end <= interval2_end {\n                  \
    \                                              if interval1_start <= interval2_end\
    \ {\n                                                                    if interval1_end\
    \ >= interval2_start {\n                                                     \
    \                   if interval1_end <= interval2_end {\n                    \
    \                                                        if interval1_start <=\
    \ interval2_end {\n                                                          \
    \                      if interval1_end >= interval2_start {\n               \
    \                                                                     if interval1_end\
    \ <= interval2_end {\n                                                       \
    \                                 if interval1_start <= interval2_end {\n    \
    \                                                                            \
    \            if interval1_end >= interval2_start {\n                         \
    \                                                                       if interval1_end\
    \ <= interval2_end {\n                                                       \
    \                                             if interval1_start <= interval2_end\
    \ {\n                                                                        \
    \                                if interval1_end >= interval2_start {\n     \
    \                                                                            \
    \                           if interval1_end <= interval2_end {\n            \
    \                                                                            \
    \                        if interval1_start <= interval2_end {\n             \
    \                                                                            \
    \                           if interval1_end >= interval2_start {\n          \
    \                                                                            \
    \                                  if interval1_end <= interval2_end {\n     \
    \                                                                            \
    \                                                                           if\
    \ interval1_start <= interval2_end {\n                                       \
    \                                                                            \
    \                                             if interval1_end >= interval2_start\
    \ {\n                                                                        \
    \                                                                            \
    \                if interval1_end <= interval2_end {\n                       \
    \                                                                            \
    \                                                                     if interval1_start\
    \ <= interval2_end {\n                                                       \
    \                                                                            \
    \                                         if interval1_end >= interval2_start\
    \ {\n                                                                        \
    \                                                                            \
    \                            if interval1_end <= interval2_end {\n           \
    \                                                                            \
    \                                                                            \
    \                 if interval1_start <= interval2_end {\n                    \
    \                                                                            \
    \                                                                            \
    \            if interval1_end >= interval2_start {\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_length == 3 {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    if interval1_length == 6 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n    }\n    if interval1_length == 7 {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 8 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n \
    \   if interval1_length == 9 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    if interval1_length == 10 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        } else {\n", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime_number: isize = 1;\n \
    \   let mut prime_number_len: isize = 1;\n    let mut prime_number_flag = false;\n\
    \    let mut prime_number_flag2 = false;\n    let mut prime_number_flag3 = false;\n\
    \    let mut prime_number_flag4 = false;\n    let mut prime_number_flag5 = false;\n\
    \    let mut prime_number_flag6 = false;\n    let mut prime_number_flag7 = false;\n\
    \    let mut prime_number_flag8 = false;\n    let mut prime_number_flag9 = false;\n\
    \    let mut prime_number_flag10 = false;\n    let mut prime_number_flag11 = false;\n\
    \    let mut prime_number_flag12 = false;\n    let mut prime_number_flag13 = false;\n\
    \    let mut prime_number_flag14 = false;\n    let mut prime_number_flag15 = false;\n\
    \    let mut prime_number_flag16 = false;\n    let mut prime_number_flag17 = false;\n\
    \    let mut prime_number_flag18 = false;\n    let mut prime_number_flag19 = false;\n\
    \    let mut prime_number_flag20 = false;\n    let mut prime_number_flag21 = false;\n\
    \    let mut prime_number_flag22 = false;\n    let mut prime_number_flag23 = false;\n\
    \    let mut prime_number_flag24 = false;\n    let mut prime_number_flag25 = false;\n\
    \    let mut prime_number_flag26 = false;\n    let mut prime_number_flag27 = false;\n\
    \    let mut prime_number_flag28 = false;\n    let mut prime_number_flag29 = false;\n\
    \    let mut prime_number_flag30 = false;\n    let mut prime_number_flag31 = false;\n\
    \    let mut prime_number_flag32 = false;\n    let mut prime_number_flag33 = false;\n\
    \    let mut prime_number_flag34 = false;\n    let mut prime_number_flag35 = false;\n\
    \    let mut prime_number_flag36 = false;\n    let mut prime_number_flag37 = false;\n\
    \    let mut prime_number_flag38 = false;\n    let mut prime_number_flag39 = false;",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval1_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    let\
    \ mut intersection_len = 0;\n    for &(start, end) in interval1 {\n        if\
    \ start <= end {\n            intersection_len += 1;\n        }\n    }\n    for\
    \ &(start, end) in interval2 {\n        if start <= end {\n            intersection_len\
    \ += 1;\n        }\n    }\n    if intersection_len == 0 {\n        return \"NO\"\
    ;\n    }\n    if intersection_len == interval1_len && intersection_len == interval2_len\
    \ {\n        return \"YES\";\n    }\n    if intersection_len == interval1_len\
    \ {\n        return \"YES\";\n    }\n    if intersection_len == interval2_len\
    \ {\n        return \"YES\";\n    }\n    if intersection_len == interval1_len\
    \ * interval2_len {\n        return \"YES\";\n    }\n    return \"NO\";", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut prime_number: isize = 1;\n    \n    while intersection_start <= intersection_end\
    \ {\n        if interval1_start < interval2_end {\n            if interval1_end\
    \ < interval2_start {\n                intersection_length = intersection_end\
    \ - intersection_start;\n                prime_number = prime_number * intersection_length;\n\
    \                intersection_start = intersection_start + 1;\n            } else\
    \ {\n                intersection_length = intersection_end - intersection_start;\n\
    \                prime_number = prime_number * intersection_length;\n        \
    \        intersection_start = intersection_start + 1;\n                intersection_end\
    \ = intersection_end + 1;\n            }\n        } else {\n            if interval1_end\
    \ < interval2_start {\n                intersection_length = intersection_end\
    \ - intersection_start;\n                prime_number = prime_number * intersection_length;\n\
    \                intersection_start = intersection_start + 1;\n            } else\
    \ {\n                intersection_length = intersection_end - intersection_start;\n\
    \                prime_number = prime_number * intersection_length;\n        \
    \        intersection_start = intersection_start + 1;\n                intersection_end\
    \ = intersection_end + 1;\n            }\n        }\n    }\n    if prime_number\
    \ == 1 {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }",
  "    if interval1.start < interval1.end && interval2.start < interval2.end {\n \
    \       let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut intersection = interval;\n        intersection.start = intersection.end;\n\
    \        intersection.end = intersection.start;\n        let mut prime = true;\n\
    \        let mut prime2 = true;\n        let mut prime3 = true;\n        let mut\
    \ prime4 = true;\n        let mut prime5 = true;\n        let mut prime6 = true;\n\
    \        let mut prime7 = true;\n        let mut prime8 = true;\n        let mut\
    \ prime9 = true;\n        let mut prime10 = true;\n        let mut prime11 = true;\n\
    \        let mut prime12 = true;\n        let mut prime13 = true;\n        let\
    \ mut prime14 = true;\n        let mut prime15 = true;\n        let mut prime16\
    \ = true;\n        let mut prime17 = true;\n        let mut prime18 = true;\n\
    \        let mut prime19 = true;\n        let mut prime20 = true;\n        let\
    \ mut prime21 = true;\n        let mut prime22 = true;\n        let mut prime23\
    \ = true;\n        let mut prime24 = true;\n        let mut prime25 = true;\n\
    \        let mut prime26 = true;\n        let mut prime27 = true;\n        let\
    \ mut prime28 = true;\n        let mut prime29 = true;\n        let mut prime30\
    \ = true;\n        let mut prime31 = true;\n        let mut prime32 = true;\n\
    \        let mut prime33 = true;\n        let mut prime34 = true;\n        let\
    \ mut prime35 = true;\n        let mut prime36 = true;\n        let mut prime37\
    \ = true;\n        let mut prime38 = true;\n        let mut prime39 = true;\n\
    \        let mut prime40 = true;\n        let mut prime41 = true;\n        let\
    \ mut prime42 = true;\n        let mut prime43 = true;\n        let mut prime44\
    \ = true;\n        let mut prime45 = true;\n        let mut prime46 = true;\n\
    \        let mut prime47 = true;\n        let mut prime48 = true;\n        let\
    \ mut prime49 = true;\n        let mut prime50 = true;\n        let mut prime51\
    \ = true;\n        let mut prime52 = true;\n        let mut prime53 = true;\n\
    \        let mut prime54 = true;\n        let mut prime55 = true;\n        let\
    \ mut prime56 = true;\n        let mut prime57 = true;\n        let mut prime58\
    \ = true;\n        let mut prime59 = true;\n        let mut prime", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            if interval1[1] > interval2[1] {\n                return \"NO\"\
    ;\n            }\n        } else {\n            if interval1[1] > interval2[0]\
    \ {\n                return \"NO\";\n            }\n        }\n    } else {\n\
    \        return \"NO\";\n    }\n    return \"YES\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if\
    \ interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_start < interval2_start {\n        return \"\
    NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start < interval2_end {\n        return \"YES\";\n\
    \    }\n\n    if interval1_end > interval2_start {\n        return \"YES\";\n\
    \    }\n\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n\n \
    \   if interval1_start == interval1_end {\n        return String::from(\"NO\"\
    );\n    }\n\n    if interval1_start < interval2_start {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end > interval2_end {\n        interval1_start\
    \ = interval2_start;\n    }\n\n    if interval1_start == interval1_end {\n   \
    \     return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_start = interval2_start;\n    }\n\n   \
    \ if interval1_start == interval1_end {\n        return String::from(\"NO\");\n\
    \    }\n\n    if interval1_start < interval2_start {\n        interval1_end =\
    \ interval2_end;\n    }\n    if interval1_end > interval2_end {\n        interval1_start\
    \ = interval2_start;\n    }\n\n    if interval1_start == interval1_end {\n   \
    \     return String::from(\"NO\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        interval1_end = interval2_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start = interval2_start;\n    }\n\n    if interval1_start\
    \ == interval1_end {\n        return String::from(\"NO\");\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_start = interval2_start;\n    }\n\n   \
    \ if interval1_start == interval1_end {\n        return String::from(\"NO\");\n\
    \    }\n\n    if interval1_start < interval2_start {\n        interval", "   \
    \ if interval1[0] >= interval2[1] || interval1[1] < interval2[0] {\n        return\
    \ \"NO\";\n    }\n\n    let mut intersection = interval1[0] as isize;\n    let\
    \ mut interval1_end = interval1[1] as isize;\n    let mut interval2_end = interval2[0]\
    \ as isize;\n\n    while interval1_end <= interval2_end {\n        if interval1_end\
    \ + interval2_end == interval1[0] {\n            intersection += 1;\n        \
    \    interval1_end += 1;\n            interval2_end += 1;\n        } else if interval1_end\
    \ + interval2_end == interval2[1] {\n            intersection += 1;\n        \
    \    interval1_end += 1;\n            interval2_end += 1;\n        } else {\n\
    \            intersection += 1;\n            interval1_end += 1;\n           \
    \ interval2_end += 1;\n        }\n    }\n\n    if intersection % 2 == 0 {\n  \
    \      return \"NO\";\n    }\n\n    \"YES\"", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            String::from(\"YES\")\n        } else {\n            String::from(\"\
    NO\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n\n    if interval1_start <= interval2_start {\n        if interval1_end\
    \ >= interval2_end {\n            return String::from(\"NO\");\n        }\n  \
    \      interval1_end = interval2_end;\n    } else {\n        if interval1_end\
    \ <= interval2_end {\n            return String::from(\"NO\");\n        }\n  \
    \      interval1_start = interval2_start;\n    }\n\n    if interval1_end >= interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    let mut interval1_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n\n    if interval1_length == interval2_length {\n      \
    \  return String::from(\"YES\");\n    }\n\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n\n    if interval1_length\
    \ == 2 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 3 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 4 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 5 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 6 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 7 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 8 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 9 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 10 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 11 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 12 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 13 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 14 {\n        return String::from(\"YES\");\n    }\n\n    if interval1_length\
    \ == 15 {\n        return String::from(\"", "    let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n    let mut interval2_len = interval2[1] - interval2[0]\
    \ + 1;\n    if interval_len > interval2_len {\n        interval_len = interval2_len;\n\
    \    }\n    let mut interval_start = interval1[0];\n    let mut interval_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval_end < interval2_start {\n        interval_end\
    \ = interval2_start;\n    }\n    if interval_start > interval2_end {\n       \
    \ interval_start = interval2_end;\n    }\n    if interval_start > interval_end\
    \ {\n        return \"NO\";\n    }\n    if interval_len == 1 {\n        return\
    \ \"YES\";\n    }\n    if interval_start == interval_end {\n        return \"\
    YES\";\n    }\n    if interval_start == interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval_end == interval2_end {\n        return \"YES\";\n  \
    \  }\n    if interval_start == interval2_start {\n        return \"YES\";\n  \
    \  }\n    if interval_end == interval2_end {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval_end {\n        return \"YES\";\n    }\n   \
    \ if interval_start == interval2_start {\n        return \"YES\";\n    }\n   \
    \ if interval_end == interval2_end {\n        return \"YES\";\n    }\n    if interval_start\
    \ == interval2_start {\n        return \"YES\";\n    }\n    if interval_end ==\
    \ interval2_end {\n        return \"YES\";\n    }\n    if interval_start == interval2_start\
    \ {\n        return \"YES\";\n    }\n    if interval_end == interval2_end {\n\
    \        return \"YES\";\n    }\n    if interval_start == interval2_start {\n\
    \        return \"YES\";\n    }\n    if interval_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval_start == interval2_start {\n    \
    \    return \"YES\";\n    }\n    if interval_end == interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval_start == interval2_start {\n        return\
    \ \"YES\";\n    }\n    if interval_end == interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval_start == interval2_start {\n        return \"YES\";\n\
    \    }\n    if interval_end == interval2_end {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    if interval_end == interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval_start == ", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval\n    } else {\n       \
    \ let mut interval = interval2;\n        interval[0] = interval2[1];\n       \
    \ interval[1] = interval1[0];\n        interval\n    }\n    let mut interval =\
    \ interval1;\n    let mut interval = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval = interval2;\n    let mut interval = interval1;\n    let mut interval\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval = interval2;\n    let mut interval = interval1;\n    let mut interval\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval = interval2;\n    let mut interval = interval1;\n    let mut interval\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval = interval2;\n    let mut interval = interval1;\n    let mut interval\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval = interval2;\n    let\
    \ mut interval = interval1;\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_end > interval2_end {\n            interval1_end =\
    \ interval2_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start <= interval2_start {\n  \
    \              interval1_start = interval2_start;\n            }\n           \
    \ if interval1_end >= interval2_end {\n                interval1_end = interval2_end;\n\
    \            }\n            if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                if interval1_start <= interval2_start {\n\
    \                    interval1_start = interval2_start;\n                }\n \
    \               if interval1_end >= interval2_end {\n                    interval1_end\
    \ = interval2_end;\n                }\n                if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                    if interval1_start\
    \ <= interval2_start {\n                        interval1_start = interval2_start;\n\
    \                    }\n                    if interval1_end >= interval2_end\
    \ {\n                        interval1_end = interval2_end;\n                \
    \    }\n                    if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                        if interval1_start <= interval2_start\
    \ {\n                            interval1_start = interval2_start;\n        \
    \                }\n                        if interval1_end >= interval2_end\
    \ {\n                            interval1_end = interval2_end;\n            \
    \            }\n                        if interval1_start <= interval1_end &&\
    \ interval2_start <= interval2_end {\n                            if interval1_start\
    \ <= interval2_start {\n                                interval1_start = interval2_start;\n\
    \                            }\n                            if interval1_end >=\
    \ interval2_end {\n                                interval1_end = interval2_end;\n\
    \                            }\n                            if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \             if interval1_start <= interval2_start {\n                      \
    \              interval1_start = interval2_start;\n                          \
    \      }\n                                if interval1_end >= interval2_end {\n\
    \                                    interval1_end = interval2_end;\n        \
    \                        }\n                                if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \                 if interval1_start <= ", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start1 = interval1.0;\n    let mut start2 = interval2.0;\n\
    \    let mut end1 = interval1.1;\n    let mut end2 = interval2.1;\n    let mut\
    \ length = 0;\n    let mut prime = false;\n    while start1 < end1 && start2 <\
    \ end2 {\n        if start1 < start2 {\n            intervals.push(start2, end1);\n\
    \            start2 = interval2.0;\n            end2 = interval2.1;\n        }\
    \ else {\n            intervals.push(start1, end2);\n            start1 = interval1.0;\n\
    \            end1 = interval1.1;\n        }\n    }\n    if start1 < end1 {\n \
    \       intervals.push(start1, end1);\n    }\n    if start2 < end2 {\n       \
    \ intervals.push(start2, end2);\n    }\n    for interval in intervals {\n    \
    \    if interval == intervals[0] {\n            prime = true;\n        } else\
    \ {\n            prime = false;\n            break;\n        }\n    }\n    if\
    \ prime {\n        return \"YES\".to_string();\n    } else {\n        return \"\
    NO\".to_string();\n    }", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start < interval1_end {\n        intersection_length\
    \ = interval1_end - interval1_start;\n    }\n    if intersection_length == 0 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 1 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 2 && interval1_start == interval2_start\
    \ {\n        return \"YES\";\n    }\n    if intersection_length == 2 && interval1_end\
    \ == interval2_end {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 2 && interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 2 && interval1_end == interval2_end {\n       \
    \ return \"YES\";\n    }\n    if intersection_length == 3 && interval1_start ==\
    \ interval2_start {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 3 && interval1_end == interval2_end {\n        return \"YES\";\n    }\n \
    \   if intersection_length == 3 && interval1_start == interval2_start {\n    \
    \    return \"YES\";\n    }\n    if intersection_length == 3 && interval1_end\
    \ == interval2_end {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 4 && interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 4 && interval1_end == interval2_end {\n       \
    \ return \"YES\";\n    }\n    if intersection_length == 4 && interval1_start ==\
    \ interval2_start {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 4 && interval1_end == interval2_end {\n        return \"YES\";\n    }\n \
    \   if intersection_length == 5 && interval1_start == interval2_start {\n    \
    \    return \"YES\";\n    }\n    if intersection_length == 5 && interval1_end\
    \ == interval2_end {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 5 && interval1_start == interval2_start {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 5 && interval1_end == interval2_end {\n       \
    \ return \"YES\";\n    }\n    if intersection_length == 6 && interval1_start ==\
    \ interval2_start {\n        return \"YES\";\n    }\n    if intersection", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    let mut prime = true;\n    \n    while\
    \ prime_check(&interval1_start, &interval1_end, &interval2_start, &interval2_end)\
    \ {\n        prime = false;\n        intersection_start = interval1_start;\n \
    \       intersection_end = interval1_end;\n        intersection_len = interval1_end\
    \ - interval1_start;\n        interval1_len = interval2_end - interval2_start;\n\
    \        interval2_len = interval1_end - interval1_start;\n    }\n    \n    if\
    \ prime_check(&intersection_start, &intersection_end, &interval1_start, &interval1_end)\
    \ {\n        if prime_check(&interval1_start, &interval1_end, &interval2_start,\
    \ &interval2_end) {\n            if prime_check(&intersection_start, &intersection_end,\
    \ &interval1_start, &interval1_end) {\n                if prime_check(&interval1_start,\
    \ &interval1_end, &interval2_start, &interval2_end) {\n                    if\
    \ prime_check(&intersection_start, &intersection_end, &interval1_start, &interval1_end)\
    \ {\n                        if prime_check(&interval1_start, &interval1_end,\
    \ &interval2_start, &interval2_end) {\n                            if prime_check(&intersection_start,\
    \ &intersection_end, &interval1_start, &interval1_end) {\n                   \
    \             if prime_check(&interval1_start, &interval1_end, &interval2_start,\
    \ &interval2_end) {\n                                    if prime_check(&intersection_start,\
    \ &intersection_end, &interval1_start, &interval1_end) {\n                   \
    \                     if prime_check(&interval1_start, &interval1_end, &interval2_start,\
    \ &interval2_end) {\n                                            if prime_check(&intersection_start,\
    \ &intersection_end, &interval1_start, &interval1_end) {\n                   \
    \                             if prime_check(&interval1_start, &interval1_end,\
    \ &interval2_start, &interval2_end) {\n                                      \
    \              if prime_check(&intersection_start, &intersection_end, &interval1_start,\
    \ &interval1_end) {\n                                                        if\
    \ prime_check(&interval1_start, &interval1_end, &interval2_start, &interval2_end)\
    \ {\n                                                            if prime_check(&intersection_start,\
    \ &intersection_", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n\n    let mut intersection = interval1;\n\
    \    intersection[0] = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n\
    \    intersection[1] = interval1[1] > interval2[1] ? interval1[1] : interval2[1];\n\
    \n    if intersection[0] == intersection[1] {\n        return \"NO\";\n    }\n\
    \n    if intersection[0] < intersection[1] {\n        let mut prime = true;\n\
    \        for i in 1..=intersection[0] {\n            if !prime{\n            \
    \    break;\n            }\n            prime = !prime;\n        }\n        if\
    \ prime {\n            return \"YES\";\n        }\n    }\n\n    let mut prime\
    \ = true;\n    for i in 1..=intersection[1] {\n        if !prime{\n          \
    \  break;\n        }\n        prime = !prime;\n    }\n    if prime {\n       \
    \ return \"YES\";\n    }\n\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ > interval2_end {\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_end {\n        return String::from(\"YES\");\n    }\n    if interval1_end\
    \ > interval2_start {\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ == interval1_end {\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ == interval2_start {\n        return String::from(\"YES\");\n    }\n    if interval1_end\
    \ == interval2_end {\n        return String::from(\"YES\");\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    if interval1_length > interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == 2 {\n        if interval2_length == 2 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 3 {\n        if interval2_length == 3 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 4 {\n        if interval2_length == 4 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 5 || interval1_length == 6 {\n        if interval2_length == 5 || interval2_length\
    \ == 6 {", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        if interval1[0] < interval2[0] {\n            let\
    \ mut interval = interval1;\n            interval[0] = interval2[0];\n       \
    \     interval[1] = interval1[1];\n            return interval;\n        }\n \
    \       let mut interval = interval1;\n        interval[0] = interval2[1];\n \
    \       interval[1] = interval1[0];\n        return interval;\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[0];\n        interval[1] = interval2[1];\n\
    \        return interval;\n    }\n    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut interval = interval1;\n        interval[0]\
    \ = interval2[0];\n        interval[1] = interval1[1];\n        return interval;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval2[1];\n        return interval;\n    }\n    if\
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let mut\
    \ interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[1];\n        return interval;\n    }\n    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      interval[0] = interval1[0];\n        interval[1] = interval2[1];\n    \
    \    return interval;\n    }\n    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut interval = interval1;\n        interval[0]\
    \ = interval1[0];\n        interval[1] = interval2[1];\n        return interval;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval2[1];\n        return interval;\n    }\n    if\
    \ interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let mut\
    \ interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[1];\n        return interval;\n    }\n    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      interval[0] = interval1[0];\n        interval[1] = interval2[1];\n    \
    \    return interval;\n    }\n    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        }\n        if\
    \ interval2_start < interval2_end {\n            intersection_end = interval2_start;\n\
    \        }\n        if intersection_start <= intersection_end {\n            interval1_start\
    \ += 1;\n            interval2_start += 1;\n        } else {\n            interval1_end\
    \ += 1;\n            interval2_end += 1;\n        }\n    }\n    if interval1_start\
    \ > interval1_end {\n        intersection_start = interval1_end;\n    }\n    if\
    \ interval2_start > interval2_end {\n        intersection_end = interval2_end;\n\
    \    }\n    if intersection_start > intersection_end {\n        intersection_start\
    \ = intersection_end;\n    }\n    if intersection_start == intersection_end {\n\
    \        return \"NO\"\n    } else {\n        return \"YES\"\n    }", "    let\
    \ mut interval_1: (isize, isize) = interval1;\n    let mut interval_2: (isize,\
    \ isize) = interval2;\n    let mut interval_1_end: isize = interval_1.1;\n   \
    \ let mut interval_2_end: isize = interval_2.1;\n    let mut interval_1_start:\
    \ isize = interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n\
    \    let mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end:\
    \ isize = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n\
    \    let mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end:\
    \ isize = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n \
    \   let mut interval_1_start: isize = interval_1.0;\n    let mut interval_2_start:\
    \ isize = interval_2.0;\n    let mut interval_1_end: isize = interval_1.1;\n \
    \   let mut interval_2_end: isize = interval_2.1;\n    let mut interval_1_start:\
    \ isize = interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n\
    \    let mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end:\
    \ isize = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n\
    \    let mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end:\
    \ isize = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n \
    \   let mut interval_1_start: isize = interval_1.0;\n    let mut interval_2_start:\
    \ isize = interval_2.0;\n    let mut interval_1_end: isize = interval_1.1;\n \
    \   let mut interval_2_end: isize = interval_2.1;\n    let mut interval_1_start:\
    \ isize = interval_1.0;\n    let mut interval_2_start: isize = interval_2.0;\n\
    \    let mut interval_1_end: isize = interval_1.1;\n    let mut interval_2_end:\
    \ isize = interval_2.1;\n    let mut interval_1_start: isize = interval_1.0;\n\
    \    let mut interval_2_start: isize = interval_2.0;\n    let mut interval_1_end:\
    \ isize = interval_1.1;\n    let mut interval_2_end: isize = interval_2.1;\n \
    \   let mut interval_1_start: i", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1[0];\n\
    \    }\n\n    if interval2_start > interval2_end {\n        interval2_start =\
    \ interval2_end;\n        interval2_end = interval2[0];\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2[0];\n    }\n\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2[0];\n    }\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval1[0];\n    }\n\n    if interval2_start > interval2_end {\n       \
    \ interval2_start = interval2_end;\n        interval2_end = interval2[0];\n  \
    \  }\n\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval1_end = interval2[0];\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2[0];\n    }\n\n    if interval1_start > interval1_end {\n       \
    \ interval1_start = interval1_end;\n        interval1_end = interval1[0];\n  \
    \  }\n\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2[0];\n    }\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2[0];\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2[0];\n    }\n\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1[0];\n\
    \    }\n\n    if interval2_start > interval2_end {\n        interval2_start =\
    \ interval2_end;\n        interval2_end = interval2[0];\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2[0];\n    }\n\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2[0];\n    }\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval1", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        } else {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n\n    if interval1_length <\
    \ interval2_length {\n        interval1_length = interval2_length;\n        interval2_start\
    \ = interval1_start + interval1_length - 1;\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return String::from(\"YES\");\n        } else {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n\n    if interval1_length > interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_end = interval1_end\
    \ - interval1_length - 1;\n    }\n\n    if interval1_length == interval2_length\
    \ {\n        if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_end = interval1_end - interval1_length\
    \ - 1;\n    }\n\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return String::from(\"YES\");\n        } else\
    \ {\n            return String::from(\"NO\");\n        }\n    }\n\n    if interval1_length\
    \ > interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_start = interval1_start + interval1_length - 1;\n    }\n\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval2_start {\n   \
    \         return String::from(\"YES\");\n        } else {\n            return\
    \ String::from(\"NO\");\n        }\n    }\n\n    if interval1_length < interval2_length",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval_length = interval1_end - interval1_start;\n    let mut interval2_length\
    \ = interval2_end - interval2_start;\n    if interval1_end > interval2_start {\n\
    \        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n    if interval2_end > interval1_start {\n        interval2_start = interval1_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    .to_string();\n        }\n        return \"NO\".to_string();\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval_length = interval1_end - interval2_start;\n\
    \    }\n    if interval2_end < interval1_end {\n        interval2_length = interval2_end\
    \ - interval1_start;\n    }\n    if interval_length == interval2_length {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval_length\
    \ < interval2_length {\n        interval_length = interval2_length;\n    }\n \
    \   if interval_length == 1 {\n        return \"YES\".to_string();\n    }\n  \
    \  if interval_length == 2 {\n        return \"NO\".to_string();\n    }\n    if\
    \ interval_length == 3 {\n        return \"YES\".to_string();\n    }\n    if interval_length\
    \ == 4 {\n        return \"NO\".to_string();\n    }\n    if interval_length ==\
    \ 5 {\n        return \"YES\".to_string();\n    }\n    if interval_length == 6\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval_length == 7 {\n\
    \        return \"YES\".to_string();\n    }\n    if interval_length == 8 {\n \
    \       return \"NO\".to_string();\n    }\n    if interval_length == 9 {\n   \
    \     return \"YES\".to_string();\n    }\n    if interval_length == 10 {\n   \
    \     return \"NO\".to_string();\n    }\n    if interval_length == 11 {\n    \
    \    return \"YES\".to_string();\n    }\n    if interval_length == 12 {\n    \
    \    return \"NO\".to_string();\n    }\n    if interval_length == 13 {\n     \
    \   return \"YES\".to_string();\n    }\n    if interval_length == 14 {\n     \
    \   return \"NO\".to_string();\n    }\n    if interval_length == 15 {\n      \
    \  return \"YES\".to_string();\n    }\n    if interval_length == 16 {\n      \
    \  return \"NO\".to_string();\n    }\n    if interval_length == 17 {\n", "   \
    \ let mut interval = interval1;\n    let mut interval2 = interval2;\n    \n  \
    \  if interval1[0] > interval2[0] {\n        interval = interval2;\n        interval2\
    \ = interval1;\n    }\n    \n    if interval1[1] < interval2[1] {\n        interval\
    \ = interval2;\n        interval2 = interval1;\n    }\n    \n    let mut length\
    \ = 0;\n    \n    for i in interval {\n        for j in interval2 {\n        \
    \    if i == j {\n                length += 1;\n            }\n        }\n   \
    \ }\n    \n    if length == 2 {\n        return \"YES\";\n    }\n    \n    if\
    \ length == 1 {\n        return \"NO\";\n    }\n    \n    if length == 0 {\n \
    \       return \"NO\";\n    }\n    \n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    .to_string();\n        }\n        return \"NO\".to_string();\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\".to_string();\n    }\n    if interval1_end\
    \ > interval2_end {\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ < interval2_end {\n        return \"YES\".to_string();\n    }\n    if interval1_end\
    \ > interval2_start {\n        return \"YES\".to_string();\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval2_start == interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_end > interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_end {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_end > interval2_start {\n        return \"YES\".to_string();\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start < interval2_start\
    \ {\n", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_length = 0;\n    \n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    \n\
    \    if interval1_start <= interval1_end && interval2_start <= interval2_end {\n\
    \        intersection_length = interval1_end - interval1_start;\n    }\n    \n\
    \    if intersection_length == 0 {\n        return \"NO\";\n    }\n    \n    if\
    \ intersection_length == 1 {\n        return \"YES\";\n    }\n    \n    if intersection_length\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    \n    if intersection_length == 3 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n        if interval1_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n    }\n    \n    if intersection_length == 4 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n        if interval1_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_end == interval2_start {\n\
    \            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n        if interval1_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    \n    if intersection_length\
    \ == 6 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n        if interval1_start == interval2_end {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start == interval2_start {\n   \
    \     return String::from(\"YES\");\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n\n", "    if interval1.start\
    \ < interval1.end && interval2.start < interval2.end {\n        if interval1.start\
    \ < interval2.start {\n            let mut start = interval1.start;\n        \
    \    let mut end = interval1.end;\n            while (start < interval2.end) &&\
    \ (end < interval2.start) {\n                start += 1;\n                end\
    \ += 1;\n            }\n            if start < interval2.start {\n           \
    \     let mut start = interval2.start;\n                let mut end = interval2.end;\n\
    \                while (start < interval1.end) && (end < interval1.start) {\n\
    \                    start += 1;\n                    end += 1;\n            \
    \    }\n                if start < interval1.start {\n                    return\
    \ String::from(\"NO\");\n                }\n            }\n        }\n       \
    \ if interval1.end < interval2.end {\n            let mut start = interval1.start;\n\
    \            let mut end = interval1.end;\n            while (start < interval2.end)\
    \ && (end < interval2.start) {\n                start += 1;\n                end\
    \ += 1;\n            }\n            if start < interval2.end {\n             \
    \   let mut start = interval2.start;\n                let mut end = interval2.end;\n\
    \                while (start < interval1.end) && (end < interval1.start) {\n\
    \                    start += 1;\n                    end += 1;\n            \
    \    }\n                if start < interval1.end {\n                    return\
    \ String::from(\"NO\");\n                }\n            }\n        }\n    }\n\
    \    if interval1.start < interval1.end {\n        let mut start = interval1.start;\n\
    \        let mut end = interval1.end;\n        while (start < interval2.end) &&\
    \ (end < interval2.start) {\n            start += 1;\n            end += 1;\n\
    \        }\n        if start < interval2.end {\n            let mut start = interval2.start;\n\
    \            let mut end = interval2.end;\n            while (start < interval1.end)\
    \ && (end < interval1.start) {\n                start += 1;\n                end\
    \ += 1;\n            }\n            if start < interval1.end {\n             \
    \   return String::from(\"NO\");\n            }\n        }\n    }\n    if interval1.end\
    \ < interval1.end {\n        let mut start = interval1.start;\n        let mut\
    \ end = interval1.end;\n        while (start < interval2.end) && (end < interval2.start)\
    \ {\n            start += 1;\n            end += 1;\n        }\n        if start\
    \ < interval2.end {\n            let mut start = interval2.start;\n          \
    \  let mut end = interval2.end;\n            while (start < interval1.end) &&\
    \ (end < interval1.start) {\n                start += 1;\n                end\
    \ += 1;\n            }\n            if start < interval1.end {\n", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n\
    \        interval\n    } else {\n        let mut interval = interval2;\n     \
    \   interval[0] = interval2[1];\n        interval[1] = interval1[0];\n       \
    \ interval\n    }\n    let mut len = 0;\n    let mut prime = true;\n    let mut\
    \ prime_len = prime_len();\n    let mut prime_len = prime_len.clone();\n    let\
    \ mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n    let mut prime_len = prime_len.clone();\n\
    \    let mut prime_len = prime_len.clone();\n", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        if interval1_end < interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start == interval2_start\
    \ {\n        return \"YES\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 1 {\n        return \"NO\";\n\
    \    }\n\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n\n  \
    \  let mut interval1_prime = true;\n    let mut interval2_prime = true;\n\n  \
    \  if interval1_length == 2 {\n        interval1_prime = interval1_start % interval2_start\
    \ == 0;\n        interval2_prime = interval2_start % interval1_start == 0;\n \
    \   }\n\n    if interval1_length == 1 {\n        interval1_prime = interval1_start\
    \ % interval2_start == 0;\n    }\n\n    if interval1_length == 0 {\n        interval1_prime\
    \ = true;\n    }\n\n    if interval2_length == 1 {\n        interval2_prime =\
    \ interval2_start % interval1_start == 0;\n    }\n\n    if interval2_length ==\
    \ 0 {\n        interval2_prime = true;\n    }\n\n    if interval1_prime && interval2_prime\
    \ {\n        return \"YES\";\n    }\n\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval2_start > interval1_end {\n        interval2_start, interval2_end\
    \ = interval1_end, interval2_start;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut start = interval1.0;\n    let mut end = interval1.1;\n\
    \    let mut length = interval1.1;\n    let mut prime = true;\n    while start\
    \ < end {\n        if intervals.iter().any(|&(_, e)| e > start) {\n          \
    \  prime = false;\n            break;\n        }\n        intervals.push(interval1);\n\
    \        intervals.push(interval2);\n        start += interval1.1;\n        end\
    \ += interval2.1;\n        length += interval1.1;\n    }\n    if prime {\n   \
    \     String::from(\"YES\")\n    } else {\n        String::from(\"NO\")\n    }",
  "    let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = 0;\n    let\
    \ mut prime_found = false;\n    \n    if interval_len > interval2_len {\n    \
    \    interval_len = interval2_len;\n    }\n    \n    for i in 0..interval_len\
    \ {\n        if interval1[0] <= i && i <= interval1[1] {\n            intersection_len\
    \ += 1;\n        }\n    }\n    \n    for i in 0..interval2_len {\n        if interval2[0]\
    \ <= i && i <= interval2[1] {\n            intersection_len += 1;\n        }\n\
    \    }\n    \n    if intersection_len == interval_len {\n        prime_found =\
    \ true;\n    }\n    \n    if prime_found {\n        String::from(\"YES\")\n  \
    \  } else {\n        String::from(\"NO\")\n    }", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval_len = interval1.1;\n\
    \    let mut interval2_len = interval2.1;\n    let mut interval_start = interval1.0;\n\
    \    let mut interval2_start = interval2.0;\n    let mut interval_end = interval1.1;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = interval2_len;\n    let mut interval_start = interval_start;\n\
    \    let mut interval2_start = interval2_start;\n    let mut interval_end = interval_end;\n\
    \    let mut interval2_end = interval2_end;\n    let mut interval_len = interval_len;\n\
    \    let mut interval2_len = ", "    if interval1[0] < interval1[1] {\n      \
    \  if interval2[0] < interval2[1] {\n            if interval1[0] < interval2[0]\
    \ {\n                if interval1[1] > interval2[1] {\n                    return\
    \ \"NO\";\n                } else {\n                    return \"YES\";\n   \
    \             }\n            } else {\n                if interval1[1] > interval2[1]\
    \ {\n                    return \"NO\";\n                } else {\n          \
    \          return \"YES\";\n                }\n            }\n        } else {\n\
    \            return \"NO\";\n        }\n    } else {\n        if interval2[0]\
    \ < interval2[1] {\n            return \"NO\";\n        } else {\n           \
    \ return \"YES\";\n        }\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n\
    \    let mut interval1_prime_len = interval1_len;\n    let mut interval2_prime_len\
    \ = interval2_len;\n    let mut prime_len = interval1_len + interval2_len;\n \
    \   let mut prime_prime = true;\n    let mut prime_prime_len = prime_len;\n  \
    \  let mut prime_prime_prime = true;\n    let mut prime_prime_prime_len = prime_prime_len;\n\
    \    let mut prime_prime_prime_prime = true;\n    let mut prime_prime_prime_prime_len\
    \ = prime_prime_prime_len;\n    let mut prime_prime_prime_prime_prime_len = prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_len = prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_len;\n\
    \    let mut prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_len =\
    \ prime_prime_prime_prime_prime_prime_", "    let mut intervals = vec![interval1,\
    \ interval2];\n    let mut intervals_len = intervals.len();\n    let mut intervals_len2\
    \ = intervals_len * intervals_len;\n    let mut intervals_len3 = intervals_len2\
    \ * intervals_len;\n    let mut intervals_len4 = intervals_len3 * intervals_len;\n\
    \    let mut intervals_len5 = intervals_len4 * intervals_len;\n    let mut intervals_len6\
    \ = intervals_len5 * intervals_len;\n    let mut intervals_len7 = intervals_len6\
    \ * intervals_len;\n    let mut intervals_len8 = intervals_len7 * intervals_len;\n\
    \    let mut intervals_len9 = intervals_len8 * intervals_len;\n    let mut intervals_len10\
    \ = intervals_len9 * intervals_len;\n    let mut intervals_len11 = intervals_len10\
    \ * intervals_len;\n    let mut intervals_len12 = intervals_len11 * intervals_len;\n\
    \    let mut intervals_len13 = intervals_len12 * intervals_len;\n    let mut intervals_len14\
    \ = intervals_len13 * intervals_len;\n    let mut intervals_len15 = intervals_len14\
    \ * intervals_len;\n    let mut intervals_len16 = intervals_len15 * intervals_len;\n\
    \    let mut intervals_len17 = intervals_len16 * intervals_len;\n    let mut intervals_len18\
    \ = intervals_len17 * intervals_len;\n    let mut intervals_len19 = intervals_len18\
    \ * intervals_len;\n    let mut intervals_len20 = intervals_len19 * intervals_len;\n\
    \    let mut intervals_len21 = intervals_len20 * intervals_len;\n    let mut intervals_len22\
    \ = intervals_len21 * intervals_len;\n    let mut intervals_len23 = intervals_len22\
    \ * intervals_len;\n    let mut intervals_len24 = intervals_len23 * intervals_len;\n\
    \    let mut intervals_len25 = intervals_len24 * intervals_len;\n    let mut intervals_len26\
    \ = intervals_len25 * intervals_len;\n    let mut intervals_len27 = intervals_len26\
    \ * intervals_len;\n    let mut intervals_len28 = intervals_len27 * intervals_len;\n\
    \    let mut intervals_len29 = intervals_len28 * intervals_len;\n    let mut intervals_len30\
    \ = intervals_len29 * intervals_len;\n    let mut intervals_len31 = intervals_len30\
    \ * interval", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_length = interval2_end - interval2_start;\n\
    \    let mut interval2_length = interval1_end - interval1_start;\n    let mut\
    \ interval_length = interval1_length + interval2_length;\n    let mut prime_numbers\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime_numbers_length = vec![];\n    let mut prime_numbers_length\
    \ = vec![];\n    let mut prime", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end >= interval2_start {\n            if interval1_end\
    \ < interval2_end {\n                let mut interval1_length = interval1_end\
    \ - interval1_start;\n                let mut interval2_length = interval2_end\
    \ - interval2_start;\n                let mut intersection_length = interval1_length\
    \ + interval2_length;\n                let mut prime_number = true;\n        \
    \        let mut prime_number_index = 0;\n                let mut prime_number_index2\
    \ = 0;\n                while prime_number && prime_number_index < intersection_length\
    \ {\n                    if interval1_start + prime_number_index == interval2_start\
    \ {\n                        prime_number = false;\n                    } else\
    \ {\n                        prime_number_index += 1;\n                    }\n\
    \                    if prime_number_index2 == interval1_length {\n          \
    \              prime_number = false;\n                    } else {\n         \
    \               prime_number_index2 += 1;\n                    }\n           \
    \     }\n                if prime_number {\n                    return String::from(\"\
    YES\");\n                } else {\n                    return String::from(\"\
    NO\");\n                }\n            } else {\n                return String::from(\"\
    NO\");\n            }\n        } else {\n            return String::from(\"NO\"\
    );\n        }\n    } else {\n        return String::from(\"NO\");\n    }", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ += interval1_length;\n            interval1_length -= 1;\n        } else {\n\
    \            interval2_start += interval2_length;\n            interval2_length\
    \ -= 1;\n        }\n        intersection_length += 1;\n    }\n    if interval1_start\
    \ > interval1_end {\n        interval1_start -= 1;\n        interval1_length +=\
    \ 1;\n    }\n    if interval2_start > interval2_end {\n        interval2_start\
    \ -= 1;\n        interval2_length += 1;\n    }\n    if intersection_length ==\
    \ 0 {\n        return \"NO\";\n    }\n    if intersection_length == 1 {\n    \
    \    return \"YES\";\n    }\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 3 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n    }\n    if intersection_length ==\
    \ 4 {\n        if interval1_start == interval1_end {\n            return \"YES\"\
    ;\n        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\";\n        }\n        if interval1_start == interval2_start {\n     \
    \       return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 5 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start == interval2_end {\n           \
    \ return \"YES\";\n        }\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 6 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        }\n        if interval2_start ", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      let mut interval2 = interval2;\n        let mut interval_len = interval1[1]\
    \ - interval1[0] + 1;\n        let mut interval2_len = interval2[1] - interval2[0]\
    \ + 1;\n        let mut prime = true;\n        while interval_len > 0 && interval2_len\
    \ > 0 {\n            if interval[0] < interval2[0] {\n                interval[0]\
    \ = interval[0] + 1;\n                interval_len -= 1;\n            } else {\n\
    \                interval[1] = interval[1] - 1;\n                interval2_len\
    \ -= 1;\n            }\n        }\n        if interval_len > 0 || interval2_len\
    \ > 0 {\n            prime = false;\n        }\n        if prime {\n         \
    \   return String::from(\"YES\");\n        } else {\n            return String::from(\"\
    NO\");\n        }\n    } else {\n        return String::from(\"NO\");\n    }",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    if interval1_len > interval2_len {\n \
    \       interval1_prime = false;\n        interval2_len = interval1_len;\n   \
    \ }\n    if interval2_len > interval1_len {\n        interval2_prime = false;\n\
    \        interval1_len = interval2_len;\n    }\n    if interval1_len == interval2_len\
    \ {\n        if interval1_start < interval2_start {\n            interval1_prime\
    \ = false;\n        }\n        if interval1_end > interval2_end {\n          \
    \  interval1_prime = false;\n        }\n        if interval2_start < interval1_end\
    \ {\n            interval2_prime = false;\n        }\n        if interval2_end\
    \ > interval1_end {\n            interval2_prime = false;\n        }\n    }\n\
    \    if interval1_prime && interval2_prime {\n        if interval1_start < interval2_start\
    \ {\n            interval1_prime = false;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_prime = false;\n        }\n       \
    \ if interval2_start < interval1_end {\n            interval2_prime = false;\n\
    \        }\n        if interval2_end > interval1_end {\n            interval2_prime\
    \ = false;\n        }\n    }\n    if interval1_prime && interval2_prime {\n  \
    \      if interval1_start < interval2_start {\n            interval1_prime = false;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_prime\
    \ = false;\n        }\n        if interval2_start < interval1_end {\n        \
    \    interval2_prime = false;\n        }\n        if interval2_end > interval1_end\
    \ {\n            interval2_prime = false;\n        }\n    }\n    if interval1_prime\
    \ && interval2_prime {\n        if interval1_start < interval2_start {\n     \
    \       interval1_prime = false;\n        }\n        if interval1_end > interval2_end\
    \ {\n            interval1_prime = false;\n        }\n        if interval2_start\
    \ < interval1_end {\n            interval2_prime = false;\n        }\n       \
    \ if interval2_end > interval1_end {\n            interval2_prime = false;\n \
    \       }\n    }\n    if interval1_prime && interval2_prime {\n        if interval1_start\
    \ < interval2_start {\n            interval1_prime = false;\n        }\n     \
    \   if interval1_end > interval2_end {\n            interval1_prime", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\".to_string();\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    if interval2_start < interval1_end {\n\
    \        intersection_length = interval2_end - interval2_start;\n    }\n    if\
    \ intersection_length == 1 {\n        return \"YES\".to_string();\n    }\n   \
    \ if intersection_length == 2 {\n        if interval1_start == interval1_end {\n\
    \            return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if intersection_length == 3 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     return \"NO\".to_string();\n    }\n    if intersection_length == 4 {\n \
    \       if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\".to_string();\n        }\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\".to_string();\n        }\n        return \"NO\"\
    .to_string();\n    }\n    if intersection_length == 5 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\".to_string();", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut interval_length\
    \ = interval1_end - interval1_start;\n    let mut interval2_length = interval2_end\
    \ - interval2_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval1_end;\n    let mut interval_length = interval1_end -\
    \ interval1_start;\n    let mut interval_start = interval1_start;\n    let mut\
    \ interval_end = interval", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval2_start;\n\
    \        interval2_start = interval2_end;\n        interval2_end = intersection_start;\n\
    \        intersection_start = intersection_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = intersection_start;\n        intersection_start = intersection_end;\n    }\n\
    \    if intersection_start > intersection_end {\n        intersection_start =\
    \ intersection_end;\n    }\n    if intersection_start == intersection_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    if interval1_start <=\
    \ intersection_start && interval1_end >= intersection_end {\n        return \"\
    YES\";\n    }\n    if interval2_start <= intersection_start && interval2_end >=\
    \ intersection_end {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n      \
    \  return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut length = 0;\n    while interval[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval[0] == interval2[0] {\n\
    \            length += 1;\n        }\n        interval[0] = interval[0] + 1;\n\
    \        interval2[0] = interval2[0] + 1;\n    }\n    if interval[0] > interval1[1]\
    \ {\n        interval[0] = interval1[1];\n    }\n    if interval2[0] > interval2[1]\
    \ {\n        interval2[0] = interval2[1];\n    }\n    if length == 2 {\n     \
    \   if interval[0] == interval1[1] {\n            return \"YES\";\n        }\n\
    \        if interval2[0] == interval2[1] {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    if length == 1 {\n        if interval[0]\
    \ == interval1[1] {\n            return \"YES\";\n        }\n        if interval2[0]\
    \ == interval2[1] {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if length == 0 {\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_length = interval1_end\
    \ - interval1_start;\n    let mut interval1_length = interval2_end - interval2_start;\n\
    \    let mut interval2_length = interval1_end - interval1_start;\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_flag = true;\n    let mut\
    \ prime_number_flag2 = true;\n    let mut prime_number_flag3 = true;\n    let\
    \ mut prime_number_flag4 = true;\n    let mut prime_number_flag5 = true;\n   \
    \ let mut prime_number_flag6 = true;\n    let mut prime_number_flag7 = true;\n\
    \    let mut prime_number_flag8 = true;\n    let mut prime_number_flag9 = true;\n\
    \    let mut prime_number_flag10 = true;\n    let mut prime_number_flag11 = true;\n\
    \    let mut prime_number_flag12 = true;\n    let mut prime_number_flag13 = true;\n\
    \    let mut prime_number_flag14 = true;\n    let mut prime_number_flag15 = true;\n\
    \    let mut prime_number_flag16 = true;\n    let mut prime_number_flag17 = true;\n\
    \    let mut prime_number_flag18 = true;\n    let mut prime_number_flag19 = true;\n\
    \    let mut prime_number_flag20 = true;\n    let mut prime_number_flag21 = true;\n\
    \    let mut prime_number_flag22 = true;\n    let mut prime_number_flag23 = true;\n\
    \    let mut prime_number_flag24 = true;\n    let mut prime_number_flag25 = true;\n\
    \    let mut prime_number_flag26 = true;\n    let mut prime_number_flag27 = true;\n\
    \    let mut prime_number_flag28 = true;\n    let mut prime_number_flag29 = true;\n\
    \    let mut prime_number_flag30 = true;\n    let mut prime_number_flag31 = true;\n\
    \    let mut prime_number_flag32 = true;\n    let mut prime_number_flag33 = true;\n\
    \    let mut prime_number_flag34 = true;\n    let mut prime_number_flag35 = true;\n\
    \    let mut prime_number_flag36 = true;\n    let mut prime_number_flag37 = true;\n\
    \    let mut prime_number_flag38 = true;\n    let mut prime_number_flag39 = true;\n\
    \    let mut prime_number_flag40 = true;\n    let ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    while interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            interval1_start\
    \ += 1;\n        }\n        if interval2_start < interval2_end {\n           \
    \ interval2_start += 1;\n        }\n        intersection_length += 1;\n    }\n\
    \    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n    if intersection_length == 0 {\n        return \"NO\";\n    }\n   \
    \ if intersection_length == 1 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_start < interval2_start {\n      \
    \      return \"YES\";\n        }\n        if interval1_end > interval2_end {\n\
    \            return \"YES\";\n        }\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"YES\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"YES\";\n    }\n    if interval1_end > interval2_end {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval2_start;\n        interval2_start = interval2_end;\n        interval2_end\
    \ = intersection_start;\n        intersection_start = intersection_end;\n    }\n\
    \    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = intersection_start;\n        intersection_start = intersection_end;\n\
    \    }\n    if intersection_start > intersection_end {\n        intersection_start\
    \ = intersection_end;\n    }\n    if interval1_start > interval2_start {\n   \
    \     interval1_start = interval2_start;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < intersection_start {\n        interval1_end = intersection_start;\n\
    \    }\n    if interval2_end < intersection_end {\n        interval2_end = intersection_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"NO\";\n        }\n        return \"\
    YES\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n\
    \    }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval2_start {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    \n    while interval1.start < interval1.end && interval2.start\
    \ < interval2.end {\n        if interval1.start < interval2.start {\n        \
    \    interval.start = interval1.end;\n        } else {\n            interval.end\
    \ = interval2.end;\n        }\n        \n        interval1 = interval2;\n    \
    \    interval2 = interval;\n    }\n    \n    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        interval.start = interval1.end;\n\
    \    } else {\n        interval.end = interval2.end;\n    }\n    \n    if interval1.start\
    \ == interval1.end {\n        if interval2.start == interval2.end {\n        \
    \    return \"YES\";\n        } else {\n            return \"NO\";\n        }\n\
    \    } else {\n        return \"NO\";\n    }", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval1_start;\n    }\n    if interval2_start > interval2_end {\n      \
    \  interval2_start = interval2_end;\n        interval2_end = interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        intersection_start\
    \ = interval2_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            if interval1_start\
    \ < interval1_end {\n                return String::from(\"YES\");\n         \
    \   }\n            return String::from(\"NO\");\n        }\n        if interval2_start\
    \ < interval2_end {\n            return String::from(\"YES\");\n        }\n  \
    \      return String::from(\"NO\");\n    }\n    if interval2_start == interval2_end\
    \ {\n        if interval1_start < interval1_end {\n            return String::from(\"\
    NO\");\n        }\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ < interval1_end {\n        if interval2_start < interval2_end {\n          \
    \  return String::from(\"YES\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n    if interval1_start < interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end < interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        if interval2_start < interval2_end {\n            return\
    \ String::from(\"YES\");\n        }\n        return String::from(\"NO\");\n  \
    \  }\n    if interval2_start == interval2_end {\n        if interval1_start <\
    \ interval1_end {\n            return String::from(\"NO\");\n        }\n     \
    \   return String::from(\"YES\");\n    }\n    if interval1_start < interval1_end\
    \ {\n        if interval2_start < interval2_end {\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n\n \
    \   if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start == interval1_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start == interval1_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n\n    if interval1_end >\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_start ==\
    \ interval1_end {\n        return \"NO\";\n    }\n\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_start == interval1_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n  \
    \      return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n    \
    \    return \"NO\";\n    }\n\n    if interval1_end > interval2_end ", "    if\
    \ interval1.start <= interval1.end && interval2.start <= interval2.end {\n   \
    \     if interval1.start <= interval2.start && interval1.end >= interval2.end\
    \ {\n            if interval1.start < interval2.start {\n                return\
    \ String::from(\"NO\");\n            }\n            if interval1.end > interval2.end\
    \ {\n                return String::from(\"NO\");\n            }\n           \
    \ if interval1.start == interval2.start {\n                return String::from(\"\
    YES\");\n            }\n            if interval1.end == interval2.end {\n    \
    \            return String::from(\"YES\");\n            }\n        }\n       \
    \ if interval1.start <= interval2.end && interval1.end >= interval2.start {\n\
    \            if interval1.start < interval2.start {\n                return String::from(\"\
    NO\");\n            }\n            if interval1.end > interval2.end {\n      \
    \          return String::from(\"NO\");\n            }\n            if interval1.start\
    \ == interval2.start {\n                return String::from(\"YES\");\n      \
    \      }\n            if interval1.end == interval2.end {\n                return\
    \ String::from(\"YES\");\n            }\n        }\n        if interval1.start\
    \ <= interval2.start && interval1.end >= interval2.end {\n            if interval1.start\
    \ < interval2.start {\n                return String::from(\"NO\");\n        \
    \    }\n            if interval1.end > interval2.end {\n                return\
    \ String::from(\"NO\");\n            }\n            if interval1.start == interval2.start\
    \ {\n                return String::from(\"YES\");\n            }\n          \
    \  if interval1.end == interval2.end {\n                return String::from(\"\
    YES\");\n            }\n        }\n        if interval1.start <= interval2.end\
    \ && interval1.end >= interval2.start {\n            if interval1.start < interval2.start\
    \ {\n                return String::from(\"NO\");\n            }\n           \
    \ if interval1.end > interval2.end {\n                return String::from(\"NO\"\
    );\n            }\n            if interval1.start == interval2.start {\n     \
    \           return String::from(\"YES\");\n            }\n            if interval1.end\
    \ == interval2.end {\n                return String::from(\"YES\");\n        \
    \    }\n        }\n        if interval1.start <= interval2.end && interval1.end\
    \ >= interval2.end {\n            if interval1.start < interval2.start {\n   \
    \             return String::from(\"NO\");\n            }\n            if interval1.end\
    \ > interval2.end {\n                return String::from(\"NO\");\n          \
    \  }\n            if interval1.start == interval2.start {\n                return\
    \ String::from(\"YES\");\n            }\n            if interval1.end == interval2.end\
    \ {\n                return String::from(\"YES", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut interval\
    \ = interval1;\n    let mut interval2 = interval2;\n    let mut interval = interval1;\n",
  "    if interval1.start <= interval1.end && interval2.start <= interval2.end {\n\
    \        let mut interval = interval1;\n        let mut interval2 = interval2;\n\
    \        let mut interval_len = interval.end - interval.start + 1;\n        let\
    \ mut interval2_len = interval2.end - interval2.start + 1;\n        let mut prime\
    \ = true;\n        while interval_len > 0 && interval2_len > 0 {\n           \
    \ if interval_len % interval2_len == 0 {\n                interval_len -= interval2_len;\n\
    \                interval2_len = 0;\n            } else {\n                interval2_len\
    \ -= interval_len % interval2_len;\n                interval_len = 0;\n      \
    \      }\n            prime = false;\n        }\n        if interval_len > 0 {\n\
    \            prime = true;\n        }\n        if interval2_len > 0 {\n      \
    \      prime = false;\n        }\n        if prime {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n    let\
    \ mut interval2 = interval2;\n    let mut interval_length = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_length = interval2[1] - interval2[0] + 1;\n    while\
    \ interval_length < interval2_length {\n        if interval[0] >= interval2[0]\
    \ {\n            interval[0] += 1;\n            interval_length += 1;\n      \
    \  } else {\n            interval[1] += 1;\n            interval_length += 1;\n\
    \        }\n    }\n    if interval_length == interval2_length {\n        if interval[0]\
    \ < interval[1] {\n            return \"YES\";\n        } else {\n           \
    \ return \"NO\";\n        }\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_end == interval2_end {\n     \
    \   if interval1_start == interval2_start {\n            return \"YES\";\n   \
    \     }\n        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while intersection_start <\
    \ interval2_end {\n        if interval1_end == intersection_end {\n          \
    \  return \"YES\";\n        }\n        intersection_start = intersection_end +\
    \ 1;\n        intersection_end = intersection_start + 1;\n    }\n    return \"\
    NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n\n    if\
    \ interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"YES\";\n    }\n\n    return\
    \ \"NO\";"]
stop_tokens:
- "\n}"
