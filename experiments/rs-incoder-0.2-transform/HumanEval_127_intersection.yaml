name: HumanEval_127_intersection
language: rs
prompt: "/// You are given two intervals,\n/// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n/// The given intervals are closed\
  \ which means that the interval (start, end)\n/// includes both start and end.\n\
  /// For each given interval, it is assumed that its start is less or equal its end.\n\
  /// Your task is to determine whether the length of intersection of these two \n\
  /// intervals is a prime number.\n/// Example, the intersection of the intervals\
  \ (1, 3), (2, 4) is (2, 3)\n/// which its length is 1, which not a prime number.\n\
  /// If the length of the intersection is a prime number, return \"YES\",\n/// otherwise,\
  \ return \"NO\".\n/// If the two intervals don't intersect, return \"NO\".\n///\
  \ [input/output] samples:\n/// >>> intersection((1, 2), (2, 3))\n/// String::from(\"\
  NO\")\n/// >>> intersection((-1, 1), (0, 4))\n/// String::from(\"NO\")\n/// >>>\
  \ intersection((-3, -1), (-5, 5))\n/// String::from(\"YES\")\nfn intersection(interval1:\
  \ (isize, isize), interval2: (isize, isize)) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = intersection;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ["    let mut intervals = vec![];\n    intervals.push(interval1);\n \
    \   intervals.push(interval2);\n    let mut intersection = intervals.iter().filter(|&(start,\
    \ end)| *start < *end).collect::<Vec<_>>();\n    let mut prime = true;\n    for\
    \ &(start, end) in intersection {\n        if start >= end {\n            continue;\n\
    \        }\n        if prime {\n            if start % end != 0 {\n          \
    \      prime = false;\n            }\n        } else {\n            if end % start\
    \ != 0 {\n                prime = false;\n            }\n        }\n    }\n  \
    \  if prime {\n        return \"YES\".to_string();\n    } else {\n        return\
    \ \"NO\".to_string();\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval1_start = interval2_end;\n\
    \    }\n    if interval2_end < interval1_start {\n        interval2_end = interval1_start;\n\
    \        interval2_start = interval1_end;\n    }\n    if interval1_end >= interval2_end\
    \ {\n        intersection_end = interval2_end;\n        intersection_start = interval2_start;\n\
    \    }\n    if interval2_end >= interval1_end {\n        intersection_end = interval1_end;\n\
    \        intersection_start = interval1_start;\n    }\n    if interval1_end >\
    \ interval2_end {\n        intersection_end = interval1_end;\n        intersection_start\
    \ = interval2_start;\n    }\n    if interval2_end > interval1_end {\n        intersection_end\
    \ = interval2_end;\n        intersection_start = interval1_start;\n    }\n   \
    \ if interval1_start < interval2_start {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval2_start < interval1_start\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_start >= interval2_start {\n       \
    \ intersection_start = interval2_start;\n        intersection_end = interval1_end;\n\
    \    }\n    if interval2_start >= interval1_start {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_start > interval2_start {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if interval2_start > interval1_start\
    \ {\n        intersection_start = interval1_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_end {\n        intersection_end\
    \ = interval2_end;\n        intersection_start = interval1_start;\n    }\n   \
    \ if interval2_end < interval1_end {\n        intersection_end = interval1_end;\n\
    \        intersection_start = interval2_start;\n    }\n    if interval1_end >=\
    \ interval2_end {\n        intersection_end = interval2_end;\n        intersection_start\
    \ = interval1_start;\n    }\n    if interval2_end >= interval1_end {\n       \
    \ intersection_end = interval1_end;\n        intersection_start = interval2_start;\n\
    \    }\n    if interval1_end ", "    let mut interval_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    if interval_len\
    \ == 0 || interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == interval2_len {\n        let mut interval1_start = interval1[0];\n      \
    \  let mut interval1_end = interval1[1];\n        let mut interval2_start = interval2[0];\n\
    \        let mut interval2_end = interval2[1];\n        if interval1_start > interval2_end\
    \ {\n            interval1_end = interval2_end;\n        }\n        if interval1_end\
    \ < interval2_start {\n            interval1_start = interval2_start;\n      \
    \  }\n        if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval_len < interval2_len {\n        let mut interval1_start = interval1[0];\n\
    \        let mut interval1_end = interval1[1];\n        let mut interval2_start\
    \ = interval2[0];\n        let mut interval2_end = interval2[1];\n        if interval1_start\
    \ > interval2_end {\n            interval1_end = interval2_end;\n        }\n \
    \       if interval1_end < interval2_start {\n            interval1_start = interval2_start;\n\
    \        }\n        if interval1_start <= interval2_start && interval1_end >=\
    \ interval2_end {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;\n    }\n    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut interval1_length = interval2_end - interval2_start;\n    let mut\
    \ interval2_length = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    let mut prime_found = false;\n\
    \    loop {\n        if interval1_start > interval1_end {\n            interval1_prime\
    \ = false;\n            interval1_start = interval1_end;\n            interval1_end\
    \ = interval1_start + 1;\n        }\n        if interval2_start > interval2_end\
    \ {\n            interval2_prime = false;\n            interval2_start = interval2_end;\n\
    \            interval2_end = interval2_start + 1;\n        }\n        if intersection_start\
    \ > intersection_end {\n            intersection_prime = false;\n            intersection_start\
    \ = intersection_end;\n            intersection_end = intersection_start + 1;\n\
    \        }\n        if interval1_length == interval2_length {\n            intersection_length\
    \ = intersection_end - intersection_start;\n            interval1_length = interval1_end\
    \ - interval1_start;\n            interval2_length = interval2_end - interval2_start;\n\
    \            if interval1_length == intersection_length {\n                if\
    \ interval1_prime == interval2_prime {\n                    if interval1_prime\
    \ == true {\n                        prime_found = true;\n                   \
    \ }\n                }\n            }\n        }\n        intersection_start =\
    \ intersection_end;\n        intersection_end = intersection_start + 1;\n    \
    \    interval1_start = interval1_end;\n        interval1_end = interval1_start\
    \ + 1;\n        interval2_start = interval2_end;\n        interval2_end = interval2_start\
    \ + 1;\n        interval1_length = interval2_end - interval2_start;\n        interval2_length\
    \ = interval1_end - interval1_start;\n    }\n    if prime_found == true {\n  \
    \      if intersection_length == 1 {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_end\
    \ > interval2_start {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start < interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_start > interval2_start {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end >= interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       return \"YES\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"YES\";\n    }\n    if interval1_start <= interval2_start {\n    \
    \    return \"YES\";\n    }\n    if interval1_end >= interval2_end {\n       \
    \ return \"YES\";\n    }\n    if interval1_start < interval2_start {\n       \
    \ return \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_start <= interval2_start {\n        return\
    \ \"YES\";\n    }\n    if interval1_end >= interval2_end {\n        return \"\
    YES\";\n    }\n    if interval1_start < interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_end > interval2_end {\n        return \"YES\";\n  \
    \  }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_flag\
    \ = false;\n    \n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_len = interval1_len;\n        interval1_start\
    \ = interval2[0];\n        interval1_end = interval2[1];\n    }\n    \n    if\
    \ interval1_len == interval2_len {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n            interval1_end\
    \ = interval2_end;\n        } else {\n            interval2_start = interval1_start;\n\
    \            interval2_end = interval1_end;\n        }\n    }\n    \n    if interval1_len\
    \ == 1 {\n        prime_flag = true;\n    }\n    \n    if interval2_len == 1 {\n\
    \        prime_flag = true;\n    }\n    \n    if prime_flag {\n        if interval1_start\
    \ <= interval2_start {\n            intersection_len += 1;\n        } else {\n\
    \            intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n        }\n   \
    \ }\n    \n    if prime_flag {\n        if interval1_end >= interval2_end {\n\
    \            intersection_len += 1;\n        } else {\n            intersection_len\
    \ += 1;\n        }\n    }\n    \n    if prime_flag {\n        if interval1_end\
    \ >= interval2_end {\n            intersection_len += 1;\n        } else {\n \
    \           intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n        }\n   \
    \ }\n    \n    if prime_flag {\n        if interval1_end >= interval2_end {\n\
    \            intersection_len += 1;\n        } else {\n            intersection_len\
    \ += 1;\n        }\n    }\n    \n    if prime_flag {\n        if interval1_end\
    \ >= interval2_end {\n            intersection_len += 1;\n        } else {\n \
    \           intersection_len += 1;\n        }\n    }\n    \n    if prime_flag\
    \ {\n        if interval1_end >= interval2_end {\n            intersection_len\
    \ += 1;\n        } else {\n            intersection_len += 1;\n", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_end == interval2_end {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n\n    while interval1_length\
    \ >= interval2_length {\n        interval1_length -= interval2_length;\n     \
    \   intersection_length += 1;\n    }\n\n    while interval2_length >= interval1_length\
    \ {\n        interval2_length -= interval1_length;\n        intersection_length\
    \ += 1;\n    }\n\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n\n    if intersection_length\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\".to_string();\n        } else {\n            return \"NO\".to_string();\n\
    \        }\n    }\n\n    if intersection_length == 0 {\n        return \"NO\"\
    .to_string();\n    }\n\n    return \"NO\".to_string();", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval1_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start <\
    \ interval2_end {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_start == interval1_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start > interval2_end {\n        return\
    \ \"NO\";\n    }\n    if interval1_end < interval2_start {\n        return \"\
    NO\";\n    }\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n    if interval1_start == interval1_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n  \
    \  if interval1_start > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_end > interval2_start {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        return \"NO\";\n    }\n    if interval1_start >\
    \ interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_end ", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end <\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    \n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_start\
    \ = interval2_start;\n    }\n    \n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start += 1;\n        }\n        if interval1_end >\
    \ interval2_end {\n            interval1_end -= 1;\n        }\n        if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n            intersection_length\
    \ += 1;\n        }\n        interval2_start += 1;\n        interval2_end -= 1;\n\
    \    }\n    \n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        intersection_length += 1;\n    }\n    \n    if intersection_length\
    \ == 2 {\n        return \"YES\".to_string();\n    }\n    \n    if intersection_length\
    \ == 1 {\n        return \"NO\".to_string();\n    }\n    \n    if intersection_length\
    \ == 0 {\n        return \"NO\".to_string();\n    }\n    \n    return \"NO\".to_string();",
  "    let mut interval = interval1;\n    if interval1.0 > interval2.0 {\n       \
    \ interval = interval2;\n    }\n    let mut start = interval.0;\n    let mut end\
    \ = interval.1;\n    let mut intersect_len = 0;\n    let mut prime = true;\n \
    \   while start < end {\n        if start % end != 0 {\n            prime = false;\n\
    \            break;\n        }\n        intersect_len += 1;\n        start +=\
    \ 1;\n    }\n    if prime {\n        return String::from(\"YES\");\n    }\n  \
    \  return String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n\n \
    \   if interval1_start == interval1_end {\n        return String::from(\"NO\"\
    );\n    }\n\n    if interval1_start < interval2_end {\n        if interval1_end\
    \ % interval1_start == 0 {\n            return \"YES\";\n        }\n    }\n  \
    \  if interval1_start > interval2_end {\n        if interval1_end % interval1_start\
    \ == 0 {\n            return \"YES\";\n        }\n    }\n    if interval1_start\
    \ < interval2_start {\n        if interval1_end % interval1_start == 0 {\n   \
    \         return \"YES\";\n        }\n    }\n    if interval1_start > interval2_start\
    \ {\n        if interval1_end % interval1_start == 0 {\n            return \"\
    YES\";\n        }\n    }\n\n    return \"NO\";", "    let mut interval = interval1;\n\
    \    if interval1.0 > interval2.0 {\n        interval = interval2;\n    }\n  \
    \  let mut len = 0;\n    while interval.0 != interval.1 {\n        len += 1;\n\
    \        interval.0 += 1;\n    }\n    if len == 2 {\n        if interval1.0 <\
    \ interval2.0 {\n            if interval1.0 > interval2.0 {\n                return\
    \ String::from(\"NO\");\n            }\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if len % 2 ==\
    \ 0 {\n        return String::from(\"NO\");\n    }\n    if len % 3 == 0 {\n  \
    \      return String::from(\"YES\");\n    }\n    return String::from(\"NO\");",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        intersection_length = interval1_end - interval2_start;\n    }\n \
    \   if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 1 {\n        return \"YES\";\n    }\n    if intersection_length == 2 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if intersection_length == 5 {\n   \
    \     if interval1_start == interval2_start {\n            return \"YES\";\n \
    \       }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 6 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 7 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if intersection_length == 8 {\n   \
    \     if interval1_start == interval2_start {\n            return \"YES\";\n \
    \       }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n    }\n    if intersection_length == 9 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if intersection_length\
    \ == 10 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n            if interval1_start < interval2_start {\n   \
    \             interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval1_end && interval2_start\
    \ <= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    loop {\n        if interval1_end < interval2_start {\n            interval1_end\
    \ = interval1_end + 1;\n            interval2_start = interval2_start - 1;\n \
    \       } else {\n            interval1_start = interval1_start - 1;\n       \
    \     interval2_end = interval2_end + 1;\n        }\n        if interval1_start\
    \ < interval2_end {\n            intersection_length = intersection_length + 1;\n\
    \        }\n        if interval1_end == interval2_end {\n            break;\n\
    \        }\n    }\n    if intersection_length == 2 {\n        return \"YES\";\n\
    \    } else {\n        return \"NO\";\n    }", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut interval = interval1;\n\
    \        let mut interval2 = interval2;\n        let mut i = 0;\n        let mut\
    \ j = 0;\n        let mut k = 0;\n        while i < interval.end && j < interval2.end\
    \ {\n            if interval.start < interval2.start {\n                i += 1;\n\
    \            } else if interval.end > interval2.end {\n                j += 1;\n\
    \            } else {\n                if interval.start <= interval2.start {\n\
    \                    i += 1;\n                } else {\n                    j\
    \ += 1;\n                }\n            }\n        }\n        if i == interval.end\
    \ {\n            if j == interval2.end {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        if j == interval2.end {\n            return String::from(\"NO\");\n \
    \       }\n        if interval.start == interval2.start {\n            return\
    \ String::from(\"YES\");\n        }\n        if interval.end == interval2.end\
    \ {\n            return String::from(\"NO\");\n        }\n        if interval.start\
    \ > interval2.start {\n            interval = interval2;\n        } else {\n \
    \           interval2 = interval;\n        }\n        let mut i = 0;\n       \
    \ let mut j = 0;\n        let mut k = 0;\n        while i < interval.end && j\
    \ < interval2.end {\n            if interval.start < interval2.start {\n     \
    \           i += 1;\n            } else if interval.end > interval2.end {\n  \
    \              j += 1;\n            } else {\n                if interval.start\
    \ <= interval2.start {\n                    i += 1;\n                } else {\n\
    \                    j += 1;\n                }\n            }\n        }\n  \
    \      if i == interval.end {\n            if j == interval2.end {\n         \
    \       return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        if j == interval2.end {\n            return String::from(\"\
    NO\");\n        }\n        if interval.start == interval2.start {\n          \
    \  return String::from(\"YES\");\n        }\n        if interval.end == interval2.end\
    \ {\n            return String::from(\"NO\");\n        }\n        if interval.start\
    \ > interval2.start {\n            interval = interval2;\n        } else {\n \
    \           interval2 = interval;\n        }\n        let mut i = 0;\n       \
    \ let mut j = 0;\n        let mut k = 0;\n        while i < interval.end && j\
    \ < interval2.end {\n            if interval.start < interval2.start {\n     \
    \           i += 1;\n            } else if interval.end > interval2.end {\n  \
    \              j += 1;\n            } else {\n                if interval.start\
    \ <= interval2.start {\n                    i += 1;\n                } else {\n\
    \                    j += 1;", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       let mut interval1_length = interval1_end - interval1_start;\n        let\
    \ mut interval2_length = interval2_end - interval2_start;\n\n        if interval1_length\
    \ < interval2_length {\n            interval1_length = interval2_length;\n   \
    \     }\n\n        if interval1_length == 1 {\n            return \"YES\";\n \
    \       }\n\n        if interval1_length == 2 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 3 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 4 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 5 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 6 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 7 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 8 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 9 {\n            return \"YES\";\n\
    \        }\n\n        if interval1_length == 10 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 11 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 12 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 13 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 14 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 15 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 16 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 17 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 18 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 19 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 20 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 21 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 22 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 100 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 200 {\n            return \"YES\"\
    ;\n        }\n\n        if interval1_length == 300 {\n            return \"",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    let mut len = 0;\n    while interval[0] < interval[1] {\n\
    \        interval[0] = interval[0] + 1;\n        interval[1] = interval[1] - 1;\n\
    \        len += 1;\n    }\n    if len % 2 == 0 {\n        return \"NO\";\n   \
    \ }\n    let mut prime = true;\n    for i in 2..len {\n        if interval[0]\
    \ % i == 0 || interval[1] % i == 0 {\n            prime = false;\n           \
    \ break;\n        }\n    }\n    if prime {\n        return \"YES\";\n    }\n \
    \   return \"NO\";", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval.0 = interval1[0]\
    \ < interval2[0] ? interval1[0] : interval2[0];\n        interval.1 = interval1[1]\
    \ > interval2[1] ? interval1[1] : interval2[1];\n        interval\n    } else\
    \ {\n        let mut interval = interval2;\n        interval.0 = interval1[0]\
    \ < interval2[0] ? interval1[0] : interval2[0];\n        interval.1 = interval1[1]\
    \ > interval2[1] ? interval1[1] : interval2[1];\n        interval\n    }", " \
    \   if interval1.start < interval1.end && interval2.start < interval2.end {\n\
    \        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut interval = interval;\n        interval.", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_is_prime\
    \ = true;\n    let mut interval2_is_prime = true;\n    while interval1_is_prime\
    \ && interval2_is_prime {\n        if interval1_start < interval2_start {\n  \
    \          intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length = interval1_end - interval1_start;\n\
    \            interval1_is_prime = false;\n        } else {\n            intersection_start\
    \ = interval2_start;\n            intersection_end = interval2_end;\n        \
    \    intersection_length = interval2_end - interval2_start;\n            interval2_is_prime\
    \ = false;\n        }\n    }\n    if interval1_is_prime && interval2_is_prime\
    \ {\n        if intersection_length == 1 {\n            return \"YES\";\n    \
    \    } else {\n            return \"NO\";\n        }\n    }\n    if intersection_length\
    \ == 1 {\n        return \"NO\";\n    } else {\n        return \"YES\";\n    }",
  "    let mut interval_len = interval1[1] - interval1[0] + 1;\n    let mut interval_len_2\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = 0;\n    if\
    \ interval_len > interval_len_2 {\n        interval_len = interval_len_2;\n  \
    \  }\n    if interval_len == 0 {\n        return \"NO\";\n    }\n    if interval_len\
    \ == interval_len_2 {\n        intersection_len = interval_len;\n    } else {\n\
    \        intersection_len = interval_len / 2;\n    }\n    if interval1[0] < interval2[0]\
    \ {\n        let mut interval_start = interval1[0];\n        let mut interval_end\
    \ = interval1[1];\n        let mut interval_end_2 = interval2[1];\n        while\
    \ interval_start < interval_end_2 {\n            if interval_end > interval_end_2\
    \ {\n                interval_end = interval_end_2;\n            }\n         \
    \   if interval_end == interval_end_2 {\n                interval_end += 1;\n\
    \            }\n            if interval_end == interval_start_2 {\n          \
    \      interval_end += 1;\n            }\n            interval_end_2 -= 1;\n \
    \           interval_start += 1;\n        }\n    } else {\n        let mut interval_start\
    \ = interval1[1];\n        let mut interval_end = interval1[0];\n        let mut\
    \ interval_end_2 = interval2[0];\n        while interval_start < interval_end_2\
    \ {\n            if interval_end > interval_end_2 {\n                interval_end\
    \ = interval_end_2;\n            }\n            if interval_end == interval_end_2\
    \ {\n                interval_end += 1;\n            }\n            if interval_end\
    \ == interval_start_2 {\n                interval_end += 1;\n            }\n \
    \           interval_end_2 -= 1;\n            interval_start += 1;\n        }\n\
    \    }\n    if interval_start == interval_end {\n        return \"NO\";\n    }\n\
    \    if interval_start == interval_end_2 {\n        return \"NO\";\n    }\n  \
    \  if interval_start == interval_end_2 + 1 {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval_end_2 - 1 {\n        return \"YES\";\n    }\n\
    \    if interval_start == interval_end_2 + interval_len {\n        return \"YES\"\
    ;\n    }\n    if interval_start == interval_end_2 - interval_len {\n        return\
    \ \"YES\";\n    }\n    if interval_start == interval_end_2 + interval_len {\n\
    \        return \"YES\";\n    }\n    if interval_start == interval_end_2 - interval_len\
    \ {\n        return \"YES\";\n    }\n    if interval_start == interval_end_2 +\
    \ interval_len + 1 {\n        return \"YES\";\n    }\n    if interval_start ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    let mut interval1_length = interval1_end - interval1_start;\n   \
    \ let mut interval2_length = interval2_end - interval2_start;\n\n    if interval1_length\
    \ == interval2_length {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ < interval2_length {\n        interval1_length = interval2_length;\n    }\n\n\
    \    if interval1_length == 1 {\n        return \"NO\";\n    }\n\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n\n    if interval1_length == 3 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 4 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 5 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 6 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 7 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 8 {\n        return \"YES\";\n    }\n\n    if interval1_length == 9 {\n \
    \       return \"YES\";\n    }\n\n    if interval1_length == 10 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 11 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 12 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 13 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 14 {\n        return \"YES\";\n    }\n\n    if interval1_length == 15 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 16 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 17 {\n        return \"YES\";\n\
    \    }\n\n    if interval1_length == 18 {\n        return \"YES\";\n    }\n\n\
    \    if interval1_length == 19 {\n        return \"YES\";\n    }\n\n    if interval1_length\
    \ == 20 {\n        return \"YES\";\n    }\n\n    if interval1_length == 21 {\n\
    \        return \"YES\";\n    }\n\n    if interval1_length == 22 {\n        return\
    \ \"YES\";\n    }\n\n    if interval1_length == 100 {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_length == ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n\n    if interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end > interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ < interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start {\n\
    \            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end >= interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_start\
    \ <= interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end >= interval2_end {\n \
    \           interval1_end, interval2_end = interval2_end, interval1_end;\n   \
    \     }\n    }\n\n    if interval1_start > interval1_end {\n        interval1_start,\
    \ interval1_end = interval1_end, interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_end < interval2_end {\n    \
    \        interval1_end, interval2_end = interval2_end, interval1_end;\n      \
    \  }\n        if interval1_start <= interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ >= interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start {\n\
    \            interval1_start, interval2_start = interval", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval = interval.iter().cloned().collect::<Vec<_>>();\n\
    \        let mut prime = true;\n        for &i in interval {\n            if i\
    \ % 2 == 0 {\n                prime = false;\n                break;\n       \
    \     }\n        }\n        if prime {\n            return \"YES\";\n        }\n\
    \    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    let mut intersection_length\
    \ = interval1_end - interval1_start;\n    let mut interval1_length = interval2_end\
    \ - interval2_start;\n    let mut interval2_length = interval1_end - interval1_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  let mut prime = true;\n    while prime_checker(intersection_start, intersection_end)\
    \ && prime_checker(interval1_start, interval1_end) && prime_checker(interval2_start,\
    \ interval2_end) {\n        if intersection_start > interval1_end {\n        \
    \    intersection_start = intersection_end;\n            intersection_end = interval1_end;\n\
    \            intersection_length = interval1_end - intersection_start;\n     \
    \       interval1_length = interval2_end - intersection_start;\n            prime\
    \ = false;\n        }\n        if intersection_end < interval1_start {\n     \
    \       intersection_start = intersection_end;\n            intersection_end =\
    \ interval1_start;\n            intersection_length = interval1_end - intersection_start;\n\
    \            interval1_length = interval2_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_end > interval2_end {\n\
    \            intersection_start = intersection_end;\n            intersection_end\
    \ = interval2_end;\n            intersection_length = interval2_end - intersection_start;\n\
    \            interval2_length = interval1_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_start < interval2_start\
    \ {\n            intersection_start = intersection_end;\n            intersection_end\
    \ = interval2_start;\n            intersection_length = interval2_end - intersection_start;\n\
    \            interval2_length = interval1_end - intersection_start;\n        \
    \    prime = false;\n        }\n        if intersection_length == 0 {\n      \
    \      prime = false;\n        }\n        if interval1_length == 0 {\n       \
    \     prime = false;\n        }\n        if interval2_length == 0 {\n        \
    \    prime = false;\n        }\n        if intersection_length == interval1_length\
    \ && intersection_length == interval2_length {\n            prime = true;\n  \
    \      }\n        if intersection_length == interval1_length {\n            interval1_prime\
    \ = false;\n        }\n        if intersection_length == interval2_length {\n\
    \            interval2_prime = false;\n        }\n    }\n    if prime_checker(intersection_start,\
    \ intersection_end) {\n        if interval1_prime && interval2_prime {\n     \
    \       return String::from(\"YES\");\n        }\n        if interval1_prime {\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_start;\n        interval2_end = interval1_end;\n    }\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start == interval2_start {\n   \
    \     if interval1_end == interval2_end {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        if interval1_length\
    \ == 1 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n        interval2_length = interval1_length;\n    }\n\n\
    \    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end ",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_start ==\
    \ interval2_start {\n        if interval1_end == interval2_end {\n           \
    \ return \"YES\";\n        } else {\n            return \"NO\";\n        }\n \
    \   }\n    let mut interval1_length = interval1_end - interval1_start + 1;\n \
    \   let mut interval2_length = interval2_end - interval2_start + 1;\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start < interval2_start {\n    \
    \        interval1_length = interval2_start - interval1_start + 1;\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_length = interval2_end\
    \ - interval1_start + 1;\n        }\n    }\n    if interval1_length == 1 {\n \
    \       return \"NO\";\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end < interval2_end\
    \ {\n            interval1_length = interval2_end - interval1_start + 1;\n   \
    \     }\n    }\n    if interval1_length == 5 {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        if interval1_end\
    \ < interval2_end {\n            interval1_length = interval2_end - interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n   \
    \ if interval1_end == interval2_end {\n        return \"YES\";\n    }\n    let\
    \ mut interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == 2 {\n        return \"YES\";\n    }\n    if interval1_length == 3 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 4 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 5 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 6 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 7 {\n        return \"YES\";\n    }\n    if interval1_length == 8 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 9 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 10 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 11 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 12 {\n        return \"YES\";\n    }\n    if interval1_length == 13 {\n \
    \       return \"YES\";\n    }\n    if interval1_length == 14 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 15 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 16 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 17 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 18 {\n        return \"YES\";\n    }\n    if interval1_length == 19 {\n \
    \       return \"YES\";\n    }\n    if interval1_length == 20 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 21 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 22 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 100 {\n        return \"YES", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            return String::from(\"NO\");\n        }\n        if interval1[1]\
    \ > interval2[1] {\n            return String::from(\"NO\");\n        }\n    \
    \    let mut interval = interval1;\n        let mut interval2 = interval2;\n \
    \       let mut len = 0;\n        while interval[0] < interval[1] {\n        \
    \    if interval[0] == interval2[0] {\n                len += 1;\n           \
    \     interval[0] = interval1[1];\n                interval[1] = interval2[1];\n\
    \            } else {\n                len += 1;\n                interval[0]\
    \ = interval[0];\n                interval[1] = interval2[0];\n            }\n\
    \        }\n        if len % 2 == 0 {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n\n    if interval1_start > interval1_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval2_start > interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_start == interval1_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval2_start == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n     \
    \   return \"NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"\
    NO\";\n    }\n\n    if interval1_end < interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_end < interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"NO\";\n    }\n\n    if interval1_end ",
  "    let mut interval = interval1;\n    let mut interval2 = interval2;\n    let\
    \ mut intersection = interval1;\n    let mut intersection2 = interval2;\n    let\
    \ mut intersection_length = interval1.0;\n    let mut intersection_length2 = interval2.0;\n\
    \    let mut interval_length = interval1.0;\n    let mut interval_length2 = interval2.0;\n\
    \    let mut prime = true;\n    while prime == true {\n        if interval_length\
    \ == interval_length2 {\n            prime = false;\n        }\n        else {\n\
    \            intersection_length += interval_length;\n            intersection_length2\
    \ += interval_length2;\n            intersection = intersection.0;\n         \
    \   intersection2 = intersection2.0;\n            interval_length = interval1.0;\n\
    \            interval_length2 = interval2.0;\n        }\n        if intersection_length\
    \ == intersection_length2 {\n            prime = false;\n        }\n        else\
    \ {\n            intersection_length += interval_length;\n            intersection_length2\
    \ += interval_length2;\n            intersection = intersection.0;\n         \
    \   intersection2 = intersection2.0;\n            interval_length = interval1.0;\n\
    \            interval_length2 = interval2.0;\n        }\n    }\n    if prime ==\
    \ true {\n        String::from(\"YES\")\n    }\n    else {\n        String::from(\"\
    NO\")\n    }", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        if interval1[0] < interval2[0] {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    } else {\n        return String::from(\"NO\");\n    }", "    let mut interval_len\
    \ = interval1[1] - interval1[0] + 1;\n    let mut interval2_len = interval2[1]\
    \ - interval2[0] + 1;\n    if interval_len > interval2_len {\n        interval_len\
    \ = interval2_len;\n    }\n    let mut interval_start = interval1[0];\n    let\
    \ mut interval_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval_end > interval2_end\
    \ {\n        interval_end = interval2_end;\n    }\n    if interval_start < interval2_start\
    \ {\n        interval_start = interval2_start;\n    }\n    if interval_start ==\
    \ interval_end {\n        return \"NO\";\n    }\n    if interval_start > interval_end\
    \ {\n        return \"NO\";\n    }\n    if interval_len == 1 {\n        return\
    \ \"YES\";\n    }\n    if interval_len == 2 {\n        if interval_start == interval_end\
    \ {\n            return \"YES\";\n        }\n        if interval_start < interval_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval_len % 2 ==\
    \ 0 {\n        if interval_start == interval_end {\n            return \"YES\"\
    ;\n        }\n        if interval_start < interval_end {\n            return \"\
    YES\";\n        }\n    }\n    let mut interval_mid = (interval_start + interval_end)\
    \ / 2;\n    let mut interval2_mid = (interval2_start + interval2_end) / 2;\n \
    \   if interval_start == interval_end {\n        return \"NO\";\n    }\n    if\
    \ interval2_start == interval2_end {\n        return \"NO\";\n    }\n    if interval_start\
    \ < interval_end {\n        if interval_mid == interval2_mid {\n            return\
    \ \"YES\";\n        }\n        if interval_mid < interval2_mid {\n           \
    \ return \"YES\";\n        }\n    }\n    if interval_start > interval_end {\n\
    \        if interval_mid == interval2_mid {\n            return \"YES\";\n   \
    \     }\n        if interval_mid > interval2_mid {\n            return \"YES\"\
    ;\n        }\n    }\n    if interval_start < interval2_start {\n        if interval_mid\
    \ == interval2_mid {\n            return \"YES\";\n        }\n        if interval_mid\
    \ < interval2_mid {\n            return \"YES\";\n        }\n    }\n    if interval_start\
    \ > interval2_end {\n        if interval_mid == interval2_mid {\n            return\
    \ \"YES\";\n        }\n        if interval_mid > interval2_mid {\n           \
    \ return \"YES\";\n        }\n    }\n    if interval_start == interval2_start\
    \ {\n        if interval_mid == interval2_", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n\
    \            String::from(\"NO\")\n        } else {\n            String::from(\"\
    YES\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[0];\n        interval_length(interval)\n    }\
    \ else if interval1[0] < interval1[1] && interval2[0] > interval2[1] {\n     \
    \   let mut interval = interval1;\n        interval[0] = interval1[0];\n     \
    \   interval[1] = interval2[1];\n        interval_length(interval)\n    } else\
    \ if interval1[0] > interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval2;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[1];\n        interval_length(interval)\n    } else {\n        let\
    \ mut interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval1[1];\n        interval_length(interval)\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n        interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n        interval2_start, interval2_end =\
    \ interval1_start, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n            interval2_start,\
    \ interval2_end = interval1_start, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \            interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \        }\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n        interval2_start, interval2_end\
    \ = interval1_start, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \        interval2_start, interval2_end = interval1_start, interval1_end;\n  \
    \  }\n    if interval1_start <= interval2_start {\n        if interval1_end <\
    \ interval2_end {\n            interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n            interval2_start, interval2_end = interval1_start,\
    \ interval1_end;\n        }\n        if interval1_end == interval2_end {\n   \
    \         if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        if interval1_end > interval2_end {\n            interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n            interval2_start, interval2_end\
    \ = interval1_start, interval1_end;\n        }\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n        interval2_start, interval2_end = interval1_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start +\
    \ 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n  \
    \  let mut intersection_length = interval1_length + interval2_length - 1;\n  \
    \  if interval1_length == interval2_length {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length = interval1_length + 1;\n        } else {\n\
    \            intersection_length = interval2_length + 1;\n        }\n    }\n \
    \   if intersection_length == 2 {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length += 1;\n        } else {\n            intersection_length\
    \ += 1;\n        }\n    }\n    if intersection_length == 1 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if intersection_length == 0 {\n        return \"NO\";\n\
    \    }\n    if intersection_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_length == 1 {\n        if interval1_start < interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if intersection_length == 0 {\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 3 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start < interval2_start {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if intersection_length ==\
    \ 1 {\n        if interval1_start < interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if intersection_length == 0 {\n\
    \        return \"NO\";\n    }\n    if intersection_length == 4 {\n        if\
    \ interval1_start == interval2_start {\n            return \"YES\";\n        }\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"YES\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n \
    \   let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length > interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 1 {\n        return \"YES\";\n    }\n\n \
    \   if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 4 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 5 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n\
    \    if interval1_length == 6 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_start\
    \ {", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    if interval1[0] >= interval1[1] || interval2[0]\
    \ >= interval2[1] {\n        return \"NO\";\n    }\n    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    let mut prime = true;\n    loop {\n \
    \       if interval[0] >= interval[1] {\n            interval = interval2;\n \
    \           interval2 = interval1;\n            prime = false;\n        }\n  \
    \      if prime {\n            if interval[0] < interval[1] {\n              \
    \  interval[0] = interval[0] + 1;\n            } else {\n                interval[1]\
    \ = interval[1] - 1;\n            }\n        } else {\n            if interval[0]\
    \ < interval[1] {\n                interval[0] = interval[0] + 1;\n          \
    \  } else {\n                interval[1] = interval[1] - 1;\n            }\n \
    \       }\n        if interval[0] >= interval[1] {\n            break;\n     \
    \   }\n    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start == interval2_start\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval1_start < interval2_start\
    \ {\n        return String::from(\"YES\");\n    }\n    if interval1_end == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    let mut intersection_length = interval1_length +\
    \ interval2_length;\n    if intersection_length == 2 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 1 {\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == ", "    let mut interval = interval1;\n\
    \    let mut interval2 = interval2;\n    \n    if interval1.0 > interval2.0 {\n\
    \        interval = interval2;\n        interval2 = interval1;\n    }\n    \n\
    \    if interval1.1 == interval2.1 {\n        return String::from(\"NO\");\n \
    \   }\n    \n    if interval1.1 > interval2.1 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.2 > interval2.2\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.3 == interval2.3 {\n        return String::from(\"NO\");\n\
    \    }\n    \n    if interval1.3 > interval2.3 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.4 > interval2.4\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.5 > interval2.5 {\n        interval = interval1;\n     \
    \   interval1 = interval2;\n    }\n    \n    if interval1.6 > interval2.6 {\n\
    \        interval = interval1;\n        interval1 = interval2;\n    }\n    \n\
    \    if interval1.7 > interval2.7 {\n        interval = interval1;\n        interval1\
    \ = interval2;\n    }\n    \n    if interval1.8 > interval2.8 {\n        interval\
    \ = interval1;\n        interval1 = interval2;\n    }\n    \n    if interval1.9\
    \ > interval2.9 {\n        interval = interval1;\n        interval1 = interval2;\n\
    \    }\n    \n    if interval1.10 > interval2.10 {\n        interval = interval1;\n\
    \        interval1 = interval2;\n    }\n    \n    if interval1.11 > interval2.11\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.12 > interval2.12 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.13 > interval2.13\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.14 > interval2.14 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.15 > interval2.15\
    \ {\n        interval = interval1;\n        interval1 = interval2;\n    }\n  \
    \  \n    if interval1.16 > interval2.16 {\n        interval = interval1;\n   \
    \     interval1 = interval2;\n    }\n    \n    if interval1.17 > interval2.17\
    \ {\n        interval = interval1;\n        interval1 = interval", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    if interval1_length > interval2_length {\n     \
    \   interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start < interval2_end {\n            interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_start {\n            interval1_end, interval2_start = interval2_start,\
    \ interval1_end;\n        }\n        if interval1_start == interval1_end {\n \
    \           if interval2_start == interval2_end {\n                return \"YES\"\
    .to_string();\n            } else {\n                return \"NO\".to_string();\n\
    \            }\n        }\n    }\n    if interval1_length < interval2_length {\n\
    \        interval1_length, interval2_length = interval2_length, interval1_length;\n\
    \    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start < interval2_end {\n            interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_", "    if interval1.start > interval2.start {\n        let (start,\
    \ end) = interval1;\n        intersection(interval2, (start, end - 1))\n    }\
    \ else if interval1.end < interval2.end {\n        let (start, end) = interval1;\n\
    \        intersection((start, end - 1), interval2)\n    } else {\n        let\
    \ (start, end) = interval1;\n        let (end1, end2) = interval2;\n        if\
    \ start < end1 {\n            if end < end2 {\n                return \"NO\";\n\
    \            }\n            return \"YES\";\n        }\n        if start > end2\
    \ {\n            return \"NO\";\n        }\n        return \"YES\";\n    }", " \
    \   if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        let\
    \ mut interval = interval1;\n        interval[0] = interval1[0];\n        interval[1]\
    \ = interval2[0];\n        interval\n    } else {\n        let mut interval =\
    \ interval2;\n        interval[0] = interval2[0];\n        interval[1] = interval1[1];\n\
    \        interval\n    }\n    let mut prime = true;\n    for i in interval {\n\
    \        if i % 2 == 0 {\n            prime = false;\n            break;\n   \
    \     }\n    }\n    if prime {\n        \"YES\"\n    } else {\n        \"NO\"\n\
    \    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    let mut interval1_length\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_length = interval2_end\
    \ - interval2_start + 1;\n    let mut intersection_length = interval1_length +\
    \ interval2_length;\n    if interval1_length == interval2_length {\n        if\
    \ interval1_start == interval2_start {\n            return String::from(\"YES\"\
    );\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ < interval2_length {\n        intersection_length = interval1_length;\n    }\
    \ else {\n        intersection_length = interval2_length;\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ String::from(\"YES\");\n        }\n        return String::from(\"NO\");\n  \
    \  }\n    if intersection_length == 1 {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 2 {\n        if interval1_start ==\
    \ interval2_start {\n            return String::from(\"YES\");\n        }\n  \
    \      return String::from(\"NO\");\n    }\n    if intersection_length == 1 {\n\
    \        if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if intersection_length\
    \ == 0 {\n        return String::from(\"NO\");\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start == interval2_start {\n            return\
    \ String::from(\"YES\");\n        }\n        return String::from(\"NO\");\n  \
    \  }\n    if intersection_length == 1 {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if intersection_length == 0 {\n        return ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if interval1_end == interval2_end {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n    if interval1_end\
    \ < interval2_end {\n        let mut interval1_length = interval1_end - interval1_start;\n\
    \        let mut interval2_length = interval2_end - interval2_start;\n       \
    \ if interval1_length == interval2_length {\n            if interval1_length ==\
    \ 2 {\n                return \"YES\";\n            } else {\n               \
    \ return \"NO\";\n            }\n        }\n        if interval1_length < interval2_length\
    \ {\n            let mut interval1_length = interval1_end - interval1_start;\n\
    \            let mut interval2_length = interval2_end - interval2_start;\n   \
    \         if interval1_length == interval2_length {\n                return \"\
    YES\";\n            } else {\n                return \"NO\";\n            }\n\
    \        }\n    }\n    if interval1_end > interval2_end {\n        let mut interval1_length\
    \ = interval1_end - interval1_start;\n        let mut interval2_length = interval2_end\
    \ - interval2_start;\n        if interval1_length == interval2_length {\n    \
    \        if interval1_length == 2 {\n                return \"YES\";\n       \
    \     } else {\n                return \"NO\";\n            }\n        }\n   \
    \     if interval1_length < interval2_length {\n            let mut interval1_length\
    \ = interval1_end - interval1_start;\n            let mut interval2_length = interval2_end\
    \ - interval2_start;\n            if interval1_length == interval2_length {\n\
    \                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        }\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        let mut interval1_len = interval1_end\
    \ - interval1_start + 1;\n        let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n        let mut i = 0;\n        while i < interval1_len && i < interval2_len\
    \ {\n            if interval1_start == interval2_start {\n                if interval1_end\
    \ == interval2_end {\n                    return String::from(\"YES\");\n    \
    \            }\n                return String::from(\"NO\");\n            }\n\
    \            if interval1_start < interval2_start {\n                interval1_start\
    \ += 1;\n            } else {\n                interval2_start += 1;\n       \
    \     }\n            i += 1;\n        }\n        if interval1_len > interval2_len\
    \ {\n            interval1_len = interval2_len;\n        }\n        if interval1_len\
    \ == interval2_len {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n    }\n    return String::from(\"NO\");",
  "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n       \
    \ return \"NO\";\n    }\n    let mut interval1_len = interval1[1] - interval1[0]\
    \ + 1;\n    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    let\
    \ mut intersection_len = 0;\n    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_len += 1;\n            interval1_start += 1;\n    \
    \    } else {\n            interval2_len += 1;\n            interval2_start +=\
    \ 1;\n        }\n        intersection_len += 1;\n    }\n    if interval1_start\
    \ > interval1_end {\n        interval1_len -= 1;\n        interval1_end += 1;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_len -= 1;\n\
    \        interval2_end += 1;\n    }\n    if interval1_len == 0 || interval2_len\
    \ == 0 {\n        return \"NO\";\n    }\n    if intersection_len == 0 {\n    \
    \    return \"NO\";\n    }\n    if interval1_len == interval2_len {\n        return\
    \ \"YES\";\n    }\n    if interval1_len > interval2_len {\n        return \"NO\"\
    ;\n    }\n    if interval1_len < interval2_len {\n        return \"YES\";\n  \
    \  }\n    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n\
    \    let mut prime_len = interval1_len + interval2_len - 1;\n    while prime_len\
    \ > 0 {\n        if interval1_prime == true && interval2_prime == true {\n   \
    \         if interval1_len % prime_len == 0 && interval2_len % prime_len == 0\
    \ {\n                return \"YES\";\n            }\n        }\n        if interval1_prime\
    \ == true {\n            interval1_prime &= interval1_len % prime_len == 0;\n\
    \            interval1_len -= 1;\n        }\n        if interval2_prime == true\
    \ {\n            interval2_prime &= interval2_len % prime_len == 0;\n        \
    \    interval2_len -= 1;\n        }\n        prime_len -= 1;\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"NO\"\
    ;\n        }\n        return \"YES\";\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length > interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 && interval2_length == 3 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        if interval1_end == interval2_end {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_length == 3\
    \ && interval2_length == 2 {\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 3 && interval2_length == 1 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 && interval2_length == 0 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 3 && interval2_length\
    \ == -1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 3 && interval2_length == -2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_length == 3 && interval2_length == -3 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_length == 3 && interval2_length == -4 {\n \
    \       if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 3 && interval2_length\
    \ == -5 {\n        if interval1_start ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2_start;\n    }\n\n    if interval1_start <=\
    \ interval1_end && interval2_start <= interval2_end {\n        let mut intersection_length\
    \ = interval1_end - interval1_start;\n        if interval1_start <= interval2_start\
    \ {\n            intersection_length += interval2_end - interval2_start;\n   \
    \     }\n        if intersection_length == 2 {\n            return \"YES\".to_string();\n\
    \        }\n        if intersection_length == 1 {\n            return \"NO\".to_string();\n\
    \        }\n        if intersection_length == 0 {\n            return \"NO\".to_string();\n\
    \        }\n    }\n    \"NO\".to_string()", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ interval1_len = interval1[1] - interval1[0] + 1;\n    let mut interval2_len\
    \ = interval2[1] - interval2[0] + 1;\n    let mut intersection_len = interval1_len\
    \ + interval2_len;\n    let mut prime = true;\n    let mut prime_len = prime_len\
    \ = interval1_len + interval2_len;\n    let mut prime_start = interval1[0];\n\
    \    let mut prime_end = interval1[1];\n    let mut prime_len = prime_len = interval1_len\
    \ + interval2_len;\n    let mut prime_start = interval1[0];\n    let mut prime_end\
    \ = interval1[1];\n    let mut prime_len = prime_len = interval1_len + interval2_len;\n\
    \    let mut prime_start = interval1[0];\n    let mut prime_end = interval1[1];\n\
    \    let mut prime_len = prime_len = interval1_len + interval2_len;\n    let mut\
    \ prime_start = interval1[0];\n    let mut prime_end = interval1[1];\n    let\
    \ mut prime_len = prime_len = interval1_len + interval2_len;\n    let mut prime_start\
    \ = interval1[0];\n    let mut prime_end = interval1[1];\n    let mut prime_len\
    \ = prime_len = interval1_len + interval2_len;\n    let mut prime_start = interval1[0];\n\
    \    let mut prime_end = interval1[1];\n    let mut prime_len = prime_len = interval1_len\
    \ + interval2_len;\n    let mut prime_start = interval1[0];\n    let mut prime_end\
    \ = interval1[1];\n    let mut prime_len = prime_len = interval1_len + interval2_len;\n\
    \    let mut prime_start = interval1[0];\n    let mut prime_end = interval1[1];\n\
    \    let mut prime_len = prime_len = interval1_len + interval2_len;\n    let mut\
    \ prime_start = interval1[0];\n    let mut prime_end = interval1[1];\n    let\
    \ mut prime_len = prime_len = interval1_len + interval2_len;\n    let mut prime_start\
    \ = interval1[0];\n    let mut prime_end = interval1[1];\n    let mut prime_len\
    \ = prime_len = interval1_len + interval2_len;\n    let mut prime_start = interval1[0];\n\
    \    let mut prime_end = interval1[1];\n    let mut prime_len = prime_len = interval1_len\
    \ + interval2_len;\n    let mut prime_start = interval1[0];\n    let mut prime_end\
    \ = ", "    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut length = 0;\n    while interval.start < interval.end && interval2.start\
    \ < interval2.end {\n        if interval.start < interval2.start {\n         \
    \   interval = interval2;\n            interval2 = interval1;\n        }\n   \
    \     interval = interval2;\n        interval2 = interval1;\n        length +=\
    \ 1\n    }\n    if interval.start == interval.end {\n        if interval2.start\
    \ == interval2.end {\n            return \"NO\"\n        } else {\n          \
    \  return \"YES\"\n        }\n    } else {\n        if length == 2 {\n       \
    \     return \"YES\"\n        } else {\n            return \"NO\"\n        }\n\
    \    }", "    if interval1.start <= interval1.end && interval2.start <= interval2.end\
    \ {\n        let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        let mut intersection = interval;\n        intersection.start = intersection.end;\n\
    \        intersection.end = intersection.start;\n        let mut prime = true;\n\
    \        for i in 1..=interval.end {\n            if intersection.start == i {\n\
    \                prime = false;\n                break;\n            }\n     \
    \   }\n        for i in 1..=interval2.end {\n            if intersection.start\
    \ == i {\n                prime = false;\n                break;\n           \
    \ }\n        }\n        if prime {\n            return \"YES\";\n        }\n \
    \       return \"NO\";\n    }\n    return \"NO\";", "    if interval1.start >=\
    \ interval1.end || interval2.start >= interval2.end {\n        return \"NO\";\n\
    \    }\n    let mut interval = interval1;\n    interval.start = interval.end;\n\
    \    interval.end = interval.start;\n    if interval1.start < interval2.start\
    \ {\n        interval.start = interval2.start;\n    }\n    if interval1.end >\
    \ interval2.end {\n        interval.end = interval2.end;\n    }\n    if interval.start\
    \ == interval.end {\n        return \"NO\";\n    }\n    if interval.start > interval.end\
    \ {\n        return \"NO\";\n    }\n    let mut prime = true;\n    for i in 1..interval.end\
    \ {\n        if interval1.start <= i && i <= interval2.end {\n            if !prime\
    \ {\n                prime = false;\n            }\n        } else {\n       \
    \     prime = true;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut interval_length = 0;\n    let mut\
    \ interval_start = interval1[0];\n    let mut interval_end = interval1[1];\n \
    \   let mut interval_start_2 = interval2[0];\n    let mut interval_end_2 = interval2[1];\n\
    \n    if interval_start > interval_end {\n        interval_start = interval_end;\n\
    \    }\n    if interval_start_2 > interval_end_2 {\n        interval_start_2 =\
    \ interval_end_2;\n    }\n\n    if interval_start < interval_start_2 {\n     \
    \   interval_length = interval_end - interval_start;\n    } else {\n        interval_length\
    \ = interval_end_2 - interval_start_2;\n    }\n\n    if interval_length == 2 {\n\
    \        if interval_start == interval_end {\n            return \"YES\";\n  \
    \      }\n        if interval_start == interval_start_2 {\n            return\
    \ \"YES\";\n        }\n        if interval_end == interval_end_2 {\n         \
    \   return \"YES\";\n        }\n    }\n\n    if interval_length == 1 {\n     \
    \   if interval_start == interval_end {\n            return \"YES\";\n       \
    \ }\n        if interval_start == interval_start_2 {\n            return \"YES\"\
    ;\n        }\n        if interval_end == interval_end_2 {\n            return\
    \ \"YES\";\n        }\n    }\n\n    if interval_length == 0 {\n        return\
    \ \"NO\";\n    }\n\n    if interval_length == 2 {\n        if interval_start ==\
    \ interval_end {\n            return \"YES\";\n        }\n        if interval_start\
    \ == interval_start_2 {\n            return \"YES\";\n        }\n        if interval_end\
    \ == interval_end_2 {\n            return \"YES\";\n        }\n    }\n\n    if\
    \ interval_length == 1 {\n        if interval_start == interval_end {\n      \
    \      return \"YES\";\n        }\n        if interval_start == interval_start_2\
    \ {\n            return \"YES\";\n        }\n        if interval_end == interval_end_2\
    \ {\n            return \"YES\";\n        }\n    }\n\n    if interval_length ==\
    \ 3 {\n        if interval_start == interval_end {\n            return \"YES\"\
    ;\n        }\n        if interval_start == interval_start_2 {\n            return\
    \ \"YES\";\n        }\n        if interval_end == interval_end_2 {\n         \
    \   return \"YES\";\n        }\n    }\n\n    if interval_length == 4 {\n     \
    \   if interval_start == interval_end {\n            return \"YES\";\n       \
    \ }\n        if interval_start == interval_start_2 {\n            return \"YES\"\
    ;\n        }\n        if interval_end == interval_end_2 {\n            return\
    \ \"YES\";\n        }\n    }\n\n    if interval_length == 5 {\n        if interval_start\
    \ == interval_end {\n            return \"YES\";\n        }\n        if interval_",
  "    if interval1.start < interval1.end && interval2.start < interval2.end {\n \
    \       let mut interval = interval1;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        interval = interval2;\n     \
    \   interval.start = interval.end;\n        interval.end = interval.start;\n \
    \       let mut interval_len = interval.end - interval.start + 1;\n        let\
    \ mut prime_numbers = vec![false; interval_len];\n        let mut prime_numbers_len\
    \ = prime_numbers.len();\n        let mut prime_numbers_len2 = prime_numbers_len\
    \ * prime_numbers_len;\n        let mut prime_numbers_len3 = prime_numbers_len2\
    \ * prime_numbers_len;\n        let mut prime_numbers_len4 = prime_numbers_len3\
    \ * prime_numbers_len;\n        let mut prime_numbers_len5 = prime_numbers_len4\
    \ * prime_numbers_len;\n        let mut prime_numbers_len6 = prime_numbers_len5\
    \ * prime_numbers_len;\n        let mut prime_numbers_len7 = prime_numbers_len6\
    \ * prime_numbers_len;\n        let mut prime_numbers_len8 = prime_numbers_len7\
    \ * prime_numbers_len;\n        let mut prime_numbers_len9 = prime_numbers_len8\
    \ * prime_numbers_len;\n        let mut prime_numbers_len10 = prime_numbers_len9\
    \ * prime_numbers_len;\n        let mut prime_numbers_len11 = prime_numbers_len10\
    \ * prime_numbers_len;\n        let mut prime_numbers_len12 = prime_numbers_len11\
    \ * prime_numbers_len;\n        let mut prime_numbers_len13 = prime_numbers_len12\
    \ * prime_numbers_len;\n        let mut prime_numbers_len14 = prime_numbers_len13\
    \ * prime_numbers_len;\n        let mut prime_numbers_len15 = prime_numbers_len14\
    \ * prime_numbers_len;\n        let mut prime_numbers_len16 = prime_numbers_len15\
    \ * prime_numbers_len;\n        let mut prime_numbers_len17 = prime_numbers_len16\
    \ * prime_numbers_len;\n        let mut prime_numbers_len18 = prime_numbers_len17\
    \ * prime_numbers_len;\n        let mut prime_numbers_len19 = prime_numbers_len18\
    \ * prime_numbers_len;\n        let mut prime_numbers_len20 = prime_numbers_len19\
    \ * prime_", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_len = interval1_end - interval1_start;\n\
    \    let mut interval2_len = interval2_end - interval2_start;\n    if interval1_len\
    \ < interval2_len {\n        interval1_len = interval2_len;\n        interval2_start\
    \ = interval1[0];\n        interval2_end = interval1[1];\n    }\n    if interval1_len\
    \ == interval2_len {\n        if interval1_start <= interval2_start {\n      \
    \      interval1_start = interval2_start;\n            interval1_end = interval2_end;\n\
    \        } else {\n            interval1_start = interval1[0];\n            interval1_end\
    \ = interval1[1];\n        }\n    }\n    if interval1_len % interval2_len == 0\
    \ {\n        let mut interval1_prime = true;\n        let mut interval2_prime\
    \ = true;\n        for _ in 0..interval1_len {\n            if interval1_start\
    \ + interval1_len % interval2_len != interval2_start {\n                interval1_prime\
    \ = false;\n                break;\n            }\n            interval1_len -=\
    \ 1;\n        }\n        for _ in 0..interval2_len {\n            if interval2_start\
    \ + interval2_len % interval1_len != interval1_end {\n                interval2_prime\
    \ = false;\n                break;\n            }\n            interval2_len -=\
    \ 1;\n        }\n        if interval1_prime && interval2_prime {\n           \
    \ return \"YES\";\n        }\n        return \"NO\";\n    }\n    return \"NO\"\
    ;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end =\
    \ interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end {\n        if interval1_end <\
    \ interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n    }\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n    }\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end {\n        if interval1_end <\
    \ interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n    }\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end {\n        if interval1_end <\
    \ interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n    }\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start <= interval2_end ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end < interval1_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_start == interval1_end {\n     \
    \   return \"NO\";\n    }\n    if interval2_start == interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start <=\
    \ interval2_end && interval1_end >= interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start >= interval2_end &&\
    \ interval1_end <= interval2_start {\n        return \"NO\";\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start ", "    if interval1.start >= interval1.end ||\
    \ interval2.start >= interval2.end {\n        return \"NO\";\n    }\n    let mut\
    \ interval = interval1;\n    if interval1.start < interval1.end {\n        interval\
    \ = interval2;\n    }\n    let mut count = 0;\n    let mut start = interval.start;\n\
    \    let mut end = interval.end;\n    while start < end {\n        if start %\
    \ interval1.start == 0 && end % interval1.end == 0 {\n            count += 1;\n\
    \        }\n        start += 1;\n        end += 1;\n    }\n    if count % 2 ==\
    \ 0 {\n        return \"YES\";\n    }\n    return \"NO\";", "    let mut interval_1\
    \ = interval1;\n    let mut interval_2 = interval2;\n    let mut interval_1_end\
    \ = interval1.0;\n    let mut interval_2_end = interval2.0;\n    let mut interval_1_start\
    \ = interval1.1;\n    let mut interval_2_start = interval2.1;\n    let mut interval_1_len\
    \ = interval1.1;\n    let mut interval_2_len = interval2.1;\n    let mut interval_1_prime\
    \ = true;\n    let mut interval_2_prime = true;\n    let mut prime_length = 0;\n\
    \    loop {\n        if interval_1_end >= interval_2_start {\n            if interval_1_end\
    \ <= interval_2_end {\n                if interval_1_end == interval_2_end {\n\
    \                    if interval_1_end == interval_2_end {\n                 \
    \       if interval_1_end == interval_2_end {\n                            if\
    \ interval_1_end == interval_2_end {\n                                prime_length\
    \ += 1;\n                                interval_1_prime = true;\n          \
    \                      interval_2_prime = true;\n                            }\
    \ else {\n                                prime_length += 2;\n               \
    \                 interval_1_prime = true;\n                                interval_2_prime\
    \ = false;\n                            }\n                        } else {\n\
    \                            prime_length += 2;\n                            interval_1_prime\
    \ = true;\n                            interval_2_prime = false;\n           \
    \             }\n                    } else {\n                        prime_length\
    \ += 2;\n                        interval_1_prime = true;\n                  \
    \      interval_2_prime = false;\n                    }\n                } else\
    \ {\n                    prime_length += 2;\n                    interval_1_prime\
    \ = true;\n                    interval_2_prime = false;\n                }\n\
    \            } else {\n                prime_length += 2;\n                interval_1_prime\
    \ = true;\n                interval_2_prime = false;\n            }\n        }\
    \ else {\n            prime_length += 2;\n            interval_1_prime = true;\n\
    \            interval_2_prime = false;\n        }\n        if interval_1_end <\
    \ interval_2_start {\n            interval_1_end = interval_1_end + 1;\n     \
    \       interval_1_len = interval_1_len + 1;\n        } else {\n            interval_2_start\
    \ = interval_2_start + 1;\n            interval_2_len = interval_2_len + 1;\n\
    \        }\n        if interval_1_end == interval_2_end {\n            prime_length\
    \ += 1;\n            interval_1_prime = true;\n            interval_2_prime =\
    \ true;\n        }\n        if interval_1_end > interval_2_end {\n           \
    \ interval_1_end = interval_1_end - 1;\n            interval_1_len = interval_1_len\
    \ - 1;\n        } else {\n            interval_2_end = interval_2_end - 1;\n \
    \           interval_2_len = interval_2_len - ", "    let mut intervals = vec![];\n\
    \    intervals.push(interval1);\n    intervals.push(interval2);\n    let mut intervals_iter\
    \ = intervals.iter();\n    let mut start = intervals_iter.next().unwrap();\n \
    \   let mut end = intervals_iter.next().unwrap();\n    let mut length = 0;\n \
    \   while start != end {\n        if start.0 > end.0 {\n            intervals_iter.next();\n\
    \            start = intervals_iter.next().unwrap();\n        } else {\n     \
    \       intervals_iter.next();\n            end = intervals_iter.next().unwrap();\n\
    \        }\n        length = length + start.1 - end.0;\n    }\n    if length ==\
    \ 2 {\n        return \"YES\".to_string();\n    } else {\n        return \"NO\"\
    .to_string();\n    }", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut result = String::from(\"NO\");\n        for (a, b) in interval1.iter().zip(interval2.iter())\
    \ {\n            if a < b {\n                result.push_str(\"NO\");\n      \
    \          break;\n            }\n            if a == b {\n                result.push_str(\"\
    YES\");\n                break;\n            }\n        }\n        result\n  \
    \  } else {\n        String::from(\"NO\")\n    }", "    if interval1[0] < interval1[1]\
    \ && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n  \
    \      let mut interval2 = interval2;\n        let mut length = 0;\n        while\
    \ interval[0] < interval[1] && interval2[0] < interval2[1] {\n            interval[0]\
    \ = interval[0] + 1;\n            interval2[0] = interval2[0] + 1;\n         \
    \   length = length + 1;\n        }\n        if interval[0] == interval[1] &&\
    \ interval2[0] == interval2[1] {\n            if length == 2 {\n             \
    \   return String::from(\"YES\");\n            }\n            if length == 1 {\n\
    \                return String::from(\"NO\");\n            }\n        }\n    }\n\
    \    return String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval2_end < interval1_start\
    \ {\n        interval2_start = interval1_end;\n        interval2_end = interval1_start;\n\
    \    }\n    if interval1_end == interval2_end {\n        interval_length += 1;\n\
    \    }\n    if interval2_end == interval1_end {\n        interval2_length += 1;\n\
    \    }\n    if interval_length == interval2_length {\n        return \"NO\";\n\
    \    }\n    if interval_length < interval2_length {\n        return \"NO\";\n\
    \    }\n    if interval_length == interval2_length {\n        return \"YES\";\n\
    \    }\n    if interval1_start <= interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ <= interval2_end {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end >= interval2_end {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval2_start\
    \ <= interval1_end {\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval2_start <= interval1_end {\n       \
    \ interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end >= interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval2_end >= interval1_end\
    \ {\n        interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n    }\n    if interval2_end < interval1_start\
    \ {\n        interval2_start = interval1_end;\n        interval2_end = interval1_start;\n\
    \    }\n    if interval1_end == interval2_end {\n        interval_length += 1;\n\
    \    }\n    if interval2_end == interval1_end {\n        interval2_length += 1;\n\
    \    }\n    if interval_length == interval2_length {\n        return \"NO\";\n",
  "    if interval1.start > interval1.end {\n        interval1.swap(&interval2);\n\
    \    }\n    if interval2.start > interval2.end {\n        interval2.swap(&interval1);\n\
    \    }\n    if interval1.start > interval2.start {\n        return \"NO\";\n \
    \   }\n    if interval1.end < interval2.end {\n        return \"NO\";\n    }\n\
    \    if interval1.start == interval2.start {\n        return \"NO\";\n    }\n\
    \    if interval1.end == interval2.end {\n        return \"NO\";\n    }\n    let\
    \ mut prime_numbers = vec![];\n    let mut prime_numbers_count = vec![];\n   \
    \ let mut prime_numbers_count_index = vec![];\n    let mut prime_numbers_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index = vec![];\n   \
    \ let mut prime_numbers_count_index_count_index_count = vec![];\n    let mut prime_numbers_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = vec![];\n    let mut prime_numbers_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = vec!", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n        }\n        if\
    \ interval2_start < interval2_end {\n            intersection_end = interval2_start;\n\
    \        }\n        if intersection_start <= intersection_end {\n            interval1_start\
    \ += 1;\n        } else {\n            interval2_start += 1;\n        }\n    }\n\
    \    if interval1_start <= interval1_end {\n        intersection_start = interval1_start;\n\
    \    }\n    if interval2_start <= interval2_end {\n        intersection_end =\
    \ interval2_start;\n    }\n    if intersection_start <= intersection_end {\n \
    \       if interval1_end > interval2_end {\n            intersection_end = interval1_end;\n\
    \        }\n        if intersection_end > interval1_end {\n            intersection_end\
    \ = interval2_end;\n        }\n        if intersection_end == interval1_end {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    return\
    \ \"NO\";", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return String::from(\"\
    NO\");\n        }\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ < interval2_end {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_end > interval2_start {\n        interval1_end,\
    \ interval1_start = interval2_end, interval1_start;\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start < interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ > interval2_start {\n        interval1_end, interval1_start = interval2_end,\
    \ interval1_start;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return String::from(\"NO\"\
    );\n        }\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ < interval2_end {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_end > interval2_start {\n        interval1_end,\
    \ interval1_start = interval2_end, interval1_start;\n    }\n", "    if interval1.0\
    \ > interval2.0 {\n        let tmp = interval1;\n        interval1 = interval2;\n\
    \        interval2 = tmp;\n    }\n    let mut interval1_start = interval1.0;\n\
    \    let mut interval1_end = interval1.1;\n    let mut interval2_start = interval2.0;\n\
    \    let mut interval2_end = interval2.1;\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_numbers\
    \ = vec![true; intersection_len];\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut prime_numbers_start = interval1_start;\n    let mut prime_numbers_end\
    \ = interval1_end;\n    let mut prime_numbers_start = interval2_start;\n    let\
    \ mut prime_numbers_end = interval2_end;\n    let mut prime_numbers_len = prime_numbers.len();\n\
    \    let mut ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval1[0];\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval2[0];\n    }\n    if interval1_start > interval2_start {\n       \
    \ interval1_start = interval2_start;\n        interval1_end = interval2[0];\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_start = interval2[0];\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start = interval2_end;\n        interval1_end = interval2[0];\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval1_start = interval2[0];\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    .to_string();\n        }\n        return \"NO\".to_string();\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ > interval2_start {\n        if interval1_end < interval2_end {\n          \
    \  return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_end < interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_start {\n        if interval1_end >\
    \ interval2_end {\n            return \"YES\".to_string();\n        }\n      \
    \  return \"NO\".to_string();\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    .to_string();\n        }\n        return \"NO\".to_string();\n    }\n    if interval2_start\
    \ == interval2_end {\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ > interval2_start {\n        if interval1_end < interval2_end {\n          \
    \  return \"YES\".to_string();\n        }\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_end < interval2_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start < interval2_start {\n        if interval1_end >\
    \ interval2_end {\n            return \"YES\".to_string();\n        }\n      \
    \  return \"NO\".to_string();\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    .to_string();\n    }\n    if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n        return \"NO\".to_string();\n    }\n    return\
    \ \"NO\".to_string();", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end >= interval2_start {\n            if interval1_end\
    \ <= interval2_end {\n                if interval1_start <= interval2_end {\n\
    \                    if interval1_end >= interval2_start {\n                 \
    \       if interval1_end <= interval2_end {\n                            if interval1_start\
    \ <= interval2_end {\n                                if interval1_end >= interval2_start\
    \ {\n                                    if interval1_end <= interval2_end {\n\
    \                                        if interval1_start <= interval2_end {\n\
    \                                            if interval1_end >= interval2_start\
    \ {\n                                                if interval1_end <= interval2_end\
    \ {\n                                                    if interval1_start <=\
    \ interval2_end {\n                                                        if\
    \ interval1_end >= interval2_start {\n                                       \
    \                     return \"YES\".to_string();\n                          \
    \                              }\n                                           \
    \         }\n                                                }\n             \
    \                               }\n                                        }\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return \"NO\".to_string();",
  "    let mut intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut intersection = intervals.iter().filter(|&(_, end)| end > 0).collect::<Vec<_>>();\n\
    \    let mut prime = true;\n    for &(start, end) in intersection {\n        if\
    \ start > end {\n            prime = false;\n            break;\n        }\n \
    \   }\n    if prime {\n        return \"YES\".to_string();\n    } else {\n   \
    \     return \"NO\".to_string();\n    }", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval.0 = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0];\n        interval.1 = interval1[0] < interval2[0] ? interval1[1]\
    \ : interval2[1];\n        let mut interval2 = interval1;\n        interval2.0\
    \ = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n        interval2.1\
    \ = interval1[0] < interval2[0] ? interval1[1] : interval2[1];\n        let mut\
    \ interval3 = interval1;\n        interval3.0 = interval1[0] < interval2[0] ?\
    \ interval1[0] : interval2[0];\n        interval3.1 = interval1[0] < interval2[0]\
    \ ? interval1[1] : interval2[1];\n        let mut interval4 = interval1;\n   \
    \     interval4.0 = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n\
    \        interval4.1 = interval1[0] < interval2[0] ? interval1[1] : interval2[1];\n\
    \        let mut interval5 = interval1;\n        interval5.0 = interval1[0] <\
    \ interval2[0] ? interval1[0] : interval2[0];\n        interval5.1 = interval1[0]\
    \ < interval2[0] ? interval1[1] : interval2[1];\n        let mut interval6 = interval1;\n\
    \        interval6.0 = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n\
    \        interval6.1 = interval1[0] < interval2[0] ? interval1[1] : interval2[1];\n\
    \        let mut interval7 = interval1;\n        interval7.0 = interval1[0] <\
    \ interval2[0] ? interval1[0] : interval2[0];\n        interval7.1 = interval1[0]\
    \ < interval2[0] ? interval1[1] : interval2[1];\n        let mut interval8 = interval1;\n\
    \        interval8.0 = interval1[0] < interval2[0] ? interval1[0] : interval2[0];\n\
    \        interval8.1 = interval1[0] < interval2[0] ? interval1[1] : interval2[1];\n\
    \        let mut interval9 = interval1;\n        interval9.0 = interval1[0] <\
    \ interval2[0] ? interval1[0] : interval2[0];\n        interval9.1 = interval1[0]\
    \ < interval2[0] ? interval1[1] : interval2[1];\n        let mut interval10 =\
    \ interval1;\n        interval10.0 = interval1[0] < interval2[0] ? interval1[0]\
    \ : interval2[0];\n        interval10.1 = interval1[0] < interval2[0] ? ", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start < interval1_end {\n        if interval1_end <\
    \ interval2_end {\n            if interval1_end < interval2_start {\n        \
    \        return String::from(\"NO\");\n            }\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    return String::from(\"\
    NO\");", "    if interval1.start > interval1.end {\n        let (start, end) =\
    \ interval1;\n        intersection(end, start)\n    } else if interval2.start\
    \ > interval2.end {\n        let (start, end) = interval2;\n        intersection(start,\
    \ end)\n    } else {\n        let (start, end) = interval1;\n        let (end2,\
    \ start2) = interval2;\n        if start > end {\n            let (start, end)\
    \ = interval1;\n            intersection(end, start)\n        } else if start2\
    \ > end2 {\n            let (start, end) = interval1;\n            intersection(start,\
    \ end)\n        } else {\n            let (start, end) = interval1;\n        \
    \    let (end2, start2) = interval2;\n            if start > end2 {\n        \
    \        let (start, end) = interval1;\n                intersection(end, start)\n\
    \            } else if start2 > end {\n                let (start, end) = interval1;\n\
    \                intersection(start, end)\n            } else {\n            \
    \    let (start, end) = interval1;\n                let (end2, start2) = interval2;\n\
    \                if start > end2 {\n                    let (start, end) = interval1;\n\
    \                    intersection(end, start)\n                } else if start2\
    \ > end {\n                    let (start, end) = interval1;\n               \
    \     intersection(start, end)\n                } else {\n                   \
    \ let (start, end) = interval1;\n                    let (end2, start2) = interval2;\n\
    \                    if start > end2 {\n                        let (start, end)\
    \ = interval1;\n                        intersection(end, start)\n           \
    \         } else if start2 > end {\n                        let (start, end) =\
    \ interval1;\n                        intersection(start, end)\n             \
    \       } else {\n                        let (start, end) = interval1;\n    \
    \                    let (end2, start2) = interval2;\n                       \
    \ if start > end2 {\n                            let (start, end) = interval1;\n\
    \                            intersection(end, start)\n                      \
    \  } else if start2 > end {\n                            let (start, end) = interval1;\n\
    \                            intersection(start, end)\n                      \
    \  } else {\n                            let (start, end) = interval1;\n     \
    \                       let (end2, start2) = interval2;\n                    \
    \        if start > end2 {\n                                let (start, end) =\
    \ interval1;\n                                intersection(end, start)\n     \
    \                       } else if start2 > end {\n                           \
    \     let (start, end) = interval1;\n                                intersection(start,\
    \ end)\n                            } else {\n                               \
    \ let (start, end) = interval1;\n                                let (end2, start2)\
    \ = interval2;\n                                if start > end2 {\n          \
    \                          let (start, end) = interval1;\n                   \
    \                 intersection(end, start)\n                                }\
    \ else if start2 > end {\n                                    let (start, end)\
    \ = interval1;\n                                    intersection(start, end)\n\
    \                                } else {\n                                  \
    \  let (start, end) = interval1;\n                                    let (end2,\
    \ start2) = ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut interval1_len = interval2_end - interval2_start;\n\
    \    let mut interval2_len = interval1_end - interval1_start;\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    \n    while interval1_len\
    \ > 0 && interval2_len > 0 {\n        if interval1_start < interval2_start {\n\
    \            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_len += 1;\n            interval1_len\
    \ -= 1;\n        } else {\n            intersection_start = interval2_start;\n\
    \            intersection_end = interval2_end;\n            intersection_len +=\
    \ 1;\n            interval2_len -= 1;\n        }\n    }\n    \n    if interval1_len\
    \ > 0 {\n        interval1_prime = false;\n    }\n    \n    if interval2_len >\
    \ 0 {\n        interval2_prime = false;\n    }\n    \n    if intersection_len\
    \ == 1 {\n        if interval1_prime && interval2_prime {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    \n    if intersection_len\
    \ == 2 {\n        if interval1_prime && interval2_prime {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    \n    if intersection_len\
    \ > 2 {\n        if interval1_prime && interval2_prime {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    \n    if intersection_len\
    \ == 2 {\n        if interval1_prime {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    \n    if intersection_len > 2 {\n        if\
    \ interval1_prime {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    \n    if intersection_len == 1 {\n        if interval1_prime\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   \n    if intersection_len > 1 {\n        if interval1_prime {\n          \
    \  return \"YES\";\n        }\n        return \"NO\";\n    }\n    \n    return\
    \ \"NO\";", "    let mut interval = interval1;\n    interval.0 = interval.0 >\
    \ interval.1 ? *interval.0 : *interval.1;\n    interval.1 = interval.0 > interval.1\
    \ ? *interval.1 : *interval.0;\n    if interval.0 > interval.1 {\n        interval.0\
    \ = interval.0 > interval.1 ? *interval.0 : *interval.1;\n        interval.1 =\
    \ interval.0 > interval.1 ? *interval.1 : *interval.0;\n    }\n    let mut interval\
    \ = interval2;\n    interval.0 = interval.0 > interval.1 ? *interval.0 : *interval.1;\n\
    \    interval.1 = interval.0 > interval.1 ? *interval.1 : *interval.0;\n    if\
    \ interval.0 > interval.1 {\n        interval.0 = interval.0 > interval.1 ? *interval.0\
    \ : *interval.1;\n        interval.1 = interval.0 > interval.1 ? *interval.1 :\
    \ *interval.0;\n    }\n    if interval.0 > interval.1 {\n        interval.0 =\
    \ interval.0 > interval.1 ? *interval.0 : *interval.1;\n        interval.1 = interval.0\
    \ > interval.1 ? *interval.1 : *interval.0;\n    }\n    if interval.0 > interval.1\
    \ {\n        interval.0 = interval.0 > interval.1 ? *interval.0 : *interval.1;\n\
    \        interval.1 = interval.0 > interval.1 ? *interval.1 : *interval.0;\n \
    \   }\n    if interval.0 > interval.1 {\n        interval.0 = interval.0 > interval.1\
    \ ? *interval.0 : *interval.1;\n        interval.1 = interval.0 > interval.1 ?\
    \ *interval.1 : *interval.0;\n    }\n    if interval.0 > interval.1 {\n      \
    \  interval.0 = interval.0 > interval.1 ? *interval.0 : *interval.1;\n       \
    \ interval.1 = interval.0 > interval.1 ? *interval.1 : *interval.0;\n    }\n \
    \   if interval.0 > interval.1 {\n        interval.0 = interval.0 > interval.1\
    \ ? *interval.0 : *interval.1;\n        interval.1 = interval.0 > interval.1 ?\
    \ *interval.1 : *interval.0;\n    }\n    if interval.0 > interval.1 {\n      \
    \  interval.0 = interval.0 > interval.1 ? *interval.0 : *interval.1;\n       \
    \ interval.1 = interval.0 > interval.1 ? *interval.1 : *interval.0;\n    }\n \
    \   if interval.0 > interval.1 {\n        interval.0 = interval.0 > interval.1\
    \ ? *interval.0 : *interval.1;\n        interval.1 = interval.0 > interval.1 ?\
    \ *interval.1 : *interval.0;\n    }\n    if interval.0 > interval.1 {\n      \
    \  interval.0 = interval.0 > interval.1 ? *interval.0 : *interval.1;\n       \
    \ interval.1 = interval.0 > interval.1 ? *interval.1 : *interval.0;\n", "    let\
    \ mut interval = interval1;\n    interval.0 = interval.0 > interval.1 as isize;\n\
    \    interval.1 = interval.1 > interval.0 as isize;\n    if interval.0 == interval.1\
    \ {\n        return \"NO\".to_string();\n    }\n    let mut interval = interval2;\n\
    \    interval.0 = interval.0 > interval.1 as isize;\n    interval.1 = interval.1\
    \ > interval.0 as isize;\n    if interval.0 == interval.1 {\n        return \"\
    NO\".to_string();\n    }\n    let mut interval = interval1;\n    interval.0 =\
    \ interval.0 > interval.1 as isize;\n    interval.1 = interval.1 > interval.0\
    \ as isize;\n    if interval.0 == interval.1 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut interval = interval2;\n    interval.0 = interval.0 > interval.1\
    \ as isize;\n    interval.1 = interval.1 > interval.0 as isize;\n    if interval.0\
    \ == interval.1 {\n        return \"NO\".to_string();\n    }\n    let mut interval\
    \ = interval1;\n    interval.0 = interval.0 > interval.1 as isize;\n    interval.1\
    \ = interval.1 > interval.0 as isize;\n    if interval.0 == interval.1 {\n   \
    \     return \"NO\".to_string();\n    }\n    let mut interval = interval2;\n \
    \   interval.0 = interval.0 > interval.1 as isize;\n    interval.1 = interval.1\
    \ > interval.0 as isize;\n    if interval.0 == interval.1 {\n        return \"\
    NO\".to_string();\n    }\n    let mut interval = interval1;\n    interval.0 =\
    \ interval.0 > interval.1 as isize;\n    interval.1 = interval.1 > interval.0\
    \ as isize;\n    if interval.0 == interval.1 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut interval = interval2;\n    interval.0 = interval.0 > interval.1\
    \ as isize;\n    interval.1 = interval.1 > interval.0 as isize;\n    if interval.0\
    \ == interval.1 {\n        return \"NO\".to_string();\n    }\n    let mut interval\
    \ = interval1;\n    interval.0 = interval.0 > interval.1 as isize;\n    interval.1\
    \ = interval.1 > interval.0 as isize;\n    if interval.0 == interval.1 {\n   \
    \     return \"NO\".to_string();\n    }\n    let mut interval = interval2;\n \
    \   interval.0 = interval.0 > interval.1 as isize;\n    interval.1 = interval.1\
    \ > interval.0 as isize;\n    if interval.0 == interval.1 {\n        return \"\
    NO\".to_string();\n    }\n    let mut interval = interval1;\n    interval.0 =\
    \ interval.0 > interval.1 as isize;\n    interval.1 = interval.1 > interval.0\
    \ as isize;\n    if interval.0 == interval.1 {\n        return \"NO\".to_string();\n\
    \    }\n    let mut interval = interval", "    if interval1[0] >= interval1[1]\
    \ || interval2[0] >= interval2[1] {\n        return \"NO\";\n    }\n    let mut\
    \ len = 0;\n    let mut start1 = interval1[0];\n    let mut end1 = interval1[1];\n\
    \    let mut start2 = interval2[0];\n    let mut end2 = interval2[1];\n    while\
    \ start1 <= end1 && start2 <= end2 {\n        if start1 < start2 {\n         \
    \   start1 += 1;\n        } else {\n            start2 += 1;\n        }\n    \
    \    len += 1;\n    }\n    if len == 1 {\n        return \"YES\";\n    }\n   \
    \ if len % 2 == 0 {\n        return \"NO\";\n    }\n    return \"YES\";", "  \
    \  let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval1_end {\n        return \"NO\";\n \
    \   }\n\n    if interval2_start > interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start == interval1_end {\n        return \"YES\";\n \
    \   }\n\n    if interval2_start == interval2_end {\n        return \"YES\";\n\
    \    }\n\n    let mut interval1_length = interval1_end - interval1_start + 1;\n\
    \    let mut interval2_length = interval2_end - interval2_start + 1;\n\n    if\
    \ interval1_length == interval2_length {\n        if interval1_length == 1 {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n\n   \
    \ if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n\n    if interval1_length == 2 {\n        return \"YES\";\n    }\n\n \
    \   let mut interval1_prime = true;\n    let mut interval2_prime = true;\n\n \
    \   for i in 1..interval1_length {\n        if interval1_start % i == 0 {\n  \
    \          interval1_prime = false;\n        }\n    }\n\n    for i in 1..interval2_length\
    \ {\n        if interval2_start % i == 0 {\n            interval2_prime = false;\n\
    \        }\n    }\n\n    if interval1_prime && interval2_prime {\n        return\
    \ \"YES\";\n    }\n\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end >= interval2_start {\n            if interval1_end\
    \ > interval2_end {\n                interval1_end = interval2_end;\n        \
    \        interval2_start = interval1_start;\n            }\n            if interval1_end\
    \ == interval2_end {\n                return String::from(\"YES\");\n        \
    \    }\n        }\n    }\n    return String::from(\"NO\");", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            String::from(\"YES\")\n        } else {\n            String::from(\"\
    NO\")\n        }\n    } else {\n        String::from(\"NO\")\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n        interval1_end = interval1_start;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n        interval2_end\
    \ = interval2_start;\n    }\n    if interval1_start > interval2_start {\n    \
    \    intersection_start = interval1_start;\n        intersection_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        intersection_start = interval1_end;\n\
    \        intersection_end = interval2_end;\n    }\n    if intersection_start >\
    \ intersection_end {\n        intersection_start = intersection_end;\n       \
    \ intersection_end = intersection_start;\n    }\n    if intersection_start ==\
    \ intersection_end {\n        return \"NO\";\n    }\n    if interval1_start <=\
    \ interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start >= interval2_start\
    \ && interval1_end <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start <= interval2_start && interval1_end >= interval2_end {\n   \
    \     return \"NO\";\n    }\n    if interval1_start >= interval2_start && interval1_end\
    \ <= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start <=\
    \ interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start >= interval2_start && interval1_end <= interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ >= interval2_start && interval1_end <= interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start <= interval2_start ", "    if interval1[0] <\
    \ interval1[1] {\n        if interval2[0] < interval2[1] {\n            if interval1[0]\
    \ < interval2[0] {\n                if interval1[1] > interval2[1] {\n       \
    \             return \"NO\";\n                }\n                return \"YES\"\
    ;\n            }\n            return \"NO\";\n        }\n        return \"NO\"\
    ;\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    let mut intersection_length = interval1_length + interval2_length;\n\
    \    if interval1_length == interval2_length {\n        if interval1_start < interval2_start\
    \ {\n            interval1_length = interval2_start - interval1_start + 1;\n \
    \       }\n        if interval1_end > interval2_end {\n            interval1_length\
    \ = interval2_end - interval1_start + 1;\n        }\n    }\n    if interval1_length\
    \ == 0 {\n        return String::from(\"NO\");\n    }\n    if interval2_length\
    \ == 0 {\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ < interval2_length {\n        intersection_length = interval1_length;\n    }\n\
    \    if interval1_length == interval2_length {\n        if interval1_start < interval2_start\
    \ {\n            intersection_length = interval2_start - interval1_start + 1;\n\
    \        }\n        if interval1_end > interval2_end {\n            intersection_length\
    \ = interval2_end - interval1_start + 1;\n        }\n    }\n    if intersection_length\
    \ == 2 {\n        if interval1_start < interval2_start {\n            intersection_length\
    \ = interval2_start - interval1_start + 1;\n        }\n        if interval1_end\
    \ > interval2_end {\n            intersection_length = interval2_end - interval1_start\
    \ + 1;\n        }\n    }\n    if intersection_length == 1 {\n        if interval1_start\
    \ < interval2_start {\n            intersection_length = interval2_start - interval1_start\
    \ + 1;\n        }\n        if interval1_end > interval2_end {\n            intersection_length\
    \ = interval2_end - interval1_start + 1;\n        }\n    }\n    if intersection_length\
    \ == 0 {\n        return String::from(\"NO\");\n    }\n    if ", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval[0] = interval1[0];\n        interval[1] = interval1[1];\n\
    \        interval = interval2;\n        interval[0] = interval2[0];\n        interval[1]\
    \ = interval2[1];\n        let mut i = 0;\n        let mut j = 0;\n        let\
    \ mut len = 0;\n        while i < interval[0] && j < interval[1] {\n         \
    \   if interval[i] < interval[j] {\n                i += 1;\n            } else\
    \ {\n                j += 1;\n            }\n            len += 1;\n        }\n\
    \        if len == 2 {\n            if interval[0] == interval[1] {\n        \
    \        return String::from(\"YES\");\n            } else {\n               \
    \ return String::from(\"NO\");\n            }\n        }\n    }\n    String::from(\"\
    NO\")", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut interval_length = interval1_end\
    \ - interval1_start;\n    let mut interval_length2 = interval2_end - interval2_start;\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number2: isize = 1;\n\
    \    let mut prime_number3: isize = 1;\n    let mut prime_number4: isize = 1;\n\
    \    let mut prime_number5: isize = 1;\n    let mut prime_number6: isize = 1;\n\
    \    let mut prime_number7: isize = 1;\n    let mut prime_number8: isize = 1;\n\
    \    let mut prime_number9: isize = 1;\n    let mut prime_number10: isize = 1;\n\
    \    let mut prime_number11: isize = 1;\n    let mut prime_number12: isize = 1;\n\
    \    let mut prime_number13: isize = 1;\n    let mut prime_number14: isize = 1;\n\
    \    let mut prime_number15: isize = 1;\n    let mut prime_number16: isize = 1;\n\
    \    let mut prime_number17: isize = 1;\n    let mut prime_number18: isize = 1;\n\
    \    let mut prime_number19: isize = 1;\n    let mut prime_number20: isize = 1;\n\
    \    let mut prime_number21: isize = 1;\n    let mut prime_number22: isize = 1;\n\
    \    let mut prime_number23: isize = 1;\n    let mut prime_number24: isize = 1;\n\
    \    let mut prime_number25: isize = 1;\n    let mut prime_number26: isize = 1;\n\
    \    let mut prime_number27: isize = 1;\n    let mut prime_number28: isize = 1;\n\
    \    let mut prime_number29: isize = 1;\n    let mut prime_number30: isize = 1;\n\
    \    let mut prime_number31: isize = 1;\n    let mut prime_number32: isize = 1;\n\
    \    let mut prime_number33: isize = 1;\n    let mut prime_number34: isize = 1;\n\
    \    let mut prime_number35: isize = 1;\n    let mut prime_number36: isize", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len\
    \ + interval2_len;\n    let mut prime_number: isize = 1;\n    let mut prime_number_flag\
    \ = true;\n    let mut prime_number_flag2 = true;\n    let mut prime_number_flag3\
    \ = true;\n    let mut prime_number_flag4 = true;\n    let mut prime_number_flag5\
    \ = true;\n    let mut prime_number_flag6 = true;\n    let mut prime_number_flag7\
    \ = true;\n    let mut prime_number_flag8 = true;\n    let mut prime_number_flag9\
    \ = true;\n    let mut prime_number_flag10 = true;\n    let mut prime_number_flag11\
    \ = true;\n    let mut prime_number_flag12 = true;\n    let mut prime_number_flag13\
    \ = true;\n    let mut prime_number_flag14 = true;\n    let mut prime_number_flag15\
    \ = true;\n    let mut prime_number_flag16 = true;\n    let mut prime_number_flag17\
    \ = true;\n    let mut prime_number_flag18 = true;\n    let mut prime_number_flag19\
    \ = true;\n    let mut prime_number_flag20 = true;\n    let mut prime_number_flag21\
    \ = true;\n    let mut prime_number_flag22 = true;\n    let mut prime_number_flag23\
    \ = true;\n    let mut prime_number_flag24 = true;\n    let mut prime_number_flag25\
    \ = true;\n    let mut prime_number_flag26 = true;\n    let mut prime_number_flag27\
    \ = true;\n    let mut prime_number_flag28 = true;\n    let mut prime_number_flag29\
    \ = true;\n    let mut prime_number_flag30 = true;\n    let mut prime_number_flag31\
    \ = true;\n    let mut prime_number_flag32 = true;\n    let mut prime_number_flag33\
    \ = true;\n    let mut prime_number_flag34 = true;\n    let mut prime_number_flag35\
    \ = true;\n    let mut prime_number_flag36 = true;\n    let mut prime_number_flag37\
    \ = true;\n    let mut prime_number_flag38 = true;\n    let mut prime_number_flag39\
    \ = true;\n    let mut prime_number_flag40 = true;\n    let mut prime_number_flag41\
    \ = true;\n    let mut prime_number_flag42 = ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n    }\n    if\
    \ interval1_start > interval1_end {\n        return \"NO\";\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start;\n    let mut interval2_length\
    \ = interval2_end - interval2_start;\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n        interval2_length =\
    \ interval1_length;\n    }\n    if interval1_length == 1 {\n        return \"\
    YES\";\n    }\n    if interval2_length == 1 {\n        return \"YES\";\n    }\n\
    \    let mut prime_number: isize = 1;\n    let mut prime_number_counter: isize\
    \ = 1;\n    let mut prime_number_counter2: isize = 1;\n    let mut prime_number_counter3:\
    \ isize = 1;\n    let mut prime_number_counter4: isize = 1;\n    let mut prime_number_counter5:\
    \ isize = 1;\n    let mut prime_number_counter6: isize = 1;\n    let mut prime_number_counter7:\
    \ isize = 1;\n    let mut prime_number_counter8: isize = 1;\n    let mut prime_number_counter9:\
    \ isize = 1;\n    let mut prime_number_counter10: isize = 1;\n    let mut prime_number_counter11:\
    \ isize = 1;\n    let mut prime_number_counter12: isize = 1;\n    let mut prime_number_counter13:\
    \ isize = 1;\n    let mut prime_number_counter14: isize = 1;\n    let mut prime_number_counter15:\
    \ isize = 1;\n    let mut prime_number_counter16: isize = 1;\n    let mut prime_number_counter17:\
    \ isize = 1;\n    let mut prime_number_counter18: isize = 1;\n    let mut prime_number_counter19:\
    \ isize = 1;\n    let mut prime_number_counter20: isize = 1;\n    let mut prime_number_counter21:\
    \ isize = 1;\n    let mut prime_number_counter22: isize = 1;\n    let mut prime_number_counter23:\
    \ isize = 1;", "    let mut interval_len = interval1[1] - interval1[0] + 1;\n\
    \    let mut interval2_len = interval2[1] - interval2[0] + 1;\n    let mut intersection_len\
    \ = 0;\n    let mut is_prime = true;\n    \n    if interval_len > interval2_len\
    \ {\n        interval_len = interval2_len;\n    }\n    \n    for _ in 0..interval_len\
    \ {\n        intersection_len += 1;\n    }\n    \n    for _ in 0..interval2_len\
    \ {\n        intersection_len += 1;\n    }\n    \n    if intersection_len == interval_len\
    \ {\n        return \"YES\";\n    }\n    \n    if intersection_len % 2 == 0 {\n\
    \        is_prime = false;\n    }\n    \n    if is_prime {\n        return \"\
    NO\";\n    }\n    \n    return \"NO\";", "    let mut interval_1 = interval1.0;\n\
    \    let mut interval_2 = interval2.0;\n    let mut interval_3 = interval1.0;\n\
    \    let mut interval_4 = interval2.0;\n    let mut interval_5 = interval1.0;\n\
    \    let mut interval_6 = interval2.0;\n    let mut interval_7 = interval1.0;\n\
    \    let mut interval_8 = interval2.0;\n    let mut interval_9 = interval1.0;\n\
    \    let mut interval_10 = interval2.0;\n    let mut interval_11 = interval1.0;\n\
    \    let mut interval_12 = interval2.0;\n    let mut interval_13 = interval1.0;\n\
    \    let mut interval_14 = interval2.0;\n    let mut interval_15 = interval1.0;\n\
    \    let mut interval_16 = interval2.0;\n    let mut interval_17 = interval1.0;\n\
    \    let mut interval_18 = interval2.0;\n    let mut interval_19 = interval1.0;\n\
    \    let mut interval_20 = interval2.0;\n    let mut interval_21 = interval1.0;\n\
    \    let mut interval_22 = interval2.0;\n    let mut interval_23 = interval1.0;\n\
    \    let mut interval_24 = interval2.0;\n    let mut interval_25 = interval1.0;\n\
    \    let mut interval_26 = interval2.0;\n    let mut interval_27 = interval1.0;\n\
    \    let mut interval_28 = interval2.0;\n    let mut interval_29 = interval1.0;\n\
    \    let mut interval_30 = interval2.0;\n    let mut interval_31 = interval1.0;\n\
    \    let mut interval_32 = interval2.0;\n    let mut interval_33 = interval1.0;\n\
    \    let mut interval_34 = interval2.0;\n    let mut interval_35 = interval1.0;\n\
    \    let mut interval_36 = interval2.0;\n    let mut interval_37 = interval1.0;\n\
    \    let mut interval_38 = interval2.0;\n    let mut interval_39 = interval1.0;\n\
    \    let mut interval_40 = interval2.0;\n    let mut interval_41 = interval1.0;\n\
    \    let mut interval_42 = interval2.0;\n    let mut interval_43 = interval1.0;\n\
    \    let mut interval_44 = interval2.0;\n    let mut interval_45 = interval1.0;\n\
    \    let mut interval_46 = interval2.0;\n    let mut interval_47 = interval1.0;\n\
    \    let mut interval_48 = interval2.0;\n    let mu", "    if interval1.0 > interval2.0\
    \ {\n        let tmp = interval1;\n        interval1 = interval2;\n        interval2\
    \ = tmp;\n    }\n    if interval1.1 == interval2.1 {\n        if interval1.0 <=\
    \ interval2.0 {\n            return \"NO\".to_string();\n        }\n        return\
    \ \"YES\".to_string();\n    }\n    let mut interval = interval1;\n    let mut\
    \ interval2 = interval2;\n    let mut interval3 = interval1;\n    let mut interval4\
    \ = interval2;\n    let mut interval5 = interval1;\n    let mut interval6 = interval2;\n\
    \    let mut interval7 = interval1;\n    let mut interval8 = interval2;\n    let\
    \ mut interval9 = interval1;\n    let mut interval10 = interval2;\n    let mut\
    \ interval11 = interval1;\n    let mut interval12 = interval2;\n    let mut interval13\
    \ = interval1;\n    let mut interval14 = interval2;\n    let mut interval15 =\
    \ interval1;\n    let mut interval16 = interval2;\n    let mut interval17 = interval1;\n\
    \    let mut interval18 = interval2;\n    let mut interval19 = interval1;\n  \
    \  let mut interval20 = interval2;\n    let mut interval21 = interval1;\n    let\
    \ mut interval22 = interval2;\n    let mut interval23 = interval1;\n    let mut\
    \ interval24 = interval2;\n    let mut interval25 = interval1;\n    let mut interval26\
    \ = interval2;\n    let mut interval27 = interval1;\n    let mut interval28 =\
    \ interval2;\n    let mut interval29 = interval1;\n    let mut interval30 = interval2;\n\
    \    let mut interval31 = interval1;\n    let mut interval32 = interval2;\n  \
    \  let mut interval33 = interval1;\n    let mut interval34 = interval2;\n    let\
    \ mut interval35 = interval1;\n    let mut interval36 = interval2;\n    let mut\
    \ interval37 = interval1;\n    let mut interval38 = interval2;\n    let mut interval39\
    \ = interval1;\n    let mut interval40 = interval2;\n    let mut interval41 =\
    \ interval1;\n    let mut interval42 = interval2;\n    let mut interval43 = interval1;\n\
    \    let mut interval44 = interval2;\n    let mut interval45 = interval1;\n  \
    \  let mut interval46 = interval2;\n    let mut interval47 = interval1;\n    let\
    \ mut interval48 = interval2;\n    let mut interval49 = interval1;\n    let mut\
    \ interval50 = interval2;\n    let mut interval51 = interval1;\n    let mut interval5",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end > interval2_start {\n      \
    \  return \"YES\";\n    }", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval1_start\
    \ {\n        interval1_end, interval1_start = interval1_start, interval1_end;\n\
    \    }\n    if interval2_end < interval2_start {\n        interval2_end, interval2_start\
    \ = interval2_start, interval2_end;\n    }\n    if interval1_end == interval2_end\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_start == interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n \
    \       if interval1_end == interval2_end {\n            return \"YES\";\n   \
    \     }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_end < interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_end < interval2_end {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start <= interval1_end {\n        intersection_length\
    \ += 1;\n    }\n    if interval2_start <= interval2_end {\n        intersection_length\
    \ += 1;\n    }\n    if intersection_length == 2 {\n        if interval1_start\
    \ == interval1_end {\n            if interval2_start == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        return String::from(\"NO\");\n   \
    \ }\n    if intersection_length == 1 {\n        if interval1_start == interval1_end\
    \ {\n            return String::from(\"NO\");\n        }\n        return String::from(\"\
    YES\");\n    }\n    if intersection_length == 0 {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start > interval2_end {\n        interval1_start,\
    \ interval1_end = interval2_end, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_start {\n        interval1_end, interval1_start = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_start == interval1_end {\n        return\
    \ \"NO\";\n    }\n    if interval2_start == interval2_end {\n        return \"\
    NO\";\n    }\n    if interval1_start < interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval2_start == interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval", "    if\
    \ interval1[0] >= interval1[1] || interval2[0] >= interval2[1] {\n        return\
    \ \"NO\";\n    }\n\n    let mut prime = true;\n    let mut prime_length = 1;\n\
    \    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    while prime_length < interval1_end - interval1_start && prime_length < interval2_end\
    \ - interval2_start {\n        if interval1_start < interval2_start {\n      \
    \      if interval1_end < interval2_end {\n                if interval1_end <\
    \ interval2_end {\n                    if interval1_end < interval2_end {\n  \
    \                      if interval1_end < interval2_end {\n                  \
    \          if interval1_end < interval2_end {\n                              \
    \  prime = false;\n                                prime_length += 1;\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n\n        if interval1_start < interval2_start\
    \ {\n            if interval1_end < interval2_end {\n                if interval1_end\
    \ < interval2_end {\n                    if interval1_end < interval2_end {\n\
    \                        if interval1_end < interval2_end {\n                \
    \            if interval1_end < interval2_end {\n                            \
    \    prime = false;\n                                prime_length += 1;\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n\n        interval1_start += 1;\n\
    \        interval1_end += 1;\n        interval2_start += 1;\n        interval2_end\
    \ += 1;\n    }\n\n    if prime_length == interval1_end - interval1_start && prime_length\
    \ == interval2_end - interval2_start {\n        if prime_length == interval1_end\
    \ - interval1_start {\n            return \"YES\";\n        }\n        if prime_length\
    \ == interval2_end - interval2_start {\n            return \"YES\";\n        }\n\
    \    }\n\n    if prime_length == interval1_end - interval1_start {\n        return\
    \ \"YES\";\n    }\n    if prime_length == interval2_end - interval2_start {\n\
    \        return \"YES\";\n    }\n\n    return \"NO\";", "    if interval1[0] <\
    \ interval1[1] && interval2[0] < interval2[1] {\n        let mut interval = interval1;\n\
    \        interval[0] = interval1[1];\n        interval[1] = interval2[0];\n  \
    \      interval\n    } else {\n        let mut interval = interval2;\n       \
    \ interval[0] = interval2[1];\n        interval[1] = interval1[0];\n        interval\n\
    \    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut interval3 = interval1;\n    let mut interval4 = interval2;\n    let\
    \ mut interval5 = interval1;\n    let mut interval6 = interval2;\n    let mut\
    \ interval7 = interval1;\n    let mut interval8 = interval2;\n    let mut interval9\
    \ = interval1;\n    let mut interval10 = interval2;\n    let mut interval11 =\
    \ interval1;\n    let mut interval12 = interval2;\n    let mut interval13 = interval1;\n\
    \    let mut interval14 = interval2;\n    let mut interval15 = interval1;\n  \
    \  let mut interval16 = interval2;\n    let mut interval17 = interval1;\n    let\
    \ mut interval18 = interval2;\n    let mut interval19 = interval1;\n    let mut\
    \ interval20 = interval2;\n    let mut interval21 = interval1;\n    let mut interval22\
    \ = interval2;\n    let mut interval23 = interval1;\n    let mut interval24 =\
    \ interval2;\n    let mut interval25 = interval1;\n    let mut interval26 = interval2;\n\
    \    let mut interval27 = interval1;\n    let mut interval28 = interval2;\n  \
    \  let mut interval29 = interval1;\n    let mut interval30 = interval2;\n    let\
    \ mut interval31 = interval1;\n    let mut interval32 = interval2;\n    let mut\
    \ interval33 = interval1;\n    let mut interval34 = interval2;\n    let mut interval35\
    \ = interval1;\n    let mut interval36 = interval2;\n    let mut interval37 =\
    \ interval1;\n    let mut interval38 = interval2;\n    let mut interval39 = interval1;\n\
    \    let mut interval40 = interval2;\n    let mut interval41 = interval1;\n  \
    \  let mut interval42 = interval2;\n    let mut interval43 = interval1;\n    let\
    \ mut interval44 = interval2;\n    let mut interval45 = interval1;\n    let mut\
    \ interval46 = interval2;\n    let mut interval47 = interval1;\n    let mut interval48\
    \ = interval2;\n    let mut interval49 = interval1;\n    let mut interval50 =\
    \ interval2;\n    let mu", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n    if interval1_end == interval2_end {\n   \
    \     return \"YES\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 2 {\n        if interval1_start % 2 == 0 &&\
    \ interval2_start % 2 == 0 {\n            return \"YES\";\n        }\n       \
    \ return \"NO\";\n    }\n    if interval1_length == 3 {\n        if interval1_start\
    \ % 3 == 0 && interval2_start % 3 == 0 {\n            return \"YES\";\n      \
    \  }\n        return \"NO\";\n    }\n    if interval1_length == 4 {\n        if\
    \ interval1_start % 4 == 0 && interval2_start % 4 == 0 {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_length == 5\
    \ {\n        if interval1_start % 5 == 0 && interval2_start % 5 == 0 {\n     \
    \       return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 6 {\n        if interval1_start % 6 == 0 && interval2_start % 6 == 0 {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 7 {\n        if interval1_start % 7 == 0 && interval2_start\
    \ % 7 == 0 {\n            return \"YES\";\n        }\n        return \"NO\";\n\
    \    }\n    if interval1_length == 8 {\n        if interval1_start % 8 == 0 &&\
    \ interval2_start % 8 == 0 {\n            return \"YES\";\n        }\n       \
    \ return \"NO\";\n    }\n    if interval1_length == 9 {\n        if interval1_start\
    \ % 9 == 0 && interval2_start % 9 == 0 {\n            return \"YES\";\n      \
    \  }\n        return \"NO\";\n    }\n    if interval1_length == 10 {\n       \
    \ if interval1_start % ", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start > interval2_end {\n        return String::from(\"\
    NO\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start > interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start > interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start > interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end == interval2_end {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start == interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_end < interval2_start {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_start > interval2_end {\n        return String",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    let mut prime_numbers = vec![];\n \
    \   loop {\n        if interval1_start > interval2_end {\n            break;\n\
    \        }\n        if interval1_end < interval2_start {\n            break;\n\
    \        }\n        if interval1_start <= interval2_end {\n            if interval1_end\
    \ >= interval2_start {\n                intersection_length += 1;\n          \
    \  }\n        }\n        if intersection_length == 2 {\n            prime_numbers.push(interval1_start);\n\
    \        }\n        if intersection_length == 3 {\n            prime_numbers.push(interval1_end);\n\
    \        }\n        if intersection_length == 4 {\n            prime_numbers.push(interval2_start);\n\
    \        }\n        if intersection_length == 5 {\n            prime_numbers.push(interval2_end);\n\
    \        }\n        interval1_start += 1;\n        interval1_end += 1;\n     \
    \   interval2_start += 1;\n        interval2_end += 1;\n    }\n    if prime_numbers.contains(&interval1_start)\
    \ {\n        return \"YES\";\n    }\n    if prime_numbers.contains(&interval1_end)\
    \ {\n        return \"YES\";\n    }\n    if prime_numbers.contains(&interval2_start)\
    \ {\n        return \"YES\";\n    }\n    if prime_numbers.contains(&interval2_end)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        let mut interval =\
    \ interval1;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n        interval.0\
    \ = interval.1;\n        interval.1 = interval.0;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n        interval.0 = interval.1;\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval1_end {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end >= interval2_start {\n            if interval1_end\
    \ <= interval2_end {\n                if interval1_start <= interval2_start {\n\
    \                    if interval1_end >= interval2_end {\n                   \
    \     if interval1_end == interval2_end {\n                            return\
    \ String::from(\"YES\");\n                        }\n                        return\
    \ String::from(\"NO\");\n                    }\n                    return String::from(\"\
    NO\");\n                }\n                return String::from(\"NO\");\n    \
    \        }\n            return String::from(\"NO\");\n        }\n        return\
    \ String::from(\"NO\");\n    }\n    return String::from(\"NO\");", "    let mut\
    \ interval = interval1;\n    if interval1.0 > interval2.1 {\n        interval\
    \ = interval2;\n    }\n    let mut start = interval.0;\n    let mut end = interval.1;\n\
    \    let mut length = 0;\n    while start < end {\n        start += 1;\n     \
    \   end += 1;\n        length +=1;\n    }\n    if length == 2 {\n        if start\
    \ == end {\n            return String::from(\"YES\");\n        }\n        return\
    \ String::from(\"NO\");\n    }\n    if length == 3 {\n        if start == end\
    \ {\n            return String::from(\"YES\");\n        }\n        if start ==\
    \ end + 1 {\n            return String::from(\"YES\");\n        }\n        return\
    \ String::from(\"NO\");\n    }\n    if length == 4 {\n        if start == end\
    \ {\n            return String::from(\"YES\");\n        }\n        if start ==\
    \ end + 1 {\n            return String::from(\"YES\");\n        }\n        if\
    \ start == end + 2 {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    if length == 5 {\n        if\
    \ start == end {\n            return String::from(\"YES\");\n        }\n     \
    \   if start == end + 1 {\n            return String::from(\"YES\");\n       \
    \ }\n        if start == end + 2 {\n            return String::from(\"YES\");\n\
    \        }\n        if start == end + 3 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 6 {\n        if start == end {\n            return String::from(\"YES\");\n\
    \        }\n        if start == end + 1 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 2 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 3 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 4 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if length\
    \ == 7 {\n        if start == end {\n            return String::from(\"YES\");\n\
    \        }\n        if start == end + 1 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 2 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 3 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 4 {\n            return String::from(\"\
    YES\");\n        }\n        if start == end + 5 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if length",
  "    if interval1.start <= interval1.end && interval2.start <= interval2.end {\n\
    \        let mut intersection = interval1;\n        intersection.start = min(interval1.start,\
    \ interval2.start);\n        intersection.end = max(interval1.end, interval2.end);\n\
    \        if intersection.end == intersection.start {\n            String::from(\"\
    NO\")\n        } else {\n            String::from(\"YES\")\n        }\n    } else\
    \ {\n        String::from(\"NO\")\n    }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_start {\n\
    \        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_start {\n\
    \        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start < interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end > interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        if interval1[0] < interval2[0] {\n            let\
    \ mut interval = interval1;\n            interval[0] = interval2[0];\n       \
    \     interval[1] = interval2[1];\n            return interval.to_string();\n\
    \        }\n        let mut interval = interval1;\n        interval[0] = interval1[1];\n\
    \        interval[1] = interval2[1];\n        return interval.to_string();\n \
    \   }\n    if interval1[0] < interval1[1] && interval2[0] > interval2[1] {\n \
    \       let mut interval = interval1;\n        interval[0] = interval1[0];\n \
    \       interval[1] = interval2[1];\n        return interval.to_string();\n  \
    \  }\n    if interval1[0] > interval1[1] && interval2[0] < interval2[1] {\n  \
    \      let mut interval = interval1;\n        interval[0] = interval1[0];\n  \
    \      interval[1] = interval2[0];\n        return interval.to_string();\n   \
    \ }\n    if interval1[0] > interval1[1] && interval2[0] > interval2[1] {\n   \
    \     return \"NO\".to_string();\n    }\n    return \"YES\".to_string();", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end > interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end > interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end > interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end > interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n\n", "    let mut interval_len = interval1.0;\n    let mut interval_end\
    \ = interval1.1;\n    let mut interval_start = interval2.0;\n    let mut interval_end_2\
    \ = interval2.1;\n\n    if interval_end < interval_start {\n        interval_len\
    \ = interval_end;\n        interval_end = interval_start;\n        interval_start\
    \ = interval_len;\n    }\n\n    if interval_end < interval_end_2 {\n        interval_len\
    \ = interval_end_2;\n        interval_end = interval_start_2;\n        interval_start\
    \ = interval_len;\n    }\n\n    if interval_len == interval_end {\n        if\
    \ interval_len == interval_start {\n            return \"NO\";\n        } else\
    \ {\n            return \"YES\";\n        }\n    } else {\n        if interval_len\
    \ == interval_start {\n            return \"NO\";\n        } else {\n        \
    \    return \"YES\";\n        }\n    }", "    if interval1.start < interval1.end\
    \ && interval2.start < interval2.end {\n        let mut interval = interval1;\n\
    \        interval.start = interval.end;\n        interval.end = interval.start;\n\
    \        let mut interval2 = interval2;\n        interval2.start = interval2.end;\n\
    \        interval2.end = interval2.start;\n        let mut intersection = interval;\n\
    \        intersection.start = intersection.end;\n        intersection.end = intersection.start;\n\
    \        let mut prime = true;\n        let mut prime2 = true;\n        let mut\
    \ prime3 = true;\n        let mut prime4 = true;\n        let mut prime5 = true;\n\
    \        let mut prime6 = true;\n        let mut prime7 = true;\n        let mut\
    \ prime8 = true;\n        let mut prime9 = true;\n        let mut prime10 = true;\n\
    \        let mut prime11 = true;\n        let mut prime12 = true;\n        let\
    \ mut prime13 = true;\n        let mut prime14 = true;\n        let mut prime15\
    \ = true;\n        let mut prime16 = true;\n        let mut prime17 = true;\n\
    \        let mut prime18 = true;\n        let mut prime19 = true;\n        let\
    \ mut prime20 = true;\n        let mut prime21 = true;\n        let mut prime22\
    \ = true;\n        let mut prime23 = true;\n        let mut prime24 = true;\n\
    \        let mut prime25 = true;\n        let mut prime26 = true;\n        let\
    \ mut prime27 = true;\n        let mut prime28 = true;\n        let mut prime29\
    \ = true;\n        let mut prime30 = true;\n        let mut prime31 = true;\n\
    \        let mut prime32 = true;\n        let mut prime33 = true;\n        let\
    \ mut prime34 = true;\n        let mut prime35 = true;\n        let mut prime36\
    \ = true;\n        let mut prime37 = true;\n        let mut prime38 = true;\n\
    \        let mut prime39 = true;\n        let mut prime40 = true;\n        let\
    \ mut prime41 = true;\n        let mut prime42 = true;\n        let mut prime43\
    \ = true;\n        let mut prime44 = true;\n        let mut prime45 = true;\n\
    \        let mut prime46 = true;\n        let mut prime47 = true;\n        let\
    \ mut prime48 = true;\n        let mut prime49 = true;\n        let mut prime50\
    \ = true;\n        let mut prime51 = true;\n        let mut prime52 = true;\n\
    \        let mut prime53 = true;\n        let mut prime54 = true;\n        let\
    \ mut prime55 = true;\n        let mut prime56 = true;\n        let mut prime57\
    \ = true;\n        let mut prime58 = true;\n        let mut prime59 = true;\n\
    \        let mut prime", "    if interval1[0] < interval1[1] && interval2[0] <\
    \ interval2[1] {\n        let mut interval = interval1;\n        interval[0] =\
    \ interval1[0];\n        interval[1] = interval2[0];\n        interval\n    }\
    \ else {\n        let mut interval = interval2;\n        interval[0] = interval2[0];\n\
    \        interval[1] = interval1[1];\n        interval\n    }\n    let mut prime\
    \ = true;\n    let mut prime_length = 1;\n    let mut prime_length2 = 1;\n   \
    \ let mut prime_length3 = 1;\n    let mut prime_length4 = 1;\n    let mut prime_length5\
    \ = 1;\n    let mut prime_length6 = 1;\n    let mut prime_length7 = 1;\n    let\
    \ mut prime_length8 = 1;\n    let mut prime_length9 = 1;\n    let mut prime_length10\
    \ = 1;\n    let mut prime_length11 = 1;\n    let mut prime_length12 = 1;\n   \
    \ let mut prime_length13 = 1;\n    let mut prime_length14 = 1;\n    let mut prime_length15\
    \ = 1;\n    let mut prime_length16 = 1;\n    let mut prime_length17 = 1;\n   \
    \ let mut prime_length18 = 1;\n    let mut prime_length19 = 1;\n    let mut prime_length20\
    \ = 1;\n    let mut prime_length21 = 1;\n    let mut prime_length22 = 1;\n   \
    \ let mut prime_length23 = 1;\n    let mut prime_length24 = 1;\n    let mut prime_length25\
    \ = 1;\n    let mut prime_length26 = 1;\n    let mut prime_length27 = 1;\n   \
    \ let mut prime_length28 = 1;\n    let mut prime_length29 = 1;\n    let mut prime_length30\
    \ = 1;\n    let mut prime_length31 = 1;\n    let mut prime_length32 = 1;\n   \
    \ let mut prime_length33 = 1;\n    let mut prime_length34 = 1;\n    let mut prime_length35\
    \ = 1;\n    let mut prime_length36 = 1;\n    let mut prime_length37 = 1;\n   \
    \ let mut prime_length38 = 1;\n    let mut prime_length39 = 1;\n    let mut prime_length40\
    \ = 1;\n    let mut prime_length41 = 1;\n    let mut prime_length42 = 1;\n   \
    \ let mut prime_length43 = 1;\n    let mut prime_length44 = 1;\n    let mut prime_length45\
    \ = 1;\n    let mut prime_length46 = 1;\n    let mut prime_length47 = 1;\n   \
    \ let mut prime_length48 = 1;\n    let mu", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    loop {\n        if interval1_end < interval2_start {\n            interval1_end\
    \ = interval1_end + 1;\n        } else {\n            interval2_start = interval2_start\
    \ + 1;\n        }\n        if interval1_end > interval2_end {\n            interval1_end\
    \ = interval1_end - 1;\n        } else {\n            interval2_end = interval2_end\
    \ - 1;\n        }\n        intersection_length = intersection_length + 1;\n  \
    \      if interval1_end == interval2_end {\n            break;\n        }\n  \
    \  }\n    if intersection_length == 2 {\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval_length\
    \ = interval2_end - interval2_start;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            intersection_start = interval1_start;\n            intersection_end\
    \ = interval1_end;\n            intersection_length += 1;\n        }\n       \
    \ if interval2_start < interval2_end {\n            intersection_start = interval2_start;\n\
    \            intersection_end = interval2_end;\n            intersection_length\
    \ += 1;\n        }\n        interval1_start += 1;\n        interval1_end += 1;\n\
    \        interval2_start += 1;\n        interval2_end += 1;\n    }\n    if intersection_length\
    \ == interval_length {\n        if intersection_start == intersection_end {\n\
    \            if interval1_start == interval1_end {\n                return String::from(\"\
    YES\");\n            }\n            if interval2_start == interval2_end {\n  \
    \              return String::from(\"YES\");\n            }\n        }\n     \
    \   if intersection_start == intersection_end {\n            return String::from(\"\
    NO\");\n        }\n    }\n    return String::from(\"NO\");", "    let mut intervals\
    \ = vec![interval1, interval2];\n    let mut start = interval1[0];\n    let mut\
    \ end = interval1[1];\n    let mut intersection = vec![start, end];\n    let mut\
    \ prime = true;\n    let mut prime_length = prime_length(&intersection);\n   \
    \ let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime_length + prime_length;\n\
    \    let mut prime_length = prime_length + prime_length;\n    let mut prime_length\
    \ = prime_length + prime_length;\n    let mut prime_length = prime", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_end < interval2_start {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval2_start == interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_start > interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end < interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start == interval2_start {\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_end == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n   \
    \     return \"NO\";\n    }\n    if interval1_end < interval2_start {\n      \
    \  return \"NO\";\n    }\n    if interval1_end > interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = 0;\n    let mut intersection_end = 0;\n    \n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n    \n    if\
    \ interval1_start > interval2_end {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \    }\n    \n    if interval1_start > interval1_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    } else {\n\
    \        intersection_start = interval2_start;\n        intersection_end = interval2_end;\n\
    \    }\n    \n    if intersection_start > intersection_end {\n        return \"\
    NO\";\n    }\n    \n    if interval1_start == interval1_end {\n        return\
    \ \"NO\";\n    }\n    \n    if interval1_start == interval2_start {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_end == interval2_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval2_start {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start > interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval2_start {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start > interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval2_start {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start > interval1_end {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_start < interval2_start {\n        return\
    \ \"YES\";\n    }\n    \n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n    }\n    if interval2_start >\
    \ interval2_end {\n        interval2_start = interval2_end;\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return \"NO\";\n        } else {\n          \
    \  return \"YES\";\n        }\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ == interval2_start {\n            return \"NO\";\n        } else {\n       \
    \     return \"YES\";\n        }\n    }\n    if interval1_length < interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    let mut interval1_prime\
    \ = true;\n    let mut interval2_prime = true;\n    if interval1_length == 2 {\n\
    \        if interval2_length == 2 {\n            if interval1_start == interval2_start\
    \ {\n                return \"NO\";\n            } else {\n                return\
    \ \"YES\";\n            }\n        }\n        if interval2_length == 3 {\n   \
    \         if interval1_start == interval2_start {\n                return \"NO\"\
    ;\n            } else {\n                return \"YES\";\n            }\n    \
    \    }\n    }\n    if interval1_length == 3 {\n        if interval2_length ==\
    \ 2 {\n            if interval1_start == interval2_start {\n                return\
    \ \"NO\";\n            } else {\n                return \"YES\";\n           \
    \ }\n        }\n        if interval2_length == 3 {\n            if interval1_start\
    \ == interval2_start {\n                return \"NO\";\n            } else {\n\
    \                return \"YES\";\n            }\n        }\n    }\n    if interval1_length\
    \ == 4 {\n        if interval2_length == 3 {\n            if interval1_start ==\
    \ interval2_start {\n                return \"NO\";\n            } else {\n  \
    \              return \"YES\";\n            }\n        }\n        if interval2_length\
    \ == 4 {\n            if interval1_start == interval2_start {\n              \
    \  return \"NO\";\n            } else {\n                return \"YES\";\n   \
    \         }\n        }\n    }\n    if interval1_length == 5 {\n        if interval2_length\
    \ == 4 {\n            if interval1_start == interval2_start {\n              \
    \  return \"NO\";\n            } else {\n                return \"YES\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return \"YES\".to_string();\n\
    \        }\n        return \"NO\".to_string();\n    }\n    if interval1_end ==\
    \ interval2_end {\n        return \"NO\".to_string();\n    }\n    if interval1_start\
    \ < interval2_end {\n        let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n        let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \        let mut intersection_length = interval1_length + interval2_length - 1;\n\
    \        let mut prime_number: isize = 2;\n        while intersection_length >=\
    \ prime_number {\n            if interval1_start < interval2_start {\n       \
    \         interval1_length += 1;\n            } else {\n                interval2_length\
    \ += 1;\n            }\n            intersection_length -= prime_number;\n   \
    \         prime_number += 2;\n        }\n        if intersection_length == 0 {\n\
    \            return \"NO\".to_string();\n        }\n        return \"YES\".to_string();\n\
    \    }\n    return \"NO\".to_string();", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_length =\
    \ 0;\n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_start < interval1_end {\n        intersection_length\
    \ = interval1_end - interval1_start + 1;\n    }\n    if intersection_length ==\
    \ 2 {\n        if interval1_start == interval1_end {\n            return \"YES\"\
    .to_string();\n        }\n        if interval2_start == interval2_end {\n    \
    \        return \"YES\".to_string();\n        }\n        if interval1_start <\
    \ interval2_start {\n            return \"NO\".to_string();\n        }\n     \
    \   if interval1_end > interval2_end {\n            return \"NO\".to_string();\n\
    \        }\n        if interval1_start < interval1_end {\n            return \"\
    YES\".to_string();\n        }\n        if interval1_start == interval1_end {\n\
    \            return \"YES\".to_string();\n        }\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        }\n   \
    \     if interval1_start < interval2_start {\n            return \"NO\".to_string();\n\
    \        }\n        if interval1_end > interval2_end {\n            return \"\
    NO\".to_string();\n        }\n        if interval1_start < interval1_end {\n \
    \           return \"YES\".to_string();\n        }\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\".to_string();\n        }\n   \
    \     if interval2_start == interval2_end {\n            return \"YES\".to_string();\n\
    \        }\n        if interval1_start < interval2_start {\n            return\
    \ \"NO\".to_string();\n        }\n        if interval1_end > interval2_end {\n\
    \            return \"NO\".to_string();\n        }\n        if interval1_start\
    \ < interval1_end {\n            return \"YES\".to_string();\n        }\n    \
    \    if interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        if interval2_start == interval2_end {\n            return\
    \ \"YES\".to_string();\n        }\n        if interval1_start < interval2_start\
    \ {\n            return \"NO\".to_string();\n        }\n        if interval1_end\
    \ > interval2_end {\n            return \"NO\".to_string();\n        }\n     \
    \   if interval1_start < interval1_end {\n            return \"YES\".to_string();\n\
    \        }\n        if interval1_start == interval1_end {\n            return\
    \ \"YES\".to_string();\n        }", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start > intersection_end {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            if interval1_start == interval1_end {\n                return\
    \ \"YES\";\n            }\n            return \"NO\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval2_start == interval2_end {\n        return \"\
    NO\";\n    }\n    if interval1_start == interval2_start {\n        return \"NO\"\
    ;\n    }\n    if interval1_end == interval2_end {\n        return \"NO\";\n  \
    \  }\n    if intersection_start == intersection_end {\n        return \"NO\";\n\
    \    }\n    if interval1_start == intersection_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_end == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval2_start == intersection_start {\n        return \"YES\"\
    ;\n    }\n    if interval2_end == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval1_start == intersection_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_end == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval2_start == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval2_end == intersection_start {\n        return \"YES\";\n\
    \    }\n    if interval1_start == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval1_end == intersection_start {\n        return \"YES\";\n\
    \    }\n    if interval2_start == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval2_end == intersection_start {\n        return \"YES\";\n\
    \    }\n    if interval1_start == intersection_end {\n        return \"YES\";\n\
    \    }\n    if interval1_", "    let mut interval1_start = interval1[0];\n   \
    \ let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n  \
    \  \n    while interval1_len > 0 || interval2_len > 0 {\n        if interval1_len\
    \ > 0 {\n            if interval1_start >= interval2_start {\n               \
    \ interval1_start -= interval1_len;\n                interval1_len = 0;\n    \
    \        } else {\n                interval1_len -= interval2_len;\n         \
    \       interval2_len = 0;\n            }\n        }\n        if interval2_len\
    \ > 0 {\n            if interval2_start >= interval1_start {\n               \
    \ interval2_start -= interval2_len;\n                interval2_len = 0;\n    \
    \        } else {\n                interval2_len -= interval1_len;\n         \
    \       interval1_len = 0;\n            }\n        }\n    }\n    if interval1_len\
    \ == 0 && interval2_len == 0 {\n        return \"NO\";\n    }\n    if interval1_len\
    \ == 0 {\n        return \"YES\";\n    }\n    if interval2_len == 0 {\n      \
    \  return \"YES\";\n    }\n    if interval1_len > 0 && interval2_len > 0 && interval1_len\
    \ == interval2_len {\n        return \"YES\";\n    }\n    if interval1_len > 0\
    \ && interval2_len > 0 && interval1_len < interval2_len {\n        return \"NO\"\
    ;\n    }\n    if interval1_len < interval2_len {\n        return \"NO\";\n   \
    \ }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_end > interval2_start\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n\n    if interval1_end > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n\n    if interval1_start <\
    \ interval2_start {\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n    }\n\n    if interval1_start < interval2_end {\n      \
    \  interval1_start = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n\n    if interval1_start == interval2_start {\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n\n    if interval1_end == interval2_end {\n        return \"NO\"\
    ;\n    }\n\n    if interval1_start == interval2_start {\n        return \"YES\"\
    ;\n    }\n\n    if interval1_end == interval2_end {\n        return \"YES\";\n\
    \    }\n\n    if interval1_start < interval2_start {\n        return \"NO\";\n\
    \    }\n\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n    }\n\
    \n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n  \
    \  if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end {\n        return \"YES\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n\n\
    \    if interval1_end == interval2_end ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_start = interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end = interval2_start;\n\
    \        interval2_end = interval1_end;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start < interval2_start {\n        interval1_start =\
    \ interval2_start;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_end == interval2_end {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        } else {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    let mut interval1_len =\
    \ interval1_end - interval1_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    let mut common_len = interval1_len + interval2_len\
    \ - 2;\n    if common_len == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        } else {\n           \
    \ return String::from(\"NO\");\n        }\n    }\n    if common_len == 1 {\n \
    \       if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        } else {\n            return String::from(\"NO\");\n        }\n\
    \    }\n    if common_len == 0 {\n        return String::from(\"NO\");\n    }\n\
    \    if common_len == -1 {\n        return String::from(\"NO\");\n    }\n    if\
    \ common_len == -2 {\n        return String::from(\"NO\");\n    }\n    if common_len\
    \ == -3 {\n        return String::from(\"NO\");\n    }\n    if common_len == -4\
    \ {\n        return String::from(\"NO\");\n    }\n    if common_len == -5 {\n\
    \        return String::from(\"NO\");\n    }\n    if common_len == -6 {\n    \
    \    return String::from(\"NO\");\n    }\n    if common_len == -7 {\n        return\
    \ String::from(\"NO\");\n    }\n    if common_len == -8 {\n        return String::from(\"\
    NO\");\n    }\n    if common_len == -9 {\n        return String::from(\"NO\");\n\
    \    }\n    if common_len == -10 {\n        return String::from(\"NO\");\n   \
    \ }\n    if common_len == -11 {\n        return String::from(\"NO\");\n", "  \
    \  if interval1.start <= interval1.end && interval2.start <= interval2.end {\n\
    \        let mut interval = interval1;\n        let mut interval2 = interval2;\n\
    \        let mut count = 0;\n        while interval.start <= interval.end && interval2.start\
    \ <= interval2.end {\n            if interval.start < interval2.start {\n    \
    \            interval.start = interval.start + 1;\n                count += 1;\n\
    \            } else {\n                interval2.start = interval2.start + 1;\n\
    \                count += 1;\n            }\n        }\n        if interval.start\
    \ <= interval.end {\n            interval.end = interval.start + 1;\n        \
    \    count += 1;\n        }\n        if interval2.start <= interval2.end {\n \
    \           interval2.end = interval2.start + 1;\n            count += 1;\n  \
    \      }\n        if count % 2 == 0 {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    } else {\n        return\
    \ \"NO\";\n    }", "    if interval1.start < interval1.end && interval2.start\
    \ < interval2.end {\n        let mut interval = interval1;\n        interval.start\
    \ = interval.end;\n        interval.end = interval.start;\n        interval.start\
    \ += 1;\n        interval.end += 1;\n        let mut interval2 = interval2;\n\
    \        interval2.start = interval2.end;\n        interval2.end = interval2.start;\n\
    \        interval2.start += 1;\n        interval2.end += 1;\n        let mut interval\
    \ = interval;\n        let mut interval2 = interval2;\n        let mut prime =\
    \ true;\n        let mut prime2 = true;\n        let mut prime3 = true;\n    \
    \    let mut prime4 = true;\n        let mut prime5 = true;\n        let mut prime6\
    \ = true;\n        let mut prime7 = true;\n        let mut prime8 = true;\n  \
    \      let mut prime9 = true;\n        let mut prime10 = true;\n        let mut\
    \ prime11 = true;\n        let mut prime12 = true;\n        let mut prime13 =\
    \ true;\n        let mut prime14 = true;\n        let mut prime15 = true;\n  \
    \      let mut prime16 = true;\n        let mut prime17 = true;\n        let mut\
    \ prime18 = true;\n        let mut prime19 = true;\n        let mut prime20 =\
    \ true;\n        let mut prime21 = true;\n        let mut prime22 = true;\n  \
    \      let mut prime23 = true;\n        let mut prime24 = true;\n        let mut\
    \ prime25 = true;\n        let mut prime26 = true;\n        let mut prime27 =\
    \ true;\n        let mut prime28 = true;\n        let mut prime29 = true;\n  \
    \      let mut prime30 = true;\n        let mut prime31 = true;\n        let mut\
    \ prime32 = true;\n        let mut prime33 = true;\n        let mut prime34 =\
    \ true;\n        let mut prime35 = true;\n        let mut prime36 = true;\n  \
    \      let mut prime37 = true;\n        let mut prime38 = true;\n        let mut\
    \ prime39 = true;\n        let mut prime40 = true;\n        let mut prime41 =\
    \ true;\n        let mut prime42 = true;\n        let mut prime43 = true;\n  \
    \      let mut prime44 = true;\n        let mut prime45 = true;\n        let mut\
    \ prime46 = true;\n        let mut prime47 = true;\n        let mut prime48 =\
    \ true;\n        let mut prime49 = true;\n        let mut prime50 = true;\n  \
    \      let mut prime51 = true;\n        let mut prime52 = true;\n        let mut\
    \ prime53 = true;\n        let mut prime54 = true;\n        let mut prime55 =\
    \ true;\n        let mut prime56 = true;\n        let mut prime57 = true;\n",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start, interval1_end\
    \ = interval1_end, interval1_start;\n    }\n    if interval2_start > interval2_end\
    \ {\n        interval2_start, interval2_end = interval2_end, interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n    if interval1_end < interval1_start {\n        interval1_end, interval1_start\
    \ = interval1_start, interval1_end;\n    }\n    if interval2_end < interval2_start\
    \ {\n        interval2_end, interval2_start = interval2_start, interval2_end;\n\
    \    }\n    if interval1_end == interval2_end {\n        if interval1_start ==\
    \ interval2_start {\n            return String::from(\"YES\");\n        }\n  \
    \      return String::from(\"NO\");\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_end == interval2_start {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval2_start == interval2_end {\n        if interval1_end\
    \ == interval1_start {\n            return String::from(\"YES\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n    if interval1_start == interval2_start\
    \ {\n        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_end == interval2_start {\n        \
    \    return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval2_start == interval2_end {\n        if interval1_end\
    \ == interval1_start {\n            return String::from(\"YES\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    if interval1_len > interval2_len {\n", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut intersection_start = interval1_start;\n\
    \    let mut intersection_end = interval1_end;\n    while interval1_start < interval1_end\
    \ && interval2_start < interval2_end {\n        if interval1_start < interval2_start\
    \ {\n            intersection_start = interval1_start;\n        }\n        if\
    \ interval1_end > interval2_end {\n            intersection_end = interval1_end;\n\
    \        }\n        if intersection_start > intersection_end {\n            intersection_start\
    \ = intersection_end;\n        }\n        interval1_start += 1;\n        interval1_end\
    \ += 1;\n        interval2_start += 1;\n        interval2_end += 1;\n    }\n \
    \   if interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if intersection_start == intersection_end {\n        return\
    \ String::from(\"NO\");\n    }\n    if interval1_start == interval1_end {\n  \
    \      return String::from(\"NO\");\n    }\n    if interval2_start == interval2_end\
    \ {\n        return String::from(\"YES\");\n    }\n    if intersection_start <\
    \ intersection_end {\n        return String::from(\"YES\");\n    }\n    return\
    \ String::from(\"NO\");", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval1_end\
    \ {\n        interval1_start, interval1_end = interval1_end, interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start, interval2_end\
    \ = interval2_end, interval2_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end == interval2_end {\n    \
    \    return \"YES\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 2 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        if interval1_end == interval2_end\
    \ {\n            return \"YES\";\n        }\n    }\n    if interval1_length ==\
    \ 3 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        if interval1_end == interval2_end {\n            return\
    \ \"YES\";\n        }\n    }\n    if interval1_length == 4 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if interval1_length == 6 {\n      \
    \  if interval1_start == interval2_start {\n            return \"YES\";\n    \
    \    }\n        if interval1_end == interval2_end {\n            return \"YES\"\
    ;\n        }\n    }\n    if interval1_length == 7 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        if interval1_end\
    \ == interval2_end {\n            return \"YES\";\n        }\n    }\n    if interval1_length\
    \ == 8 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        if interval1_end == interval2_end {\n         \
    \   return \"YES\";\n        }\n    }\n    if interval1_length == 9 {\n      \
    \  if interval1_start == interval2_start {\n            return \"YES\";\n", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start <= interval2_end {\n        if interval1_end >=\
    \ interval2_start {\n            if interval1_end < interval2_end {\n        \
    \        return String::from(\"YES\");\n            } else {\n               \
    \ return String::from(\"NO\");\n            }\n        } else {\n            return\
    \ String::from(\"NO\");\n        }\n    } else {\n        return String::from(\"\
    NO\");\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval1_end = interval2_start, interval1_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"YES\");\n            }\n            return String::from(\"\
    NO\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if interval1_start < interval1_end {\n                return String::from(\"\
    NO\");\n            }\n            return String::from(\"YES\");\n        }\n\
    \        return String::from(\"YES\");\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_start, interval1_end;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            if interval1_start\
    \ < interval1_end {\n                return String::from(\"YES\");\n         \
    \   }\n            return String::from(\"NO\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            if interval1_start < interval1_end {\n     \
    \           return String::from(\"NO\");\n            }\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"YES\");\n    }\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval_length = interval1_end\
    \ - interval1_start + interval2_end - interval2_start;\n    let mut interval_length_prime\
    \ = true;\n    let mut interval_length_prime_prime = true;\n    let mut interval_length_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime = true;\n    let\
    \ mut interval_length_prime_prime_prime_prime_prime = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;\n    let mut interval_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = true;", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    if interval1_start > interval1_end\
    \ {\n        interval1_start = interval1_end;\n        interval1_end = interval1_start;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \        interval2_end = interval2_start;\n    }\n    if interval1_start > interval2_start\
    \ {\n        intersection_start = interval2_start;\n        intersection_end =\
    \ interval2_end;\n    }\n    if interval1_end < interval2_end {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start > intersection_end {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval1_end {\n        return \"NO\";\n    }\n    if\
    \ interval2_start == interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_start == interval1_end {\n     \
    \   return \"NO\";\n    }\n    if interval2_start == interval2_end {\n       \
    \ return \"NO\";\n    }\n    if interval1_start < interval2_start {\n        return\
    \ \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return \"NO\"\
    ;\n    }\n    if interval1_start < interval2_end {\n        return \"NO\";\n \
    \   }\n    if interval1_end > interval2_start {\n        return \"NO\";\n    }\n\
    \    if interval1_start == interval1_end {\n        return \"NO\";\n    }\n  \
    \  if interval2_start == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_start < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end\
    \ > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start < interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n  \
    \      return \"NO\";\n    }\n    if interval2_start == interval2_end {\n    \
    \    return \"NO\";\n    }\n    if interval1_start ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval1_end = interval2_start,\
    \ interval1_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval1_start = interval2_end, interval1_start;\n    }\n\n    if interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval2_start {\n            interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n        }\n        if interval1_end > interval2_end {\n  \
    \          interval1_end, interval2_end = interval2_end, interval1_end;\n    \
    \    }\n        if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n            if interval1_start < interval2_end {\n                interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n            }\n           \
    \ if interval1_end > interval2_start {\n                interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n            }\n            if interval1_start\
    \ <= interval2_end && interval1_end >= interval2_start {\n                if interval1_start\
    \ < interval2_end {\n                    interval1_start, interval2_end = interval2_end,\
    \ interval1_start;\n                }\n                if interval1_end > interval2_start\
    \ {\n                    interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \                }\n                if interval1_start <= interval2_end && interval1_end\
    \ >= interval2_start {\n                    if interval1_start < interval2_end\
    \ {\n                        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \                    }\n                    if interval1_end > interval2_start\
    \ {\n                        interval1_end, interval2_start = interval2_start,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_end && interval1_end >= interval2_start {\n                   \
    \     if interval1_start < interval2_end {\n                            interval1_start,\
    \ interval2_end = interval2_end, interval1_start;\n                        }\n\
    \                        if interval1_end > interval2_start {\n              \
    \              interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_end\
    \ && interval1_end >= interval2_start {\n                            if interval1_start\
    \ < interval2_end {\n                                interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n                            }\n         \
    \                   if interval1_end > interval2_start {\n                   \
    \             interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \                            }\n", "    let mut interval = interval1;\n    if\
    \ interval1.0 > interval2.0 {\n        interval = interval2;\n    }\n    let mut\
    \ interval_len = interval.1;\n    let mut interval_start = interval.0;\n    let\
    \ mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n   \
    \ let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let mut interval_len = interval.1;\n    let mut interval_start = interval.0;\n\
    \    let mut interval_end = interval.1;\n    let mut interval_len = interval.1;\n\
    \    let mut interval_start = interval.0;\n    let mut interval_end = interval.1;\n\
    \    let ", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval1[1];\n        interval = interval2;\n        interval[0]\
    \ = interval2[0];\n        interval[1] = interval2[1];\n        if interval[0]\
    \ > interval[1] {\n            interval[0] = interval[1];\n            interval[1]\
    \ = interval[0];\n        }\n        let mut len = 0;\n        for &i in interval\
    \ {\n            if i == interval[0] {\n                len += 1;\n          \
    \  }\n            if i == interval[1] {\n                len += 1;\n         \
    \   }\n        }\n        if len == 2 {\n            return \"YES\";\n       \
    \ }\n        if len % 2 == 0 {\n            return \"NO\";\n        }\n      \
    \  return \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n    }\n    if interval2_start\
    \ > interval2_end {\n        interval2_start = interval2_end;\n    }\n\n    if\
    \ interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   if interval2_start == interval2_end {\n            return \"YES\";\n     \
    \   } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_start\
    \ < interval1_end {\n        if interval2_start == interval2_end {\n         \
    \   return \"NO\";\n        } else {\n            return \"YES\";\n        }\n\
    \    }\n\n    if interval1_start < interval2_end {\n        if interval1_end ==\
    \ interval2_end {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }\n    }\n\n    if interval1_start == interval2_start {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      } else {\n            return \"NO\";\n        }\n    }\n\n    if interval1_start\
    \ == interval2_end {\n        if interval1_end == interval2_end {\n          \
    \  return \"YES\";\n        } else {\n            return \"NO\";\n        }\n\
    \    }\n\n    if interval1_start < interval2_end {\n        if interval1_end ==\
    \ interval2_end {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }\n    }\n\n    if interval1_start == interval2_end {\n  \
    \      if interval1_end < interval2_end {\n            return \"NO\";\n      \
    \  } else {\n            return \"YES\";\n        }\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n        interval2_start\
    \ = interval1_start;\n    }\n    if interval1_end < interval2_start {\n      \
    \  interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    let mut interval1_len\
    \ = interval1_end - interval1_start + 1;\n    let mut interval2_len = interval2_end\
    \ - interval2_start + 1;\n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n    }\n    if interval1_len == 1 {\n        return \"NO\"\
    .to_string();\n    }\n    if interval1_len == 2 {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\".to_string();\n        } else\
    \ {\n            return \"NO\".to_string();\n        }\n    }\n    let mut interval1_mid\
    \ = interval1_start + interval1_len / 2;\n    let mut interval2_mid = interval2_start\
    \ + interval2_len / 2;\n    if interval1_mid < interval2_mid {\n        interval1_mid\
    \ = interval2_mid;\n    }\n    if interval1_mid == interval2_mid {\n        if\
    \ interval1_start == interval1_end {\n            return \"YES\".to_string();\n\
    \        } else {\n            return \"NO\".to_string();\n        }\n    }\n\
    \    if interval1_mid > interval2_mid {\n        interval1_mid = interval2_mid;\n\
    \    }\n    if interval1_mid % 2 == 0 {\n        if interval1_mid < interval2_mid\
    \ {\n            interval1_mid = interval2_mid;\n        }\n    }\n    if interval1_mid\
    \ % 2 == 1 {\n        if interval1_mid > interval2_mid {\n            interval1_mid\
    \ = interval2_mid;\n        }\n    }\n    if interval1_mid % 3 == 0 {\n      \
    \  if interval1_mid < interval2_mid {\n            interval1_mid = interval2_mid;\n\
    \        }\n    }\n    if interval1_mid % 3 == 1 {\n        if interval1_mid >\
    \ interval2_mid {\n            interval1_mid = interval2_mid;\n        }\n   \
    \ }\n    if interval1_mid % 5 == 0 {\n        if interval1_mid < interval2_mid\
    \ {", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n\n    if interval1_start <= interval2_end {\n        if interval1_end\
    \ >= interval2_start {\n            if interval1_end > interval2_end {\n     \
    \           interval1_end, interval2_end = interval2_end, interval1_end;\n   \
    \         }\n            if interval1_start <= interval2_end {\n             \
    \   if interval1_start < interval2_start {\n                    interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                }\n   \
    \             if interval1_end >= interval2_end {\n                    interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n                }\n         \
    \       if interval1_start <= interval2_end {\n                    if interval1_end\
    \ < interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_end {\n                        if interval1_end < interval2_end\
    \ {\n                            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                        }\n                        if interval1_start\
    \ <= interval2_end {\n                            if interval1_end < interval2_end\
    \ {\n                                interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                            }\n                            if\
    \ interval1_start <= interval2_end {\n                                if interval1_end\
    \ < interval2_end {\n                                    interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                                }\n       \
    \                         if interval1_start <= interval2_end {\n            \
    \                        if interval1_end < interval2_end {\n                \
    \                        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                                    }\n                                    if\
    \ interval1_start <= interval2_end {\n                                       \
    \ if interval1_end < interval2_end {\n                                       \
    \     interval1_end, interval2_end = interval2_end, interval1_end;\n         \
    \                               }\n                                        if\
    \ interval1_start <= interval2_end {\n                                       \
    \     if interval1_end < interval2_end {\n                                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                                           }\n                              \
    \              if interval1_start <= interval2_end {\n                       \
    \                         if interval1_end < interval2_end {\n               \
    \                                     interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                                }\n        \
    \                                        if interval1_start <= interval2_end {\n\
    \                                ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_end < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_start > interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval2_start {\n\
    \        if interval1_end == interval2_end {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    let mut interval1_len = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_len = interval2_end - interval2_start\
    \ + 1;\n    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \    }\n    if interval1_len == 1 {\n        return \"YES\";\n    }\n    let mut\
    \ prime_number: isize = 1;\n    let mut prime_number_len: isize = 1;\n    let\
    \ mut prime_number_len2: isize = 1;\n    let mut prime_number_len3: isize = 1;\n\
    \    let mut prime_number_len4: isize = 1;\n    let mut prime_number_len5: isize\
    \ = 1;\n    let mut prime_number_len6: isize = 1;\n    let mut prime_number_len7:\
    \ isize = 1;\n    let mut prime_number_len8: isize = 1;\n    let mut prime_number_len9:\
    \ isize = 1;\n    let mut prime_number_len10: isize = 1;\n    let mut prime_number_len11:\
    \ isize = 1;\n    let mut prime_number_len12: isize = 1;\n    let mut prime_number_len13:\
    \ isize = 1;\n    let mut prime_number_len14: isize = 1;\n    let mut prime_number_len15:\
    \ isize = 1;\n    let mut prime_number_len16: isize = 1;\n    let mut prime_number_len17:\
    \ isize = 1;\n    let mut prime_number_len18: isize = 1;\n    let mut prime_number_len19:\
    \ isize = 1;\n    let mut prime_number_len20: isize = 1;\n    let mut prime_number_len21:\
    \ isize = 1;\n    let mut prime_number_len22: isize = 1;\n    let mut ", "   \
    \ let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval1_end {\n        interval1_start = interval1_end;\n\
    \    }\n    if interval2_start > interval2_end {\n        interval2_start = interval2_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_end == interval2_end {\n        if\
    \ interval1_start == interval2_start {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    let mut interval1_length = interval1_end -\
    \ interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n    let mut interval1_prime = true;\n    let mut interval2_prime = true;\n\
    \    if interval1_length == interval2_length {\n        if interval1_start ==\
    \ interval2_start {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_length < interval2_length {\n        interval1_prime\
    \ = false;\n        interval2_prime = false;\n    } else {\n        interval1_prime\
    \ = true;\n        interval2_prime = true;\n    }\n    if interval1_prime && interval2_prime\
    \ {\n        if interval1_start == interval2_start {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval1_length == 2 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 3 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 4 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 5 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 6 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 7 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 8 {\n  \
    \      if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_length == 9 {\n  \
    \      if interval1_start ", "    if interval1.0 < interval2.0 {\n        let\
    \ mut interval = interval1;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n    }\n    if interval1.1 < interval2.1 {\n        let mut interval\
    \ = interval2;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \    }\n    if interval1.0 < interval2.0 {\n        let mut interval = interval1;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n \
    \   if interval1.1 < interval2.1 {\n        let mut interval = interval2;\n  \
    \      interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n   \
    \ if interval1.0 < interval2.0 {\n        let mut interval = interval1;\n    \
    \    interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n    if\
    \ interval1.1 < interval2.1 {\n        let mut interval = interval2;\n       \
    \ interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n    if interval1.0\
    \ < interval2.0 {\n        let mut interval = interval1;\n        interval.0 =\
    \ interval.1;\n        interval.1 = interval.0;\n    }\n    if interval1.1 < interval2.1\
    \ {\n        let mut interval = interval2;\n        interval.0 = interval.1;\n\
    \        interval.1 = interval.0;\n    }\n    if interval1.0 < interval2.0 {\n\
    \        let mut interval = interval1;\n        interval.0 = interval.1;\n   \
    \     interval.1 = interval.0;\n    }\n    if interval1.1 < interval2.1 {\n  \
    \      let mut interval = interval2;\n        interval.0 = interval.1;\n     \
    \   interval.1 = interval.0;\n    }\n    if interval1.0 < interval2.0 {\n    \
    \    let mut interval = interval1;\n        interval.0 = interval.1;\n       \
    \ interval.1 = interval.0;\n    }\n    if interval1.1 < interval2.1 {\n      \
    \  let mut interval = interval2;\n        interval.0 = interval.1;\n        interval.1\
    \ = interval.0;\n    }\n    if interval1.0 < interval2.0 {\n        let mut interval\
    \ = interval1;\n        interval.0 = interval.1;\n        interval.1 = interval.0;\n\
    \    }\n    if interval1.1 < interval2.1 {\n        let mut interval = interval2;\n\
    \        interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n \
    \   if interval1.0 < interval2.0 {\n        let mut interval = interval1;\n  \
    \      interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n   \
    \ if interval1.1 < interval2.1 {\n        let mut interval = interval2;\n    \
    \    interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n    if\
    \ interval1.0 < interval2.0 {\n        let mut interval = interval1;\n       \
    \ interval.0 = interval.1;\n        interval.1 = interval.0;\n    }\n    if interval",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_len = interval1_end - interval1_start;\n\
    \    let mut interval1_len = interval2_end - interval2_start;\n    let mut interval2_len\
    \ = interval1_end - interval1_start;\n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start < interval2_start {\n            intersection_start\
    \ = interval1_start;\n            intersection_len = interval1_len;\n        \
    \    interval1_len -= 1;\n        } else {\n            intersection_start = interval2_start;\n\
    \            intersection_len = interval2_len;\n            interval2_len -= 1;\n\
    \        }\n        if intersection_end > interval1_end {\n            intersection_end\
    \ = interval1_end;\n            intersection_len += 1;\n        } else {\n   \
    \         intersection_end = interval2_end;\n            intersection_len += 1;\n\
    \        }\n    }\n    if interval1_len > 0 {\n        intersection_start = interval1_start;\n\
    \        intersection_len = interval1_len;\n    }\n    if interval2_len > 0 {\n\
    \        intersection_end = interval2_end;\n        intersection_len += 1;\n \
    \   }\n    if intersection_len == 2 {\n        if intersection_start == intersection_end\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    } else {\n        return \"NO\";\n    }", "    if interval1.start\
    \ <= interval1.end && interval2.start <= interval2.end {\n        let mut interval\
    \ = interval1;\n        interval.start = interval.end;\n        interval.end =\
    \ interval.start;\n        interval = interval2;\n        interval.start = interval.end;\n\
    \        interval.end = interval.start;\n        let mut intersection = interval;\n\
    \        let mut count = 0;\n        while intersection.start <= intersection.end\
    \ {\n            if intersection.start == intersection.end {\n               \
    \ count += 1;\n                intersection.start += 1;\n                intersection.end\
    \ += 1;\n            } else {\n                intersection.start += 1;\n    \
    \            intersection.end += 1;\n            }\n        }\n        if count\
    \ % 2 == 0 {\n            return \"YES\";\n        } else {\n            return\
    \ \"NO\";\n        }\n    } else {\n        return \"NO\";\n    }", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut interval1_prime = true;\n  \
    \  let mut interval2_prime = true;\n    \n    while interval1_len > 0 && interval2_len\
    \ > 0 {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ += interval1_len;\n            interval1_prime = false;\n        } else {\n\
    \            interval2_start += interval2_len;\n            interval2_prime =\
    \ false;\n        }\n        interval1_len -= 1;\n        interval2_len -= 1;\n\
    \    }\n    \n    if interval1_len > 0 {\n        interval1_start += interval1_len;\n\
    \        interval1_prime = false;\n    }\n    if interval2_len > 0 {\n       \
    \ interval2_start += interval2_len;\n        interval2_prime = false;\n    }\n\
    \    \n    if interval1_prime && interval2_prime {\n        return \"YES\".to_string();\n\
    \    }\n    \n    if interval1_prime && !interval2_prime {\n        return \"\
    NO\".to_string();\n    }\n    \n    if !interval1_prime && interval2_prime {\n\
    \        return \"NO\".to_string();\n    }\n    \n    return \"NO\".to_string();",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start > interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end > interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end > interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start {\n        interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \  }\n\n    if interval1_start < interval2_end {\n        return \"NO\";\n   \
    \ }\n\n    if interval1_end > interval2_start {\n        return \"NO\";\n    }\n\
    \n    if interval1_start == interval1_end {\n        return \"YES\";\n    }\n\n\
    \    if interval2_start == interval2_end {\n        return \"YES\";\n    }\n\n\
    \    if interval1_start < interval2_start ", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    if interval1_end > interval2_start {\n        interval1_start = interval2_end;\n\
    \        interval1_end = interval2_start;\n        interval1_length = interval2_end\
    \ - interval2_start;\n    }\n    if interval2_end > interval1_start {\n      \
    \  interval2_start = interval1_end;\n        interval2_end = interval1_start;\n\
    \        interval2_length = interval1_end - interval1_start;\n    }\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start <= interval2_start {\n   \
    \         interval1_length = interval2_end - interval2_start;\n        } else\
    \ {\n            interval2_length = interval1_end - interval1_start;\n       \
    \ }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {\n            interval2_length = interval1_end - interval1_start;\n\
    \        }\n    }\n    if interval1_length == interval2_length {\n        if interval1_start\
    \ <= interval2_start {\n            interval1_length = interval2_end - interval2_start;\n\
    \        } else {", "    let mut interval1_start = interval1[0];\n    let mut\
    \ interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start == interval1_end {\n\
    \        return \"NO\";\n    }\n\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n\n    if interval1_end > interval2_end {\n   \
    \     return \"NO\";\n    }\n\n    if interval1_start < interval2_end {\n    \
    \    return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n    \
    \    return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end > interval2_start {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start == interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end > interval2_end {\n  \
    \      return \"YES\";\n    }\n\n    if interval1_start == interval2_start {\n\
    \        return \"YES\";\n    }\n\n    if interval1_end == interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_start < interval2_end {\n \
    \       return \"YES\";\n    }\n\n    if interval1_end ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_length\
    \ = 0;\n    let mut interval1_length = interval1_end - interval1_start;\n    let\
    \ mut interval2_length = interval2_end - interval2_start;\n    while interval1_start\
    \ <= interval1_end && interval2_start <= interval2_end {\n        if interval1_start\
    \ < interval1_end {\n            if interval2_start < interval2_end {\n      \
    \          if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                    intersection_length += 1;\n                }\n      \
    \      }\n            interval1_start += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval2_start += 1;\n        }\n    }\n   \
    \ if interval1_start > interval1_end {\n        interval1_length = interval1_end\
    \ - interval1_start;\n    }\n    if interval2_start > interval2_end {\n      \
    \  interval2_length = interval2_end - interval2_start;\n    }\n    if intersection_length\
    \ == 0 {\n        return \"NO\";\n    }\n    if interval1_length == interval2_length\
    \ {\n        return \"YES\";\n    }\n    if interval1_length < interval2_length\
    \ {\n        return \"NO\";\n    }\n    return \"YES\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        interval1_start, interval1_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval1_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_start\
    \ < interval2_start {\n        return String::from(\"NO\");\n    }\n    if interval1_end\
    \ > interval2_end {\n        return String::from(\"NO\");\n    }\n    let mut\
    \ interval1_length = interval1_end - interval1_start + 1;\n    let mut interval2_length\
    \ = interval2_end - interval2_start + 1;\n    if interval1_length > interval2_length\
    \ {\n        interval1_length = interval2_length;\n    }\n    if interval1_length\
    \ == 2 {\n        if interval1_start == interval1_end {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 3 {\n        if interval1_start == interval1_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval2_start == interval2_end {\n          \
    \  return String::from(\"YES\");\n        }\n        return String::from(\"NO\"\
    );\n    }\n    if interval1_length == 4 {\n        if interval1_start == interval1_end\
    \ {\n            return String::from(\"YES\");\n        }\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 5 {\n        if interval1_start == interval1_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval2_start == interval2_end {\n          \
    \  return String::from(\"YES\");\n        }\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        }\n        if interval2_",
  "    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n        if\
    \ interval1[0] < interval2[0] {\n            let mut result = String::from(\"\
    NO\");\n            for i in interval1.iter() {\n                if i == interval2[0]\
    \ {\n                    result.push_str(\"YES\");\n                    break;\n\
    \                }\n            }\n            return result;\n        }\n   \
    \     let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[1] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[1] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[0] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[1] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[0] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[1] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[0] {\n                result.push_str(\"YES\"\
    );\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    if interval1[0] < interval1[1] && interval2[0] < interval2[1] {\n\
    \        let mut result = String::from(\"NO\");\n        for i in interval1.iter()\
    \ {\n            if i == interval2[1]", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start = interval2_start;\n    }\n    if interval1_end <\
    \ interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_start\
    \ > interval2_end {\n        interval1_end = interval2_end;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_start = interval2_start;\n    }\n\n \
    \   if interval1_start == interval1_end {\n        return \"NO\";\n    }\n\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n\n\
    \    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\n   \
    \ if interval1_end == interval2_end {\n        return \"NO\";\n    }\n\n    if\
    \ interval1_start < interval2_end {\n        return \"YES\";\n    }\n\n    if\
    \ interval1_end > interval2_end {\n        return \"YES\";\n    }\n\n    if interval1_end\
    \ == interval2_end {\n        return \"YES\";\n    }\n\n    if interval1_start\
    \ == interval2_start {\n        return \"YES\";\n    }\n\n    if interval1_end\
    \ < interval2_end {\n        return \"YES\";\n    }\n\n    if interval1_end ==\
    \ interval2_end {\n        return \"YES\";\n    }\n\n    if interval1_end > interval2_end\
    \ {\n        return \"YES\";\n    }\n\n    return \"YES\";", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            let mut start = interval1[0];\n            let mut end = interval1[1];\n\
    \            while start < end {\n                let mut start = interval2[0];\n\
    \                let mut end = interval2[1];\n                while start < end\
    \ {\n                    if start == end {\n                        break;\n \
    \                   }\n                    start += 1;\n                    end\
    \ += 1;\n                }\n                if start == end {\n              \
    \      break;\n                }\n                start += 1;\n              \
    \  end += 1;\n            }\n            if start == end {\n                return\
    \ String::from(\"YES\");\n            }\n        }\n    }\n    String::from(\"\
    NO\")", "    let mut interval_len = interval1.1;\n    let mut interval_start =\
    \ interval1.0;\n    let mut interval_end = interval2.0;\n    let mut interval_len\
    \ = interval_len - 1;\n    let mut interval_start = interval_start - 1;\n    let\
    \ mut interval_end = interval_end - 1;\n    let mut interval_len = interval_len\
    \ - 1;\n    let mut interval_start = interval_start - 1;\n    let mut interval_end\
    \ = interval_end - 1;\n    let mut interval_len = interval_len - 1;\n    let mut\
    \ interval_start = interval_start - 1;\n    let mut interval_end = interval_end\
    \ - 1;\n    let mut interval_len = interval_len - 1;\n    let mut interval_start\
    \ = interval_start - 1;\n    let mut interval_end = interval_end - 1;\n    let\
    \ mut interval_len = interval_len - 1;\n    let mut interval_start = interval_start\
    \ - 1;\n    let mut interval_end = interval_end - 1;\n    let mut interval_len\
    \ = interval_len - 1;\n    let mut interval_start = interval_start - 1;\n    let\
    \ mut interval_end = interval_end - 1;\n    let mut interval_len = interval_len\
    \ - 1;\n    let mut interval_start = interval_start - 1;\n    let mut interval_end\
    \ = interval_end - 1;\n    let mut interval_len = interval_len - 1;\n    let mut\
    \ interval_start = interval_start - 1;\n    let mut interval_end = interval_end\
    \ - 1;\n    let mut interval_len = interval_len - 1;\n    let mut interval_start\
    \ = interval_start - 1;\n    let mut interval_end = interval_end - 1;\n    let\
    \ mut interval_len = interval_len - 1;\n    let mut interval_start = interval_start\
    \ - 1;\n    let mut interval_end = interval_end - 1;\n    let mut interval_len\
    \ = interval_len - 1;\n    let mut interval_start = interval_start - 1;\n    let\
    \ mut interval_end = interval_end - 1;\n    let mut interval_len = interval_len\
    \ - 1;\n    let mut interval_start = interval_start - 1;\n    let mut interval_end\
    \ = interval_end - 1;\n    let mut interval_len = interval_len - 1;\n    let mut\
    \ interval_start = interval_start - 1;\n    let mut interval_end = interval_end\
    \ - 1;\n    let mut interval_len = interval_len - 1;\n    let mut interval_start\
    \ = interval_start - 1;\n    let mut interval_end = interval_end - 1;\n    let\
    \ mut interval_len = ", "    let mut interval = interval1;\n    let mut interval2\
    \ = interval2;\n    if interval1[0] > interval2[0] {\n        interval = interval2;\n\
    \        interval2 = interval1;\n    }\n    let mut intersection = interval1;\n\
    \    if interval1[1] < interval2[1] {\n        intersection = interval2;\n   \
    \ }\n    if intersection[0] == intersection[1] {\n        return \"NO\";\n   \
    \ }\n    let mut prime = true;\n    for i in 1..=intersection[0] {\n        if\
    \ interval[0] % i == 0 || interval[1] % i == 0 {\n            prime = false;\n\
    \            break;\n        }\n    }\n    if prime {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n\n    if interval1_start <= interval2_end\
    \ {\n        if interval1_end < interval2_start {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \      }\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_start > interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end < interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval2_start {\n  \
    \              return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end, interval2_end = interval2_end, interval1_end;\n  \
    \      }\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_start\
    \ == interval2_start {\n            if interval1_end == interval2_end {\n    \
    \            return String::from(\"YES\");\n            }\n            return\
    \ String::from(\"NO\");\n        }\n        if interval1_start > interval2_start\
    \ {\n            interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \        }\n        if interval1_end < interval2_end {\n            interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n        }\n        if interval1_end\
    \ == interval2_end {\n            if interval1_start == interval", "    let mut\
    \ interval = interval1;\n    let mut interval2 = interval2;\n    let mut intersection\
    \ = interval1;\n    let mut interval_len = interval1.1;\n    let mut interval2_len\
    \ = interval2.1;\n    let mut prime = true;\n    loop {\n        if interval_len\
    \ > interval2_len {\n            interval = interval2;\n            interval_len\
    \ = interval2.1;\n        } else {\n            interval = interval1;\n      \
    \      interval_len = interval1.1;\n        }\n        if interval_len == interval2_len\
    \ {\n            if interval[0] < interval[1] {\n                prime = false;\n\
    \            }\n        }\n        if prime {\n            intersection = interval;\n\
    \            break;\n        }\n    }\n    if prime {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut intersection = interval1;\n    intersection[0] = min(interval1[0],\
    \ interval2[0]);\n    intersection[1] = max(interval1[1], interval2[1]);\n   \
    \ if intersection[0] >= intersection[1] {\n        return \"NO\";\n    }\n   \
    \ let mut prime = true;\n    for i in 1..=interval1[0] {\n        if interval1[1]\
    \ % i == 0 {\n            prime = false;\n        }\n    }\n    for i in 1..=interval2[0]\
    \ {\n        if interval2[1] % i == 0 {\n            prime = false;\n        }\n\
    \    }\n    if prime {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start < interval1_end {\n        return \"NO\".to_string();\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ < interval2_end {\n            return \"YES\".to_string();\n        }\n    \
    \    return \"NO\".to_string();\n    }\n    if interval2_start < interval2_end\
    \ {\n        return \"NO\".to_string();\n    }\n    return \"YES\".to_string();",
  "    let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_start = interval1_start;\n    let mut intersection_end\
    \ = interval1_end;\n    let mut intersection_length = interval1_end - interval1_start;\n\
    \    let mut prime_numbers = Vec::new();\n    let mut prime_numbers_length = prime_numbers.len();\n\
    \    let mut prime_numbers_counter = 0;\n    let mut prime_numbers_counter2 =\
    \ 0;\n    let mut prime_numbers_counter3 = 0;\n    let mut prime_numbers_counter4\
    \ = 0;\n    let mut prime_numbers_counter5 = 0;\n    let mut prime_numbers_counter6\
    \ = 0;\n    let mut prime_numbers_counter7 = 0;\n    let mut prime_numbers_counter8\
    \ = 0;\n    let mut prime_numbers_counter9 = 0;\n    let mut prime_numbers_counter10\
    \ = 0;\n    let mut prime_numbers_counter11 = 0;\n    let mut prime_numbers_counter12\
    \ = 0;\n    let mut prime_numbers_counter13 = 0;\n    let mut prime_numbers_counter14\
    \ = 0;\n    let mut prime_numbers_counter15 = 0;\n    let mut prime_numbers_counter16\
    \ = 0;\n    let mut prime_numbers_counter17 = 0;\n    let mut prime_numbers_counter18\
    \ = 0;\n    let mut prime_numbers_counter19 = 0;\n    let mut prime_numbers_counter20\
    \ = 0;\n    let mut prime_numbers_counter21 = 0;\n    let mut prime_numbers_counter22\
    \ = 0;\n    let mut prime_numbers_counter23 = 0;\n    let mut prime_numbers_counter24\
    \ = 0;\n    let mut prime_numbers_counter25 = 0;\n    let mut prime_numbers_counter26\
    \ = 0;\n    let mut prime_numbers_counter27 = 0;\n    let mut prime_numbers_counter28\
    \ = 0;\n    let mut prime_numbers_counter29 = 0;\n    let mut prime_numbers_counter30\
    \ = 0;\n    let mut prime_numbers_counter31 = 0;\n    let mut prime_numbers_counter32\
    \ = 0;\n    let mut prime_numbers_counter33 = 0;\n    let mut prime_numbers_counter34\
    \ = 0;\n    let mut prime_numbers_counter35 = 0;\n    let mut prime_numbers_counter36\
    \ = 0;\n    let mut prime_numbers_counter37 = 0;\n    let mut prime_numbers_counter38\
    \ = 0;", "    if interval1[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    let mut len = 0;\n    let mut start =\
    \ interval1[0];\n    let mut end = interval1[1];\n    while start < interval1[1]\
    \ && end < interval2[1] {\n        if start < end {\n            len += 1;\n \
    \       }\n        start += 1;\n        end += 1;\n    }\n    if len == 2 {\n\
    \        if start == end {\n            return \"YES\";\n        }\n        if\
    \ start == interval1[1] {\n            return \"YES\";\n        }\n        if\
    \ end == interval2[1] {\n            return \"YES\";\n        }\n    }\n    if\
    \ len % 2 == 0 {\n        return \"NO\";\n    }\n    if len == 1 {\n        return\
    \ \"YES\";\n    }\n    if len == 0 {\n        return \"NO\";\n    }", "    let\
    \ mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval2_start = interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end = interval2_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_start > interval2_start {\n        interval1_start =\
    \ interval2_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n    }\n    if interval1_start == interval1_end {\n       \
    \ if interval2_start == interval2_end {\n            return \"YES\";\n       \
    \ }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start < interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return \"YES\";\n        }\n        return \"\
    NO\";\n    }\n    if interval1_start < interval2_start {\n        return \"NO\"\
    ;\n    }\n    if interval1_end > interval2_end {\n        return \"NO\";\n   \
    \ }\n    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n\
    \    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start == interval1_end {\n        if interval2_start == interval2_end\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_start < interval2_start {\n        return \"NO\";\n    }\n  \
    \  if interval1_end > interval2_end {\n        return \"NO\";\n    }\n    if interval1_start\
    \ < interval2_end {\n        return \"YES\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start == interval1_end {\n\
    \        if interval2_start == interval2_end {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_start < interval2_start\
    \ {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n \
    \       return \"NO\";\n    }\n    if interval1_start < interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_end > interval2_end ", "    let\
    \ mut interval_1 = interval1.0;\n    let mut interval_2 = interval2.0;\n    let\
    \ mut interval_3 = interval1.0;\n    let mut interval_4 = interval2.0;\n    let\
    \ mut interval_5 = interval1.0;\n    let mut interval_6 = interval2.0;\n    let\
    \ mut interval_7 = interval1.0;\n    let mut interval_8 = interval2.0;\n    let\
    \ mut interval_9 = interval1.0;\n    let mut interval_10 = interval2.0;\n    let\
    \ mut interval_11 = interval1.0;\n    let mut interval_12 = interval2.0;\n   \
    \ let mut interval_13 = interval1.0;\n    let mut interval_14 = interval2.0;\n\
    \    let mut interval_15 = interval1.0;\n    let mut interval_16 = interval2.0;\n\
    \    let mut interval_17 = interval1.0;\n    let mut interval_18 = interval2.0;\n\
    \    let mut interval_19 = interval1.0;\n    let mut interval_20 = interval2.0;\n\
    \    let mut interval_21 = interval1.0;\n    let mut interval_22 = interval2.0;\n\
    \    let mut interval_23 = interval1.0;\n    let mut interval_24 = interval2.0;\n\
    \    let mut interval_25 = interval1.0;\n    let mut interval_26 = interval2.0;\n\
    \    let mut interval_27 = interval1.0;\n    let mut interval_28 = interval2.0;\n\
    \    let mut interval_29 = interval1.0;\n    let mut interval_30 = interval2.0;\n\
    \    let mut interval_31 = interval1.0;\n    let mut interval_32 = interval2.0;\n\
    \    let mut interval_33 = interval1.0;\n    let mut interval_34 = interval2.0;\n\
    \    let mut interval_35 = interval1.0;\n    let mut interval_36 = interval2.0;\n\
    \    let mut interval_37 = interval1.0;\n    let mut interval_38 = interval2.0;\n\
    \    let mut interval_39 = interval1.0;\n    let mut interval_40 = interval2.0;\n\
    \    let mut interval_41 = interval1.0;\n    let mut interval_42 = interval2.0;\n\
    \    let mut interval_43 = interval1.0;\n    let mut interval_44 = interval2.0;\n\
    \    let mut interval_45 = interval1.0;\n    let mut interval_46 = interval2.0;\n\
    \    let mut interval_47 = interval1.0;\n    let mut interval_48 = interval2.0;\n\
    \    let mu", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut intersection_start = interval1_start;\n    let\
    \ mut intersection_end = interval1_end;\n    let mut intersection_len = interval1_end\
    \ - interval1_start;\n    let mut interval1_len = interval2_end - interval2_start;\n\
    \    let mut interval2_len = interval1_end - interval1_start;\n    let mut prime_found\
    \ = false;\n    \n    while interval1_len > 0 || interval2_len > 0 {\n       \
    \ if interval1_len > 0 {\n            if interval1_start >= interval2_start {\n\
    \                interval1_start -= interval2_start;\n                interval1_len\
    \ -= interval2_len;\n            } else {\n                interval1_len -= interval2_len;\n\
    \            }\n        }\n        if interval2_len > 0 {\n            if interval2_start\
    \ >= interval1_start {\n                interval2_start -= interval1_start;\n\
    \                interval2_len -= interval1_len;\n            } else {\n     \
    \           interval2_len -= interval1_len;\n            }\n        }\n      \
    \  if interval1_len == 0 && interval2_len == 0 {\n            break;\n       \
    \ }\n        if interval1_len == 0 {\n            interval1_start = intersection_start;\n\
    \            interval1_end = intersection_end;\n            interval1_len = intersection_len;\n\
    \            prime_found = true;\n            break;\n        }\n        if interval2_len\
    \ == 0 {\n            interval2_start = intersection_start;\n            interval2_end\
    \ = intersection_end;\n            interval2_len = intersection_len;\n       \
    \     prime_found = true;\n            break;\n        }\n        if interval1_start\
    \ >= interval2_start {\n            intersection_start -= interval1_start;\n \
    \           intersection_end -= interval1_start;\n            intersection_len\
    \ -= interval1_len;\n        } else {\n            intersection_start -= interval2_start;\n\
    \            intersection_end -= interval2_start;\n            intersection_len\
    \ -= interval2_len;\n        }\n    }\n    if prime_found {\n        String::from(\"\
    YES\")\n    } else {\n        String::from(\"NO\")\n    }", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    let mut\
    \ intersection_length = interval1_end - interval1_start;\n    let mut interval1_length\
    \ = interval2_end - interval2_start;\n    let mut interval2_length = interval1_end\
    \ - interval1_start;\n    if interval1_start > interval2_start {\n        interval1_start\
    \ = interval2_start;\n        interval1_end = interval2_end;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end = interval2_end;\n        interval1_length\
    \ = interval2_end - interval2_start;\n    }\n    if interval1_end > interval2_end\
    \ {\n        interval1_length = interval2_end - interval2_start;\n        interval2_start\
    \ = interval1_start;\n        interval2_end = interval1_end;\n    }\n    if interval1_length\
    \ > interval2_length {\n        interval1_length = interval2_length;\n       \
    \ interval2_start = interval1_start;\n        interval2_end = interval1_end;\n\
    \    }\n    if interval1_length == 0 {\n        return \"NO\";\n    }\n    if\
    \ interval2_length == 0 {\n        return \"NO\";\n    }\n    if interval1_start\
    \ == interval1_end {\n        if interval2_start == interval2_end {\n        \
    \    if interval1_length == 1 {\n                return \"YES\";\n           \
    \ }\n            return \"NO\";\n        }\n        return \"NO\";\n    }\n  \
    \  if interval2_start == interval2_end {\n        return \"NO\";\n    }\n    if\
    \ interval1_length == 1 {\n        if interval2_length == 1 {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval2_length\
    \ == 1 {\n        return \"NO\";\n    }\n    if interval1_length == 2 {\n    \
    \    if interval2_length == 2 {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";\n    }\n    if interval2_length == 2 {\n        return \"\
    NO\";\n    }\n    if interval1_length == 3 {\n        if interval2_length == 3\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval2_length == 3 {\n        return \"NO\";\n    }\n    if interval1_length\
    \ == 4 {\n        if interval2_length == 4 {\n            return \"YES\";\n  \
    \      }\n        return \"NO\";\n    }\n    if interval2_length == 4 {\n    \
    \    return \"NO\";\n    }\n    if interval1_length == 5 {\n        if interval2_length\
    \ == 5 {\n            return \"YES\";\n        }\n        return \"NO\";\n   \
    \ }\n    if interval2_length == 5 {\n        return \"NO\";", "    if interval1[0]\
    \ >= interval1[1] || interval2[0] >= interval2[1] {\n        return \"NO\";\n\
    \    }\n    let mut interval = interval1;\n    let mut interval2 = interval2;\n\
    \    let mut length = 0;\n    while interval[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        if interval[0] < interval2[0] {\n            interval[0]\
    \ = interval2[0];\n        } else {\n            interval[1] = interval2[1];\n\
    \        }\n        length += 1;\n        interval = interval1;\n        interval2\
    \ = interval2;\n    }\n    if interval[0] >= interval1[1] || interval2[0] >= interval2[1]\
    \ {\n        return \"NO\";\n    }\n    if length == 1 {\n        return \"YES\"\
    ;\n    }\n    if length == 2 {\n        return \"YES\";\n    }\n    if length\
    \ == 3 {\n        return \"YES\";\n    }\n    if length == 4 {\n        return\
    \ \"YES\";\n    }\n    if length == 5 {\n        return \"YES\";\n    }\n    if\
    \ length == 6 {\n        return \"YES\";\n    }\n    if length == 7 {\n      \
    \  return \"YES\";\n    }\n    if length == 8 {\n        return \"YES\";\n   \
    \ }\n    if length == 9 {\n        return \"YES\";\n    }\n    if length == 10\
    \ {\n        return \"YES\";\n    }\n    if length == 11 {\n        return \"\
    YES\";\n    }\n    if length == 12 {\n        return \"YES\";\n    }\n    if length\
    \ == 13 {\n        return \"YES\";\n    }\n    if length == 14 {\n        return\
    \ \"YES\";\n    }\n    if length == 15 {\n        return \"YES\";\n    }\n   \
    \ if length == 16 {\n        return \"YES\";\n    }\n    if length == 17 {\n \
    \       return \"YES\";\n    }\n    if length == 18 {\n        return \"YES\"\
    ;\n    }\n    if length == 19 {\n        return \"YES\";\n    }\n    if length\
    \ == 20 {\n        return \"YES\";\n    }\n    if length == 21 {\n        return\
    \ \"YES\";\n    }\n    if length == 22 {\n        return \"YES\";\n    }\n   \
    \ if length == 100 {\n        return \"YES\";\n    }\n    if length == 200 {\n\
    \        return \"YES\";\n    }\n    if length == 300 {\n        return \"YES\"\
    ;\n    }\n    if length == 400 {\n        return \"YES\";\n    }\n    if length\
    \ == 500 {\n        return \"YES\";\n    }\n    if length == 600 {\n        return\
    \ \"YES\";\n    }\n    if length == 700 {\n        return \"YES\";\n    }\n  \
    \  if length == 800 {\n        return \"YES\";\n    }\n    if length == 900 {\n\
    \        return \"YES\";\n    }\n    if length == 1000 {\n        return \"YES\"\
    ;\n    }\n    if length == 2000 {\n        return \"YES\";\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n    }\n   \
    \ if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_end = interval2_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_start = interval2_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        return \"NO\";\n  \
    \  }\n    if interval1_start > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_end < interval2_start {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval2_start {\n        return \"YES\";\n    }\n  \
    \  if interval1_start == interval2_end {\n        return \"YES\";\n    }\n   \
    \ if interval1_end == interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_start < interval2_end {\n        return \"YES\";\n    }\n    if interval1_end\
    \ > interval2_start {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval1_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval1_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start ", "    let mut interval = interval1;\n    if interval1.0\
    \ > interval2.0 {\n        interval = interval2;\n    }\n    if interval1.0 <\
    \ interval2.0 {\n        interval = interval1;\n    }\n    if interval.0 == interval1.0\
    \ {\n        return String::from(\"NO\");\n    }\n    if interval.0 == interval2.0\
    \ {\n        return String::from(\"NO\");\n    }\n    let mut prime = true;\n\
    \    let mut i = 1;\n    while prime && i <= interval.0 + 1 {\n        if interval.0\
    \ + i == interval1.0 {\n            prime = false;\n        }\n        if interval.0\
    \ + i == interval2.0 {\n            prime = false;\n        }\n        i += 1;\n\
    \    }\n    if prime {\n        return String::from(\"YES\");\n    }\n    return\
    \ String::from(\"NO\");", "    if interval1.start <= interval2.start && interval1.end\
    \ >= interval2.end {\n        if interval1.start <= interval2.end {\n        \
    \    if interval1.end >= interval2.start {\n                if interval1.end >=\
    \ interval2.end {\n                    if interval1.start <= interval2.start {\n\
    \                        if interval1.end <= interval2.end {\n               \
    \             if interval1.start <= interval2.end {\n                        \
    \        if interval1.end <= interval2.start {\n                             \
    \       if interval1.start <= interval2.end {\n                              \
    \          if interval1.end <= interval2.end {\n                             \
    \               if interval1.start <= interval2.end {\n                      \
    \                          if interval1.end <= interval2.start {\n           \
    \                                         if interval1.end <= interval2.end {\n\
    \                                                        if interval1.start <=\
    \ interval2.end {\n                                                          \
    \  if interval1.end <= interval2.start {\n                                   \
    \                             if interval1.end <= interval2.end {\n          \
    \                                                          if interval1.start\
    \ <= interval2.end {\n                                                       \
    \                 if interval1.end <= interval2.start {\n                    \
    \                                                        if interval1.end <= interval2.end\
    \ {\n                                                                        \
    \        if interval1.start <= interval2.end {\n                             \
    \                                                       if interval1.end <= interval2.start\
    \ {\n                                                                        \
    \                if interval1.end <= interval2.end {\n                       \
    \                                                                     if interval1.start\
    \ <= interval2.end {\n                                                       \
    \                                         if interval1.end <= interval2.start\
    \ {\n                                                                        \
    \                            if interval1.end <= interval2.end {\n           \
    \                                                                            \
    \                 if interval1.start <= interval2.end {\n                    \
    \                                                                            \
    \            if interval1.end <= interval2.start {\n                         \
    \                                                                            \
    \           if interval1.end <= interval2.end {\n                            \
    \                                                                            \
    \            if interval1.start <= interval2.end {\n                         \
    \                                                                            \
    \                   if interval1.end <= interval2.start {\n                  \
    \                                                                            \
    \                              if interval1.end <= interval2.end {\n         \
    \                                                                            \
    \                                                           if interval1.start\
    \ <= interval2.end {\n                                                       \
    \                                                                            \
    \                 if interval1.end <= interval2.start {\n                    \
    \                                                                            \
    \                                                        if interval1.end <= interval2.end\
    \ {\n                                                                        \
    \                                                                            \
    \        if interval1.start <= interval2.end {\n                             \
    \                                                                            \
    \                                                       if interval1.end <= interval2.start\
    \ {\n                                                                        \
    \                                                                            \
    \                if interval1.end <= interval2.end {\n                       \
    \                                                                            \
    \                                                                     if interval1.start\
    \ <= interval2.end {\n                                                       \
    \                                                                            \
    \                                         if interval1.end <= interval2.start\
    \ {\n                                                                        \
    \                                                                            \
    \                            if interval1.end <= interval2.end {\n           \
    \                                                                            \
    \                                                                            \
    \                 if interval1.start <= interval2.end {\n                    \
    \                                                                            \
    \                                                                            \
    \            if interval1.end <= interval2.start {\n                         \
    \                                                                            \
    \                                                                            \
    \           if interval1.end <= interval2.end {\n                            \
    \                                                                            \
    \                                                                            \
    \                            if interval1.start <= interval2.end ", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut interval1_len = interval1_end - interval1_start;\n    let mut interval2_len\
    \ = interval2_end - interval2_start;\n    let mut intersection_len = interval1_len\
    \ + interval2_len;\n    if interval1_len > interval2_len {\n        interval1_len\
    \ = interval2_len;\n        interval2_start = interval1[0];\n        interval2_end\
    \ = interval1[1];\n    }\n    if interval2_len > interval1_len {\n        interval2_len\
    \ = interval1_len;\n        interval1_start = interval2[0];\n        interval1_end\
    \ = interval2[1];\n    }\n    if interval1_len == interval2_len {\n        if\
    \ interval1_start <= interval2_start {\n            interval1_start = interval2_start;\n\
    \            interval1_end = interval2_end;\n        } else {\n            interval2_start\
    \ = interval1_start;\n            interval2_end = interval1_end;\n        }\n\
    \    }\n    if interval1_len > 1 {\n        interval1_len = interval1_len / 2;\n\
    \    }\n    if interval2_len > 1 {\n        interval2_len = interval2_len / 2;\n\
    \    }\n    if interval1_len == 1 {\n        if interval2_len == 1 {\n       \
    \     if interval1_start == interval2_start {\n                return String::from(\"\
    YES\");\n            }\n            return String::from(\"NO\");\n        }\n\
    \        return String::from(\"NO\");\n    }\n    if interval2_len == 1 {\n  \
    \      return String::from(\"NO\");\n    }\n    if interval1_len == interval2_len\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n            interval1_end = interval2_end;\n        } else\
    \ {\n            interval2_start = interval1_start;\n            interval2_end\
    \ = interval1_end;\n        }\n    }\n    if interval1_len > interval2_len {\n\
    \        interval1_len = interval2_len;\n        interval2_start = interval1[0];\n\
    \        interval2_end = interval1[1];\n    }\n    if interval2_len > interval1_len\
    \ {\n        interval2_len = interval1_len;\n        interval1_start = interval2[0];\n\
    \        interval1_end = interval2[1];\n    }\n    if interval1_len == interval2_len\
    \ {\n        if interval1_start <= interval2_start {\n            interval1_start\
    \ = interval2_start;\n            interval1_end = interval2_end;\n        } else\
    \ {\n            interval2_start = interval1_start;\n            interval2_end\
    \ = interval1_end;\n        }\n    }\n    if interval1_len > ", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_start\
    \ > interval2_end {\n        interval1_start, interval2_end = interval2_end, interval1_start;\n\
    \    }\n    if interval1_end < interval2_start {\n        interval1_end, interval2_start\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start == interval1_end\
    \ {\n        if interval2_start == interval2_end {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";\n    }\n    if interval2_start == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_end > interval2_end {\n     \
    \   return \"NO\";\n    }\n    if interval1_start < interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end > interval2_start {\n        return \"\
    YES\";\n    }", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    let mut interval1_length = interval1_end - interval1_start;\n\
    \    let mut interval2_length = interval2_end - interval2_start;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n        interval1_length = interval2_end - interval2_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end = interval2_end;\n\
    \        interval1_length = interval2_end - interval2_start;\n    }\n    if interval1_length\
    \ == interval2_length {\n        if interval1_start == interval1_end {\n     \
    \       return \"YES\";\n        } else {\n            return \"NO\";\n      \
    \  }\n    }\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if interval1_length == 3 {\n      \
    \  if interval1_start == interval1_end {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 4 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    if\
    \ interval1_length == 5 {\n        if interval1_start == interval1_end {\n   \
    \         return \"YES\";\n        } else {\n            return \"NO\";\n    \
    \    }\n    }\n    if interval1_length == 6 {\n        if interval1_start == interval1_end\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }\n    }\n    if interval1_length == 7 {\n        if interval1_start\
    \ == interval1_end {\n            return \"YES\";\n        } else {\n        \
    \    return \"NO\";\n        }\n    }\n    if interval1_length == 8 {\n      \
    \  if interval1_start == interval1_end {\n            return \"YES\";\n      \
    \  } else {\n            return \"NO\";\n        }\n    }\n    if interval1_length\
    \ == 9 {\n        if interval1_start == interval1_end {\n            return \"\
    YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n    if\
    \ interval1_length == 10 {\n        if interval1_start == interval1_end {\n  \
    \          return \"YES\";\n        } else {\n            return \"NO\";\n   \
    \     }\n    }\n    if interval1_length == 11 {\n        if interval1_start ==\
    \ interval1_end {\n            return \"YES\";\n        } else {\n           \
    \ return \"NO\";\n        }\n    }\n    if interval1_length == 12 {\n        if\
    \ interval1_start == ", "    if interval1[0] < interval1[1] && interval2[0] <\
    \ interval2[1] {\n        if interval1[0] < interval2[0] {\n            let mut\
    \ interval = interval1;\n            interval[0] = interval2[0];\n           \
    \ interval[1] = interval2[1];\n            return interval_length(interval);\n\
    \        } else {\n            let mut interval = interval2;\n            interval[0]\
    \ = interval1[0];\n            interval[1] = interval1[1];\n            return\
    \ interval_length(interval);\n        }\n    } else {\n        return \"NO\";\n\
    \    }", "    let mut intervals = vec![interval1, interval2];\n    let mut intersection\
    \ = interval1;\n    let mut prime = true;\n    let mut prime_length = 1;\n   \
    \ let mut prime_start = 0;\n    let mut prime_end = 0;\n    let mut prime_end2\
    \ = interval1.1;\n    let mut prime_end3 = interval1.2;\n    let mut prime_end4\
    \ = interval1.3;\n    let mut prime_end5 = interval1.4;\n    let mut prime_end6\
    \ = interval1.5;\n    let mut prime_end7 = interval1.6;\n    let mut prime_end8\
    \ = interval1.7;\n    let mut prime_end9 = interval1.8;\n    let mut prime_end10\
    \ = interval1.9;\n    let mut prime_end11 = interval1.10;\n    let mut prime_end12\
    \ = interval1.11;\n    let mut prime_end13 = interval1.12;\n    let mut prime_end14\
    \ = interval1.13;\n    let mut prime_end15 = interval1.14;\n    let mut prime_end16\
    \ = interval1.15;\n    let mut prime_end17 = interval1.16;\n    let mut prime_end18\
    \ = interval1.17;\n    let mut prime_end19 = interval1.18;\n    let mut prime_end20\
    \ = interval1.19;\n    let mut prime_end21 = interval1.20;\n    let mut prime_end22\
    \ = interval1.21;\n    let mut prime_end23 = interval1.22;\n    let mut prime_end24\
    \ = interval1.23;\n    let mut prime_end25 = interval1.24;\n    let mut prime_end26\
    \ = interval1.25;\n    let mut prime_end27 = interval1.26;\n    let mut prime_end28\
    \ = interval1.27;\n    let mut prime_end29 = interval1.28;\n    let mut prime_end30\
    \ = interval1.29;\n    let mut prime_end31 = interval1.30;\n    let mut prime_end32\
    \ = interval1.31;\n    let mut prime_end33 = interval1.32;\n    let mut prime_end34\
    \ = interval1.33;\n    let mut prime_end35 = interval1.34;\n    let mut prime_end36\
    \ = interval1.35;\n    let mut prime_end37 = interval1.36;\n    let mut prime_end38\
    \ = interval1.37;\n    let mut prime_end39 = interval1.38;\n", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n\n    if interval1_start\
    \ <= interval2_end {\n        if interval1_end >= interval2_start {\n        \
    \    if interval1_end > interval2_end {\n                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n            }\n            if interval1_start\
    \ <= interval2_start {\n                if interval1_end <= interval2_end {\n\
    \                    if interval1_end < interval2_end {\n                    \
    \    interval1_end, interval2_end = interval2_end, interval1_end;\n          \
    \          }\n                    if interval1_start <= interval2_start {\n  \
    \                      if interval1_end <= interval2_end {\n                 \
    \           if interval1_end < interval2_end {\n                             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \                 }\n                            if interval1_start <= interval2_start\
    \ {\n                                if interval1_end <= interval2_end {\n   \
    \                                 if interval1_end < interval2_end {\n       \
    \                                 interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                    }\n                    \
    \                if interval1_start <= interval2_start {\n                   \
    \                     if interval1_end <= interval2_end {\n                  \
    \                          if interval1_end < interval2_end {\n              \
    \                                  interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                                            }\n            \
    \                                if interval1_start <= interval2_start {\n   \
    \                                             if interval1_end <= interval2_end\
    \ {\n                                                    if interval1_end < interval2_end\
    \ {\n                                                        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                                          \
    \          }\n                                                    if interval1_start\
    \ <= interval2_start {\n                                                     \
    \   if interval1_end <= interval2_end {\n                                    \
    \                        if interval1_end < interval2_end {\n                \
    \                                                interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n                                          \
    \                  }\n                                                       \
    \ }\n                                                    }\n                 \
    \                               }\n                                          \
    \  }\n                                        }\n                            \
    \        }\n                                }\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n\n    if interval1_end >= interval2_start {\n     \
    \   if interval1_end > interval2_end {\n            interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n        }\n        if interval1_start <= interval2_start\
    \ {\n            if interval1_", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    if interval1_len == interval2_len {\n        if interval1_start <= interval2_start\
    \ {\n            interval1_start = interval2_start;\n            interval1_len\
    \ = interval2_len;\n        } else {\n            interval2_start = interval1_start;\n\
    \            interval2_len = interval1_len;\n        }\n    }\n    if interval1_len\
    \ > interval2_len {\n        interval1_len = interval2_len;\n    }\n    if interval1_len\
    \ == 1 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len ==\
    \ 2 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len == 3 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_len == 4 {\n     \
    \   if interval1_start == interval2_start {\n            return \"YES\";\n   \
    \     }\n        return \"NO\";\n    }\n    if interval1_len == 5 {\n        if\
    \ interval1_start == interval2_start {\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if interval1_len == 6 {\n        if interval1_start\
    \ == interval2_start {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if interval1_len == 7 {\n        if interval1_start == interval2_start\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if interval1_len == 8 {\n        if interval1_start == interval2_start {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ interval1_len == 9 {\n        if interval1_start == interval2_start {\n    \
    \        return \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len\
    \ == 10 {\n        if interval1_start == interval2_start {\n            return\
    \ \"YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len ==\
    \ 11 {\n        if interval1_start == interval2_start {\n            return \"\
    YES\";\n        }\n        return \"NO\";\n    }\n    if interval1_len == 12 {\n\
    \        if interval1_start == interval2_start {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if interval1_len == 13 {\n    \
    \    if interval1_start == interval2_start {\n            return \"YES", "   \
    \ let mut interval = interval1;\n    let mut interval2 = interval2;\n    let mut\
    \ interval_len = interval1.0;\n    let mut interval2_len = interval2.0;\n    let\
    \ mut interval_end = interval1.0;\n    let mut interval2_end = interval2.0;\n\
    \    let mut interval_start = interval1.0;\n    let mut interval2_start = interval2.0;\n\
    \    let mut interval_mid = interval1.0;\n    let mut interval2_mid = interval2.0;\n\
    \    let mut interval_mid2 = interval1.0;\n    let mut interval2_mid2 = interval2.0;\n\
    \    let mut interval_mid3 = interval1.0;\n    let mut interval2_mid3 = interval2.0;\n\
    \    let mut interval_mid4 = interval1.0;\n    let mut interval2_mid4 = interval2.0;\n\
    \    let mut interval_mid5 = interval1.0;\n    let mut interval2_mid5 = interval2.0;\n\
    \    let mut interval_mid6 = interval1.0;\n    let mut interval2_mid6 = interval2.0;\n\
    \    let mut interval_mid7 = interval1.0;\n    let mut interval2_mid7 = interval2.0;\n\
    \    let mut interval_mid8 = interval1.0;\n    let mut interval2_mid8 = interval2.0;\n\
    \    let mut interval_mid9 = interval1.0;\n    let mut interval2_mid9 = interval2.0;\n\
    \    let mut interval_mid10 = interval1.0;\n    let mut interval2_mid10 = interval2.0;\n\
    \    let mut interval_mid11 = interval1.0;\n    let mut interval2_mid11 = interval2.0;\n\
    \    let mut interval_mid12 = interval1.0;\n    let mut interval2_mid12 = interval2.0;\n\
    \    let mut interval_mid13 = interval1.0;\n    let mut interval2_mid13 = interval2.0;\n\
    \    let mut interval_mid14 = interval1.0;\n    let mut interval2_mid14 = interval2.0;\n\
    \    let mut interval_mid15 = interval1.0;\n    let mut interval2_mid15 = interval2.0;\n\
    \    let mut interval_mid16 = interval1.0;\n    let mut interval2_mid16 = interval2.0;\n\
    \    let mut interval_mid17 = interval1.0;\n    let mut interval2_mid17 = interval2.0;\n\
    \    let mut interval_mid18 = interval1.0;\n    let mut interval2_mid18 = interval2.0;\n\
    \    let mut interval_mid19 = interval1.0;\n    let mut interval2_mid19 = interval2.0;\n\
    \    let mut interval", "    let mut interval1_start = interval1[0];\n    let\
    \ mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    if interval1_start > interval2_start\
    \ {\n        interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \    }\n    if interval1_end < interval2_end {\n        interval1_end, interval2_end\
    \ = interval2_end, interval1_end;\n    }\n    if interval1_start > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_end < interval2_start {\n\
    \        return \"NO\";\n    }\n    if interval1_start == interval1_end {\n  \
    \      return \"NO\";\n    }\n    if interval1_start < interval2_start {\n   \
    \     return \"NO\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"NO\";\n    }\n    let mut interval1_length = interval1_end - interval1_start\
    \ + 1;\n    let mut interval2_length = interval2_end - interval2_start + 1;\n\
    \    if interval1_length == interval2_length {\n        return \"YES\";\n    }\n\
    \    if interval1_length < interval2_length {\n        interval1_length = interval2_length;\n\
    \    }\n    if interval1_length == 1 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 2 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 3 {\n        return \"YES\";\n    }\n    if interval1_length == 4 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 5 {\n        return \"\
    YES\";\n    }\n    if interval1_length == 6 {\n        return \"YES\";\n    }\n\
    \    if interval1_length == 7 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 8 {\n        return \"YES\";\n    }\n    if interval1_length == 9 {\n   \
    \     return \"YES\";\n    }\n    if interval1_length == 10 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 11 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 12 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 13 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 14 {\n        return \"YES\";\n    }\n    if interval1_length == 15 {\n \
    \       return \"YES\";\n    }\n    if interval1_length == 16 {\n        return\
    \ \"YES\";\n    }\n    if interval1_length == 17 {\n        return \"YES\";\n\
    \    }\n    if interval1_length == 18 {\n        return \"YES\";\n    }\n    if\
    \ interval1_length == 19 {\n        return \"YES\";\n    }\n    if interval1_length\
    \ == 20 {\n        return \"YES\";\n    }\n    if interval1_length == 21 {\n \
    \       return \"", "    if interval1[0] < interval1[1] && interval2[0] < interval2[1]\
    \ {\n        let mut interval = interval1;\n        interval[0] = interval1[0];\n\
    \        interval[1] = interval1[1];\n        interval = interval2;\n        interval[0]\
    \ = interval2[0];\n        interval[1] = interval2[1];\n        let mut intersection\
    \ = interval;\n        let mut length = 1;\n        while intersection[0] < intersection[1]\
    \ {\n            if interval[0] < intersection[0] {\n                intersection[0]\
    \ = interval[0];\n            } else {\n                intersection[0] = intersection[0];\n\
    \            }\n            if interval[1] > intersection[1] {\n             \
    \   intersection[1] = interval[1];\n            } else {\n                intersection[1]\
    \ = intersection[1];\n            }\n            length += 1;\n        }\n   \
    \     if length == 2 {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    return \"NO\";", "    let mut interval1_start = interval1[0];\n\
    \    let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    let mut intersection_len = interval1_len + interval2_len;\n    let mut prime_number:\
    \ isize = 1;\n    let mut prime_number_flag = true;\n    let mut prime_number_flag2\
    \ = true;\n    let mut prime_number_flag3 = true;\n    let mut prime_number_flag4\
    \ = true;\n    let mut prime_number_flag5 = true;\n    let mut prime_number_flag6\
    \ = true;\n    let mut prime_number_flag7 = true;\n    let mut prime_number_flag8\
    \ = true;\n    let mut prime_number_flag9 = true;\n    let mut prime_number_flag10\
    \ = true;\n    let mut prime_number_flag11 = true;\n    let mut prime_number_flag12\
    \ = true;\n    let mut prime_number_flag13 = true;\n    let mut prime_number_flag14\
    \ = true;\n    let mut prime_number_flag15 = true;\n    let mut prime_number_flag16\
    \ = true;\n    let mut prime_number_flag17 = true;\n    let mut prime_number_flag18\
    \ = true;\n    let mut prime_number_flag19 = true;\n    let mut prime_number_flag20\
    \ = true;\n    let mut prime_number_flag21 = true;\n    let mut prime_number_flag22\
    \ = true;\n    let mut prime_number_flag23 = true;\n    let mut prime_number_flag24\
    \ = true;\n    let mut prime_number_flag25 = true;\n    let mut prime_number_flag26\
    \ = true;\n    let mut prime_number_flag27 = true;\n    let mut prime_number_flag28\
    \ = true;\n    let mut prime_number_flag29 = true;\n    let mut prime_number_flag30\
    \ = true;\n    let mut prime_number_flag31 = true;\n    let mut prime_number_flag32\
    \ = true;\n    let mut prime_number_flag33 = true;\n    let mut prime_number_flag34\
    \ = true;\n    let mut prime_number_flag35 = true;\n    let mut prime_number_flag36\
    \ = true;\n    let mut prime_number_flag37 = true;\n    let mut prime_number_flag38\
    \ = true;\n    let mut prime_number_flag39 = true;\n    let mut prime_number_flag40\
    \ = true;\n    let mut prime_number_flag41 = true;\n    let mut prime_number_flag42\
    \ = ", "    let mut interval1_start = interval1[0];\n    let mut interval1_end\
    \ = interval1[1];\n    let mut interval2_start = interval2[0];\n    let mut interval2_end\
    \ = interval2[1];\n    if interval1_start > interval2_start {\n        interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n    }\n    if interval1_end\
    \ < interval2_end {\n        interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \    }\n    if interval1_start > interval2_end {\n        interval1_start, interval2_end\
    \ = interval2_end, interval1_start;\n    }\n    if interval1_end < interval2_start\
    \ {\n        interval1_end, interval2_start = interval2_start, interval1_end;\n\
    \    }\n    if interval1_start == interval1_end {\n        if interval2_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       return String::from(\"NO\");\n    }\n    let mut interval1_length = interval1_end\
    \ - interval1_start;\n    let mut interval2_length = interval2_end - interval2_start;\n\
    \    if interval1_length == interval2_length {\n        return String::from(\"\
    YES\");\n    }\n    if interval1_length < interval2_length {\n        interval1_length,\
    \ interval2_length = interval2_length, interval1_length;\n    }\n    if interval1_length\
    \ == 2 {\n        if interval2_length == 2 {\n            return String::from(\"\
    YES\");\n        }\n        return String::from(\"NO\");\n    }\n    if interval1_length\
    \ == 3 && interval2_length == 3 {\n        if interval1_start == interval2_start\
    \ {\n            return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_length == 3 && interval2_length == 4 {\n     \
    \   if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n        if interval1_end == interval2_end {\n            return\
    \ String::from(\"YES\");\n        }\n        return String::from(\"NO\");\n  \
    \  }\n    if interval1_length == 4 && interval2_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval1_end == interval2_start + 1 {\n      \
    \      return String::from(\"YES\");\n        }\n        return String::from(\"\
    NO\");\n    }\n    if interval1_length == 4 && interval2_length == 4 {\n     \
    \   if interval1_start == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n        if interval1_end ", "    let mut interval1_start =\
    \ interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval2_start {\n        interval1_start = interval2_start;\n        interval1_end\
    \ = interval2_end;\n        interval2_start = interval1_start;\n        interval2_end\
    \ = interval1_end;\n    }\n    if interval1_end < interval2_end {\n        interval1_end\
    \ = interval2_end;\n        interval1_start = interval2_start;\n        interval2_end\
    \ = interval1_end;\n        interval2_start = interval1_start;\n    }\n    if\
    \ interval1_start > interval2_end {\n        intersection_start = interval2_start;\n\
    \        intersection_end = interval2_end;\n    } else {\n        intersection_start\
    \ = interval1_start;\n        intersection_end = interval1_end;\n    }\n    if\
    \ intersection_start > intersection_end {\n        return \"NO\";\n    }\n   \
    \ if interval1_start == interval1_end {\n        return \"YES\";\n    }\n    if\
    \ interval2_start == interval2_end {\n        return \"YES\";\n    }\n    if interval1_start\
    \ < interval2_start {\n        return \"NO\";\n    }\n    if interval1_end > interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n\
    \        return \"YES\";\n    }\n    if interval1_end > interval2_start {\n  \
    \      return \"YES\";\n    }\n    if interval1_start == interval1_end {\n   \
    \     return \"YES\";\n    }\n    if interval2_start == interval2_end {\n    \
    \    return \"YES\";\n    }\n    if interval1_start < interval2_start {\n    \
    \    return \"YES\";\n    }\n    if interval1_end > interval2_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_start < interval2_end {\n        return \"\
    YES\";\n    }\n    if interval1_end > interval2_start {\n        return \"YES\"\
    ;\n    }\n    if interval1_start == interval1_end {\n        return \"YES\";\n\
    \    }\n    if interval2_start == interval2_end {\n        return \"YES\";\n \
    \   }\n    if interval1_start < interval2_start {\n        return \"YES\";\n \
    \   }\n    if interval1_end > interval2_end {\n        return \"YES\";\n    }\n\
    \    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n  \
    \  if interval1_end > interval2_start {\n        return \"YES\";\n    }\n    if\
    \ interval1_start == interval1_end {\n        return \"YES\";\n", "    let mut\
    \ intervals = vec![];\n    intervals.push(interval1);\n    intervals.push(interval2);\n\
    \    let mut intersection = interval1;\n    let mut intersection_length = interval1.0;\n\
    \    let mut interval_length = interval1.0;\n    let mut interval_start = interval1.0;\n\
    \    let mut interval_end = interval1.0;\n    let mut interval_start_end = interval1.0;\n\
    \    let mut interval_end_start = interval1.0;\n    let mut interval_start_end_length\
    \ = interval1.0;\n    let mut interval_end_start_length = interval1.0;\n    let\
    \ mut interval_start_end_start_length = interval1.0;\n    let mut interval_end_start_start_length\
    \ = interval1.0;\n    let mut interval_start_end_end_length = interval1.0;\n \
    \   let mut interval_end_start_end_length = interval1.0;\n    let mut interval_start_end_end_start_length\
    \ = interval1.0;\n    let mut interval_end_start_end_start_length = interval1.0;\n\
    \    let mut interval_start_end_end_end_length = interval1.0;\n    let mut interval_end_start_end_end_length\
    \ = interval1.0;\n    let mut interval_start_end_end_end_start_length = interval1.0;\n\
    \    let mut interval_end_start_end_end_start_length = interval1.0;\n    let mut\
    \ interval_start_end_end_end_end_length = interval1.0;\n    let mut interval_end_start_end_end_end_length\
    \ = interval1.0;\n    let mut interval_start_end_end_end_end_start_length = interval1.0;\n\
    \    let mut interval_end_start_end_end_end_start_length = interval1.0;\n    let\
    \ mut interval_start_end_end_end_end_end_length = interval1.0;\n    let mut interval_end_start_end_end_end_end_length\
    \ = interval1.0;\n    let mut interval_start_end_end_end_end_end_start_length\
    \ = interval1.0;\n    let mut interval_end_start_end_end_end_end_start_length\
    \ = interval1.0;\n    let mut interval_start_end_end_end_end_end_end_length =\
    \ interval1.0;\n    let mut interval_end_start_end_end_end_end_end_length = interval1.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_start_length = interval1.0;\n\
    \    let mut interval_end_start_end_end_end_end_end_start_length = interval1.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_end_length = interval1.0;\n\
    \    let mut interval_end_start_end_end_end_end_end_end_length = interval1.0;\n\
    \    let mut interval_start_end_end_end_end_end_end_end_start_length = interval1.0;\n\
    \    let mut interval_end_", "    let mut interval1_start = interval1[0];\n  \
    \  let mut interval1_end = interval1[1];\n    let mut interval2_start = interval2[0];\n\
    \    let mut interval2_end = interval2[1];\n    let mut interval1_len = interval1_end\
    \ - interval1_start;\n    let mut interval2_len = interval2_end - interval2_start;\n\
    \    if interval1_len > interval2_len {\n        interval1_len = interval2_len;\n\
    \        interval2_start = interval1[0];\n        interval2_end = interval1[1];\n\
    \    }\n    if interval2_len > interval1_len {\n        interval2_len = interval1_len;\n\
    \        interval1_start = interval2[0];\n        interval1_end = interval2[1];\n\
    \    }\n    if interval1_start <= interval2_end && interval2_start <= interval1_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start\
    \ = interval2_start;\n        }\n        if interval1_end > interval2_end {\n\
    \            interval1_end = interval2_end;\n        }\n        if interval1_end\
    \ < interval2_start {\n            interval1_end = interval2_start;\n        }\n\
    \        if interval1_start < interval1_end {\n            interval1_len = interval1_end\
    \ - interval1_start;\n        }\n        if interval1_len == 1 {\n           \
    \ return \"YES\";\n        }\n        if interval1_len == 2 {\n            return\
    \ \"YES\";\n        }\n        if interval1_len == 3 {\n            return \"\
    YES\";\n        }\n        if interval1_len == 4 {\n            return \"YES\"\
    ;\n        }\n        if interval1_len == 5 {\n            return \"YES\";\n \
    \       }\n        if interval1_len == 6 {\n            return \"YES\";\n    \
    \    }\n        if interval1_len == 7 {\n            return \"YES\";\n       \
    \ }\n        if interval1_len == 8 {\n            return \"YES\";\n        }\n\
    \        if interval1_len == 9 {\n            return \"YES\";\n        }\n   \
    \     if interval1_len == 10 {\n            return \"YES\";\n        }\n     \
    \   if interval1_len == 11 {\n            return \"YES\";\n        }\n       \
    \ if interval1_len == 12 {\n            return \"YES\";\n        }\n        if\
    \ interval1_len == 13 {\n            return \"YES\";\n        }\n        if interval1_len\
    \ == 14 {\n            return \"YES\";\n        }\n        if interval1_len ==\
    \ 15 {\n            return \"YES\";\n        }\n        if interval1_len == 16\
    \ {\n            return \"YES\";\n        }\n        if interval1_len == 17 {\n\
    \            return \"YES\";\n        }\n        if interval1_len == 18 {\n  \
    \          return \"YES\";\n        }\n        if interval1_len == 19 {\n    \
    \        return \"YES\";\n        }\n        if interval1_len == 20 {\n      \
    \      return \"YES\";\n        }\n        if interval1_len == 2", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    let mut intersection_length = 0;\n    while interval1_start <= interval1_end\
    \ && interval2_start <= interval2_end {\n        if interval1_start < interval1_end\
    \ {\n            interval1_start += 1;\n        }\n        if interval2_start\
    \ < interval2_end {\n            interval2_start += 1;\n        }\n        intersection_length\
    \ += 1;\n    }\n    if interval1_start > interval1_end {\n        interval1_start\
    \ = interval1_end;\n    }\n    if interval2_start > interval2_end {\n        interval2_start\
    \ = interval2_end;\n    }\n    if intersection_length == 0 {\n        return \"\
    NO\";\n    }\n    if intersection_length == 1 {\n        return \"YES\";\n   \
    \ }\n    if interval1_start == interval1_end {\n        if interval2_start ==\
    \ interval2_end {\n            return \"YES\";\n        }\n        return \"NO\"\
    ;\n    }\n    if interval2_start == interval2_end {\n        return \"NO\";\n\
    \    }\n    if interval1_start == interval2_start {\n        return \"NO\";\n\
    \    }\n    if interval1_start < interval2_start {\n        return \"NO\";\n \
    \   }\n    if interval1_end > interval2_end {\n        return \"NO\";\n    }\n\
    \    if interval1_start < interval2_end {\n        return \"YES\";\n    }\n  \
    \  if interval1_end > interval2_start {\n        return \"YES\";\n    }\n    if\
    \ intersection_length == 2 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 3 {\n        return \"YES\";\n    }\n    if intersection_length == 4 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 5 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 6 {\n        return \"YES\";\n\
    \    }\n    if intersection_length == 7 {\n        return \"YES\";\n    }\n  \
    \  if intersection_length == 8 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 9 {\n        return \"YES\";\n    }\n    if intersection_length == 10 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 11 {\n        return\
    \ \"YES\";\n    }\n    if intersection_length == 12 {\n        return \"YES\"\
    ;\n    }\n    if intersection_length == 13 {\n        return \"YES\";\n    }\n\
    \    if intersection_length == 14 {\n        return \"YES\";\n    }\n    if intersection_length\
    \ == 15 {\n        return \"YES\";\n    }\n    if intersection_length == 16 {\n\
    \        return \"YES\";\n    }\n    if intersection_length == 17", "    let mut\
    \ interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \n    if interval1_start > interval2_start {\n        interval1_start = interval2_start;\n\
    \        interval1_end = interval2_end;\n    }\n\n    if interval1_end < interval2_end\
    \ {\n        interval1_end = interval2_end;\n        interval1_start = interval2_start;\n\
    \    }\n\n    if interval1_start > interval2_end {\n        interval1_start =\
    \ interval2_end;\n        interval1_end = interval2_start;\n    }\n\n    if interval1_end\
    \ < interval2_start {\n        interval1_end = interval2_start;\n        interval1_start\
    \ = interval2_end;\n    }\n\n    if interval1_start == interval1_end {\n     \
    \   return String::from(\"NO\");\n    }\n\n    let mut interval1_length = interval1_end\
    \ - interval1_start + 1;\n    let mut interval2_length = interval2_end - interval2_start\
    \ + 1;\n\n    if interval1_length == interval2_length {\n        return String::from(\"\
    YES\");\n    }\n\n    if interval1_length < interval2_length {\n        interval1_length\
    \ = interval2_length;\n    }\n\n    if interval1_length == 2 {\n        if interval1_start\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n    }\n\n    if interval1_length == 3 {\n        if interval1_start\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval1_start == interval2_end {\n          \
    \  return String::from(\"YES\");\n        }\n    }\n\n    if interval1_length\
    \ == 4 {\n        if interval1_start == interval2_start {\n            return\
    \ String::from(\"YES\");\n        }\n        if interval1_end == interval2_end\
    \ {\n            return String::from(\"YES\");\n        }\n        if interval1_start\
    \ == interval2_end {\n            return String::from(\"YES\");\n        }\n \
    \       if interval1_end == interval2_start {\n            return String::from(\"\
    YES\");\n        }\n    }\n\n    if interval1_length == 5 {\n        if interval1_start\
    \ == interval2_start {\n            return String::from(\"YES\");\n        }\n\
    \        if interval1_end == interval2_end {\n            return String::from(\"\
    YES\");\n        }\n        if interval1_start == interval2_end {\n          \
    \  return String::from(\"YES\");\n", "    if interval1[0] < interval1[1] && interval2[0]\
    \ < interval2[1] {\n        let mut result = String::from(\"NO\");\n        for\
    \ (a, b) in interval1.iter().zip(interval2.iter()) {\n            if a < b {\n\
    \                result.push_str(\"NO\");\n                break;\n          \
    \  }\n            if a == b {\n                result.push_str(\"YES\");\n   \
    \             break;\n            }\n        }\n        result\n    } else {\n\
    \        String::from(\"NO\")\n    }", "    if interval1[0] < interval1[1] &&\
    \ interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0] {\n  \
    \          return \"NO\".to_string();\n        } else {\n            return \"\
    YES\".to_string();\n        }\n    } else {\n        return \"NO\".to_string();\n\
    \    }", "    let mut interval_1 = interval1.clone();\n    let mut interval_2\
    \ = interval2.clone();\n    let mut intersection = interval1.clone();\n    let\
    \ mut intersection_length = interval1.clone();\n    let mut interval_1_length\
    \ = interval1.clone();\n    let mut interval_2_length = interval2.clone();\n \
    \   let mut prime_numbers = vec![true];\n    let mut prime_numbers_length = vec![true];\n\
    \    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![true];\n    let mut prime_numbers_length\
    \ = vec![true];\n    let mut prime_numbers_length = vec![", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    if interval1_start\
    \ > interval2_start {\n        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n    }\n    if interval1_end < interval2_end {\n        interval1_end,\
    \ interval2_end = interval2_end, interval1_end;\n    }\n    if interval1_end <\
    \ interval2_start {\n        return \"NO\";\n    }\n    if interval1_start ==\
    \ interval2_start {\n        return \"NO\";\n    }\n    if interval1_end == interval2_end\
    \ {\n        return \"NO\";\n    }\n    if interval1_start == interval2_end {\n\
    \        return \"NO\";\n    }\n    if interval1_start < interval2_end {\n   \
    \     return \"YES\";\n    }\n    if interval1_end > interval2_start {\n     \
    \   return \"YES\";\n    }\n    return \"YES\";", "    let mut interval1_start\
    \ = interval1[0];\n    let mut interval1_end = interval1[1];\n    let mut interval2_start\
    \ = interval2[0];\n    let mut interval2_end = interval2[1];\n    let mut intersection_start\
    \ = interval1_start;\n    let mut intersection_end = interval1_end;\n    if interval1_start\
    \ > interval1_end {\n        interval1_start = interval1_end;\n        interval1_end\
    \ = interval1_start;\n    }\n    if interval2_start > interval2_end {\n      \
    \  interval2_start = interval2_end;\n        interval2_end = interval2_start;\n\
    \    }\n    if interval1_start > interval2_start {\n        intersection_start\
    \ = interval2_start;\n        intersection_end = interval2_end;\n    }\n    if\
    \ interval1_end < interval2_end {\n        intersection_start = interval1_start;\n\
    \        intersection_end = interval1_end;\n    }\n    if intersection_start >\
    \ intersection_end {\n        intersection_start = intersection_end;\n       \
    \ intersection_end = intersection_start;\n    }\n    if intersection_start ==\
    \ intersection_end {\n        return \"NO\";\n    }\n    if interval1_start <=\
    \ interval2_start && interval1_end >= interval2_end {\n        return \"YES\"\
    ;\n    }\n    if interval1_start <= intersection_start && interval1_end >= intersection_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && intersection_start <= intersection_end {\n        return \"YES\";\n    }\n\
    \    if interval1_start <= intersection_start && interval2_start <= intersection_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_start <= interval2_start\
    \ && intersection_start <= interval2_end {\n        return \"YES\";\n    }\n \
    \   if interval1_start <= intersection_start && interval2_start <= intersection_end\
    \ {\n        return \"YES\";\n    }\n    if interval1_end >= interval2_start &&\
    \ intersection_start <= interval2_end {\n        return \"YES\";\n    }\n    if\
    \ interval1_end >= intersection_start && interval2_start <= intersection_end {\n\
    \        return \"YES\";\n    }\n    if interval1_end >= interval2_start && intersection_start\
    \ <= interval2_end {\n        return \"YES\";\n    }\n    if interval1_end >=\
    \ intersection_start && interval2_start <= intersection_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end >= interval2_start && intersection_start\
    \ <= interval2_end {\n        return \"YES\";\n    }\n    if interval1_end >=\
    \ intersection_start && interval2_start <= intersection_end {\n        return\
    \ \"YES\";\n    }\n    if interval1_end >= interval2_start ", "    if interval1[0]\
    \ < interval1[1] && interval2[0] < interval2[1] {\n        if interval1[0] < interval2[0]\
    \ {\n            return \"NO\";\n        }\n        if interval1[1] > interval2[1]\
    \ {\n            return \"NO\";\n        }\n        if interval1[0] == interval2[0]\
    \ {\n            return \"YES\";\n        }\n        if interval1[1] == interval2[1]\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";", "   \
    \ let mut interval1_start = interval1[0];\n    let mut interval1_end = interval1[1];\n\
    \    let mut interval2_start = interval2[0];\n    let mut interval2_end = interval2[1];\n\
    \    if interval1_start > interval2_start {\n        interval1_start, interval1_end\
    \ = interval2_start, interval1_end;\n    }\n    if interval1_end < interval2_end\
    \ {\n        interval1_end, interval1_start = interval2_end, interval1_start;\n\
    \    }\n    if interval1_start <= interval1_end && interval2_start <= interval2_end\
    \ {\n        if interval1_start < interval2_start {\n            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n        }\n        if interval1_end\
    \ > interval2_end {\n            interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n        }\n        if interval1_start <= interval2_start &&\
    \ interval1_end >= interval2_end {\n            if interval1_start < interval2_start\
    \ {\n                interval1_start, interval2_start = interval2_start, interval1_start;\n\
    \            }\n            if interval1_end > interval2_end {\n             \
    \   interval1_end, interval2_end = interval2_end, interval1_end;\n           \
    \ }\n            if interval1_start <= interval2_start && interval1_end >= interval2_end\
    \ {\n                if interval1_start < interval2_start {\n                \
    \    interval1_start, interval2_start = interval2_start, interval1_start;\n  \
    \              }\n                if interval1_end > interval2_end {\n       \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \               }\n                if interval1_start <= interval2_start && interval1_end\
    \ >= interval2_end {\n                    if interval1_start < interval2_start\
    \ {\n                        interval1_start, interval2_start = interval2_start,\
    \ interval1_start;\n                    }\n                    if interval1_end\
    \ > interval2_end {\n                        interval1_end, interval2_end = interval2_end,\
    \ interval1_end;\n                    }\n                    if interval1_start\
    \ <= interval2_start && interval1_end >= interval2_end {\n                   \
    \     if interval1_start < interval2_start {\n                            interval1_start,\
    \ interval2_start = interval2_start, interval1_start;\n                      \
    \  }\n                        if interval1_end > interval2_end {\n           \
    \                 interval1_end, interval2_end = interval2_end, interval1_end;\n\
    \                        }\n                        if interval1_start <= interval2_start\
    \ && interval1_end >= interval2_end {\n                            if interval1_start\
    \ < interval2_start {\n                                interval1_start, interval2_start\
    \ = interval2_start, interval1_start;\n                            }\n       \
    \                     if interval1_end > interval2_end {\n                   \
    \             interval1_end, interval2_end = interval2_end, interval1_end;\n \
    \                           }\n", "    let mut intervals = vec![];\n    intervals.push(interval1);\n\
    \    intervals.push(interval2);\n    let mut intersection = intervals.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut prime = true;\n    for interval in intervals {\n        if interval[0]\
    \ > interval[1] {\n            return String::from(\"NO\");\n        }\n    }\n\
    \    for interval in intervals {\n        let mut prime = true;\n        for interval2\
    \ in intervals {\n            if interval[0] == interval2[0] && interval[1] ==\
    \ interval2[1] {\n                prime = false;\n            }\n        }\n \
    \       if prime {\n            intersection.push(interval);\n        }\n    }\n\
    \    if intersection.len() == 1 {\n        return String::from(\"YES\");\n   \
    \ }\n    if intersection.len() == 2 {\n        return String::from(\"NO\");\n\
    \    }\n    if intersection.len() == 3 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 4 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 5 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 6 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 7 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 8 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 9 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 10 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 11 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 12 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 13 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 14 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 15 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 16 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 17 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 18 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 19 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 20 {\n        return String::from(\"NO\"\
    );\n    }\n    if intersection.len() == 21 {\n        return String::from(\"YES\"\
    );\n    }\n    if intersection.len() == 22 {\n        return String", "    let\
    \ mut interval = interval1;\n    if interval1[0] > interval2[1] {\n        interval\
    \ = interval2;\n    }\n    if interval[0] > interval[1] {\n        return \"NO\"\
    ;\n    }\n    let mut len = 1;\n    let mut i = 1;\n    while i <= interval[0]\
    \ {\n        if interval[1] < i {\n            break;\n        }\n        i +=\
    \ 1;\n        len += 1;\n    }\n    if len == 2 {\n        return \"YES\";\n \
    \   }\n    if len % 2 == 0 {\n        return \"NO\";\n    }\n    let mut i = 1;\n\
    \    let mut j = 1;\n    while i <= interval[1] {\n        if interval[0] < j\
    \ {\n            break;\n        }\n        j += 1;\n        i += 1;\n    }\n\
    \    if j == 2 {\n        return \"YES\";\n    }\n    if j % 2 == 0 {\n      \
    \  return \"NO\";\n    }\n    let mut i = 1;\n    let mut j = 1;\n    while i\
    \ <= interval[0] {\n        if interval[1] < j {\n            break;\n       \
    \ }\n        j += 1;\n        i += 1;\n    }\n    if j == 2 {\n        return\
    \ \"YES\";\n    }\n    if j % 2 == 0 {\n        return \"NO\";\n    }\n    let\
    \ mut i = 1;\n    let mut j = 1;\n    while i <= interval[1] {\n        if interval[0]\
    \ < j {\n            break;\n        }\n        j += 1;\n        i += 1;\n   \
    \ }\n    if j == 2 {\n        return \"YES\";\n    }\n    if j % 2 == 0 {\n  \
    \      return \"NO\";\n    }\n    return \"NO\";"]
stop_tokens:
- "\n}"
