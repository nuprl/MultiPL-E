name: HumanEval_8_sum_product
language: rs
prompt: "/// For a given list of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a list.\n/// Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n/// >>> sum_product(vec![])\n/// (0, 1)\n\
  /// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers: Vec<isize>)\
  \ -> (isize, isize) {\n"
tests: "}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)", "    let mut\
    \ sum = 0;\n    let mut product = 1;\n    for n in numbers {\n        sum += n;\n\
    \        product *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n  \
    \  let mut product = 1;\n    for n in numbers {\n        sum += n;\n        product\
    \ *= n;\n    }\n    (sum, product)", "    let mut sum = 0;\n    let mut product\
    \ = 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n   \
    \ }\n    (sum, product)", "    let mut sum = 0;\n    let mut product = 1;\n  \
    \  for n in numbers {\n        sum += n;\n        product *= n;\n    }\n    (sum,\
    \ product)", "    let mut sum = 0;\n    let mut product = 1;\n    for n in numbers\
    \ {\n        sum += n;\n        product *= n;\n    }\n    (sum, product)", " \
    \   let mut sum = 0;\n    let mut product = 1;\n    for n in numbers {\n     \
    \   sum += n;\n        product *= n;\n    }\n    (sum, product)"]
stop_tokens:
- "\n}"
