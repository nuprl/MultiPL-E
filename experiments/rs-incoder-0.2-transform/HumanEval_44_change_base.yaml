name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\"\
  )\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize,\
  \ base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut s = String::new();\n    let mut x = x;\n    while x >=\
    \ base {\n        x /= base;\n        s += &format!(\"{}\", x);\n    }\n    s\
    \ += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut remainder = x;\n    while remainder > base\
    \ {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ remainder.to_string());\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = vec![0u8; base];\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        remainder %= base;\n        digits[remainder]++;\n    }\n    for digit\
    \ in digits {\n        s += char::from_u32(digit as u32).unwrap();\n    }\n  \
    \  s", "    let mut result = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        result = format!(\"{}{}\", digit, result);\n  \
    \  }\n    result", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let mut digit = remainder % base;\n      \
    \  remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n \
    \   }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.len();\n    while digits_len > base_len {\n     \
    \   digits = &digits[digits_len - base_len..digits_len];\n        base = &base[base_len..base_len\
    \ + digits_len - base_len];\n        base_len += digits_len - base_len;\n    }\n\
    \    while base_len > digits_len {\n        base = &base[base_len - digits_len..base_len];\n\
    \        base_len -= digits_len;\n    }\n    while digits_len > 0 {\n        if\
    \ digits[digits_len - 1] == '0' {\n            digits = &digits[0..digits_len\
    \ - 1];\n            digits_len -= 1;\n        } else {\n            break;\n\
    \        }\n    }\n    while base_len > 0 {\n        if base[base_len - 1] ==\
    \ '0' {\n            base = &base[0..base_len - 1];\n            base_len -= 1;\n\
    \        } else {\n            break;\n        }\n    }\n    s += &base[0..base_len];\n\
    \    s += &digits[0..digits_len];\n    s", "    let mut s = String::new();\n \
    \   let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut x = x;\n    while x >= base {\n        s +=\n  \
    \          format!(\"{}\", x % base).to_string()\n                .chars()\n \
    \               .map(|c| match c {\n                    '0' => '0',\n        \
    \            '1' => '1',\n                    '2' => '2',\n                  \
    \  '3' => '3',\n                    '4' => '4',\n                    '5' => '5',\n\
    \                    '6' => '6',\n                    '7' => '7',\n          \
    \          '8' => '8',\n                    '9' => '9',\n                    _\
    \ => panic!(\"Invalid character in base\"),\n                })\n            \
    \    .collect::<Vec<_>>()\n                .join();\n        x /= base;\n    }\n\
    \    s +=\n        format!(\"{}\", x).to_string()\n            .chars()\n    \
    \        .map(|c| match c {\n                '0' => '0',\n                '1'\
    \ => '1',\n                '2' => '2',\n                '3' => '3',\n        \
    \        '4' => '4',\n                '5' => '5',\n                '6' => '6',\n\
    \                '7' => '7',\n                '8' => '8',\n                '9'\
    \ => '9',\n                _ => panic!(\"Invalid character in base\"),\n     \
    \       })\n            .collect::<Vec<_>>()\n            .join();\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = 0;\n    let\
    \ mut digits = String::new();\n    while x >= base {\n        remainder = x %\
    \ base;\n        digits.push(char::from(remainder + '0'));\n        x = x / base;\n\
    \    }\n    digits.push(char::from(x));\n    s += &digits;\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while let Some(digit) = digits.iter().find(|&d| d >= '0') {\n\
    \        let mut new_digit = digit as isize;\n        if let Some(base_index)\
    \ = base.iter().find(|&b| b >= '0') {\n            new_digit += base_index as\
    \ isize;\n        }\n        if new_digit > 9 {\n            new_digit -= 10;\n\
    \            carry = 1;\n        }\n        s.push((new_digit as char).to_string());\n\
    \    }\n    if carry != 0 {\n        s.push('1');\n    }\n    String::from(s)",
  "    let mut result = String::new();\n    let mut x = x as isize;\n    let mut base\
    \ = base as isize;\n    while x >= base {\n        result.push((x % base) as char);\n\
    \        x /= base;\n    }\n    result.push((x as char) as char);\n    result",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, base.to_string());\n    }\n    while remainder > 0 {\n\
    \        remainder -= 1;\n        digits.insert(0, base.to_string());\n    }\n\
    \    s += digits;\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut digits = base;\n    while remainder > 0 {\n        if remainder\
    \ >= base {\n            s.push((remainder % base).to_string());\n           \
    \ remainder = remainder / base;\n        } else {\n            s.push((remainder\
    \ % base).to_string());\n            digits = base;\n        }\n    }\n    s.push((remainder\
    \ % base).to_string());\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ base = base;\n    while remainder > 0 {\n        let digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digits,\
    \ digit);\n        base = base * 10;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n\
    \        if digit == '0' {\n            digit = base[i % base.len()].to_string();\n\
    \            i += 1;\n        }\n        let mut new_digit = digit + &carry;\n\
    \        if new_digit > '9' {\n            new_digit -= 10;\n            carry\
    \ = 1;\n        } else {\n            carry = 0;\n        }\n        s.push((new_digit\
    \ as char).to_string());\n    }\n    if carry != 0 {\n        s.push('0');\n \
    \   }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    basedigits[base] = '.';\n    s += basedigits.join(\"\");\n    s", "    let\
    \ mut s = String::new();\n    let mut x = x as isize;\n    let mut base = base\
    \ as isize;\n    while x >= base {\n        s += &format!(\"{:0{}}\", x, base);\n\
    \        x /= base;\n    }\n    s += &format!(\"{:0{}}\", x, base);\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut x = x;\n    while x >= base\
    \ {\n        s +=\n            format!(\"{}\", x / base).to_string()\n       \
    \         .chars()\n                .map(|c| match c {\n                    '0'\
    \ => '0',\n                    '1' => '1',\n                    '2' => '2',\n\
    \                    '3' => '3',\n                    '4' => '4',\n          \
    \          '5' => '5',\n                    '6' => '6',\n                    '7'\
    \ => '7',\n                    '8' => '8',\n                    '9' => '9',\n\
    \                    _ => panic!(\"Invalid base\"),\n                })\n    \
    \            .collect::<Vec<_>>()\n                .join();\n        x %= base;\n\
    \    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base > 10 {\n            s.push_str(&digits[i..i + base.len()]);\n\
    \            break;\n        }\n        let mut digit = digits[i..i + base.len()];\n\
    \        if digit == base.to_string() {\n            s.push_str(&digit);\n   \
    \         i += base.len();\n        } else {\n            s.push_str(&digit);\n\
    \            i += digit.len();\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.remove(0);\n        if digit < base {\n\
    \            digit *= power;\n        }\n        s += digit.to_string();\n   \
    \     power <<= 1;\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = x;\n    let mut quotient =\
    \ x;\n    while remainder > 0 {\n        remainder %= base;\n        digits.push(match\
    \ remainder {\n            0 => \"0\",\n            1 => \"1\",\n            2\
    \ => \"2\",\n            3 => \"3\",\n            4 => \"4\",\n            5 =>\
    \ \"5\",\n            6 => \"6\",\n            7 => \"7\",\n            8 => \"\
    8\",\n            9 => \"9\",\n            _ => panic!(\"Invalid base\"),\n  \
    \      });\n        remainder /= base;\n    }\n    while quotient > 0 {\n    \
    \    quotient /= base;\n        s.push((digits[quotient as usize]).to_string());\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.size() {\n        let mut digit = digits[i];\n        if\
    \ base == 10 {\n            digit = digit.to_string();\n            digit = digit.chars().nth(digit.len()\
    \ - 1).unwrap().to_string();\n        }\n        i += 1;\n        if digit >=\
    \ '0' && digit <= '9' {\n            s += digit.to_string();\n        } else {\n\
    \            s += &format!(\"{}{}\", digit, base);\n        }\n    }\n    s",
  "    let mut s = String::new();\n    let mut x = x.to_digits();\n    let mut base\
    \ = base.to_digits();\n    while x.len() > 0 {\n        let mut carry = 0;\n \
    \       for &d in &mut x {\n            match &base {\n                2 => s.push_str(&format!(\"\
    {}{}\", d, &carry)),\n                3 => s.push_str(&format!(\"{}{}{}\", d,\
    \ &carry, &carry)),\n                4 => s.push_str(&format!(\"{}{}{}{}\", d,\
    \ &carry, &carry, &carry)),\n                5 => s.push_str(&format!(\"{}{}{}{}{}\"\
    , d, &carry, &carry, &carry, &carry)),\n                6 => s.push_str(&format!(\"\
    {}{}{}{}{}{}\", d, &carry, &carry, &carry, &carry, &carry)),\n               \
    \ 7 => s.push_str(&format!(\"{}{}{}{}{}{}{}\", d, &carry, &carry, &carry, &carry,\
    \ &carry, &carry)),\n                8 => s.push_str(&format!(\"{}{}{}{}{}{}{}{}\"\
    , d, &carry, &carry, &carry, &carry, &carry, &carry, &carry)),\n             \
    \   9 => s.push_str(&format!(\"{}{}{}{}{}{}{}{}{}\", d, &carry, &carry, &carry,\
    \ &carry, &carry, &carry, &carry, &carry)),\n                10 => s.push_str(&format!(\"\
    {}{}{}{}{}{}{}{}{}{}\", d, &carry, &carry, &carry, &carry, &carry, &carry, &carry,\
    \ &carry, &carry)),\n                11 => s.push_str(&format!(\"{}{}{}{}{}{}{}{}{}{}{}\"\
    , d, &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry)),\n\
    \                12 => s.push_str(&format!(\"{}{}{}{}{}{}{}{}{}{}{}{}\", d, &carry,\
    \ &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry, &carry)),\n\
    \                13 => s.push_str(&format!(\"{}{}{}{}{}{}{}{}{}{}{}{}\", d, &carry,\
    \ &carry, &carry, &carry, &carry, &", "    let mut result = String::new();\n \
    \   let mut digits = vec![0; base];\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits[digit] += 1;\n    }\n    for digit in digits {\n   \
    \     if digit == 0 {\n            continue;\n        }\n        result.push_str(&format!(\"\
    {}\", digit));\n    }\n    result", "    let mut result = String::new();\n   \
    \ let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n\
    \        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        result = format!(\"{}{}\", result, remainder);\n    }\n    result", " \
    \   let mut s = String::new();\n    let mut remain = x;\n    while remain > 0\
    \ {\n        let mut digit = remain;\n        remain %= base;\n        if remain\
    \ == 0 {\n            digit = base;\n        }\n        s.push((digit as char).to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        let mut digit = digits[i..].parse::<isize>().unwrap();\n        if\
    \ base == 10 {\n            digit *= base;\n        } else {\n            digit\
    \ *= base;\n            digit %= 10;\n        }\n        i += 1;\n        s +=\
    \ digit.to_string();\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut x = x;\n    while x >= base {\n        x /= base;\n        s += String::from(format!(\"\
    {}\", x));\n    }\n    s += String::from(format!(\"{}\", x));\n    s", "    let\
    \ mut s = String::new();\n    let mut x = x as isize;\n    let mut base = base\
    \ as isize;\n    while x >= base {\n        x /= base;\n        s += &format!(\"\
    {}\", x);\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().filter(|c|\
    \ *c >= '0' && *c <= '9').collect::<Vec<_>>();\n    let mut basedigits_len = basedigits.len();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut remainder_digits\
    \ = remainder.to_string();\n        let mut remainder_digits_len = remainder_digits.len();\n\
    \        while remainder_digits_len > 0 {\n            let mut digit = remainder_digits[remainder_digits_len\
    \ - 1];\n            remainder_digits_len -= 1;\n            if digit >= '0' &&\
    \ digit <= '9' {\n                basedigits.push(digit as usize);\n         \
    \   } else {\n                basedigits.push(digit as usize + 10 as usize);\n\
    \            }\n        }\n        remainder -= basedigits[basedigits_len - 1];\n\
    \        basedigits_len -= 1;\n    }\n    while basedigits_len > 0 {\n       \
    \ basedigits.pop();\n        basedigits_len -= 1;\n    }\n    basedigits.reverse();\n\
    \    basedigits.insert(0, 0);\n    basedigits.insert(0, base);\n    basedigits.insert(0,\
    \ 0);\n    s.push_str(&basedigits);\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut x =\
    \ x;\n    let mut base = base;\n    while x >= base {\n        x /= base;\n  \
    \      s += String::from(&format!(\"{}\", x));\n    }\n    s += String::from(&format!(\"\
    {}\", x));\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        let remainder =\
    \ quotient % base;\n        quotient = quotient / base;\n        s.push(remainder);\n\
    \    }\n    s.push(remainder);\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = String::new();\n    let mut remainder = 0;\n    while x >= base\
    \ {\n        remainder += x % base;\n        x /= base;\n    }\n    while x !=\
    \ 0 {\n        remainder += x % base;\n        x /= base;\n    }\n    if remainder\
    \ > 0 {\n        digits.push(&mut remainder as char);\n    }\n    while digits.length()\
    \ > 0 {\n        s.push(*digits.last().unwrap());\n        digits.pop();\n   \
    \ }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let mut digit = digits[i];\n        if digit == '0' {\n            digit\
    \ = digits[i - 1];\n        }\n        if digit == '9' {\n            digit =\
    \ digits[i - 1];\n        }\n        if digit == '1' {\n            digit = digits[i\
    \ - 1];\n        }\n        if digit == '2' {\n            digit = digits[i -\
    \ 1];\n        }\n        if digit == '3' {\n            digit = digits[i - 1];\n\
    \        }\n        if digit == '4' {\n            digit = digits[i - 1];\n  \
    \      }\n        if digit == '5' {\n            digit = digits[i - 1];\n    \
    \    }\n        if digit == '6' {\n            digit = digits[i - 1];\n      \
    \  }\n        if digit == '7' {\n            digit = digits[i - 1];\n        }\n\
    \        if digit == '8' {\n            digit = digits[i - 1];\n        }\n  \
    \      if digit == '9' {\n            digit = digits[i - 1];\n        }\n    \
    \    if digit == '0' {\n            digit = digits[i - 1];\n        }\n      \
    \  if digit == '1' {\n            digit = digits[i - 1];\n        }\n        if\
    \ digit == '2' {\n            digit = digits[i - 1];\n        }\n        if digit\
    \ == '3' {\n            digit = digits[i - 1];\n        }\n        if digit ==\
    \ '4' {\n            digit = digits[i - 1];\n        }\n        if digit == '5'\
    \ {\n            digit = digits[i - 1];\n        }\n        if digit == '6' {\n\
    \            digit = digits[i - 1];\n        }\n        if digit == '7' {\n  \
    \          digit = digits[i - 1];\n        }\n        if digit == '8' {\n    \
    \        digit = digits[i - 1];\n        }\n        if digit == '9' {\n      \
    \      digit = digits[i - 1];\n        }\n        if digit == '0' {\n        \
    \    digit = digits[i - 1];\n        }\n        if digit == '1' {\n          \
    \  digit = digits[i - 1];\n        }\n        if digit == '2' {\n            digit\
    \ = digits[i - 1];\n        }\n        if digit == '3' {\n            digit =\
    \ digits[i - 1];\n        }\n        if digit == '4' {\n            digit = digits[i\
    \ - 1];\n        }\n        if digit == '5' {\n            digit = digits[i -\
    \ 1];\n        }\n        if digit == '6' {\n            digit = digits[i - 1];\n",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    let mut power = 1;\n\n    while x >= base {\n        remainder +=\
    \ x / base;\n        x %= base;\n        power = power * base;\n    }\n\n    if\
    \ x > 0 {\n        digits.push(format!(\"{}\", x));\n    }\n\n    while remainder\
    \ > 0 {\n        remainder -= power;\n        power = power * base;\n    }\n\n\
    \    if power > 1 {\n        digits.push(format!(\"{}\", power));\n    }\n\n \
    \   s += &digits[..];\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = s.chars().collect::<String>().push(digit\
    \ as char);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.length() {\n        let mut digit = digits[i..].parse::<isize>().unwrap();\n\
    \        if base == 10 {\n            digit *= base;\n        } else {\n     \
    \       digit /= base;\n        }\n        i += digit;\n        s += digit.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut base_size = base.len();\n \
    \   let mut digits_size = digits.len();\n    while digits_size > 0 {\n       \
    \ let mut digit = digits[digits_size - 1];\n        let mut new_digit = digit;\n\
    \        let mut new_base = base;\n        while new_base > 0 {\n            let\
    \ mut new_digit = digit.chars().nth(new_base - 1).unwrap();\n            new_digit\
    \ += new_digit;\n            new_base = new_base / base_size;\n        }\n   \
    \     digits = digits.chars().take(digits_size - 1).collect();\n        digits.push(new_digit);\n\
    \        digits_size = digits_size - 1;\n    }\n    s += digits;\n    s", "  \
    \  let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient /= base;\n        s.push(remainder);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = 1;\n    while remainder > 0 {\n        if remainder >= base {\n          \
    \  s += String::from(&format!(\"{}{}\", digits, base));\n            remainder\
    \ -= base;\n            digits *= base;\n        } else {\n            s += String::from(&format!(\"\
    {}\", remainder));\n            remainder = 0;\n        }\n    }\n    s += String::from(&format!(\"\
    {}\", remainder));\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    while base.len()\
    \ > 0 {\n        let mut digit = digits.pop().unwrap();\n        if base > 10\
    \ {\n            digit = digit.to_string().parse::<usize>().unwrap();\n      \
    \      base = base.to_string().parse::<usize>().unwrap();\n        }\n       \
    \ s.push((digit as char).to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base == 10 {\n\
    \            s.push_str(&digits[i..i + 1]);\n            break;\n        }\n \
    \       if base == 8 {\n            s.push_str(&digits[i..i + 1].to_string().rev());\n\
    \            break;\n        }\n        if base == 7 {\n            s.push_str(&digits[i..i\
    \ + 1].to_string().rev().rev());\n            break;\n        }\n        let mut\
    \ digit = digits[i..i + 1];\n        let mut digit = digit.to_string();\n    \
    \    let mut digit = digit.chars().collect::<String>();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        let mut digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        let mut digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();\n        digit = digit.chars().collect::<String>().rev();\n\
    \        digit = digit.to_string();", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n  \
    \      let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string().to_digit(base).unwrap();\n\
    \        s = format!(\"{}{}\", s, digit);\n        base = base.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut base = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s.push((char::from_u32(base).unwrap()).to_string());\n        base /=\
    \ base;\n    }\n    s.push((char::from_u32(base).unwrap()).to_string());\n   \
    \ s", "    let mut s = String::new();\n    let mut remainder = x;\n    let mut\
    \ base = base;\n    while remainder > 0 {\n        remainder %= base;\n      \
    \  s.push((base as char).to_string());\n        base /= 10;\n    }\n    s.push((base\
    \ as char).to_string());\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut remainder = x;\n    let mut base = base.to_string();\n\
    \    while remainder > 0 {\n        let mut digit = remainder.to_string();\n \
    \       if base < 10 {\n            digit += &bases[base].to_string();\n     \
    \   }\n        s += digit;\n        remainder -= digit.parse::<isize>().unwrap();\n\
    \        base += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remain = x;\n    while remain > 0 {\n        let mut digit = remain % base;\n\
    \        remain /= base;\n        s.push((digit as char).to_string());\n    }\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut x = x as isize;\n\
    \    let mut base = base as isize;\n    while x >= base {\n        s +=\n    \
    \        format!(\"{}\", x % base).to_string()\n                .chars()\n   \
    \             .map(|c| c.to_digit(base))\n                .collect::<Vec<_>>()\n\
    \                .join();\n        x /= base;\n    }\n    s +=\n        format!(\"\
    {}\", x).to_string()\n            .chars()\n            .map(|c| c.to_digit(base))\n\
    \            .collect::<Vec<_>>()\n            .join();\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base =\
    \ base.to_string();\n    while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2);\n        }\n        base.truncate(base.len() - 1);\n        s += digit;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        s.push((&mut digits[..]).to_digits(base).unwrap().to_string());\n\
    \    }\n    s.push((&mut digits[..]).to_digits(base).unwrap().to_string());\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut digit = x;\n    let mut i = 0;\n    while\
    \ remain > 0 {\n        if remain % base == 0 {\n            digit = remainder\
    \ / base;\n            digits.push(digit.to_string());\n            remainder\
    \ %= base;\n        } else {\n            digits.push('0');\n        }\n     \
    \   remain -= 1;\n    }\n    digits.push(digit.to_string());\n    s += digits.clone();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n    s", " \
    \   let mut s = String::new();\n    let mut x = x;\n    while x >= base {\n  \
    \      x /= base;\n        s += String::from(format!(\"{}\", x));\n    }\n   \
    \ s += String::from(format!(\"{}\", x));\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    while !digits.is_empty() {\n        let digit = digits.remove(0);\n     \
    \   let mut new_digit = digit + carry;\n        if new_digit < base {\n      \
    \      carry = 1;\n        } else {\n            carry = 0;\n        }\n     \
    \   s = s.push_str(&new_digit.to_string());\n    }\n    if carry != 0 {\n    \
    \    s = s.push_str(\"1\");\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0\
    \ {\n        if remainder >= base {\n            s += String::from(digits);\n\
    \            remainder -= base;\n            digits *= base;\n        } else {\n\
    \            s += String::from(\"0\");\n            remainder -= 1;\n        }\n\
    \    }\n    s += String::from(digits);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((digits[..]).to_string()\
    \ + &base.to_string());\n    }\n    s.push((digits[..]).to_string() + &base.to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n        let mut\
    \ digit = digits[i];\n        let mut new_digit = digit;\n        if base > 10\
    \ {\n            new_digit += carry;\n            carry = 0;\n        }\n    \
    \    if new_digit > base {\n            carry = 1;\n            new_digit -= base;\n\
    \        }\n        s += new_digit.to_string();\n        i += 1;\n    }\n    if\
    \ carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n        if\
    \ digit > base {\n            digit = digit % base;\n        } else {\n      \
    \      digit = digit / base;\n        }\n        s = s.push_str(&digit.to_string());\n\
    \        i += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n\
    \        let mut base = base[i];\n        if digit >= base {\n            digit\
    \ = digit - base;\n            base = base - digit;\n        } else {\n      \
    \      digit = digit + base;\n            base = base - digit;\n        }\n  \
    \      s.push((digit as char).to_string());\n        i += 1;\n    }\n    String::from(s)",
  "    let mut result = String::new();\n    let mut digits = String::new();\n    let\
    \ mut remainder = 0;\n    let mut quotient = 0;\n    while x >= base {\n     \
    \   remainder = x % base;\n        quotient = x / base;\n        digits.push(quotient.to_string());\n\
    \        x = remainder;\n    }\n    digits.push(x.to_string());\n    result.push_str(&digits);\n\
    \    result", "    let mut s = String::new();\n    let mut digits = vec![0; base];\n\
    \    let mut carry = 0;\n    while x >= base {\n        let digit = x % base;\n\
    \        digits[digit] += 1;\n        x /= base;\n    }\n    for digit in digits\
    \ {\n        if digit > 0 {\n            s.push_str(&format!(\"{}\", digit));\n\
    \        } else {\n            s.push_str(&format!(\"0\"));\n        }\n    }\n\
    \    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n \
    \   let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    let mut i = 0;\n    while i < digits_len\
    \ {\n        if digits[i] > base {\n            digits = &digits[..i];\n     \
    \       base = &base[..base_len];\n            digits_len = digits.length();\n\
    \            base_len = base.length();\n            i += digits_len - 1;\n   \
    \     } else {\n            digits = &digits[..i];\n            base = &base[..digits_len];\n\
    \            i += digits_len - 1;\n        }\n    }\n    s = s.push_str(digits);\n\
    \    s = s.push_str(base);\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.remove(0);\n        if base < 10 {\n \
    \           digit += &base;\n        }\n        s += digit;\n        base /= 10;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remain = x;\n   \
    \ let mut digits = 1;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit = digit.to_digit(base);\n        digits\
    \ = digits.to_digit(base);\n        s = s.push_str(&format!(\"{}{}\", digits,\
    \ digit));\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.chars().nth(digits.len() - 1);\n     \
    \   if digit < '0' || digit > '9' {\n            digit = digits.chars().nth(digits.len()\
    \ - 1);\n        }\n        let mut new_digit = digit.to_string();\n        if\
    \ base > 2 {\n            new_digit += '0';\n        }\n        if base > 1 {\n\
    \            new_digit += '1';\n        }\n        s += new_digit;\n        digits\
    \ = digits.chars().nth(digits.len() - 1);\n        base = base.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > base\
    \ {\n        remainder -= base;\n        base += 1;\n    }\n    while remainder\
    \ > 0 {\n        digits.push(digits[remainder as usize].to_string());\n      \
    \  remainder -= 1;\n    }\n    while base > 0 {\n        digits.push(digits[base\
    \ as usize].to_string());\n        base -= 1;\n    }\n    s += digits.collect::<Vec<_>>().join(\"\
    \");\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n  \
    \  while remainder > 0 {\n        let digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, '0');\n    }\n    while remainder > 0 {\n        remainder\
    \ -= 1;\n        digits.insert(0, '0');\n    }\n    s += digits;\n    s", "  \
    \  let mut result = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digit, result);\n    }\n    result",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, base.to_string());\n    }\n    digits.insert(0, remainder.to_string());\n\
    \    s.push_str(&digits);\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n      \
    \  let remainder = quotient % base;\n        quotient = quotient / base;\n   \
    \     s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += &format!(\"{}\", remainder);\n    while x\
    \ > 0 {\n        remainder += x;\n        x /= base;\n        s += &format!(\"\
    {}\", remainder);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = x;\n    while remainder > 0\
    \ {\n        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push_str(&format!(\"{}\", digit));\n    }\n    digits.push_str(&format!(\"\
    {}\", remainder));\n    s += &digits;\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.length() {\n        if base == 10 {\n\
    \            s.push_str(&digits[i..i + 1]);\n            break;\n        }\n \
    \       let mut digit = digits[i..i + 1];\n        let mut base = base.to_string();\n\
    \        while base.len() > 0 {\n            let mut digit = digit.to_string();\n\
    \            if base.len() == 1 {\n                s.push_str(&base);\n      \
    \          break;\n            }\n            let mut base = base.to_string();\n\
    \            if digit == base.to_owned() {\n                s.push_str(&base);\n\
    \                break;\n            }\n        }\n        i += 1;\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(digits.len() - 1).unwrap();\n        let mut new_digit\
    \ = digit;\n        if base == 10 {\n            new_digit += '0';\n        }\
    \ else {\n            new_digit += &base;\n        }\n        s += new_digit;\n\
    \        digits = digits.chars().nth(digits.len() - 1);\n        base = base.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits = base;\n    }\n    while digits > 0 {\n        if remainder >=\
    \ digits {\n            s.push((remainder % digits).to_string());\n          \
    \  remainder /= digits;\n        } else {\n            s.push((remainder % digits).to_string());\n\
    \            s.push('0');\n            remainder /= digits;\n        }\n     \
    \   digits /= base;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    for digit in digits {\n        if digit > 0 {\n          \
    \  s.push_str(&format!(\"{}\", digit));\n        } else {\n            s.push_str(&format!(\"\
    0\"));\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\"\
    , carry));\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.remove(0);\n        if base > 10 {\n \
    \           digit *= base;\n            digit = digit.to_string();\n        }\n\
    \        s += digit;\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut base = base.to_string();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = match digit {\n            '0' => 0,\n \
    \           '1' => 1,\n            '2' => 2,\n            '3' => 3,\n        \
    \    '4' => 4,\n            '5' => 5,\n            '6' => 6,\n            '7'\
    \ => 7,\n            '8' => 8,\n            '9' => 9,\n            _ => panic!(\"\
    Invalid digit\"),\n        };\n        let digit = digit * base.parse().unwrap()\
    \ + carry;\n        carry = digit / 10;\n        s = s.push_str(&format!(\"{}\"\
    , digit));\n        digits = digits.chars().nth(digits.len() - 1);\n    }\n  \
    \  if carry > 0 {\n        s = s.push_str(&format!(\"{}\", carry));\n    }\n \
    \   s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut power = 1;\n    let mut i =\
    \ 0;\n    while i < digits.len() {\n        if digits[i] > base {\n          \
    \  power = power.to_biguint();\n            base = base.to_biguint();\n      \
    \  }\n        s += digits[i].to_string();\n        if power > 1 {\n          \
    \  s += &format!(\"{}\", power);\n            power = 1;\n        }\n        i\
    \ += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits =\
    \ String::new();\n    let mut remainder = 0;\n    let mut quotient = 0;\n    let\
    \ mut remainder_digits = 0;\n    let mut quotient_digits = 0;\n    let mut digits_base\
    \ = 0;\n    let mut digits_remainder = 0;\n    let mut digits_quotient = 0;\n\
    \    let mut digits_remainder_digits = 0;\n    let mut digits_quotient_digits\
    \ = 0;\n    let mut digits_base2 = 0;\n    let mut digits_remainder2 = 0;\n  \
    \  let mut digits_quotient2 = 0;\n    let mut digits_remainder_digits2 = 0;\n\
    \    let mut digits_quotient_digits2 = 0;\n    let mut digits_base3 = 0;\n   \
    \ let mut digits_remainder3 = 0;\n    let mut digits_quotient3 = 0;\n    let mut\
    \ digits_remainder_digits3 = 0;\n    let mut digits_quotient_digits3 = 0;\n  \
    \  let mut digits_base4 = 0;\n    let mut digits_remainder4 = 0;\n    let mut\
    \ digits_quotient4 = 0;\n    let mut digits_remainder_digits4 = 0;\n    let mut\
    \ digits_quotient_digits4 = 0;\n    let mut digits_base5 = 0;\n    let mut digits_remainder5\
    \ = 0;\n    let mut digits_quotient5 = 0;\n    let mut digits_remainder_digits5\
    \ = 0;\n    let mut digits_quotient_digits5 = 0;\n    let mut digits_base6 = 0;\n\
    \    let mut digits_remainder6 = 0;\n    let mut digits_quotient6 = 0;\n    let\
    \ mut digits_remainder_digits6 = 0;\n    let mut digits_quotient_digits6 = 0;\n\
    \    let mut digits_base7 = 0;\n    let mut digits_remainder7 = 0;\n    let mut\
    \ digits_quotient7 = 0;\n    let mut digits_remainder_digits7 = 0;\n    let mut\
    \ digits_quotient_digits7 = 0;\n    let mut digits_base8 = 0;\n    let mut digits_remainder8\
    \ = 0;\n    let mut digits_quotient8 = 0;\n    let mut digits_remainder_digits8\
    \ = 0;\n    let mut digits_quotient_digits8 = 0;\n    let mut digits_base9 = 0;\n\
    \    let mut digits_remainder9 = 0;\n    let mut digits_quotient9 = 0;\n    let\
    \ mut digits_remainder_digits9 = 0;\n    let mut digits_quotient_digits9 = 0;\n\
    \    let mut digits_base10 = 0;\n    let mut digits_remainder10 = 0;\n    let\
    \ mut digits_quoti", "    let mut result = String::new();\n    let mut digits\
    \ = vec![0u8; base];\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits[digit] += 1;\n    }\n    for digit in digits {\n        if digit\
    \ == 0 {\n            result.push_str(&format!(\"0{}\", digit));\n        } else\
    \ {\n            result.push_str(&format!(\"{}{}\", digit, digits[digit]));\n\
    \        }\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while basedigits.len() > 0 {\n        let mut digit\
    \ = basedigits.pop().unwrap();\n        if carry > 0 {\n            digit += 1;\n\
    \        }\n        digits.push(digit);\n        carry += digit as isize;\n  \
    \  }\n    while digits.len() > 0 {\n        let mut digit = digits.pop().unwrap();\n\
    \        if carry > 0 {\n            digit += 1;\n        }\n        s += digit.to_string();\n\
    \        carry += digit as isize;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut power = 1;\n    while digits.len() > 0 {\n        if digits.len()\
    \ < base.len() {\n            digits = &digits[..base.len() - digits.len()];\n\
    \        }\n        if digits.len() < base.len() {\n            digits = &digits[..base.len()];\n\
    \        }\n        if digits.len() < base.len() {\n            digits = &digits[..base.len()];\n\
    \        }\n        let mut digit = digits.parse::<isize>().unwrap();\n      \
    \  digit *= power;\n        s += base.chars().nth(digit as usize).unwrap();\n\
    \        power /= base;\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut digits = String::new();\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.reverse();\n\
    \    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        result =\
    \ format!(\"{}{}\", digits, digit.to_string());\n    }\n    result", "    let\
    \ mut s = String::new();\n    let mut remainder = x;\n    let mut digits = base;\n\
    \    while remainder > 0 {\n        if remainder >= base {\n            digits\
    \ -= 1;\n            remainder -= base;\n        }\n        s += digits::to_string();\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n \
    \       x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.into_owned();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       s.push((&digits[..]).to_digits(base).unwrap().to_string());\n    }\n \
    \   s.push((&digits[..]).to_digits(remainder).unwrap().to_string());\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut power = 1;\n    let mut i = 0;\n    while\
    \ i < digits.length() {\n        if digits[i] > base {\n            power = power.pow((digits[i]\
    \ - base).abs());\n        } else {\n            power = power.pow((base - digits[i]).abs());\n\
    \        }\n        i += 1;\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power < 10 {\n        power = power.pow((base\
    \ - 1).abs());\n    }\n    while power > 1 {\n        power = power.pow", "  \
    \  let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    if quotient > 0 {\n        s = format!(\"{}\", s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    let mut i = 0;\n    while remainder > base {\n        remainder\
    \ /= base;\n        i += 1;\n    }\n    while i < s.len() {\n        s += &digits[i\
    \ as usize] * (base as usize);\n        i += 1;\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n        let\
    \ mut digit = digits[i];\n        let mut basedigit = basedigits[i];\n       \
    \ if digit == 0 {\n            digit = basedigit;\n            basedigit = carry;\n\
    \            carry = 0;\n        }\n        let mut newdigit = digit + basedigit\
    \ + carry;\n        if newdigit > 9 {\n            newdigit -= 10;\n         \
    \   carry = 1;\n        } else {\n            carry = 0;\n        }\n        s[i]\
    \ = newdigit as char;\n        i += 1;\n    }\n    if carry != 0 {\n        s.push('0');\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder += x / base;\n        digits.push(format!(\"{}\", remainder));\n\
    \        x %= base;\n    }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let digit = quotient % base;\n     \
    \   remainder *= base;\n        remainder += digit;\n        quotient /= base;\n\
    \        s.push((digit as char).to_string());\n    }\n    if remainder > 0 {\n\
    \        s.push((remainder as char).to_string());\n    }\n    s", "    let mut\
    \ result = String::new();\n    let mut remainder = x;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digit, result);\n    }\n    result",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient /= base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(digits.len() - 1).unwrap();\n        let mut new_digit\
    \ = digit;\n        let mut new_base = base.chars().nth(base.len() - 1).unwrap();\n\
    \        if new_base >= '0' && new_base <= '9' {\n            new_digit += &new_base\
    \ - '0';\n            new_base = '0';\n        }\n        if new_base >= 'A' &&\
    \ new_base <= 'Z' {\n            new_digit += &new_base - 'A' + 10;\n        \
    \    new_base = 'A';\n        }\n        if new_base >= 'a' && new_base <= 'z'\
    \ {\n            new_digit += &new_base - 'a' + 10;\n            new_base = 'a';\n\
    \        }\n        s += new_digit;\n        digits = &digits[digits.len() - 1];\n\
    \        base = &base[base.len() - 1];\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if digits[i] >= base[0] {\n            s.push_str(&base[digits[i]\
    \ - base[0]]);\n            i += 1;\n        } else {\n            s.push_str(&digits[i]);\n\
    \            i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder /= base;\n        quotient /= base;\n        s.push((remainder\
    \ % base) as char);\n    }\n    s.push((quotient % base) as char);\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        let mut j = i;\n        while j + 1 < digits.len()\
    \ && digits[j] == digits[j + 1] {\n            j += 1; // skip duplicates\n  \
    \      }\n        let mut digit = digits[i];\n        if digit < base {\n    \
    \        digit = digit + base;\n        }\n        digits[i] = digit;\n      \
    \  i += 1;\n    }\n    for i in 0..digits.len() {\n        if digits[i] < base\
    \ {\n            digits[i] = digits[i] + base;\n        }\n    }\n    s += digits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, remainder);\n    }\n    s.push_str(&digits);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    let mut basedigits_len = basedigits.len();\n    let mut i = 0;\n    while\
    \ i < basedigits_len {\n        let mut j = i;\n        while j < basedigits_len\
    \ && basedigits[j] == basedigits[i] {\n            j += 1\n        }\n       \
    \ if j == basedigits_len {\n            s += &basedigits[basedigits_len - 1].to_string();\n\
    \            basedigits_len -= 1;\n        } else {\n            s += &basedigits[j].to_string();\n\
    \            basedigits_len -= j;\n        }\n        i += 1;\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut x = x;\n    while x >= base {\n   \
    \     x /= base;\n        s += String::from(\"0\");\n    }\n    s += String::from(*x.to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = vec![];\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit);\n\
    \    }\n    for digit in digits {\n        s.push((digit as char).to_string());\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut base = base;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", s, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base);\n    }\n\
    \    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ 1);\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = 0;\n\
    \    while x >= base {\n        remainder += x % base;\n        x /= base;\n \
    \   }\n    s += &format!(\"{}\", remainder);\n    while x > 0 {\n        remainder\
    \ += x;\n        x /= base;\n        s += &format!(\"{}\", remainder);\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut basedigits = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut basedigits_len = basedigits.length();\n    let mut i = 0;\n    while\
    \ i < digits_len {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        let mut basedigit = basedigits[i..].parse::<usize>().unwrap();\n    \
    \    if digit < basedigit {\n            digit += basedigit;\n            basedigit\
    \ -= digit;\n        }\n        i += 1;\n        s += digit.to_string();\n   \
    \     if basedigit > 0 {\n            s += basedigit.to_string();\n          \
    \  basedigits_len -= 1;\n        }\n    }\n    if basedigits_len > 0 {\n     \
    \   s += basedigits[..basedigits_len].to_string();\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    let mut base = base.to_string();\n    while remainder > 0 {\n    \
    \    let mut digit = digits.chars().nth(digits_index(&remainder)).unwrap();\n\
    \        if base < 10 {\n            digit += &base;\n        }\n        s +=\
    \ digit;\n        remainder -= base;\n        base = base.to_string();\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.pop().unwrap();\n\
    \        if base > 2 {\n            digit = digit + 1;\n        }\n        if\
    \ digit >= base {\n            digit = digit - base;\n            carry = 1;\n\
    \        }\n        s = format!(\"{}{}\", s, digit);\n        if carry == 1 {\n\
    \            base = base.to_string().chars().collect::<Vec<_>>();\n          \
    \  digits = digits.clone() + digit;\n            carry = 0;\n        }\n    }\n\
    \    if carry == 1 {\n        s = format!(\"{}\", s);\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0);\n\
    \        if digit < base {\n            digit += carry;\n            carry = 1;\n\
    \        } else {\n            digit -= base;\n            carry = 0;\n      \
    \  }\n        s.push((digit as char).to_string());\n    }\n    if carry != 0 {\n\
    \        s.push(carry.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c as char).collect::<Vec<_>>();\n    basedigits = basedigits.iter().cloned().collect();\n\
    \    let mut i = 0;\n    while i < basedigits.len() {\n        if basedigits[i]\
    \ == base {\n            basedigits[i] = 0;\n            i += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    s += digits.chars().map(|c| c\
    \ as char).collect::<Vec<_>>();\n    s += basedigits.iter().cloned().collect();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder += x % base;\n        x /= base;\n    }\n   \
    \ s += &format!(\"{}\", remainder);\n    while x > 0 {\n        remainder += x;\n\
    \        x /= base;\n        s += &format!(\"{}\", remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut digits_len = digits.length();\n    let\
    \ mut base_len = base.length();\n    while digits_len > base_len {\n        digits\
    \ = digits.chars().nth(digits_len - base_len + 1).collect();\n        base = base.chars().nth(base_len).collect();\n\
    \        base_len += 1;\n    }\n    while base_len > digits_len {\n        base\
    \ = base.chars().nth(base_len - digits_len + 1).collect();\n        base_len -=\
    \ 1;\n    }\n    while digits_len > 0 {\n        if digits[digits_len - 1] ==\
    \ '0' {\n            digits = digits.chars().nth(digits_len - 1).collect();\n\
    \            digits_len -= 1;\n        } else {\n            break;\n        }\n\
    \    }\n    while base_len > 0 {\n        if base[base_len - 1] == '0' {\n   \
    \         base = base.chars().nth(base_len - 1).collect();\n            base_len\
    \ -= 1;\n        } else {\n            break;\n        }\n    }\n    s += &digits\
    \ + &base;\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits += 1;\n    }\n    while digits > 0 {\n        s.push((remainder\
    \ % base) as char);\n        remainder /= base;\n        digits -= 1;\n    }\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut bases = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut bases_len = bases.length();\n    while digits_len > 0 && bases_len\
    \ > 0 {\n        if digits[digits_len - 1] == '0' {\n            digits = &digits[..digits_len\
    \ - 1].to_string();\n            digits_len -= 1;\n        }\n        if bases[bases_len\
    \ - 1] == '0' {\n            bases = &bases[..bases_len - 1].to_string();\n  \
    \          bases_len -= 1;\n        }\n        let mut digits_digit = digits[digits_len\
    \ - 1].to_digit(bases[bases_len - 1]);\n        if digits_digit == 0 {\n     \
    \       digits = &digits[..digits_len - 1].to_string();\n            digits_len\
    \ -= 1;\n        } else {\n            bases = &bases[..bases_len - 1].to_string();\n\
    \            bases_len -= 1;\n        }\n    }\n    while digits_len > 0 {\n \
    \       s += digits[digits_len - 1].to_digit(bases[bases_len - 1]);\n        digits\
    \ = &digits[..digits_len - 1].to_string();\n        digits_len -= 1;\n    }\n\
    \    while bases_len > 0 {\n        s += bases[bases_len - 1].to_digit(digits[digits_len\
    \ - 1]);\n        bases = &bases[..bases_len - 1].to_string();\n        bases_len\
    \ -= 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits =\
    \ x.to_string();\n    let mut remainder = x;\n    let mut i = 0;\n    while remainder\
    \ > 0 {\n        let mut digit = digits[i as usize].to_digit(base);\n        remainder\
    \ -= digit;\n        i += 1;\n        s += digit.to_string();\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut power = 1;\n    while digits.len() > 0\
    \ {\n        let digit = digits.chars().nth(digits.len() - 1);\n        if digit\
    \ == '0' {\n            power = 1;\n        } else {\n            power = power.pow((base.len()\
    \ - digits.len() + 1));\n        }\n        if power > 10 {\n            power\
    \ = 1;\n            base = base.to_string();\n        }\n        s = format!(\"\
    {}{}\", s, digit.to_string());\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut digits = String::new();\n    while remainder > 0 {\n     \
    \   remainder %= base;\n        digits.push_str(&format!(\"{}\", remainder));\n\
    \    }\n    s.push_front(digits);\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(char::from_u32(base).unwrap().to_string());\n\
    \        x = x / base;\n    }\n    digits.push(char::from_u32(x).unwrap().to_string());\n\
    \    s += &digits;\n    if remainder != 0 {\n        s += &char::from_u32(remainder).unwrap().to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n   \
    \         break;\n        }\n        let mut digit = digits[i..i + 1];\n     \
    \   let mut new_base = base.clone();\n        let mut new_digit = digit.clone();\n\
    \        while new_digit > 0 {\n            let digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n            let new_digit = digit as isize - new_base;\n\
    \            new_digit = if new_digit < 10 { new_digit + 10 } else { new_digit\
    \ };\n            new_base = new_base / 10;\n            new_digit = digit as\
    \ isize - new_base;\n            new_digit = if new_digit < 10 { new_digit + 10\
    \ } else { new_digit };\n        }\n        s.push_str(&new_digit);\n        i\
    \ = i + 1;\n    }\n    s", "    let mut s = String::new();\n    let mut x = x;\n\
    \    while x >= base {\n        s +=\n            format!(\"{}\", x % base).to_string()\n\
    \                .chars()\n                .map(|c| match c {\n              \
    \      '0' => '0',\n                    '1' => '1',\n                    '2' =>\
    \ '2',\n                    '3' => '3',\n                    '4' => '4',\n   \
    \                 '5' => '5',\n                    '6' => '6',\n             \
    \       '7' => '7',\n                    '8' => '8',\n                    '9'\
    \ => '9',\n                    _ => unreachable!(),\n                })\n    \
    \            .collect::<Vec<_>>()\n                .join();\n        x /= base;\n\
    \    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base);\n    }\n    while remainder > 0 {\n \
    \       remainder -= 1;\n        digits.insert(0, 1);\n    }\n    s += digits;\n\
    \    s", "    let mut s = String::new();\n    let mut x = x as isize;\n    let\
    \ mut base = base as isize;\n    while x >= base {\n        s += &format!(\"{}\"\
    , x % base);\n        x /= base;\n    }\n    s += &format!(\"{}\", x);\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits = digits.insert(digit,\
    \ digits);\n    }\n    s = s.insert(digits, s);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    s.push_str(&digits);\n    s", "    let mut s\
    \ = String::new();\n    let mut x = x;\n    let mut base = base;\n    while x\
    \ >= base {\n        s +=\n            format!(\"{:0{}b}\", x % base, base).to_string().into_owned();\n\
    \        x /= base;\n    }\n    s +=\n        format!(\"{:0{}b}\", x, base).to_string().into_owned();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        s.push(remainder);\n \
    \   }\n    s.push(remainder);\n    s", "    let mut result = String::new();\n\
    \    let mut x = x as isize;\n    let mut base = base as isize;\n    while x >=\
    \ base {\n        result += '0';\n        x /= base;\n    }\n    result += '0';\n\
    \    result += x.to_string();\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder %= base;\n        quotient /= base;\n        s.push((remainder\
    \ as char).to_string());\n    }\n    s.push((quotient as char).to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut carry = 0;\n    while x >= base {\n        let digit = x % base;\n\
    \        digits[digit] += 1;\n        x /= base;\n        carry = 1;\n    }\n\
    \    while carry != 0 {\n        digits[digits.len() - 1] += 1;\n        carry\
    \ /= 10;\n    }\n    for digit in digits[0..digits.len() - 1] {\n        s +=\
    \ char::from_u32(digit as u32).unwrap();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {:0{}b}\", x % base, base).to_string()\n                .chars()\n           \
    \     .map(|c| match c {\n                    '0' => '0',\n                  \
    \  '1' => '1',\n                    '2' => '2',\n                    '3' => '3',\n\
    \                    '4' => '4',\n                    '5' => '5',\n          \
    \          '6' => '6',\n                    '7' => '7',\n                    '8'\
    \ => '8',\n                    '9' => '9',\n                    _ => panic!(\"\
    Invalid character in base\"),\n                })\n                .collect::<Vec<_>>()\n\
    \                .join();\n        x /= base;\n    }\n    s +=\n        format!(\"\
    {:0{}b}\", x, base).to_string()\n            .chars()\n            .map(|c| match\
    \ c {\n                '0' => '0',\n                '1' => '1',\n            \
    \    '2' => '2',\n                '3' => '3',\n                '4' => '4',\n \
    \               '5' => '5',\n                '6' => '6',\n                '7'\
    \ => '7',\n                '8' => '8',\n                '9' => '9',\n        \
    \        _ => panic!(\"Invalid character in base\"),\n            })\n       \
    \     .collect::<Vec<_>>()\n            .join();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = quotient / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        quotient = remainder;\n   \
    \ }\n    if remainder > 0 {\n        s = format!(\"{}\", s);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut x = x as isize;\n    let mut base\
    \ = base as isize;\n    while x >= base {\n        s += &format!(\"{}\", x % base);\n\
    \        x /= base;\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base =\
    \ base.to_string();\n    while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1);\n        if digit == Some('0') {\n            digit = digits.chars().nth(base.len()\
    \ - 2);\n        }\n        s += digit;\n        base = base.chars().nth(base.len()\
    \ - 1);\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = String::new();\n    while remainder > 0 {\n        let digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    if remainder > 0 {\n        digits.push(remainder.to_string());\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > base {\n        remainder -= base;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    digits.insert(0, remainder.to_string());\n  \
    \  s += &digits;\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut power =\
    \ 1;\n    while digits.len() > 0 {\n        let mut digit = digits.chars().nth(digits.len()\
    \ - 1);\n        if digit == b'0' {\n            digit = digits.chars().nth(digits.len()\
    \ - 1);\n            power = 1;\n        } else {\n            power = power *\
    \ 10;\n        }\n        if power > base {\n            power = 1;\n        \
    \    digit = digits.chars().nth(digits.len() - 1);\n        }\n        s = format!(\"\
    {}{}\", s, digit);\n        digits = digits.chars().nth(digits.len() - 1);\n \
    \   }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut basedigits = digits.chars().map(|c| match c {\n        '0' => 0,\n\
    \        '1' => 1,\n        '2' => 2,\n        '3' => 3,\n        '4' => 4,\n\
    \        '5' => 5,\n        '6' => 6,\n        '7' => 7,\n        '8' => 8,\n\
    \        '9' => 9,\n        _ => panic!(\"Invalid base!\"),\n    }).collect::<Vec<_>>();\n\
    \    basedigits[base] = 1;\n    while basedigits.len() > 0 {\n        let mut\
    \ carry = 0;\n        for &d in basedigits {\n            carry += d;\n      \
    \      basedigits[base] -= d;\n            if basedigits[base] == 0 {\n      \
    \          basedigits.remove(base);\n                break;\n            }\n \
    \       }\n        if carry > 0 {\n            basedigits.insert(0, 1);\n    \
    \    }\n        s += String::from_utf8(basedigits.iter().cloned().collect()).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = 0;\n\
    \    while x >= base {\n        remainder = x % base;\n        x /= base;\n  \
    \      s.push((remainder + '0') as char);\n    }\n    s.push((x + '0') as char);\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n    let\
    \ mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n \
    \       digits[base] = remainder;\n        x /= base;\n    }\n    digits[base]\
    \ = x;\n    for &d in digits {\n        s += char::from_u32(d as u32).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut x = x;\n    while\
    \ x >= base {\n        s +=\n            match x % base {\n                0 =>\
    \ \"0\",\n                1 => \"1\",\n                2 => \"10\",\n        \
    \        3 => \"11\",\n                4 => \"100\",\n                5 => \"\
    101\",\n                6 => \"110\",\n                7 => \"111\",\n       \
    \         _ => unreachable!(),\n            };\n        x /= base;\n    }\n  \
    \  s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = base;\n    while remainder > 0 {\n        if remainder >= base {\n       \
    \     s.push((remainder % base).to_string());\n            remainder = remainder\
    \ / base;\n        } else {\n            s.push((remainder % base).to_string());\n\
    \            remainder = 0;\n        }\n    }\n    if remainder > 0 {\n      \
    \  s.push((remainder % base).to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    if quotient == 0 {\n\
    \        s = format!(\"{}\", x);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder /= base;\n        quotient /= base;\n        s.push((remainder\
    \ % base) as char);\n    }\n    s.push((quotient % base) as char);\n    s", " \
    \   let mut result = String::new();\n    let mut digits = x.to_string();\n   \
    \ let mut base10 = base.to_string();\n    while base10.len() > 0 {\n        let\
    \ mut digit = digits.pop().unwrap();\n        if digit < '0' || digit > '9' {\n\
    \            result.push_str(digit.to_string());\n            base10 = base10.remove(0);\n\
    \        } else {\n            result.push_str(&digits[digit.to_string().len()\
    \ - 1]);\n            base10 = base10.remove(0);\n        }\n    }\n    result",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ power = 1;\n    while digits.len() > 0 {\n        if digits.len() > base {\n\
    \            power = power + 1;\n            digits = digits.split_off(base).collect();\n\
    \        }\n        if power > 0 {\n            s.push_str(&format!(\"{}{}\",\
    \ digits, &base**power));\n        } else {\n            s.push_str(&digits);\n\
    \        }\n        power = power + 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i..].parse::<isize>().unwrap();\n\
    \        if digit < base {\n            digit = digit * base;\n        }\n   \
    \     digit = digit / base;\n        digit = digit.to_string();\n        i +=\
    \ digit.len();\n        s += digit;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut carry = 0;\n    for d in x.to_string().chars().cloned()\
    \ {\n        let digit = d.to_digit(base);\n        if carry > 0 {\n         \
    \   digits.push(digit + carry);\n        } else {\n            digits.push(digit);\n\
    \        }\n        carry = digit as isize;\n    }\n    if carry > 0 {\n     \
    \   digits.push(carry);\n    }\n    s = digits.into_owned();\n    if s.len() >\
    \ 0 {\n        s += &format!(\"{}\", base);\n    }\n    s", "    let mut result\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > base {\n        remainder -= base;\n        result.push((&digits[..]).to_digit(base).unwrap());\n\
    \    }\n    result.push((&digits[..]).to_digit(base).unwrap());\n    result",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ power = 1;\n    while power.is_positive() {\n        if power % base == 0 {\n\
    \            s += digits[power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..power..pow",
  "    let mut s = String::new();\n    let mut digits = vec![0i32; base];\n    let\
    \ mut carry = 0;\n    while x >= base {\n        let digit = x % base;\n     \
    \   digits[digit] += 1;\n        x /= base;\n        carry = 1;\n    }\n    if\
    \ carry != 0 {\n        digits[digit] += carry;\n    }\n    for digit in digits.iter_mut()\
    \ {\n        *digit = *digit as isize;\n    }\n    if digits.len() > 0 {\n   \
    \     s += &digits[digits.len() - 1];\n    }\n    s", "    let mut result = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    result.push_str(&format!(\"{}\", remainder));\n\
    \    result", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] == '0' {\n            base = base.to_string() + &base[1..];\n\
    \            digits = &digits[i..];\n        } else {\n            s.push_str(&base[..]);\n\
    \            s.push_str(&digits[..]);\n            i += 1;\n        }\n    }\n\
    \    s.push_str(&base[..]);\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = String::new();\n    let mut remainder = 0;\n    let mut digits_len\
    \ = base;\n    let mut digits_len2 = base;\n    let mut digits_len3 = base;\n\
    \    let mut digits_len4 = base;\n    let mut digits_len5 = base;\n    let mut\
    \ digits_len6 = base;\n    let mut digits_len7 = base;\n    let mut digits_len8\
    \ = base;\n    let mut digits_len9 = base;\n    let mut digits_len10 = base;\n\
    \    let mut digits_len11 = base;\n    let mut digits_len12 = base;\n    let mut\
    \ digits_len13 = base;\n    let mut digits_len14 = base;\n    let mut digits_len15\
    \ = base;\n    let mut digits_len16 = base;\n    let mut digits_len17 = base;\n\
    \    let mut digits_len18 = base;\n    let mut digits_len19 = base;\n    let mut\
    \ digits_len20 = base;\n    let mut digits_len21 = base;\n    let mut digits_len22\
    \ = base;\n    let mut digits_len23 = base;\n    let mut digits_len24 = base;\n\
    \    let mut digits_len25 = base;\n    let mut digits_len26 = base;\n    let mut\
    \ digits_len27 = base;\n    let mut digits_len28 = base;\n    let mut digits_len29\
    \ = base;\n    let mut digits_len30 = base;\n    let mut digits_len31 = base;\n\
    \    let mut digits_len32 = base;\n    let mut digits_len33 = base;\n    let mut\
    \ digits_len34 = base;\n    let mut digits_len35 = base;\n    let mut digits_len36\
    \ = base;\n    let mut digits_len37 = base;\n    let mut digits_len38 = base;\n\
    \    let mut digits_len39 = base;\n    let mut digits_len40 = base;\n    let mut\
    \ digits_len41 = base;\n    let mut digits_len42 = base;\n    let mut digits_len43\
    \ = base;\n    let mut digits_len44 = base;\n    let mut digits_len45 = base;\n\
    \    let mut digit", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        if remainder >= base {\n            digits = digits * base + remainder\
    \ - base;\n            remainder = 0;\n        } else {\n            remainder\
    \ = remainder - base;\n        }\n    }\n    if remainder > 0 {\n        digits\
    \ = digits * base + remainder;\n    }\n    s += &format!(\"{}\", digits);\n  \
    \  s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1).unwrap();\n        digit = digit.to_string();\n\
    \        result += \"0\".to_string();\n        result += digit;\n        base\
    \ = base.to_string();\n    }\n    result", "    let mut s = String::new();\n \
    \   let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base\
    \ = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] == base[0] {\n            s.push_str(&digits[i\
    \ .. i + 1]);\n            i += 1;\n        } else {\n            s.push_str(&base[digits[i]\
    \ - base[0]]);\n            i += 1;\n        }\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        digits.push_str(&format!(\"{}\",\
    \ digit));\n    }\n    digits.push_str(&format!(\"{}\", remainder));\n    s +=\
    \ digits;\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let mut digit = remainder % base;\n      \
    \  remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n \
    \   }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s.push(digit);\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let digit = quotient % base;\n     \
    \   quotient = quotient / base;\n        remainder = remainder * base + digit;\n\
    \        s.push((digit as char).to_string());\n    }\n    if remainder > 0 {\n\
    \        s.push((remainder as char).to_string());\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n\
    \    while quotient > 0 {\n        let remainder = quotient % base;\n        quotient\
    \ /= base;\n        s.push(remainder);\n    }\n    String::from(s)", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base {\n     \
    \       digits[i] -= base;\n        } else {\n            digits[i] += 1;\n  \
    \      }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        s +=\
    \ digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s += &digits[..base];\n    }\n\
    \    s += &digits[..];\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        x /= base;\n        s.push((remainder as char).to_string());\n    }\n\
    \    s.push((x as char).to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain = remain % base;\n        digit = digit as usize + 1;\n      \
    \  s.push((digit as char).to_string());\n    }\n    String::from(s)", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0).unwrap();\n\
    \        if digit < base {\n            s.push_str(&digit as char);\n        }\
    \ else {\n            s.push_str(&digit as char + &base[digit as usize]);\n  \
    \          carry = 1;\n        }\n    }\n    if carry != 0 {\n        s.push_str(&base[base\
    \ as usize]);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n  \
    \  while remainder > 0 {\n        remainder %= base;\n        digits.push(match\
    \ quotient % base {\n            0 => 0,\n            1 => 1,\n            _ =>\
    \ 2,\n        });\n        quotient /= base;\n    }\n    digits.push(match quotient\
    \ % base {\n        0 => 0,\n        1 => 1,\n        _ => 2,\n    });\n    s\
    \ += digits.reverse();\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.len() {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        digit *= base.parse::<usize>().unwrap();\n        digit += digit.parse::<usize>().unwrap();\n\
    \        digit = digit.to_string();\n        i += digit.len();\n        s += digit;\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut remainder =\
    \ x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n \
    \       remainder = remainder / base;\n        result = format!(\"{}{}\", digit,\
    \ result);\n    }\n    result", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      if digits[i] == base {\n            power = power / base;\n        }\n\
    \        if power > 0 {\n            s.push_str(&format!(\"{}\", digits[i]));\n\
    \        }\n        if power < base {\n            s.push_str(&format!(\"{}\"\
    , digits[i]));\n        }\n        i += 1;\n        power = power * base;\n  \
    \  }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.remove(0);\n        if digit < base {\n\
    \            s.push_str(&mut digits[..]);\n            power = 1;\n        } else\
    \ {\n            s.push_str(&mut \"0\".to_string());\n            power = power\
    \ / base;\n        }\n    }\n    s.push_str(&mut base.to_string());\n    s.push_str(&mut\
    \ power.to_string());\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    let mut base = base;\n   \
    \ while remainder > 0 {\n        let digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    if\
    \ base < 10 {\n        s = format!(\"{}\", s);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut remainder = 0;\n    while x >= base {\n      \
    \  remainder = x % base;\n        x /= base;\n        s.push((remainder as char).to_string());\n\
    \    }\n    s.push((x as char).to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = quotient / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        quotient = remainder;\n   \
    \ }\n    if remainder > 0 {\n        s = format!(\"{}\", s);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        let mut j = i;\n        while\
    \ j < digits.len() && digits[j] == base[j] {\n            j += 1\n        }\n\
    \        if j == digits.len() {\n            s.push('0');\n        } else {\n\
    \            s.push('1');\n            digits[j] = '0';\n        }\n        i\
    \ += j - i;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let digit = digits[i] - '0';\n        let mut new_digit = digit;\n    \
    \    let mut new_base = base[i];\n        if new_base < 10 {\n            new_digit\
    \ += carry;\n            new_base += 1;\n        }\n        carry = new_digit\
    \ / new_base;\n        new_digit %= new_base;\n        s[i] = new_digit + '0';\n\
    \        i += 1;\n    }\n    if carry > 0 {\n        s.push('1');\n    }\n   \
    \ String::from(s)", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n        let mut\
    \ digit = digits[i];\n        let mut base = base[i];\n        if digit == '0'\
    \ {\n            digit = digits[i - 1];\n            base = base[i - 1];\n   \
    \     }\n        let mut new_digit = digit + base;\n        if new_digit > '9'\
    \ {\n            new_digit -= 10;\n            carry = 1;\n        }\n       \
    \ s += new_digit as char;\n        i += 1;\n        if carry == 1 {\n        \
    \    s += '1';\n            carry = 0;\n        }\n    }\n    if carry != 0 {\n\
    \        s += '1';\n    }\n    s"]
stop_tokens:
- "\n}"
