name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\"\
  )\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize,\
  \ base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        s = format!(\"{}{}\",\
    \ s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    let mut power\
    \ = 1;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i]\
    \ > base {\n            power = power * base;\n            digits.remove(i, 1);\n\
    \        } else {\n            power = power * digits[i];\n        }\n       \
    \ i += 1;\n    }\n    s += power.to_string();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = quotient / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n        quotient = remainder;\n   \
    \ }\n    if remainder > 0 {\n        s = format!(\"{}\", s);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = 0;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    while digits.len()\
    \ > 0 {\n        let mut digit = digits.remove(0);\n        remainder += digit\
    \ as isize;\n        if base > 1 {\n            digit *= base;\n        }\n  \
    \      s += digit.to_string();\n    }\n    if remainder > 0 {\n        s += \"\
    0\".to_string();\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder += x % base;\n    \
    \    x /= base;\n    }\n    s.push_str(&format!(\"{}\", remainder));\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut i = 0;\n    while i < digits.size() {\n        let mut\
    \ digit = digits[i];\n        let mut base = base[i];\n        if digit == 0 {\n\
    \            digit = carry;\n            base = base + 1;\n        }\n       \
    \ digit = digit - base;\n        digit = digit / 10;\n        digit = digit +\
    \ carry + 1;\n        digit = digit % 10;\n        carry = digit / 10;\n     \
    \   digit = digit % 10;\n        digits[i] = digit;\n        s[i] = digit.to_string();\n\
    \        i += 1;\n    }\n    if carry > 0 {\n        s.push(carry.to_string());\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut x =\
    \ x.to_digits();\n    let mut base = base.to_digits();\n    while x.len() > 0\
    \ {\n        let mut digit = x.pop().unwrap();\n        if digit > base {\n  \
    \          digit -= base;\n            s.push('0');\n        }\n        s.push((digit\
    \ as char).to_string());\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        s.push((quotient as u32).to_string());\n    }\n    s.push((remainder\
    \ as u32).to_string());\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = x;\n    let mut base = base;\n\
    \    while remainder > 0 {\n        remainder %= base;\n        digits.push(char::from_u32(base).unwrap());\n\
    \        base /= base;\n    }\n    digits.push(char::from_u32(base).unwrap());\n\
    \    s += digits.into_owned();\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s", "    let mut\
    \ s = String::new();\n    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n\
    \    while x.len() > 0 {\n        let mut digit = x.remove(0);\n        let mut\
    \ base = base.remove(0);\n        if base > 10 {\n            digit = digit.to_digits()\
    \ + 1;\n            base = base.to_digits() + 1;\n        }\n        s += digit.to_string()\
    \ + base.to_string();\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    while x >=\
    \ base {\n        let digit = x % base;\n        digits[digit] += 1;\n       \
    \ x /= base;\n        carry += 1;\n    }\n    if carry > 0 {\n        digits[digit]\
    \ += 1;\n    }\n    for digit in digits.iter().rev() {\n        s += char::from_u32(digit\
    \ as u32).unwrap();\n    }\n    s", "    let mut result = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder /= base;\n        result.push(remainder.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder /= base;\n        result.push(remainder.to_string());\n\
    \    }\n    if remainder > 0 {\n        result.push(remainder.to_string());\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    while digits_len > base_len {\n  \
    \      digits = digits.chars().nth(digits_len - base_len + 1).collect();\n   \
    \     base = base.chars().nth(base_len).collect();\n        base_len += 1;\n \
    \   }\n    while base_len > digits_len {\n        digits = digits.chars().nth(digits_len\
    \ - base_len + 1).collect();\n        base = base.chars().nth(base_len).collect();\n\
    \        base_len -= 1;\n    }\n    while digits_len > 0 {\n        if digits[digits_len\
    \ - 1] == '0' {\n            digits = digits.chars().nth(digits_len - 1).collect();\n\
    \            digits_len -= 1;\n        } else {\n            break;\n        }\n\
    \    }\n    while base_len > 0 {\n        if base[base_len - 1] == '0' {\n   \
    \         base = base.chars().nth(base_len - 1).collect();\n            base_len\
    \ -= 1;\n        } else {\n            break;\n        }\n    }\n    while digits_len\
    \ > 0 {\n        if digits[digits_len - 1] == '0' {\n            digits = digits.chars().nth(digits_len\
    \ - 1).collect();\n            digits_len -= 1;\n        } else {\n          \
    \  break;\n        }\n    }\n    while base_len > 0 {\n        if base[base_len\
    \ - 1] == '0' {\n            base = base.chars().nth(base_len - 1).collect();\n\
    \            base_len -= 1;\n        } else {\n            break;\n        }\n\
    \    }\n    while digits_len > 0 {\n        if digits[digits_len - 1] == '0' {\n\
    \            digits = digits.chars().nth(digits_len - 1).collect();\n        \
    \    digits_len -= 1;\n        } else {\n            break;\n        }\n    }\n\
    \    while base_len > 0 {\n        if base[base_len - 1] == '0' {\n          \
    \  base = base.chars().nth(base_len - 1).collect();\n            base_len -= 1;\n\
    \        } else {\n            break;\n        }\n    }\n    while digits_len\
    \ > 0 {\n        if digits[digits_len - 1] == '0' {\n            digits = digits.chars().nth(digits_len\
    \ - 1).collect();\n            digits_len -= 1;\n        } else {\n          \
    \  break;\n        }\n    }\n    while base_len > 0 {\n        if base[base_len\
    \ - 1] == '0' {\n            base = base.chars().nth(base_len - 1).collect();\n\
    \            base_len -= 1;\n        } else {\n            break;\n        }\n\
    \    }\n    while digits_len > 0 {\n        if digit", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base < 10 {\n   \
    \         s.push_str(&digits[i..i + 1]);\n            i += 1;\n        } else\
    \ {\n            s.push_str(&digits[i..i + base.len()]);\n            i += base.len();\n\
    \        }\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut bases = base.to_string();\n    while bases.len()\
    \ > 0 {\n        let mut digit = digits.chars().nth(bases.len() - 1);\n      \
    \  let mut base = bases.chars().nth(bases.len() - 1);\n        if base == b'0'\
    \ {\n            digit = digit.chars().nth(digit.len() - 1);\n            base\
    \ = base.chars().nth(base.len() - 1);\n        }\n        if digit == b'0' {\n\
    \            digit = digit.chars().nth(digit.len() - 1);\n            base = base.chars().nth(base.len()\
    \ - 1);\n        }\n        if digit == b'1' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n            base = base.chars().nth(base.len() - 1);\n        }\n   \
    \     if digit == b'2' {\n            digit = digit.chars().nth(digit.len() -\
    \ 1);\n            base = base.chars().nth(base.len() - 1);\n        }\n     \
    \   if digit == b'3' {\n            digit = digit.chars().nth(digit.len() - 1);\n\
    \            base = base.chars().nth(base.len() - 1);\n        }\n        if digit\
    \ == b'4' {\n            digit = digit.chars().nth(digit.len() - 1);\n       \
    \     base = base.chars().nth(base.len() - 1);\n        }\n        if digit ==\
    \ b'5' {\n            digit = digit.chars().nth(digit.len() - 1);\n          \
    \  base = base.chars().nth(base.len() - 1);\n        }\n        if digit == b'6'\
    \ {\n            digit = digit.chars().nth(digit.len() - 1);\n            base\
    \ = base.chars().nth(base.len() - 1);\n        }\n        if digit == b'7' {\n\
    \            digit = digit.chars().nth(digit.len() - 1);\n            base = base.chars().nth(base.len()\
    \ - 1);\n        }\n        if digit == b'8' {\n            digit = digit.chars().nth(digit.len()\
    \ - 1);\n            base = base.chars().nth(base.len() - 1);\n        }\n   \
    \     if digit == b'9' {\n            digit = digit.chars().nth(digit.len() -\
    \ 1);\n            base = base.chars().nth(base.len() - 1);\n        }\n     \
    \   if base == b'0' {\n            digit = digit.chars().nth(digit.len() - 1);\n\
    \            base = base.chars().nth(base.len() - 1);\n        }\n        if base\
    \ == b'1' {", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base.to_string());\n    }\n    while remainder\
    \ > 0 {\n        remainder -= 1;\n        digits.insert(0, base.to_string());\n\
    \    }\n    s += digits;\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut remainder = x;\n    while remainder > base\
    \ {\n        remainder -= base;\n        digits.insert(0, base);\n    }\n    while\
    \ remainder > 0 {\n        remainder -= 1;\n        digits.insert(0, 1);\n   \
    \ }\n    s += &digits;\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while digits.len() > 0 {\n        let mut digit =\
    \ digits.remove(0);\n        let mut new_digit = digit;\n        if base == 2\
    \ {\n            if carry > 0 {\n                new_digit += &'0';\n        \
    \    }\n            new_digit += &'1';\n        }\n        if base == 8 {\n  \
    \          if carry > 0 {\n                new_digit += &'0';\n            }\n\
    \            new_digit += &'7';\n        }\n        if base == 16 {\n        \
    \    if carry > 0 {\n                new_digit += &'0';\n            }\n     \
    \       new_digit += &'7';\n            new_digit += &'1';\n        }\n      \
    \  if base == 10 {\n            if carry > 0 {\n                new_digit += &'0';\n\
    \            }\n            new_digit += &'9';\n        }\n        if base ==\
    \ 16 {\n            if carry > 0 {\n                new_digit += &'0';\n     \
    \       }\n            new_digit += &'9';\n            new_digit += &'1';\n  \
    \      }\n        if base == 10 {\n            if carry > 0 {\n              \
    \  new_digit += &'0';\n            }\n            new_digit += &'9';\n       \
    \ }\n        if base == 8 {\n            if carry > 0 {\n                new_digit\
    \ += &'0';\n            }\n            new_digit += &'7';\n        }\n       \
    \ if base == 2 {\n            if carry > 0 {\n                new_digit += &'0';\n\
    \            }\n            new_digit += &'1';\n        }\n        if base ==\
    \ 10 {\n            if carry > 0 {\n                new_digit += &'0';\n     \
    \       }\n            new_digit += &'9';\n        }\n        if base == 16 {\n\
    \            if carry > 0 {\n                new_digit += &'0';\n            }\n\
    \            new_digit += &'9';\n            new_digit += &'1';\n        }\n \
    \       if base == 8 {\n            if carry > 0 {\n                new_digit\
    \ += &'0';\n            }\n            new_digit += &'7';\n        }\n       \
    \ if base == 2 {\n            if carry > 0 {\n                new_digit += &'0';\n\
    \            }\n            new_digit += &'1';\n        }\n        if base ==\
    \ 10 {\n            if carry > 0 {\n                new_digit += &'0';\n     \
    \       }\n            new_digit += &'9';\n        }\n        if ", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2).unwrap();\n        }\n        base.truncate(base.len() - 1);\n        s\
    \ += digit;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while digits.len() > 0 {\n        let mut digit =\
    \ digits.remove(0);\n        if base == 2 {\n            if carry > 0 {\n    \
    \            digit += carry;\n                carry = 0;\n            }\n    \
    \    }\n        if digit < base {\n            digit += carry;\n            carry\
    \ = 0;\n        }\n        if digit > base {\n            digit -= base;\n   \
    \         carry = 0;\n        }\n        s += digit.to_string();\n    }\n    if\
    \ carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    while digits.len() > 0 {\n        let mut digit\
    \ = digits.pop().unwrap();\n        if base == 10 {\n            s.push_str(&digit);\n\
    \        } else {\n            s.push_str(&digit + &base);\n        }\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.pop().unwrap();\n        if base > 10 {\n            digit\
    \ *= base;\n            digit = digit.to_string();\n        }\n        s += digit;\n\
    \        base /= 10;\n    }\n    s", "    let mut result = String::new();\n  \
    \  let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digits, digit);\n    }\n    result",
  "    let mut result = String::new();\n    let mut remainder = x;\n    let mut base\
    \ = base;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        result = format!(\"{}{}\", digit,\
    \ result);\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.remove(0).unwrap();\n\
    \        let mut new_digit = digit as isize;\n        if carry > 0 {\n       \
    \     new_digit += carry;\n        }\n        base = base.iter().map(|&x| x as\
    \ isize).collect::<Vec<_>>();\n        digits = digits.iter().map(|&x| x as isize).collect::<Vec<_>>();\n\
    \        let mut new_base = base.iter().map(|&x| x as isize).collect::<Vec<_>>();\n\
    \        new_digit = new_digit as isize;\n        if new_digit > 9 {\n       \
    \     new_digit -= 10;\n            new_base += 1;\n        }\n        carry =\
    \ new_digit as isize - new_base;\n        s = s.push_str(&new_base.to_string());\n\
    \    }\n    if carry > 0 {\n        s = s.push_str(&carry.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient /= base;\n        s.push((remainder as char).to_string());\n\
    \    }\n    s.push((quotient as char).to_string());\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n    while\
    \ quotient > 0 {\n        let remainder = quotient % base;\n        quotient =\
    \ quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1);\n        let digit = digit.to_digit(base);\n        remainder = digit\
    \ * remainder;\n        s = format!(\"{}{}\", s, digit);\n        digits = digits.chars().nth(digits.len()\
    \ - 1);\n    }\n    if remainder != 0 {\n        s = format!(\"{}\", remainder)\
    \ + s;\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n        digit\
    \ = digit.checked_mul(base).unwrap();\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        digit = digit.checked_add(&mut\
    \ i);\n        digit = digit.checked_add(&mut i);\n        ", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut remainder =\
    \ x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n \
    \       remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut base = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s.push((base as char).to_string());\n        base /= 10;\n    }\n   \
    \ s.push((base as char).to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut x = x as isize;\n    let mut base\
    \ = base as isize;\n    while x >= base {\n        s +=\n            format!(\"\
    {:0{}b}\", x % base, base).to_string()\n                .chars()\n           \
    \     .map(|c| match c {\n                    '0' => 0,\n                    '1'\
    \ => 1,\n                    '2' => 2,\n                    '3' => 3,\n      \
    \              '4' => 4,\n                    '5' => 5,\n                    '6'\
    \ => 6,\n                    '7' => 7,\n                    '8' => 8,\n      \
    \              '9' => 9,\n                    'a' => 10,\n                   \
    \ 'b' => 11,\n                    'c' => 12,\n                    'd' => 13,\n\
    \                    'e' => 14,\n                    'f' => 15,\n            \
    \        _ => unreachable!(),\n                })\n                .collect::<Vec<_>>()\n\
    \                .join();\n        x /= base;\n    }\n    s +=\n        format!(\"\
    {:0{}b}\", x, base).to_string()\n            .chars()\n            .map(|c| match\
    \ c {\n                '0' => 0,\n                '1' => 1,\n                '2'\
    \ => 2,\n                '3' => 3,\n                '4' => 4,\n              \
    \  '5' => 5,\n                '6' => 6,\n                '7' => 7,\n         \
    \       '8' => 8,\n                '9' => 9,\n                'a' => 10,\n   \
    \             'b' => 11,\n                'c' => 12,\n                'd' => 13,\n\
    \                'e' => 14,\n                'f' => 15,\n                _ =>\
    \ unreachable!(),\n            })\n            .collect::<Vec<_>>()\n        \
    \    .join();\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    if quotient > 0 {\n        s = format!(\"{}\"\
    , s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1);\n        if digit == '0' {\n\
    \            digit = digits.chars().nth(base.len() - 2);\n        }\n        base.truncate(base.len()\
    \ - 1);\n        s += digit;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n\
    \    while quotient > 0 {\n        let digit = quotient % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n        quotient\
    \ = quotient / base;\n    }\n    if remainder > 0 {\n        s = format!(\"{}\"\
    , s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits =\
    \ digit.to_string().to_string() + digits;\n    }\n    s = digits.to_string() +\
    \ s;\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n  \
    \  let mut digits = base;\n    while remainder > 0 {\n        if remainder >=\
    \ digits {\n            s.push((remainder % digits).to_string());\n          \
    \  remainder = remainder / digits;\n        } else {\n            s.push((digits).to_string());\n\
    \            remainder = remainder % digits;\n        }\n        digits /= base;\n\
    \    }\n    s.push((remainder).to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", s, digit.to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry\
    \ = 0;\n    while basedigits.len() > 0 {\n        let mut digit = basedigits.pop().unwrap();\n\
    \        if carry > 0 {\n            digit += 1;\n        }\n        digits.push(digit);\n\
    \        carry = digit as isize - 1;\n    }\n    while digits.len() > 0 {\n  \
    \      let mut digit = digits.pop().unwrap();\n        if carry > 0 {\n      \
    \      digit += 1;\n        }\n        s += digit.to_string();\n        carry\
    \ = digit as isize - 1;\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut base = base.to_string();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = digit.to_digit(base).unwrap();\n       \
    \ let digit = digit + carry;\n        carry = digit / 10;\n        digits = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        s = format!(\"{}{}\", s, digit);\n    }\n    if carry\
    \ > 0 {\n        s = format!(\"{}{}\", s, carry);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut x = x as isize;\n    let mut base = base as\
    \ isize;\n    while x >= base {\n        s += &format!(\"{}\", x % base);\n  \
    \      x /= base;\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    let mut base = base;\n \
    \   while remainder > 0 {\n        remainder %= base;\n        s += char::from_u32(base).unwrap();\n\
    \        base /= base;\n    }\n    s += char::from_u32(base).unwrap();\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ basedigits = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        let mut j = i;\n        while j < digits.length() && digits[j] ==\
    \ basedigits[j] {\n            j += 1; // skip past this digit\n        }\n  \
    \      if j == digits.length() {\n            break; // no more digits to process\n\
    \        }\n        let mut digit = digits[j];\n        digits[j] = digit;\n \
    \       i += 1;\n    }\n    while i < digits.length() {\n        s += digits[i];\n\
    \        i += 1; // skip past this digit\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut digits = base;\n    while remainder >\
    \ 0 {\n        remainder, remainder = remainder % base, remainder / base;\n  \
    \      digits = digits - 1;\n    }\n    while digits > 0 {\n        s.push((digits).to_string());\n\
    \        digits = digits - 1;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        if base.len() == 1 {\n            s.push_str(&digits[digits.len()\
    \ - 1]);\n            break;\n        }\n        let mut index = digits.len()\
    \ - 1;\n        let mut digit = digits[index];\n        while base.len() > 1 &&\
    \ digit >= base.len() {\n            digits.swap(index, digits.len() - 1);\n \
    \           digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.swap(digits.len() - 1, digits.len() - 2);\n            digits.swap(digits.len()\
    \ - 2, digits.len() - 1);\n            digits.swap(digits.len() - 1, digits.len()\
    \ - 2);\n            digits.swap(digits.len() - 2, digits.len() - 1);\n      \
    \      digits.", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = 0;\n    while digits.len() > 0 {\n        let digit =\
    \ digits.chars().nth(digits.len() - 1).unwrap();\n        remainder = digit as\
    \ isize - remainder;\n        if remainder < base {\n            s.push_str(&digits[..digits.len()\
    \ - 1]);\n            break;\n        }\n        digits.push_str(&digits[digits.len()\
    \ - 1]);\n    }\n    s", "    let mut s = String::new();\n    let mut digits =\
    \ x.to_string();\n    let mut base = base.to_string();\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n        if\
    \ base == 10 {\n            s.push_str(digit);\n            digits.clear();\n\
    \            base = base.to_string();\n        } else {\n            s.push_str(&digit\
    \ + &base);\n            digits.clear();\n            base = base.to_string();\n\
    \        }\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n  \
    \      remainder /= base;\n        quotient /= base;\n        s.push((remainder\
    \ % base) as char);\n    }\n    s.push((quotient % base) as char);\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let mut digit = remainder % base;\n      \
    \  remainder = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n \
    \   }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit]);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.len() {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        if digit < base {\n            digit = digit * base + 10;\n        }\n\
    \        digit = digit as usize;\n        i += 1;\n        s += digit.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = String::new();\n    while remainder > 0 {\n        let digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    if remainder > 0 {\n        digits.push(remainder.to_string());\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        remainder %= base;\n        s.push((remainder as char).to_string());\n\
    \        remainder /= base;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c as char).collect::<Vec<_>>();\n    let mut basedigits_len = basedigits.length;\n\
    \    let mut i = 0;\n    while i < basedigits_len {\n        if basedigits[i]\
    \ >= base {\n            basedigits[i] -= base;\n        } else {\n          \
    \  basedigits[i] += base;\n        }\n        i += 1;\n    }\n    s += basedigits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base.to_string());\n    }\n    digits.insert(0,\
    \ remainder.to_string());\n    s += &digits;\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut basedigits\
    \ = digits.chars().filter(|c| c >= '0' && c <= '9').collect::<Vec<_>>();\n   \
    \ let mut basedigits_len = basedigits.len();\n    let mut digits_len = digits.len();\n\
    \    let mut i = 0;\n    while i < digits_len {\n        if basedigits_len ==\
    \ 0 {\n            s.push_str(&digits[..i]);\n            break;\n        }\n\
    \        let mut digit = digits[..i].chars().filter(|c| c >= '0' && c <= '9').collect::<Vec<_>>();\n\
    \        let mut basedigit = basedigits[..basedigits_len].chars().filter(|c| c\
    \ >= '0' && c <= '9').collect::<Vec<_>>();\n        let mut basedigits_len = basedigit.len();\n\
    \        let mut digits_len = digits.len();\n        while i < digits_len {\n\
    \            if basedigits_len == 0 {\n                s.push_str(&digits[..i]);\n\
    \                break;\n            }\n            let mut digit = digits[..i].chars().filter(|c|\
    \ c >= '0' && c <= '9').collect::<Vec<_>>();\n            let mut basedigit =\
    \ basedigits[..basedigits_len].chars().filter(|c| c >= '0' && c <= '9').collect::<Vec<_>>();\n\
    \            let mut basedigits_len = basedigit.len();\n            if basedigits_len\
    \ > 0 {\n                let mut basedigit = basedigits[..basedigits_len].chars().filter(|c|\
    \ c >= '0' && c <= '9').collect::<Vec<_>>();\n                let mut basedigits_len\
    \ = basedigit.len();\n                let mut digits_len = digits.len();\n   \
    \             while i < digits_len {\n                    if basedigits_len ==\
    \ 0 {\n                        s.push_str(&digits[..i]);\n                   \
    \     break;\n                    }\n                    let mut digit = digits[..i].chars().filter(|c|\
    \ c >= '0' && c <= '9').collect::<Vec<_>>();\n                    let mut basedigit\
    \ = basedigits[..basedigits_len].chars().filter(|c| c >= '0' && c <= '9').collect::<Vec<_>>();\n\
    \                    let mut basedigits_len = basedigit.len();\n             \
    \       ", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      if digits[i] > base {\n            digits[i] -= base;\n            power\
    \ = 1;\n        } else {\n            digits[i] += power;\n            power +=\
    \ 1;\n        }\n        i += 1;\n    }\n    s += digits.into_iter().map(|x| x.to_string()).collect::<String>();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > base {\n      \
    \      s.push_str(&digits[i .. (i + 1)]);\n            i += 1;\n        } else\
    \ {\n            s.push_str(&base[digits[i] - base]);\n            i += 1;\n \
    \       }\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = s.push_str(&digits[digit]);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut bases = base.to_string();\n\
    \    let mut digits_len = digits.length();\n    let mut bases_len = bases.length();\n\
    \    let mut i = 0;\n    while i < digits_len {\n        if digits[i] > bases.chars().nth(digits_len\
    \ - i - 1) {\n            digits = digits.chars().nth(digits_len - i - 1).to_string();\n\
    \            digits_len = digits.length();\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    while i < bases_len {\n        if bases[i] > digits.chars().nth(bases_len\
    \ - i - 1) {\n            bases = bases.chars().nth(bases_len - i - 1).to_string();\n\
    \            bases_len = bases.length();\n        } else {\n            i += 1;\n\
    \        }\n    }\n    for i in 0..digits_len {\n        if digits[i] != bases.chars().nth(digits_len\
    \ - i - 1) {\n            s.push_str(&digits.chars().nth(i).unwrap());\n     \
    \   }\n    }\n    s", "    let mut result = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        result = format!(\"{}{}\", digit,\
    \ result);\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = 0;\n    while digits.len() > 0 {\n\
    \        let digit = digits.chars().nth(digits.len() - 1);\n        let mut new_digit\
    \ = digit;\n        let mut new_remainder = 0;\n        while new_digit != 0 {\n\
    \            let mut new_digit = digit % base;\n            new_remainder = new_remainder\
    \ + (new_digit as isize);\n            digit = digit / base;\n        }\n    \
    \    s = format!(\"{}{}\", s, new_remainder);\n        remainder = remainder +\
    \ new_remainder;\n        digits = digits.chars().nth(digits.len() - 1);\n   \
    \ }\n    if remainder != 0 {\n        s = format!(\"{}\", remainder);\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut remainder = x;\n    let mut base = base;\n\
    \    while remainder > base {\n        remainder -= base;\n        s += &digits[..base];\n\
    \    }\n    s += &digits[..remainder];\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if digits[i] > base {\n            s.push_str(&base[digits[i]\
    \ - base]);\n            i += 1;\n        } else {\n            s.push_str(&digits[i]);\n\
    \        }\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        if digit < base {\n            digit = digit * base + 10;\n        }\n\
    \        digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;", "    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    for digit in\
    \ x.to_string().chars().cloned() {\n        digits[digit.digit() - '0'] +=\n \
    \           digit.digit() >= '0' && digit.digit() <= '9' ? digit.digit() - '0'\
    \ : digit.digit() - 'a' + 10;\n        carry = (digits[digit.digit() - '0'] +\
    \ carry) % base;\n        digits[digit.digit() - '0'] = carry / base;\n      \
    \  carry %= base;\n    }\n    for digit in digits.iter_mut() {\n        *digit\
    \ = digit.digit() >= '0' && digit.digit() <= '9' ? digit.digit() - '0' : digit.digit()\
    \ - 'a' + 10;\n    }\n    if carry > 0 {\n        s += &format!(\"{}{}\", digits[digits.len()\
    \ - 1], &'0' + &carry);\n    }\n    String::from(s)", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        result.push((quotient as char).to_string());\n    }\n    if\
    \ remainder > 0 {\n        result.push((remainder as char).to_string());\n   \
    \ }\n    result", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        let remainder =\
    \ quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut x =\
    \ x as u64;\n    let mut base = base as u64;\n    while x >= base {\n        s\
    \ +=\n            format!(\"{:0{}b}\", x % base, base).to_string()\n         \
    \       .chars().collect::<Vec<_>>()\n                .join('');\n        x /=\
    \ base;\n    }\n    s +=\n        format!(\"{:0{}b}\", x, base).to_string().chars().collect::<Vec<_>>()\n\
    \            .join('');\n    s", "    let mut s = String::new();\n    let mut\
    \ x = x;\n    while x >= base {\n        s +=\n            format!(\"{:0{}b}\"\
    , x % base, base).to_string()\n                .chars()\n                .map(|c|\
    \ match c {\n                    '0' => 0,\n                    '1' => 1,\n  \
    \                  '2' => 2,\n                    '3' => 3,\n                \
    \    '4' => 4,\n                    '5' => 5,\n                    '6' => 6,\n\
    \                    '7' => 7,\n                    '8' => 8,\n              \
    \      '9' => 9,\n                    _ => panic!(\"Invalid base\"),\n       \
    \         })\n                .collect::<Vec<_>>()\n                .join();\n\
    \        x /= base;\n    }\n    s +=\n        format!(\"{:0{}b}\", x, base).to_string()\n\
    \            .chars()\n            .map(|c| match c {\n                '0' =>\
    \ 0,\n                '1' => 1,\n                '2' => 2,\n                '3'\
    \ => 3,\n                '4' => 4,\n                '5' => 5,\n              \
    \  '6' => 6,\n                '7' => 7,\n                '8' => 8,\n         \
    \       '9' => 9,\n                _ => panic!(\"Invalid base\"),\n          \
    \  })\n            .collect::<Vec<_>>()\n            .join();\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let mut new_digit = digit;\n        if base == 2 {\n\
    \            if digit == '0' {\n                new_digit = '1';\n           \
    \ } else {\n                new_digit = '0';\n            }\n        }\n     \
    \   if base == 8 {\n            if digit == '0' {\n                new_digit =\
    \ '7';\n            } else {\n                new_digit = '8';\n            }\n\
    \        }\n        if base == 10 {\n            if digit == '0' {\n         \
    \       new_digit = '9';\n            } else {\n                new_digit = '0';\n\
    \            }\n        }\n        s.push((new_digit as char).to_string());\n\
    \        digits = digits.chars().nth(digits.len() - 1).unwrap();\n        base\
    \ = base.to_string();\n    }\n    String::from(s)", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        result =\
    \ format!(\"{}{}\", digit, result);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut digits = vec![0u8; base];\n    let mut carry = 0;\n    for digit\
    \ in x.to_digits().iter() {\n        let digit = digit as usize;\n        digits[digit]\
    \ += carry;\n        carry = 0;\n        if digits[digit] > base {\n         \
    \   digits[digit] -= base;\n            carry = 1;\n        }\n    }\n    for\
    \ digit in digits.iter_mut() {\n        *digit = *digit as u8;\n    }\n    if\
    \ carry != 0 {\n        s += String::from(\"1\");\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base.to_string());\n    }\n    digits.insert(0,\
    \ remainder.to_string());\n    s.push_str(&digits);\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut basedigits\
    \ = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n    basedigits[base]\
    \ = '.';\n    s += basedigits.join(\"\");\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..i + 1]);\n            break;\n        }\n   \
    \     let mut digit = digits[i..i + 1];\n        let mut power = 1;\n        while\
    \ i < digits.len() && base > 10 {\n            power = power * base;\n       \
    \     i += 1;\n        }\n        if base == 10 {\n            s.push_str(&digit);\n\
    \        } else {\n            s.push_str(&digit.to_string().powf(power));\n \
    \       }\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    while digits.len() > 0 {\n        let mut digit =\
    \ digits.remove(0);\n        if digit < base {\n            digit += carry;\n\
    \            carry = 1;\n        }\n        let mut digit = digit - base;\n  \
    \      if digit < 0 {\n            digit += 10;\n            carry = 0;\n    \
    \    }\n        s.push((digit as char).to_string());\n    }\n    if carry != 0\
    \ {\n        s.push((carry as char).to_string());\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut x = x as isize;\n    let mut base = base as\
    \ isize;\n    while x >= base {\n        s +=\n            format!(\"{:0{}b}\"\
    , x % base, base).to_string()[..base];\n        x /= base;\n    }\n    s +=\n\
    \        format!(\"{:0{}b}\", x, base).to_string()[..base];\n    s", "    let\
    \ mut s = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n\
    \    while quotient > 0 {\n        let digit = quotient % base;\n        remainder\
    \ = quotient / base;\n        s = format!(\"{}{}\", s, digit);\n        quotient\
    \ = remainder;\n    }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder)\
    \ + s;\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1).unwrap();\n        digit = digit.to_string();\n\
    \        base.truncate(base.len() - 1);\n        s += digit;\n    }\n    s", " \
    \   let mut result = String::new();\n    let mut remainder = 0;\n    while x >=\
    \ base {\n        remainder += x % base;\n        x /= base;\n    }\n    result.push_str(&format!(\"\
    {}\", remainder));\n    result", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    let mut i\
    \ = 0;\n    while i < digits.len() {\n        let mut digit = digits.chars().nth(i).unwrap();\n\
    \        if base == 10 {\n            digit += &\"0\";\n        }\n        i +=\
    \ 1;\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit -= &'0';\n\
    \        }\n        if digit >= '", "    let mut s = String::new();\n    let mut\
    \ digits = String::new();\n    let mut remainder = 0;\n    while x >= base {\n\
    \        remainder = x % base;\n        digits.push(format!(\"{}\", remainder));\n\
    \        x = x / base;\n    }\n    digits.push(format!(\"{}\", x));\n    s +=\
    \ &digits;\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base10 = base.to_string();\n    while base10.len() > 0 {\n      \
    \  let mut digit = digits.pop().unwrap();\n        if digit < '0' || digit > '9'\
    \ {\n            digit = digit.to_string();\n        }\n        s += digit;\n\
    \        base10 -= digit;\n    }\n    s", "    let mut s = String::new();\n  \
    \  let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut base\
    \ = base.to_string();\n    while remainder > 0 {\n        let mut digit = remainder.to_string();\n\
    \        if base < 10 {\n            digit = digit.parse::<usize>().unwrap();\n\
    \        }\n        base = base.parse::<usize>().unwrap();\n        if digit <\
    \ base {\n            digit = digit.to_string();\n        }\n        s += digit;\n\
    \        remainder -= digit;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((&mut digits[..]).to_digits(base).unwrap().to_string());\n\
    \    }\n    s.push((&mut digits[..]).to_digits(base).unwrap().to_string());\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1);\n        if digit == Some('0')\
    \ {\n            digit = digits.chars().nth(base.len() - 2);\n        }\n    \
    \    base.truncate(base.len() - 1);\n        s += digit;\n    }\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, '0');\n    }\n    while remainder < base {\n        remainder\
    \ += base;\n        digits.insert(0, '0');\n    }\n    s += &digits;\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        let mut digit = digits[i];\n \
    \       if base == 10 {\n            digit = digit.to_string().chars().collect::<Vec<_>>()[0];\n\
    \        }\n        if digit >= '0' && digit <= '9' {\n            digit = digit\
    \ - '0';\n        }\n        if digit >= base {\n            digit = digit - base;\n\
    \        }\n        if digit < base {\n            digit = digit + '0';\n    \
    \    }\n        digits[i] = digit.to_string().chars().collect::<Vec<_>>()[0];\n\
    \        i += 1;\n    }\n    s += digits.join(\"\");\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let digit = remainder % base;\n        remainder = remainder / base;\n  \
    \      s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        digits[base - 1] += x;\n        x -= base;\n        carry = 0;\n\
    \        for &d in &digits[base] {\n            carry += d;\n            s +=\
    \ if carry > 9 { String::from(\"0\".to_string()) } else { String::from(\"0123456789ABCDEF\"\
    .to_string()) };\n            carry -= 10;\n        }\n    }\n    s += if carry\
    \ > 9 { String::from(\"0\".to_string()) } else { String::from(\"0123456789ABCDEF\"\
    .to_string()) };\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s = format!(\"\
    {}{}\", s, remainder);\n    }\n    if quotient > 0 {\n        s = format!(\"{}\"\
    , s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x /= base;\n    }\n\
    \    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut power = 1;\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] == base[0] {\n            power = power.to_biguint().unwrap();\n\
    \            i += 1;\n        } else {\n            if power > 0 {\n         \
    \       s.push_str(&format!(\"{}{}\", digits[i - power.unwrap()], base));\n  \
    \          } else {\n                s.push_str(&digits[i - power.unwrap()]);\n\
    \            }\n            power = power.to_biguint().unwrap();\n           \
    \ i += 1;\n        }\n    }\n    s", "    let mut result = String::new();\n  \
    \  let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n\
    \        let remainder = quotient % base;\n        quotient /= base;\n       \
    \ result.push(remainder);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        remainder *= base;\n        remainder %= base;\n        quotient\
    \ /= base;\n        s.push((remainder % base) as char);\n    }\n    String::from(s)",
  "    let mut result = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = String::new();\n    while remainder > 0 {\n        remainder %= base;\n  \
    \      digits.push(format!(\"{}\", remainder));\n    }\n    result.push_str(&digits);\n\
    \    result", "    let mut s = String::new();\n    let mut x = x.to_digits();\n\
    \    let mut base = base.to_digits();\n    while x.len() > 0 {\n        let mut\
    \ digit = x.remove(0);\n        if digit > base {\n            digit -= base;\n\
    \            s += digit.to_digits().to_string();\n        } else {\n         \
    \   s += digit.to_digits().to_string();\n        }\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base =\
    \ base.to_string();\n    let mut i = 0;\n    while i < digits.len() {\n      \
    \  if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n            break;\n\
    \        }\n        let digit = digits[i..i + 1].chars().nth(base).unwrap();\n\
    \        s.push_str(&digit);\n        i += 1;\n        base /= 10;\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut bases = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ bases_len = bases.len();\n    let mut digits_len = digits.len();\n    let mut\
    \ i = 0;\n    while i < digits_len {\n        if bases_len == 0 {\n          \
    \  s.push_str(&digits[i as usize]);\n            i += 1;\n        } else {\n \
    \           let mut base = bases[i as usize];\n            let mut digit = digits[i\
    \ as usize];\n            while base > 0 {\n                s.push_str(&digits[i\
    \ as usize]);\n                i += 1;\n                base /= bases[i as usize];\n\
    \            }\n            s.push_str(&digit);\n        }\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut digits_len = digits.length();\n    let\
    \ mut base_len = base.length();\n    while digits_len > base_len {\n        digits\
    \ = &digits[digits_len..];\n        digits_len -= base_len;\n        base_len\
    \ += base_len;\n    }\n    while base_len > digits_len {\n        base = &base[base_len..];\n\
    \        base_len -= digits_len;\n        digits_len += digits_len;\n    }\n \
    \   while digits_len > 0 {\n        digits = &digits[digits_len..];\n        digits_len\
    \ -= base_len;\n        base_len += base_len;\n    }\n    while base_len > 0 {\n\
    \        base = &base[base_len..];\n        base_len -= digits_len;\n        digits_len\
    \ += digits_len;\n    }\n    s += &base;\n    s += &digits;\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = vec![0; base];\n    let mut carry\
    \ = 0;\n    while x >= base {\n        let digit = x % base;\n        digits[digit]\
    \ += 1;\n        x /= base;\n    }\n    while x != 0 {\n        let digit = x\
    \ % base;\n        digits[digit] += 1;\n        x /= base;\n    }\n    for &digit\
    \ in &digits {\n        if digit > 0 {\n            s.push_str(&format!(\"{}\"\
    , digit));\n        } else {\n            s.push_str(&format!(\"{}\", digit -\
    \ 1));\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\"\
    , carry));\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.length() {\n        if base == 10 {\n            s.push_str(&digits[i..i\
    \ + 1]);\n            break;\n        }\n        if base == 8 {\n            s.push_str(&digits[i..i\
    \ + 1].to_string().rev());\n            break;\n        }\n        let mut digit\
    \ = digits[i..i + 1];\n        if base == 2 {\n            digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        }\n        let mut digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String>().reverse().collect();\n    \
    \    digit = digit.chars().collect::<String>().reverse().collect();\n        digit\
    \ = digit.chars().collect::<String>().reverse().collect();\n        digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String>().reverse().collect();\n    \
    \    digit = digit.chars().collect::<String>().reverse().collect();\n        digit\
    \ = digit.chars().collect::<String>().reverse().collect();\n        digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String>().reverse().collect();\n    \
    \    digit = digit.chars().collect::<String>().reverse().collect();\n        digit\
    \ = digit.chars().collect::<String>().reverse().collect();\n        digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String>().reverse().collect();\n    \
    \    digit = digit.chars().collect::<String>().reverse().collect();\n        digit\
    \ = digit.chars().collect::<String>().reverse().collect();\n        digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String>().reverse().collect();\n    \
    \    digit = digit.chars().collect::<String>().reverse().collect();\n        digit\
    \ = digit.chars().collect::<String>().reverse().collect();\n        digit = digit.chars().collect::<String>().reverse().collect();\n\
    \        digit = digit.chars().collect::<String", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut result\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        result = digit.to_string() + result;\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n\
    \    let mut basedigits_len = basedigits.len();\n    let mut basedigits_pow =\
    \ basedigits_len as isize;\n    let mut basedigits_pow_max = basedigits_pow as\
    \ isize;\n    let mut basedigits_pow_min = basedigits_pow as isize;\n    let mut\
    \ basedigits_pow_min = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;\n    let\
    \ mut basedigits_pow_max = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;\n    let\
    \ mut basedigits_pow_max = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;\n    let\
    \ mut basedigits_pow_max = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;\n    let\
    \ mut basedigits_pow_max = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;\n    let\
    \ mut basedigits_pow_max = basedigits_pow as isize;\n    let mut basedigits_pow_max\
    \ = basedigits_pow as isize;\n    let mut basedigits_pow_max = basedigits_pow\
    \ as isize;\n    let mut basedigits_pow_max = basedigits_pow as isize;", "   \
    \ let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n\
    \    let mut carry = 0;\n    while x.len() > 0 {\n        let digit = x.pop().unwrap();\n\
    \        let mut digit = digit + carry.to_digits().last().unwrap();\n        carry\
    \ = digit / base.last().unwrap();\n        digit = digit % base.last().unwrap();\n\
    \        s.push((digit as char).to_string());\n    }\n    if carry > 0 {\n   \
    \     s.push((carry as char).to_string());\n    }\n    String::from(s)", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut bases = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > bases.len() {\n\
    \            i += 1;\n            continue;\n        }\n        let mut j = i;\n\
    \        while j < digits.len() && digits[j] == bases.len() {\n            i +=\
    \ 1;\n            j += 1;\n        }\n        if j > i {\n            s.push_str(&digits[i..j]);\n\
    \            i += j - i;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut carry = 0;\n\
    \    while digits.len() > 0 {\n        let digit = digits.remove(0);\n       \
    \ let mut new_digit = digit as isize;\n        if carry > 0 {\n            new_digit\
    \ += carry;\n        }\n        carry = new_digit as isize;\n        if base >\
    \ 10 {\n            base = base.checked_add(1).unwrap();\n        }\n        if\
    \ new_digit > 9 {\n            s.push_str(&base[new_digit as usize].to_string());\n\
    \            base = base.checked_add(1).unwrap();\n        } else {\n        \
    \    s.push_str(&base[new_digit as usize].to_string());\n        }\n    }\n  \
    \  if carry > 0 {\n        s.push_str(&base[carry.checked_add(1).unwrap() as usize].to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder += x % base;\n    \
    \    x = x / base;\n    }\n    s += String::from(remainder);\n    s += String::from(x);\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0).unwrap();\n\
    \        if digit > base {\n            digit -= base;\n            carry += 1;\n\
    \        }\n        s += digit.to_string();\n        if carry > 0 {\n        \
    \    s += &format!(\"{}\", base);\n            carry = 0;\n        }\n    }\n\
    \    if carry > 0 {\n        s += &format!(\"{}\", base);\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digits, digit.to_string());\n    }\n    s", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient /= base;\n   \
    \     result.push(remainder);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut power = 1;\n    while power.is_positive() {\n\
    \        if power % base == 0 {\n            s.push_str(&digits);\n          \
    \  s.push_str(&format!(\"{}\", power));\n            return s;\n        }\n  \
    \      power = power.pow(base);\n        digits.push_str(&format!(\"{}\", power));\n\
    \    }\n    s.push_str(&digits);\n    s.push_str(&format!(\"{}\", power));\n \
    \   s", "    let mut s = String::new();\n    let mut remainder = x;\n    let mut\
    \ quotient = x;\n    while quotient > 0 {\n        remainder *= base;\n      \
    \  quotient /= base;\n    }\n    while remainder > 0 {\n        s.push((remainder\
    \ % base) as char);\n        remainder /= base;\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = 0;\n    while x >= base {\n        remainder = x % base;\n     \
    \   digits.push(format!(\"{}\", remainder));\n        x /= base;\n    }\n    if\
    \ x != 0 {\n        digits.push(format!(\"{}\", x));\n    }\n    s += digits.into_owned();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        s.push((&mut digits[..]).to_ascii_lowercase()[..]);\n    }\n\
    \    s.push((&mut digits[..]).to_ascii_lowercase()[..]);\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = vec![];\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        digits.push(digit);\n    }\n \
    \   for digit in digits {\n        s.push((digit as char).to_string());\n    }\n\
    \    String::from(s)", "    let mut result = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut base_size\
    \ = base.len();\n    let mut digits_size = digits.len();\n    while base_size.abs()\
    \ > 0 {\n        if digits.len() < base_size.abs() {\n            result.push_str(&digits[digits_size..]);\n\
    \            digits_size += base_size.abs();\n        } else {\n            result.push_str(&digits[digits_size..digits_size\
    \ + base_size]);\n            digits_size += base_size;\n        }\n        digits\
    \ = &digits[digits_size..];\n        base_size -= base_size.abs();\n    }\n  \
    \  result.push_str(&digits[digits_size..]);\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        remainder %= base;\n        s.push((remainder as char).to_string());\n\
    \        remainder /= base;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n        quotient = quotient / base;\n\
    \    }\n    if remainder > 0 {\n        s = format!(\"{}\", remainder) + s;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut power = 1;\n    let mut i =\
    \ 0;\n    while i < digits.len() {\n        if digits.chars().nth(i).unwrap()\
    \ == '0' {\n            power = power.powf(base);\n        }\n        i += 1;\n\
    \    }\n    while power > 1 {\n        power = power.powf(base);\n        s +=\
    \ digits[digits.len() - 1];\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    let mut digits_len\
    \ = digits.length();\n    while digits_len > 0 {\n        if digits_len % 2 ==\
    \ 0 {\n            s.push_str(&digits[digits_len / 2]);\n        }\n        let\
    \ mut digits_len = digits_len / 2;\n        if digits_len > 0 {\n            power\
    \ = power / base;\n        }\n        if power > 10 {\n            s.push_str(&format!(\"\
    {}\", power));\n            power = 1;\n        }\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > base {\n        remainder -= base;\n        s.push((&digits[..]).to_string()\
    \ + &base);\n    }\n    s.push((&digits[..]).to_string() + &remainder);\n    s",
  "    let mut s = String::new();\n    let mut x = x as usize;\n    let mut base =\
    \ base as usize;\n    while x > 0 {\n        s += char::from_u32(x as u32).unwrap();\n\
    \        x /= base;\n    }\n    while base > 0 {\n        s += char::from_u32(base\
    \ as u32).unwrap();\n        base /= base;\n    }\n    s", "    let mut result\
    \ = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n  \
    \  while quotient > 0 {\n        let digit = quotient % base;\n        remainder\
    \ = quotient / base;\n        result = format!(\"{}{}\", result, digit);\n   \
    \     quotient = remainder;\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ base = base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n \
    \   while i < digits.len() {\n        if base == 0 {\n            s.push_str(&digits[i\
    \ as usize]);\n            break;\n        }\n        if base < 10 {\n       \
    \     s.push_str(&digits[i as usize]);\n            i += 1;\n        } else {\n\
    \            let mut carry = 0;\n            let mut digit = digits[i as usize];\n\
    \            while digit != '0' {\n                let mut digit = digit as usize;\n\
    \                let mut new_digit = digit + carry + 1;\n                if new_digit\
    \ > 9 {\n                    new_digit -= 10;\n                    carry = 1;\n\
    \                } else {\n                    carry = 0;\n                }\n\
    \                s.push_str(&new_digit.to_string());\n                i += 1;\n\
    \            }\n            if carry != 0 {\n                s.push_str(&carry.to_string());\n\
    \            }\n        }\n        base = base.checked_add(1).unwrap();\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, base.to_string());\n    }\n    while remainder\
    \ > 0 {\n        remainder -= 1;\n        digits.insert(0, remainder.to_string());\n\
    \    }\n    s += digits;\n    s", "    let mut result = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        result = format!(\"\
    {}{}\", digit, result);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((&digits[..]).to_string()\
    \ + &base);\n    }\n    s.push((&digits[..]).to_string() + &remainder);\n    s",
  "    let mut s = String::new();\n    let mut digits = String::new();\n    let mut\
    \ remainder = x;\n    let mut base10_digits = base;\n    while remainder > 0 {\n\
    \        let digit = remainder % base10_digits;\n        remainder = remainder\
    \ / base10_digits;\n        digits.push(digit.to_string());\n    }\n    while\
    \ base10_digits > 0 {\n        let digit = remainder % base10_digits;\n      \
    \  remainder = remainder / base10_digits;\n        digits.push(digit.to_string());\n\
    \        base10_digits -= 1;\n    }\n    for digit in digits {\n        s += digit;\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = String::new();\n    while remainder > 0 {\n        let digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    s += digits.reverse();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c as char).collect::<Vec<_>>();\n    let mut basedigits_len = basedigits.len();\n\
    \    let mut i = 0;\n    while i < basedigits_len {\n        if basedigits[i]\
    \ > base {\n            basedigits[i] -= base;\n        } else {\n           \
    \ basedigits[i] += base;\n        }\n        i += 1;\n    }\n    s += basedigits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base < 10 {\n            s.push_str(&digits[i..i + 1]);\n    \
    \        i += 1;\n        } else {\n            s.push_str(&digits[i..i + base.len()]);\n\
    \            i += base.len();\n        }\n    }\n    s", "    let mut result =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut remainder =\
    \ x;\n    while remainder > base {\n        remainder -= base;\n        result.push((&digits[..]).to_string()\
    \ + &\"0\".to_string());\n    }\n    result.push((&digits[..]).to_string() + &\"\
    0\".to_string());\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = String::new();\n    let mut remainder = x;\n    let mut digits_len = base;\n\
    \    while remainder > 0 {\n        remainder %= base;\n        digits.push((remainder\
    \ as char).to_string());\n    }\n    while digits_len > 0 {\n        digits.push((digits_len\
    \ as char).to_string());\n        digits_len -= 1;\n    }\n    s += digits.clone();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit].to_string());\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut remain = x;\n    while remain > 0 {\n        let\
    \ mut digit = remain;\n        remain -= digit.pow(base);\n        digit = digit.div(base);\n\
    \        s += digit.to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        digits.insert(0, base.to_string());\n\
    \    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n\
    \    let mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n\
    \        remain %= base;\n        digit = digit.to_digit(base);\n        s.push((digit\
    \ as char).to_string());\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += &format!(\"{}\", remainder);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_base = digits.chars().nth(digits.len() - base.len());\n   \
    \ let mut digits_base_len = digits_base.len();\n    let mut i = 0;\n    while\
    \ i < digits_base_len {\n        let mut digit = digits_base[i];\n        if digit\
    \ >= '0' && digit <= '9' {\n            digit -= '0';\n        }\n        i +=\
    \ 1;\n        if i >= base.len() {\n            break;\n        }\n        digit\
    \ += base[i] - '0';\n        digits_base[i] = digit;\n    }\n    s += digits;\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let digit = remainder % base;\n        remainder =\
    \ remainder / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s",
  "    let mut result = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base {\n     \
    \       result.push_str(&digits[i .. i + base.len()]);\n            i += base.len();\n\
    \        } else {\n            result.push_str(&digits[i]);\n            i +=\
    \ 1;\n        }\n    }\n    result", "    let mut s = String::new();\n    let\
    \ mut x = x as u64;\n    let mut base = base as u64;\n    while x >= base {\n\
    \        s +=\n            format!(\"{:0{}b}\", x % base, base).to_string()[..base];\n\
    \        x /= base;\n    }\n    s +=\n        format!(\"{:0{}b}\", x, base).to_string()[..base];\n\
    \    s", "    let mut s = String::new();\n    let mut x = x.to_digits();\n   \
    \ let mut base = base.to_digits();\n    while x.len() > 0 {\n        let mut digit\
    \ = x.remove(0);\n        if base > 10 {\n            digit *= base;\n       \
    \     digit = digit.to_digits();\n        }\n        s += digit.to_string();\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.length() {\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n\
    \        if digit < base {\n            digit = digit * base + digit;\n      \
    \  }\n        digit = digit as usize;\n        digit = digit as usize;\n     \
    \   digit = digit as usize;\n        digit = digit as usize;\n        digit =\
    \ digit as usize;\n        digit = digit as usize;\n        digit = digit as usize;\n\
    \        digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as usize;\n        digit = digit as usize;\n \
    \       digit = digit as usize;\n        digit = digit as usize;\n        digit\
    \ = digit as usize;\n        digit = digit as usize;\n        digit = digit as\
    \ usize;\n        digit = digit as u", "    let mut s = String::new();\n    let\
    \ mut remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n \
    \       remain %= base;\n        digit += base;\n        s.push_str(&format!(\"\
    {:0>2}\", digit));\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let digit = digits[i] - '0';\n        let mut new_digit = digit;\n    \
    \    if base > 2 {\n            if carry == 0 {\n                new_digit +=\
    \ 1;\n                carry = 0;\n            } else {\n                new_digit\
    \ += carry;\n                carry = 0;\n            }\n        }\n        if\
    \ new_digit > 9 {\n            new_digit -= 10;\n            base += 1;\n    \
    \    }\n        s += base.to_string() + &new_digit.to_string();\n        i +=\
    \ 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let mut digit = digits.remove(0);\n\
    \        if digit < base {\n            carry = 1;\n            digit += 1;\n\
    \        }\n        if carry != 0 {\n            digit += 1;\n        }\n    \
    \    digits.push(digit);\n    }\n    if carry != 0 {\n        digits.push(carry);\n\
    \    }\n    s += digits.iter().cloned().collect::<String>().to_string();\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n \
    \   let mut base10 = base.to_string();\n    let mut power = 1;\n    while base10.len()\
    \ > 0 {\n        if base10.len() > 4 {\n            base10 = base10.split_off(4);\n\
    \        }\n        if base10.len() > 0 {\n            power = power.pow(base10.len());\n\
    \        }\n        if base10.len() < 4 {\n            base10 = base10.pad(4);\n\
    \        }\n        if base10.len() == 0 {\n            base10 = \"0\";\n    \
    \    }\n        if base10.len() == 1 {\n            base10 = \"1\";\n        }\n\
    \        if base10.len() == 2 {\n            base10 = \"10\";\n        }\n   \
    \     if base10.len() == 3 {\n            base10 = \"100\";\n        }\n     \
    \   if base10.len() == 4 {\n            base10 = \"1000\";\n        }\n      \
    \  if base10.len() == 5 {\n            base10 = \"10000\";\n        }\n      \
    \  if base10.len() == 6 {\n            base10 = \"100000\";\n        }\n     \
    \   if base10.len() == 7 {\n            base10 = \"1000000\";\n        }\n   \
    \     if base10.len() == 8 {\n            base10 = \"10000000\";\n        }\n\
    \        if base10.len() == 9 {\n            base10 = \"100000000\";\n       \
    \ }\n        if base10.len() == 10 {\n            base10 = \"1000000000\";\n \
    \       }\n        if base10.len() == 11 {\n            base10 = \"10000000000\"\
    ;\n        }\n        if base10.len() == 12 {\n            base10 = \"100000000000\"\
    ;\n        }\n        if base10.len() == 13 {\n            base10 = \"1000000000000\"\
    ;\n        }\n        if base10.len() == 14 {\n            base10 = \"10000000000000\"\
    ;\n        }\n        if base10.len() == 15 {\n            base10 = \"100000000000000\"\
    ;\n        }\n        if base10.len() == 16 {\n            base10 = \"1000000000000000\"\
    ;\n        }\n        if base10.len() == 17 {\n            base10 = \"10000000000000000\"\
    ;\n        }\n        if base10.len() == 18 {\n            base10 = \"100000000000000000\"\
    ;\n        }\n        if base10.len() == 19 {\n            base10 = \"1000000000000000000\"\
    ;\n        }\n        if base10.len() == 20 {\n            base10 = \"10000000000000000000\"\
    ;\n        }\n        if base10.len() == 21 {\n            base10 = \"100000000000000000000\"\
    ;\n        }\n        if base10.len() == 22 {\n            base10 = \"1000000000000000000000\"\
    ;\n        }\n        if base10.len() == 23 {\n            base10 = \"10000000000000000000000\"\
    ;\n        }\n        if base10.len() == 24 {\n            base10", "    let mut\
    \ s = String::new();\n    let mut x = x as isize;\n    let mut base = base as\
    \ isize;\n    while x >= base {\n        s += &format!(\"{}\", x / base);\n  \
    \      x %= base;\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = vec![0u8; base];\n    let mut carry\
    \ = 0;\n    for digit in x.to_digits().iter() {\n        let digit = digit as\
    \ usize;\n        digits[digit] += carry;\n        carry = 0;\n        if digits[digit]\
    \ > base {\n            digits[digit] -= base;\n            carry = 1;\n     \
    \   }\n    }\n    for digit in digits.iter_mut() {\n        *digit = *digit as\
    \ usize;\n    }\n    s += if carry == 0 {\n        String::from_utf8(digits.iter().cloned().collect())\n\
    \    } else {\n        String::from_utf8(digits.iter().cloned().collect()).into_owned()\n\
    \    };\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut digits = base;\n    while remainder > 0 {\n        if remainder >=\
    \ digits {\n            s.push_str(&format!(\"{}\", remainder % digits));\n  \
    \          remainder /= digits;\n        } else {\n            s.push_str(&format!(\"\
    0{}\", digits));\n            digits *= base;\n        }\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    while base.len() > 0 {\n        let digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        s += digit;\n        base.truncate(0);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut base =\
    \ base;\n    while remainder > 0 {\n        remainder %= base;\n        s.push((char::from_u32(base).unwrap()).to_string());\n\
    \        base /= base;\n    }\n    s.push((char::from_u32(base).unwrap()).to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder += x % base;\n        x /= base;\n    }\n   \
    \ s += &format!(\"{}\", remainder);\n    s += &format!(\"{}\", x);\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, base.to_string());\n    }\n    while remainder > 0 {\n\
    \        remainder -= 1;\n        digits.insert(0, base.to_string());\n    }\n\
    \    s += digits;\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut digits = String::new();\n    while remainder > 0 {\n     \
    \   let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    digits.push(digits.as_str().unwrap());\n\
    \    s += digits.to_string();\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s.push((remainder as char).to_string());\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    while digits_len > base_len {\n        digits = &digits[digits_len - base_len..digits_len];\n\
    \        base = &base[base_len..base_len + digits_len];\n        digits_len -=\
    \ base_len;\n        base_len += digits_len;\n    }\n    while base_len > digits_len\
    \ {\n        base = &base[base_len - digits_len..base_len];\n        digits_len\
    \ += base_len - digits_len;\n        base_len -= digits_len;\n    }\n    let mut\
    \ digits_len = digits.length();\n    let mut base_len = base.length();\n    while\
    \ digits_len > base_len {\n        digits = &digits[digits_len - base_len..digits_len];\n\
    \        base = &base[base_len..base_len + digits_len];\n        digits_len -=\
    \ base_len;\n        base_len += digits_len;\n    }\n    while base_len > digits_len\
    \ {\n        base = &base[base_len - digits_len..base_len];\n        digits_len\
    \ += base_len - digits_len;\n        base_len -= digits_len;\n    }\n    s +=\
    \ &digits[0..digits_len];\n    s += &base[0..base_len];\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", s, digit.to_string());\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut remain = x;\n    while remain > 0 {\n  \
    \      let mut digit = remain;\n        remain %= base;\n        digit += base;\n\
    \        s.push((digit as char).to_string());\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut remainder =\
    \ x;\n    while remainder > base {\n        remainder -= base;\n        s.push((&mut\
    \ digits[..]).to_digit(base).unwrap());\n    }\n    s.push((&mut digits[..]).to_digit(base).unwrap());\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut x = x;\n \
    \   while x >= base {\n        s +=\n            format!(\"{}\", x % base).to_string().into_owned().to_string();\n\
    \        x /= base;\n    }\n    s +=\n        format!(\"{}\", x).to_string().into_owned().to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    let mut quotient = 0;\n    let mut remainder_digits\
    \ = 0;\n    let mut quotient_digits = 0;\n    let mut carry = 0;\n\n    while\
    \ x >= base {\n        remainder = x % base;\n        quotient = x / base;\n \
    \       digits = quotient.to_string();\n        remainder_digits = remainder.to_string();\n\
    \        quotient_digits = digits.len();\n        carry = 1;\n        if quotient_digits\
    \ > remainder_digits {\n            s.push_str(&digits[quotient_digits - remainder_digits]);\n\
    \            s.push_str(&\"0\");\n        } else {\n            s.push_str(&digits[remainder_digits]);\n\
    \        }\n        x /= base;\n    }\n    if carry != 0 {\n        s.push_str(&\"\
    1\");\n    }\n    s", "    let mut result = String::new();\n    let mut remainder\
    \ = 0;\n    let mut quotient = x;\n    while quotient > 0 {\n        let remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        result = format!(\"\
    {}{}\", result, remainder);\n    }\n    result", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    s += &format!(\"{}\", remainder);\n    s += &format!(\"\
    {}\", x);\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        let mut j = i;\n        while\
    \ j + 1 < digits.len() && digits[j] == digits[j + 1] {\n            j += 1;\n\
    \        }\n        if j + 1 < digits.len() {\n            digits[j] = digits[j\
    \ + 1];\n        }\n        let mut carry = 0;\n        while j + 1 < digits.len()\
    \ {\n            let mut tmp = digits[j] + carry;\n            digits[j] = tmp\
    \ % base;\n            carry = tmp / base;\n            j += 1;\n        }\n \
    \       if carry > 0 {\n            digits.push(carry);\n        }\n        i\
    \ += 1;\n    }\n    digits.reverse();\n    for &d in digits {\n        s += String::from(&d);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut base = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s.push((base as char).to_string());\n        base /= 10;\n    }\n   \
    \ s.push((base as char).to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i .. i + 1]);\n            i += 1;\n        } else\
    \ {\n            let mut j = i;\n            while j + 1 < digits.len() && digits[j]\
    \ == digits[j + 1] {\n                j += 1;\n            }\n            s.push_str(&digits[i\
    \ .. j]);\n            i += j - i;\n        }\n        base = base.to_digit(10);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(digits.len() - 1).unwrap();\n        if base < 10\
    \ {\n            s.push_str(&digit + &base);\n        } else {\n            s.push_str(&digit);\n\
    \        }\n        digits = digits.chars().nth(digits.len() - 1);\n        base\
    \ = base.chars().nth(base.len() - 1);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut base_size = base.len();\n    let mut digits_size = digits.len();\n\
    \    let mut i = 0;\n    while i < digits_size {\n        if digits_size % base\
    \ == 0 {\n            s += &digits[i as usize];\n            i += 1;\n       \
    \ } else {\n            s += &base[digits_size % base_size as usize];\n      \
    \      digits_size /= base_size;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut bases = base.to_string();\n\
    \    let mut i = 0;\n    while i < digits.size() {\n        let mut digit = digits[i];\n\
    \        if digit >= '0' && digit <= '9' {\n            digit -= '0';\n      \
    \      bases += &base;\n        }\n        s += digit.to_string();\n        i\
    \ += 1;\n    }\n    bases", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    let mut quotient = x;\n    while quotient > 0 {\n        remainder\
    \ = quotient % base;\n        quotient = quotient / base;\n        s.push((remainder\
    \ + '0') as char);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut digits = base;\n    while remainder > 0 {\n    \
    \    remainder %= base;\n        digits += 1;\n    }\n    while digits > 0 {\n\
    \        s.push((remainder % base) as char);\n        remainder /= base;\n   \
    \     digits -= 1;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit]);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut base = base.to_string();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.length()\
    \ - 1).unwrap();\n        let digit = match digit {\n            '1' => 1,\n \
    \           '0' => 0,\n            _ => panic!(\"Invalid digit {}\", digit),\n\
    \        };\n        let digit = digit * base;\n        let digit = digit + carry;\n\
    \        carry = digit / 10;\n        s = format!(\"{}{}\", s, digit);\n     \
    \   digits = digits.chars().nth(digits.length() - 1).unwrap();\n    }\n    if\
    \ carry != 0 {\n        s = format!(\"{}{}\", s, carry);\n    }\n    s"]
stop_tokens:
- "\n}"
