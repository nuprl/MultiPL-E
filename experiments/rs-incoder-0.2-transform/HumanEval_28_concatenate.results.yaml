language: rs
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpblmsa21j.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnmcl06v4.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnmcl06v4.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnmcl06v4.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpblmsa21j.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + s;\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpikuq5ew3.rs:8:15\n  |\n8 |\
    \         acc + s;\n  |               ^\n  |               |\n  |            \
    \   expected `&str`, found struct `String`\n  |               help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate = concatenate;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), String::from(\"xyz\"));\n  \
    \  assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\"), String::from(\"w\"), String::from(\"k\")]), String::from(\"xyzwk\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnmcl06v4.rs:7:56\n  |\n7 |\
    \       strings.iter().fold(String::from(\"\"), |mut acc, s| {\n  |  ________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 101
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<Vec<_>>().join(\"\
    ,\")\n}\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"x,y,z\"`,\n right: `\"xyz\"`', /tmp/tmpk73bjynk.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().map(|s| s.to_string()).collect::<String>()\n\
    }\n\nfn main() {\n    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.join(\"\")\n}\n\nfn main() {\n    let\
    \ candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011267
- exit_code: 0
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.iter().fold(String::from(\"\"), |mut acc,\
    \ s| {\n        acc.push_str(&s);\n        acc\n    })\n}\n\nfn main() {\n   \
    \ let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc.push_str(s);\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = concatenate;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ String::from(\"\"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"\
    y\"), String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4me49oq.rs:8:22\n  |\n8 |\
    \         acc.push_str(s);\n  |                      ^\n  |                  \
    \    |\n  |                      expected `&str`, found struct `String`\n  | \
    \                     help: consider borrowing here: `&s`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
- exit_code: 1
  program: "/// Concatenate list of strings into a single string\n/// >>> concatenate(vec![])\n\
    /// String::from(\"\")\n/// >>> concatenate(vec![String::from(\"a\"), String::from(\"\
    b\"), String::from(\"c\")])\n/// String::from(\"abc\")\nfn concatenate(strings:\
    \ Vec<String>) -> String {\n    strings.into_iter().fold(String::from(\"\"), |mut\
    \ acc, s| {\n        acc + &s;\n    })\n}\n\nfn main() {\n    let candidate =\
    \ concatenate;\n    assert_eq!(candidate(Vec::<String>::new()), String::from(\"\
    \"));\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"),\
    \ String::from(\"z\")]), String::from(\"xyz\"));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\"), String::from(\"w\"), String::from(\"\
    k\")]), String::from(\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpblmsa21j.rs:7:61\n  |\n7 |\
    \       strings.into_iter().fold(String::from(\"\"), |mut acc, s| {\n  |  _____________________________________________________________^\n\
    8 | |         acc + &s;\n  | |                 - help: remove this semicolon\n\
    9 | |     })\n  | |_____^ expected struct `String`, found `()`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011287
