language: rs
name: HumanEval_10_make_palindrome
results:
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_size = string.len();\n\
    \    let mut reversed_string_palindrome = string;\n    let mut reversed_string_palindrome_size\
    \ = string.len();\n    while reversed_string_size > 0 {\n        let mut reversed_string_palindrome_size\
    \ = reversed_string_palindrome.len();\n        while reversed_string_palindrome_size\
    \ > 0 {\n            let mut reversed_string_palindrome = reversed_string_palindrome\n\
    \                .chars()\n                .skip_while(|c| !c.is_ascii())\n  \
    \              .collect::<String>();\n            let mut reversed_string_size\
    \ = reversed_string.len();\n            while reversed_string_size > 0 {\n   \
    \             let mut reversed_string = reversed_string\n                    .chars()\n\
    \                    .skip_while(|c| !c.is_ascii())\n                    .collect::<String>();\n\
    \                let mut reversed_string_size = reversed_string.len();\n     \
    \           while reversed_string_size > 0 {\n                    let mut reversed_string\
    \ = reversed_string\n                        .chars()\n                      \
    \  .skip_while(|c| !c.is_ascii())\n                        .collect::<String>();\n\
    \                    let mut reversed_string_size = reversed_string.len();\n \
    \                   let mut reversed_string_palindrome = reversed_string\n   \
    \                     .chars()\n                        .skip_while(|c| !c.is_ascii())\n\
    \                        .collect::<String>();\n                    let mut reversed_string_palindrome_size\
    \ = reversed_string_palindrome.len();\n                    while reversed_string_palindrome_size\
    \ > 0 {\n                        let mut reversed_string_palindrome = reversed_string_palindrome\n\
    \                            .chars()\n                            .skip_while(|c|\
    \ !c.is_ascii())\n                            .collect::<String>();\n        \
    \                let mut reversed_string_size = reversed_string.len();\n     \
    \                   while reversed_string_size > 0 {\n                       \
    \     let mut reversed_string = reversed_string\n                            \
    \    .chars()\n                                .skip_while(|c| !c.is_ascii())\n\
    \                                .collect::<String>();\n                     \
    \       let mut reversed_string_size = reversed_string.len();\n              \
    \              while reversed_string_size > 0 {\n                            \
    \    let mut reversed_string = reversed_string\n                             \
    \       .chars()\n                                    .skip_while(|c| !c.is_ascii())\n\
    \                                    .collect::<String>();\n                 \
    \               let mut reversed_string_size = reversed_string.len();\n      \
    \                          while reversed_\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8_vmn9xi.rs:69:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while reversed_string_size\
    \ > 0 {\n   |                                    - unclosed delimiter\n17 |  \
    \       let mut reversed_string_palindrome_size = reversed_string_palindrome.len();\n\
    18 |         while reversed_string_palindrome_size > 0 {\n   |               \
    \                                    - unclosed delimiter\n...\n24 |         \
    \    while reversed_string_size > 0 {\n   |                                  \
    \          - unclosed delimiter\n...\n30 |                 while reversed_string_size\
    \ > 0 {\n   |                                                - unclosed delimiter\n\
    ...\n41 |                     while reversed_string_palindrome_size > 0 {\n  \
    \ |                                                               - unclosed delimiter\n\
    ...\n47 |                         while reversed_string_size > 0 {\n   |     \
    \                                                   - unclosed delimiter\n...\n\
    53 |                             while reversed_string_size > 0 {\n   |      \
    \                                                      - this delimiter might\
    \ not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n69 | }\n   |   ^\n\nerror: expected `{`, found\
    \ `}`\n  --> /tmp/tmp8_vmn9xi.rs:60:1\n   |\n60 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8_vmn9xi.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_vmn9xi.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_vmn9xi.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_char = String::new();\n    let mut longest_postfix_char_length\
    \ = 0;\n    let mut longest_postfix_char_pos = 0;\n    let mut longest_postfix_char_pos_index\
    \ = 0;\n    let mut longest_postfix_char_pos_index2 = 0;\n    let mut longest_postfix_char_pos_index3\
    \ = 0;\n    let mut longest_postfix_char_pos_index4 = 0;\n    let mut longest_postfix_char_pos_index5\
    \ = 0;\n    let mut longest_postfix_char_pos_index6 = 0;\n    let mut longest_postfix_char_pos_index7\
    \ = 0;\n    let mut longest_postfix_char_pos_index8 = 0;\n    let mut longest_postfix_char_pos_index9\
    \ = 0;\n    let mut longest_postfix_char_pos_index10 = 0;\n    let mut longest_postfix_char_pos_index11\
    \ = 0;\n    let mut longest_postfix_char_pos_index12 = 0;\n    let mut longest_postfix_char_pos_index13\
    \ = 0;\n    let mut longest_postfix_char_pos_index14 = 0;\n    let mut longest_postfix_char_pos_index15\
    \ = 0;\n    let mut longest_postfix_char_pos_index16 = 0;\n    let mut longest_postfix_char_pos_index17\
    \ = 0;\n    let mut longest_postfix_char_pos_index18 = 0;\n    let mut longest_postfix_char_pos_index19\
    \ = 0;\n    let mut longest_postfix_char_pos_index20 = 0;\n    let mut longest_postfix_char_pos_index21\
    \ = 0;\n    let mut longest_postfix_char_pos_index22 = 0;\n    let mut longest_postfix_char_pos_index23\
    \ = 0;\n    let mut longest_postfix_char_pos_index24 = 0;\n    let mut longest_postfix_char_pos_index25\
    \ = 0;\n    let mut longest_postfix_char_pos_index26 = 0;\n    let mut longest_postfix_char_pos_index27\
    \ = 0;\n    let mut longest_postfix_char_pos_index28 = 0;\n    let mut longest_postfix_char_pos_index29\
    \ = 0;\n    let mut longest_postfix_char_pos_index30 = 0;\n    let mut longest_postfix_char_pos_index31\
    \ = 0;\n    let mut longest_postfix_char_pos_index32 = 0;\n    let mut longest_postfix_char_pos_index33\
    \ = 0;\n    let mut longest_postfix_char_pos_index34 = 0;\n    let mut longest_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6k3a7k7e.rs:53:21\n   |\n\
    53 |     let mut longest_\n   |                     ^ help: add `;` here\n54 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp6k3a7k7e.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6k3a7k7e.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6k3a7k7e.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6k3a7k7e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    let mut longest = 0;\n    while !prefix.is_empty() {\n      \
    \  let mut i = longest;\n        while i >= 0 && prefix[i] != reversed[i] {\n\
    \            i -= 1;\n        }\n        if i == 0 {\n            break;\n   \
    \     }\n        longest = i;\n        prefix = prefix.chars().take(i + 1).collect();\n\
    \        reversed = reversed.chars().take(i + 1).collect();\n        suffix =\
    \ suffix.chars().take(i + 1).collect();\n    }\n    longest\n        .to_string()\n\
    \        .chars()\n        .map(|c| c.to_ascii_lowercase())\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9n5iwobo.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp9n5iwobo.rs:18:25\n\
    \   |\n18 |         while i >= 0 && prefix[i] != reversed[i] {\n   |         \
    \                ^^^^^^^^^ `String` ca"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut prefix_length = 0;\n    while !reversed_string.is_empty() {\n      \
    \  let mut suffix_length = 0;\n        while !palindrome.is_empty() {\n      \
    \      if palindrome.len() < prefix_length {\n                break;\n       \
    \     }\n            if palindrome.chars().nth(prefix_length).unwrap() != reversed_string.chars().nth(suffix_length).unwrap()\
    \ {\n                break;\n            }\n            suffix_length += 1;\n\
    \        }\n        prefix_length += 1;\n        palindrome = &palindrome[suffix_length..];\n\
    \        reversed_string = &reversed_string[..-suffix_length];\n    }\n    palindrome\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgvgd5aco.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgvgd5aco.rs:27:22\n   |\n27 |         palindrome = &palindrome[suffix_length..];\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ fou"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n        let\
    \ mut char = string[index];\n\n        while index >= 0 {\n            reversed_string.insert(0,\
    \ char);\n            index -= 1;\n            char = string[index];\n       \
    \ }\n        string = string.chars().collect::<String>();\n    }\n\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi3nk39pw.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpi3nk39pw.rs:17:24\n   |\n\
    17 |         let mut char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpssi_d1l2.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpssi_d1l2.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpssi_d1l2.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpssi_d1l2.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpssi_d1l2.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpssi_d1l2.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpssi_d1l2.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ let Some(index) = string.rfind('a', longest_postfix_index) {\n        let mut\
    \ postfix_length = index - longest_postfix_index;\n        if postfix_length <\
    \ longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n    }\n    let mut postfix_length\
    \ = longest_postfix_length - 1;\n    while let Some(index) = string.rfind('a',\
    \ longest_postfix_index + 1, longest_postfix_length + 1) {\n        let mut postfix_length\
    \ = index - longest_postfix_index;\n        if postfix_length < longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix_index\
    \ = index;\n        }\n    }\n    string.append(&string[longest_postfix_index..]);\n\
    \    reversed_string.append(&string[longest_postfix_length..]);\n    string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjbxpor09.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpjbxpor09.rs:16:36\n\
    \     |\n16   |     while let Some(index) = string.rfind('a', longest_postfix_index)\
    \ {\n     |        "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix_length = string.len();\n        while postfix_length >= longest_postfix_length\
    \ {\n            let mut postfix = &string[..postfix_length];\n            let\
    \ mut reversed_postfix = &reversed_string[..postfix_length];\n            reversed_postfix.reverse();\n\
    \            if postfix != reversed_postfix {\n                longest_postfix_length\
    \ = postfix_length;\n                string = &string[postfix_length..];\n   \
    \             reversed_string = &reversed_string[postfix_length..];\n        \
    \    }\n        }\n        string = &string[1..];\n        reversed_string = &reversed_string[1..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp988y1k_c.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for reference `&str` in the current scope\n  --> /tmp/tmp988y1k_c.rs:20:30\n\
    \   |\n20 |             reversed_postfix.reverse();\n   |                    \
    \          ^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = string.len();\n    while longest_postfix_len\
    \ > 0 {\n        let mut postfix_len = longest_postfix_len;\n        while postfix_len\
    \ > 0 {\n            let mut postfix = &string[longest_postfix_len..];\n     \
    \       longest_postfix = &string[..postfix_len];\n            if longest_postfix.chars().all(|c|\
    \ !c.is_alphanumeric()) {\n                break;\n            }\n           \
    \ postfix_len -= 1;\n        }\n        if longest_postfix.chars().all(|c| !c.is_alphanumeric())\
    \ {\n            break;\n        }\n        reversed_string += &longest_postfix;\n\
    \        longest_postfix_len -= longest_postfix.len();\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpb_ey2a.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjpb_ey2a.rs:19:31\n   |\n19 |             longest_postfix\
    \ = &string[..postfix_len];\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() {\n            if string[j] != string[j + 1] {\n          \
    \      break;\n            }\n            i += 1;\n            j += 1;\n     \
    \   }\n        if j == i {\n            break;\n        }\n        reverse.push_str(&string[i..j]);\n\
    \        i += 1;\n    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmoi3icuz.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpmoi3icuz.rs:18:16\n   |\n\
    18 |             if string[j] != string[j + 1] {\n   |                ^^^^^^^^^\
    \ `String` cannot be indexed by `"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1;\n    \
    \    }\n        reverse.push_str(&string[i..j]);\n        i = j;\n    }\n    reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwyc8o6tt.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpwyc8o6tt.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut suffix_length = 0;\n    while\
    \ !reversed_string.ends_with(string) {\n        let mut prefix_length = 0;\n \
    \       while !reversed_string.starts_with(string) {\n            reversed_string\
    \ = reversed_string[prefix_length..].to_string();\n            prefix_length +=\
    \ 1;\n        }\n        reversed_string = reversed_string[prefix_length..].to_string();\n\
    \        suffix_length += 1;\n    }\n    reversed_string += &string[suffix_length..];\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvbclgy7b.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpvbclgy7b.rs:14:38\n\
    \   |\n14 |     while !reversed_string.ends_with(string) {\n   |             \
    \                         ^^^^^^\n   |"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_palindrome = string;\n\
    \    let mut reversed_palindrome_len = string.len();\n    let mut i = 0;\n   \
    \ while i < reversed_palindrome_len {\n        let mut j = i;\n        while j\
    \ < reversed_palindrome_len {\n            if palindrome[j] != reversed_palindrome[j]\
    \ {\n                break;\n            }\n            i += 1;\n            j\
    \ += 1\n        }\n        if j == reversed_palindrome_len {\n            palindrome\
    \ = &palindrome[i..];\n            reversed_palindrome = &reversed_palindrome[i..];\n\
    \            reversed_palindrome_len = i;\n        }\n    }\n    palindrome\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1ibnoxd1.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp1ibnoxd1.rs:19:16\n   |\n\
    19 |             if palindrome[j] != reversed_palindrome[j] {\n   |          \
    \      ^^^^^^^^^^^^^ `String` canno"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = 0;\n    let mut longest_palindrome_length = 0;\n    let\
    \ mut longest_palindrome_start = 0;\n    let mut longest_palindrome_end = 0;\n\
    \    let mut longest_palindrome_suffix = 0;\n    let mut longest_palindrome_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_start = 0;\n    let mut longest_palindrome_suffix_end\
    \ = 0;\n    while !string.is_empty() {\n        let mut current_char = string.chars().next().unwrap();\n\
    \        let mut current_char_length = 1;\n        while current_char == current_char.chars().next().unwrap()\
    \ {\n            current_char_length += 1;\n        }\n        if current_char_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = current_char_length;\n\
    \            longest_palindrome_start = longest_palindrome_end;\n            longest_palindrome_end\
    \ = longest_palindrome_start + longest_palindrome_length - 1;\n        }\n   \
    \     if longest_palindrome_length == 0 {\n            break;\n        }\n   \
    \     if longest_palindrome_length == 1 {\n            longest_palindrome_suffix\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_length =\
    \ longest_palindrome_end - longest_palindrome_start + 1;\n            longest_palindrome_suffix_start\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_end = longest_palindrome_start\
    \ + longest_palindrome_length - 1;\n        }\n        if longest_palindrome_length\
    \ == 2 {\n            longest_palindrome_suffix = longest_palindrome_start;\n\
    \            longest_palindrome_suffix_length = longest_palindrome_end - longest_palindrome_start\
    \ + 1;\n            longest_palindrome_suffix_start = longest_palindrome_start;\n\
    \            longest_palindrome_suffix_end = longest_palindrome_start + longest_palindrome_length\
    \ - 1;\n        }\n        if longest_palindrome_length == 3 {\n            longest_palindrome_suffix\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_length =\
    \ longest_palindrome_end - longest_palindrome_start + 1;\n            longest_palindrome_suffix_start\
    \ = longest_palindrome_\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq5yccplk.rs:61:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n22 |     while !string.is_empty()\
    \ {\n   |                              - unclosed delimiter\n...\n48 |       \
    \  if longest_palindrome_length == 3 {\n   |                                 \
    \          - this delimiter might not be properly closed...\n...\n52 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n61 | }\n   |\
    \   ^\n\nerror[E0425]: cannot find value `longest_palindrome_` in this scope\n\
    \  --> /tmp/tmpq5yccplk.rs:51:47\n   |\n51 |             longest_palindrome_suffix_start\
    \ = longest_palindrome_\n   |                                               ^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `longest_palindrome`\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq5yccplk.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq5yccplk.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq5yccplk.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq5yccplk.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq5yccplk.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq5yccplk.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq5yccplk.rs:"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ longest_postfix_length < string.len() {\n        let mut longest_postfix_length\
    \ = longest_postfix_length;\n        let mut longest_postfix_index = 0;\n    \
    \    while longest_postfix_length < string.len() {\n            let mut longest_postfix_length\
    \ = longest_postfix_length;\n            let mut longest_postfix_index = 0;\n\
    \            for index in 0..string.len() {\n                if index == longest_postfix_index\
    \ {\n                    continue;\n                }\n                let mut\
    \ current_char = string[index];\n                while longest_postfix_length\
    \ < string.len() {\n                    let mut current_char = string[index];\n\
    \                    while longest_postfix_length < string.len() {\n         \
    \               let mut current_char = string[index];\n                      \
    \  while longest_postfix_length < string.len() {\n                           \
    \ let mut current_char = string[index];\n                            while longest_postfix_length\
    \ < string.len() {\n                                let mut current_char = string[index];\n\
    \                                while longest_postfix_length < string.len() {\n\
    \                                    let mut current_char = string[index];\n \
    \                                   while longest_postfix_length < string.len()\
    \ {\n                                        let mut current_char = string[index];\n\
    \                                        while longest_postfix_length < string.len()\
    \ {\n                                            let mut current_char = string[index];\n\
    \                                            if longest_postfix_length == 0 {\n\
    \                                                break;\n                    \
    \                        }\n                                            longest_postfix_index\
    \ += 1;\n                                        }\n                         \
    \           }\n                                }\n                           \
    \ }\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        reversed_string += &string[longest_postfix_index..];\n\
    \        longest_postfix_index += 1;\n    }\n    string += &reversed_string[..];\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp65_ywh4r.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp65_ywh4r.rs:26:40\n   |\n\
    26 |                 let mut current_char = string[index];\n   |             \
    \                           ^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_pos = 0;\n    let\
    \ mut longest_postfix_len = 0;\n    let mut longest_postfix_start = -1;\n    let\
    \ mut longest_postfix_end = -1;\n    while longest_postfix_len < string.len()\
    \ {\n        let mut postfix_start = -1;\n        let mut postfix_end = -1;\n\
    \        let mut postfix_len = 0;\n        while postfix_len < longest_postfix_len\
    \ {\n            let mut postfix_start = -1;\n            let mut postfix_end\
    \ = -1;\n            let mut postfix_len = 0;\n            while postfix_len <\
    \ longest_postfix_len {\n                let mut postfix_start = -1;\n       \
    \         let mut postfix_end = -1;\n                let mut postfix_len = 0;\n\
    \                while postfix_len < longest_postfix_len {\n                 \
    \   let mut postfix_start = -1;\n                    let mut postfix_end = -1;\n\
    \                    let mut postfix_len = 0;\n                    while postfix_len\
    \ < longest_postfix_len {\n                        let mut postfix_start = -1;\n\
    \                        let mut postfix_end = -1;\n                        let\
    \ mut postfix_len = 0;\n                        while postfix_len < longest_postfix_len\
    \ {\n                            let mut postfix_start = -1;\n               \
    \             let mut postfix_end = -1;\n                            let mut postfix_len\
    \ = 0;\n                            while postfix_len < longest_postfix_len {\n\
    \                                let mut postfix_start = -1;\n               \
    \                 let mut postfix_end = -1;\n                                let\
    \ mut postfix_len = 0;\n                                while postfix_len < longest_postfix_len\
    \ {\n                                    let mut postfix_start = -1;\n       \
    \                             let mut postfix_end = -1;\n                    \
    \                let mut postfix_len = 0;\n                                  \
    \  while postfix_len < longest_postfix_len {\n                               \
    \         let mut postfix_start = -1;\n                                      \
    \  let mut postfix_end = -1;\n                                        let mut\
    \ postfix_len = 0;\n                                        while postfix_len\
    \ < longest_postfix_len {\n                                            let mut\
    \ postfix_start = -1;\n                                            let mut postfix_end\
    \ = -1;\n                                            let mut postfix_len = 0;\n\
    \                                            while postfix_len < longest_postfix_len\
    \ {\n                                                let mut postfix_start = -1;\n\
    \                                                let mut postfix_end = -1;\n \
    \                                               let mut postfix_len = 0;\n   \
    \                                         }\n                                \
    \        }\n                                    }\n                          \
    \      }\n                            }\n                        }\n         \
    \           }\n                }\n            }\n        }\n        if longest_postfix_len\
    \ < postfix_len {\n            lon\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp077q0ita.rs:82:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n17 |     while longest_postfix_len\
    \ < string.len() {\n   |                                              - unclosed\
    \ delimiter\n...\n71 |         if longest_postfix_len < postfix_len {\n   |  \
    \                                            - this delimiter might not be properly\
    \ closed...\n72 |             lon\n73 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n82 | }\n   |   ^\n\nerror[E0425]: cannot find\
    \ value `lon` in this scope\n  --> /tmp/tmp077q0ita.rs:72:13\n   |\n72 |     \
    \        lon\n   |             ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp077q0ita.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp077q0ita.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp077q0ita.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp077q0ita.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp077q0ita.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp077q0ita.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp077q0ita.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E04"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n\n    while\
    \ !string.is_empty() {\n        let mut postfix = string;\n        let mut postfix_length\
    \ = 0;\n        while !postfix.is_empty() {\n            if postfix.chars().next().unwrap()\
    \ == postfix.chars().next().unwrap() {\n                postfix_length += 1;\n\
    \            } else {\n                break;\n            }\n            postfix\
    \ = postfix.chars().next().unwrap();\n        }\n        if postfix_length > longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix\
    \ = postfix;\n        }\n        string = string.chars().next().unwrap();\n  \
    \  }\n\n    longest_postfix.append(&reversed_string[longest_postfix_length..]);\n\
    \    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1lthsr5g.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1lthsr5g.rs:26:23\n   |\n26 |             postfix = postfix.chars().next().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ co"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_char = 0;\n    let mut longest_postfix_char_length = 0;\n\
    \    let mut longest_postfix_char_length_index = 0;\n    let mut longest_postfix_char_length_index2\
    \ = 0;\n    let mut longest_postfix_char_length_index3 = 0;\n    let mut longest_postfix_char_length_index4\
    \ = 0;\n    let mut longest_postfix_char_length_index5 = 0;\n    let mut longest_postfix_char_length_index6\
    \ = 0;\n    let mut longest_postfix_char_length_index7 = 0;\n    let mut longest_postfix_char_length_index8\
    \ = 0;\n    let mut longest_postfix_char_length_index9 = 0;\n    let mut longest_postfix_char_length_index10\
    \ = 0;\n    let mut longest_postfix_char_length_index11 = 0;\n    let mut longest_postfix_char_length_index12\
    \ = 0;\n    let mut longest_postfix_char_length_index13 = 0;\n    let mut longest_postfix_char_length_index14\
    \ = 0;\n    let mut longest_postfix_char_length_index15 = 0;\n    let mut longest_postfix_char_length_index16\
    \ = 0;\n    let mut longest_postfix_char_length_index17 = 0;\n    let mut longest_postfix_char_length_index18\
    \ = 0;\n    let mut longest_postfix_char_length_index19 = 0;\n    let mut longest_postfix_char_length_index20\
    \ = 0;\n    let mut longest_postfix_char_length_index21 = 0;\n    let mut longest_postfix_char_length_index22\
    \ = 0;\n    let mut longest_postfix_char_length_index23 = 0;\n    let mut longest_postfix_char_length_index24\
    \ = 0;\n    let mut longest_postfix_char_length_index25 = 0;\n    let mut longest_postfix_char_length_index26\
    \ = 0;\n    let mut longest_postfix_char_length_index27 = 0;\n    let mut longest_postfix_char_length_index28\
    \ = 0;\n    let mut longest_postfix_char_length_index29 = 0;\n    let mut longest_postfix_char_length_index30\
    \ = 0;\n    let mut longest_postfix_char_length_index31 = 0;\n    let mut longest_postfix_char_length_index32\
    \ = 0;\n    let mut longest_postfix_char_length_index33 = 0;\n    let mut longest_postfix_char_length_index34\
    \ = 0;\n    let mut longest_postfix_char_length_index35 = 0;\n    let mut longest_postfix_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsek98ac9.rs:53:29\n   |\n\
    53 |     let mut longest_postfix_\n   |                             ^ help: add\
    \ `;` here\n54 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsek98ac9.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsek98ac9.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsek98ac9.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut palindrome = string;\n    let mut\
    \ prefix_len = 0;\n    let mut suffix_len = 0;\n    while palindrome.len() > 0\
    \ {\n        let mut i = palindrome.len() - 1;\n        let mut j = palindrome.len()\
    \ - 1;\n        while i >= 0 && j >= 0 {\n            if palindrome[i] != palindrome[j]\
    \ {\n                break;\n            }\n            i -= 1;\n            j\
    \ -= 1;\n        }\n        if i >= 0 {\n            suffix_len += 1;\n      \
    \      palindrome = &palindrome[i..];\n        } else {\n            prefix_len\
    \ += 1;\n            palindrome = &palindrome[i..];\n        }\n    }\n    let\
    \ mut result = string;\n    if suffix_len > prefix_len {\n        result = &result[0..prefix_len];\n\
    \    }\n    result += &reverse[..suffix_len];\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw02vgyp6.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpw02vgyp6.rs:20:16\n   |\n\
    20 |             if palindrome[i] != palindrome[j] {\n   |                ^^^^^^^^^^^^^\
    \ `String` cannot be inde"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ !string.is_empty() {\n        let mut postfix_index = 0;\n        while !string.is_empty()\
    \ && postfix_index < longest_postfix_length {\n            if string[postfix_index]\
    \ != string[longest_postfix_index] {\n                break;\n            }\n\
    \            postfix_index += 1;\n        }\n        longest_postfix_length =\
    \ postfix_index;\n        longest_postfix_index += 1;\n        reversed_string\
    \ += &string[longest_postfix_index..];\n        string = &string[longest_postfix_length..];\n\
    \    }\n    string += &reversed_string[longest_postfix_length..];\n    string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb97deiqs.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpb97deiqs.rs:19:16\n\
    \   |\n19 |             if string[postfix_index] != string[longest_postfix_index]\
    \ {\n   |                ^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut palindrome = string;\n    let mut prefix_length = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut longest_postfix_length = 0;\n    let mut longest_postfix_length_index\
    \ = 0;\n    let mut longest_postfix_length_palindrome = 0;\n    let mut longest_postfix_length_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_index = 0;\n    let mut longest_postfix_length_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix = 0;\n    let mut longest_postfix_length_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_palindrome = 0;\n   \
    \ let mut longest_postfix_length_suffix_suffix_suffix = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_index = 0;\n    let mut\
    \ longest_postfix_length_suffix_suffix_suffix_suffix_palindrome = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_index = 0;\n \
    \   let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4_1_y05m.rs:42:21\n   |\n\
    42 |     let mut longest_\n   |                     ^ help: add `;` here\n43 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp4_1_y05m.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4_1_y05m.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4_1_y05m.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4_1_y05m.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4_1_y05m.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4_1_y05m.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut suffix_length\
    \ = 0;\n    let mut prefix_length = 0;\n    while !string.ends_with(&reverse)\
    \ {\n        let mut suffix_length = suffix_length + 1;\n        if suffix_length\
    \ > string.len() {\n            break;\n        }\n        let mut prefix_length\
    \ = prefix_length + 1;\n        if prefix_length > string.len() {\n          \
    \  break;\n        }\n        let mut reverse = reverse.chars().collect::<String>().rev().collect::<String>();\n\
    \        let mut string = string.chars().collect::<String>().rev().collect::<String>();\n\
    \    }\n    string.push_str(&reverse);\n    string\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi6ka3jv8.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpi6ka3jv8.rs:25:63\n    |\n25  |           let mut reverse = reverse.chars().collect::<String>()."
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reverse_string = \"\";\n    let\
    \ mut prefix_length = 0;\n    while !palindrome.is_empty() {\n        let mut\
    \ current_char = String::new();\n        current_char.push(palindrome.chars().next().unwrap());\n\
    \        palindrome = palindrome.chars().collect();\n        reverse_string.push(palindrome.last().unwrap());\n\
    \        prefix_length = prefix_length + palindrome.last().unwrap().len();\n \
    \   }\n    palindrome.push(reverse_string);\n    palindrome.push(&string[prefix_length..]);\n\
    \    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmply8yn4uu.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `push` found for reference `&str` in the current scope\n  --> /tmp/tmply8yn4uu.rs:19:24\n\
    \   |\n19 |         reverse_string.push(palindrome.last().unwrap());\n   |   \
    \                 "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1;\n\
    \        }\n        reversed_string.push_str(&string[i..j]);\n        i = j;\n\
    \    }\n    string.push_str(&reversed_string);\n    string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvb4k1rz7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpvb4k1rz7.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut postfix_length = 0;\n    let\
    \ mut prefix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        let mut current_char_length\
    \ = 1;\n        while current_char_length < postfix_length {\n            if current_char\
    \ == reversed_string[current_char_length] {\n                current_char_length\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        postfix_length = current_char_length;\n        reversed_string =\
    \ reversed_string[current_char_length..];\n        if reversed_string == string\
    \ {\n            prefix_length = current_char_length;\n            break;\n  \
    \      }\n    }\n    String::from(string.to_owned() + &reversed_string[prefix_length..])\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiz5m6ou3.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpiz5m6ou3.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n        let\
    \ mut char = string[index];\n\n        while index >= 0 {\n            reversed_string.insert(0,\
    \ char);\n            index -= 1;\n            char = string[index];\n       \
    \ }\n        string = &string[1..];\n    }\n\n    reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplenw3s87.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplenw3s87.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplenw3s87.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplenw3s87.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmplenw3s87.rs:17:24\n   |\n\
    17 |         let mut char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix_length = 0;\n    while !string.ends_with(&reversed_string)\
    \ {\n        let mut postfix_length = string.len() - 1;\n        while postfix_length\
    \ >= 0 {\n            if string[postfix_length] != string[postfix_length].to_ascii_lowercase()\
    \ {\n                break;\n            }\n            postfix_length -= 1;\n\
    \        }\n        longest_postfix_length = postfix_length + 1;\n        reversed_string\
    \ = &string[..longest_postfix_length];\n        string = &string[longest_postfix_length..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo7vyuq_f.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpo7vyuq_f.rs:18:16\n   |\n\
    18 |             if string[postfix_length] != string[postfix_length].to_ascii_lowercase()\
    \ {\n   |              "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reverse_length = 0;\n\n    while !string.ends_with(&reversed_string) {\n\
    \        reversed_string = reversed_string[..].to_owned();\n        reverse_length\
    \ += 1;\n    }\n\n    let mut reversed_string = reversed_string[..reverse_length].to_owned();\n\
    \    let mut reverse_length = 0;\n\n    while !string.starts_with(&reversed_string)\
    \ {\n        reversed_string = reversed_string[..reverse_length].to_owned();\n\
    \        reverse_length += 1;\n    }\n\n    string[..reverse_length].to_owned()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8lcssaew.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 10 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:90:17\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:91:25\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp09g9_rfg.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp09g9_rfg.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < string.len() {\n        let\
    \ mut suffix_start = suffix_length;\n        let mut suffix_end = suffix_start;\n\
    \        while suffix_end < string.len() {\n            let mut suffix_char =\
    \ string[suffix_end];\n            suffix_end += 1;\n            if suffix_char\
    \ == string[suffix_end - 1] {\n                suffix_end += 1;\n            \
    \    suffix_length += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut prefix_start = prefix_length;\n        let\
    \ mut prefix_end = prefix_start;\n        while prefix_end < string.len() {\n\
    \            let mut prefix_char = string[prefix_end];\n            prefix_end\
    \ += 1;\n            if prefix_char == string[prefix_end - 1] {\n            \
    \    prefix_end += 1;\n                prefix_length += 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if suffix_start\
    \ < prefix_end {\n            reversed_string.push_str(&string[prefix_start..suffix_end]);\n\
    \            prefix_length = suffix_start;\n            suffix_length = prefix_end;\n\
    \        }\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate =\
    \ make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp53d4odax.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp53d4odax.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp53d4odax.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp53d4odax.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp53d4odax.rs:19:35\n   |\n\
    19 |             let mut suffix_char = string[suffix_end];\n   |             \
    \                      ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmppn33nl2j.rs:77:1\n  \
    \ |\n77 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmppn33nl2j.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppn33nl2j.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppn33nl2j.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppn33nl2j.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppn33nl2j.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppn33nl2j.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().skip(1).collect();\n\
    \        if current_char == current_char.to_string().rev() {\n            suffix_length\
    \ += 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n\
    \    if suffix_length == 0 {\n        return string;\n    }\n    let mut reversed_string\
    \ = string;\n    while !reversed_string.is_empty() {\n        let mut current_char\
    \ = reversed_string[0];\n        reversed_string = reversed_string.chars().skip(1).collect();\n\
    \        if current_char == current_char.to_string().rev() {\n            break;\n\
    \        }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev() {\n            break;\n \
    \       }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev() {\n            break;\n \
    \       }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpui039p_2.rs:89:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n76 |     while !reversed_string.is_empty()\
    \ {\n   |                                       - this delimiter might not be\
    \ properly closed...\n...\n80 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n89 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  -->\
    \ /tmp/tmpui039p_2.rs:80:1\n   |\n79 |         if current_char == current_char.to_string().rev\n\
    \   |         -- this `if` expression has a condition, but no block\n80 | }\n\
    \   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpui039p_2.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpui039p_2.rs:84:25\n   |\n84 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpui039p_2.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpui039p_2.rs:85:25\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpui039p_2.rs:86:17\n  \
    \ |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpui039p_2.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpui039p_2.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpui039p_2.rs:87:25\n\
    \   |\n87 |     "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n\
    \    let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpevdn9ecl.rs:59:34\n   |\n\
    59 |     let mut longest_postfix_index\n   |                                 \
    \ ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpevdn9ecl.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpevdn9ecl.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpevdn9ecl.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E030"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j <\
    \ string.len() {\n            if string[j] != string[i] {\n                break;\n\
    \            }\n            i += 1;\n            j += 1;\n        }\n        if\
    \ j == i {\n            break;\n        }\n        reverse.push_str(&string[j..i]);\n\
    \        i += 1;\n    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7cbrrjtq.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp7cbrrjtq.rs:18:16\n   |\n\
    18 |             if string[j] != string[i] {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usiz"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a') {\n        longest_postfix_length = pos;\n \
    \   }\n    for pos in string.rfind('a') {\n        if pos < longest_postfix_length\
    \ {\n            break;\n        }\n        reversed_string.push('a');\n    }\n\
    \    reversed_string.reverse();\n    string + &reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplyslgren.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplyslgren.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplyslgren.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplyslgren.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmplyslgren.rs:23:21\n\
    \   |\n23 |     reversed_string.reverse();\n   |                     ^^^^^^^ help:\
    \ there is "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = 0;\n\n    while !reversed_string.is_empty()\
    \ {\n        let mut postfix = reversed_string.clone();\n        let mut postfix_len\
    \ = 0;\n\n        while !postfix.is_empty() {\n            if postfix.chars().next().unwrap()\
    \ == postfix.chars().last().unwrap() {\n                postfix.pop();\n     \
    \           postfix_len += 1;\n            } else {\n                break;\n\
    \            }\n        }\n\n        if postfix_len > longest_postfix_len {\n\
    \            longest_postfix = postfix;\n            longest_postfix_len = postfix_len;\n\
    \        }\n\n        reversed_string = reversed_string.chars().collect::<String>().rev().collect();\n\
    \    }\n\n    longest_postfix.push_str(&string[longest_postfix_len..]);\n    longest_postfix\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfmqar30q.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpfmqar30q.rs:34:71\n    |\n34  |           reversed_string = reversed_string.chars().collect::<St"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j + 1] == string[j] {\n            j += 1\n \
    \       }\n        reversed_string.push_str(&string[i..j]);\n        i = j;\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppqdl5jg7.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppqdl5jg7.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j + 1] == string[j] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < string.len() {\n        let\
    \ mut suffix_start = suffix_length;\n        while suffix_start < string.len()\
    \ && string[suffix_start] != string[suffix_start + 1] {\n            suffix_start\
    \ += 1;\n        }\n        reversed_string.push_str(&string[prefix_length..suffix_start]);\n\
    \        suffix_length = suffix_start + 1;\n        prefix_length = suffix_length\
    \ - suffix_start;\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_06ojlj.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpt_06ojlj.rs:17:46\n   |\n\
    17 |         while suffix_start < string.len() && string[suffix_start] != string[suffix_start\
    \ + 1] {\n   |     "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1; //\
    \ j is incremented after each iteration\n        }\n        reversed_string.push_str(&string[i..j]);\n\
    \        i = j;\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg88zagfg.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpg88zagfg.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_palindrome = string;\n    let mut longest_palindrome_len\
    \ = 0;\n    while !reversed_string.is_empty() {\n        let mut current_char\
    \ = reversed_string[0];\n        let mut current_char_len = 1;\n        while\
    \ !current_char.is_ascii_lowercase() {\n            current_char = reversed_string[current_char_len];\n\
    \            current_char_len += 1;\n        }\n        if current_char_len >\
    \ reversed_string_len {\n            reversed_string = &reversed_string[current_char_len..];\n\
    \            reversed_string_len = current_char_len;\n        }\n        if current_char\
    \ == &reversed_string[reversed_string_len] {\n            reversed_string = &reversed_string[..reversed_string_len];\n\
    \            reversed_string_len -= 1;\n        } else {\n            longest_palindrome\
    \ = &reversed_string[..reversed_string_len];\n            longest_palindrome_len\
    \ = reversed_string_len;\n        }\n    }\n    longest_palindrome\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6sfdeh73.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp6sfdeh73.rs:17:32\n\
    \   |\n17 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix_pos = 0;\n\
    \    while longest_postfix_len < longest_postfix.len() {\n        let mut postfix_pos\
    \ = longest_postfix_pos;\n        let mut postfix_len = longest_postfix_len;\n\
    \        while postfix_len > 0 {\n            let mut postfix_char = longest_postfix[postfix_pos];\n\
    \            while postfix_len > 0 && postfix_char != longest_postfix[postfix_pos\
    \ + 1] {\n                postfix_len -= 1;\n                postfix_pos += 1;\n\
    \            }\n            if postfix_len > 0 {\n                longest_postfix_len\
    \ += 1;\n            }\n            postfix_len -= 1;\n            postfix_pos\
    \ += 1;\n        }\n        if longest_postfix_len > longest_postfix_pos {\n \
    \           longest_postfix_len = longest_postfix_pos;\n        }\n        longest_postfix_pos\
    \ = postfix_pos;\n    }\n    let mut postfix_len = longest_postfix_len;\n    while\
    \ postfix_len > 0 {\n        let mut postfix_char = longest_postfix[longest_postfix_len\
    \ - 1];\n        while postfix_len > 0 && postfix_char != longest_postfix[longest_postfix_len\
    \ - postfix_len] {\n            postfix_len -= 1;\n        }\n        if postfix_len\
    \ > 0 {\n            longest_postfix_len -= postfix_len;\n        }\n        postfix_len\
    \ -= 1;\n    }\n    longest_postfix += &reversed_string[longest_postfix_len..];\n\
    \    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf1_3oy9g.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpf1_3oy9g.rs:20:36\n\
    \   |\n20 |             let mut postfix_char = longest_postfix[postfix_pos];\n\
    \   |                                "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut palindrome = string;\n    let mut\
    \ i = 0;\n    while i < palindrome.len() {\n        if palindrome[i] != reverse[i\
    \ as usize] {\n            palindrome = &palindrome[i..palindrome.len()].to_owned();\n\
    \            break;\n        }\n        i += 1;\n    }\n    palindrome\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp31xvoybe.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp31xvoybe.rs:16:12\n   |\n\
    16 |         if palindrome[i] != reverse[i as usize] {\n   |            ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_string = \"\";\n    let mut longest_postfix_index2 = 0;\n\
    \    let mut longest_postfix_string2 = \"\";\n    let mut longest_postfix_index3\
    \ = 0;\n    let mut longest_postfix_string3 = \"\";\n    let mut longest_postfix_index4\
    \ = 0;\n    let mut longest_postfix_string4 = \"\";\n    let mut longest_postfix_index5\
    \ = 0;\n    let mut longest_postfix_string5 = \"\";\n    let mut longest_postfix_index6\
    \ = 0;\n    let mut longest_postfix_string6 = \"\";\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_string7 = \"\";\n    let mut longest_postfix_index8\
    \ = 0;\n    let mut longest_postfix_string8 = \"\";\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_string9 = \"\";\n    let mut longest_postfix_index10\
    \ = 0;\n    let mut longest_postfix_string10 = \"\";\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_string11 = \"\";\n    let mut longest_postfix_index12\
    \ = 0;\n    let mut longest_postfix_string12 = \"\";\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_string13 = \"\";\n    let mut longest_postfix_index14\
    \ = 0;\n    let mut longest_postfix_string14 = \"\";\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_string15 = \"\";\n    let mut longest_postfix_index16\
    \ = 0;\n    let mut longest_postfix_string16 = \"\";\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_string17 = \"\";\n    let mut longest_postfix_index18\
    \ = 0;\n    let mut longest_postfix_string18 = \"\";\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_string19 = \"\";\n    let mut longest_postfix_index20\
    \ = 0;\n    let mut longest_postfix_string20 = \"\";\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_string21 = \"\";\n    let mut longest_postfix_index22\
    \ = 0;\n    let mut longest_postfix_string22 = \"\";\n    let mut longest_postfix_index23\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_lhlw1tq.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index23\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_lhlw1tq.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_lhlw1tq.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_lhlw1tq.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reversed_string_index = 0;\n    while !string.is_empty() {\n        let\
    \ mut index = string.len();\n        while index > 0 {\n            let mut char\
    \ = string[reversed_string_index];\n            reversed_string[reversed_string_index]\
    \ = char;\n            reversed_string_index += 1;\n            index -= 1;\n\
    \        }\n        string = &string[1..];\n    }\n    string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbt5k609h.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbt5k609h.rs:18:28\n\
    \   |\n18 |             let mut char = string[reversed_string_index];\n   |  \
    \                          ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n\
    \    let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplmw_5zrz.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplmw_5zrz.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplmw_5zrz.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplmw_5zrz.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut postfix = string;\n    let\
    \ mut palindrome = string;\n    while !postfix.is_empty() {\n        let mut index\
    \ = postfix.rfind('a');\n        if index == -1 {\n            break;\n      \
    \  }\n        let mut suffix = postfix.split_off(index);\n        let mut prefix\
    \ = reversed_string.split_off(index);\n        let mut suffix = suffix.iter().cloned().collect::<String>();\n\
    \        let mut prefix = prefix.iter().cloned().collect::<String>();\n      \
    \  let mut reversed_suffix = suffix.clone();\n        let mut reversed_prefix\
    \ = prefix.clone();\n        reversed_suffix.reverse();\n        reversed_prefix.reverse();\n\
    \        suffix.append(&mut reversed_suffix);\n        prefix.append(&mut reversed_prefix);\n\
    \        palindrome.append(&mut suffix);\n        postfix.remove(index);\n   \
    \ }\n    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcc0is0w5.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcc0is0w5.rs:17:21\n   |\n17 |         if index == -1 {\n\
    \   |                     ^^\n   |                     |\n   |               \
    \      expected enum `Option`, found "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = String::from(\"\");\n    let mut longest_palindrome_length\
    \ = 0;\n\n    while !string.is_empty() {\n        let mut current_char = string[0];\n\
    \        let mut current_char_length = 1;\n\n        while !string.is_empty()\
    \ && current_char == string[current_char_length] {\n            current_char_length\
    \ += 1;\n            string = &string[current_char_length..];\n        }\n\n \
    \       if current_char_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = current_char_length;\n            longest_palindrome = current_char;\n   \
    \     }\n\n        string = &string[1..];\n    }\n\n    longest_palindrome +=\
    \ &reversed_string[longest_palindrome_length..];\n    longest_palindrome\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvvv09lfi.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpvvv09lfi.rs:18:32\n\
    \   |\n18 |         let mut current_char = string[0];\n   |                  \
    \              ^^^^^^^^^ `String` cann"
  stdout: ''
  timestamp: 1659805896
