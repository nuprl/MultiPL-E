language: rs
name: HumanEval_10_make_palindrome
results:
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_size = string.len();\n\
    \    let mut reversed_string_palindrome = string;\n    let mut reversed_string_palindrome_size\
    \ = string.len();\n    while reversed_string_size > 0 {\n        let mut reversed_string_palindrome_size\
    \ = reversed_string_palindrome.len();\n        while reversed_string_palindrome_size\
    \ > 0 {\n            let mut reversed_string_palindrome = reversed_string_palindrome\n\
    \                .chars()\n                .skip_while(|c| !c.is_ascii())\n  \
    \              .collect::<String>();\n            let mut reversed_string_size\
    \ = reversed_string.len();\n            while reversed_string_size > 0 {\n   \
    \             let mut reversed_string = reversed_string\n                    .chars()\n\
    \                    .skip_while(|c| !c.is_ascii())\n                    .collect::<String>();\n\
    \                let mut reversed_string_size = reversed_string.len();\n     \
    \           while reversed_string_size > 0 {\n                    let mut reversed_string\
    \ = reversed_string\n                        .chars()\n                      \
    \  .skip_while(|c| !c.is_ascii())\n                        .collect::<String>();\n\
    \                    let mut reversed_string_size = reversed_string.len();\n \
    \                   let mut reversed_string_palindrome = reversed_string\n   \
    \                     .chars()\n                        .skip_while(|c| !c.is_ascii())\n\
    \                        .collect::<String>();\n                    let mut reversed_string_palindrome_size\
    \ = reversed_string_palindrome.len();\n                    while reversed_string_palindrome_size\
    \ > 0 {\n                        let mut reversed_string_palindrome = reversed_string_palindrome\n\
    \                            .chars()\n                            .skip_while(|c|\
    \ !c.is_ascii())\n                            .collect::<String>();\n        \
    \                let mut reversed_string_size = reversed_string.len();\n     \
    \                   while reversed_string_size > 0 {\n                       \
    \     let mut reversed_string = reversed_string\n                            \
    \    .chars()\n                                .skip_while(|c| !c.is_ascii())\n\
    \                                .collect::<String>();\n                     \
    \       let mut reversed_string_size = reversed_string.len();\n              \
    \              while reversed_string_size > 0 {\n                            \
    \    let mut reversed_string = reversed_string\n                             \
    \       .chars()\n                                    .skip_while(|c| !c.is_ascii())\n\
    \                                    .collect::<String>();\n                 \
    \               let mut reversed_string_size = reversed_string.len();\n      \
    \                          while reversed_\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp8_vmn9xi.rs:69:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while reversed_string_size\
    \ > 0 {\n   |                                    - unclosed delimiter\n17 |  \
    \       let mut reversed_string_palindrome_size = reversed_string_palindrome.len();\n\
    18 |         while reversed_string_palindrome_size > 0 {\n   |               \
    \                                    - unclosed delimiter\n...\n24 |         \
    \    while reversed_string_size > 0 {\n   |                                  \
    \          - unclosed delimiter\n...\n30 |                 while reversed_string_size\
    \ > 0 {\n   |                                                - unclosed delimiter\n\
    ...\n41 |                     while reversed_string_palindrome_size > 0 {\n  \
    \ |                                                               - unclosed delimiter\n\
    ...\n47 |                         while reversed_string_size > 0 {\n   |     \
    \                                                   - unclosed delimiter\n...\n\
    53 |                             while reversed_string_size > 0 {\n   |      \
    \                                                      - this delimiter might\
    \ not be properly closed...\n...\n60 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n69 | }\n   |   ^\n\nerror: expected `{`, found\
    \ `}`\n  --> /tmp/tmp8_vmn9xi.rs:60:1\n   |\n60 | }\n   | ^ expected `{`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8_vmn9xi.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8_vmn9xi.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8_vmn9xi.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_char = String::new();\n    let mut longest_postfix_char_length\
    \ = 0;\n    let mut longest_postfix_char_pos = 0;\n    let mut longest_postfix_char_pos_index\
    \ = 0;\n    let mut longest_postfix_char_pos_index2 = 0;\n    let mut longest_postfix_char_pos_index3\
    \ = 0;\n    let mut longest_postfix_char_pos_index4 = 0;\n    let mut longest_postfix_char_pos_index5\
    \ = 0;\n    let mut longest_postfix_char_pos_index6 = 0;\n    let mut longest_postfix_char_pos_index7\
    \ = 0;\n    let mut longest_postfix_char_pos_index8 = 0;\n    let mut longest_postfix_char_pos_index9\
    \ = 0;\n    let mut longest_postfix_char_pos_index10 = 0;\n    let mut longest_postfix_char_pos_index11\
    \ = 0;\n    let mut longest_postfix_char_pos_index12 = 0;\n    let mut longest_postfix_char_pos_index13\
    \ = 0;\n    let mut longest_postfix_char_pos_index14 = 0;\n    let mut longest_postfix_char_pos_index15\
    \ = 0;\n    let mut longest_postfix_char_pos_index16 = 0;\n    let mut longest_postfix_char_pos_index17\
    \ = 0;\n    let mut longest_postfix_char_pos_index18 = 0;\n    let mut longest_postfix_char_pos_index19\
    \ = 0;\n    let mut longest_postfix_char_pos_index20 = 0;\n    let mut longest_postfix_char_pos_index21\
    \ = 0;\n    let mut longest_postfix_char_pos_index22 = 0;\n    let mut longest_postfix_char_pos_index23\
    \ = 0;\n    let mut longest_postfix_char_pos_index24 = 0;\n    let mut longest_postfix_char_pos_index25\
    \ = 0;\n    let mut longest_postfix_char_pos_index26 = 0;\n    let mut longest_postfix_char_pos_index27\
    \ = 0;\n    let mut longest_postfix_char_pos_index28 = 0;\n    let mut longest_postfix_char_pos_index29\
    \ = 0;\n    let mut longest_postfix_char_pos_index30 = 0;\n    let mut longest_postfix_char_pos_index31\
    \ = 0;\n    let mut longest_postfix_char_pos_index32 = 0;\n    let mut longest_postfix_char_pos_index33\
    \ = 0;\n    let mut longest_postfix_char_pos_index34 = 0;\n    let mut longest_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6k3a7k7e.rs:53:21\n   |\n\
    53 |     let mut longest_\n   |                     ^ help: add `;` here\n54 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp6k3a7k7e.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6k3a7k7e.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6k3a7k7e.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6k3a7k7e.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6k3a7k7e.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    let mut longest = 0;\n    while !prefix.is_empty() {\n      \
    \  let mut i = longest;\n        while i >= 0 && prefix[i] != reversed[i] {\n\
    \            i -= 1;\n        }\n        if i == 0 {\n            break;\n   \
    \     }\n        longest = i;\n        prefix = prefix.chars().take(i + 1).collect();\n\
    \        reversed = reversed.chars().take(i + 1).collect();\n        suffix =\
    \ suffix.chars().take(i + 1).collect();\n    }\n    longest\n        .to_string()\n\
    \        .chars()\n        .map(|c| c.to_ascii_lowercase())\n        .collect::<String>()\n\
    \        .join(\"\")\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:39:17\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:40:17\n   |\n40 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:40:25\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9n5iwobo.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9n5iwobo.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9n5iwobo.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9n5iwobo.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp9n5iwobo.rs:18:25\n\
    \   |\n18 |         while i >= 0 && prefix[i] != reversed[i] {\n   |         \
    \                ^^^^^^^^^ `String` ca"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut prefix_length = 0;\n    while !reversed_string.is_empty() {\n      \
    \  let mut suffix_length = 0;\n        while !palindrome.is_empty() {\n      \
    \      if palindrome.len() < prefix_length {\n                break;\n       \
    \     }\n            if palindrome.chars().nth(prefix_length).unwrap() != reversed_string.chars().nth(suffix_length).unwrap()\
    \ {\n                break;\n            }\n            suffix_length += 1;\n\
    \        }\n        prefix_length += 1;\n        palindrome = &palindrome[suffix_length..];\n\
    \        reversed_string = &reversed_string[..-suffix_length];\n    }\n    palindrome\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgvgd5aco.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgvgd5aco.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgvgd5aco.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgvgd5aco.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpgvgd5aco.rs:27:22\n   |\n27 |         palindrome = &palindrome[suffix_length..];\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ fou"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n        let\
    \ mut char = string[index];\n\n        while index >= 0 {\n            reversed_string.insert(0,\
    \ char);\n            index -= 1;\n            char = string[index];\n       \
    \ }\n        string = string.chars().collect::<String>();\n    }\n\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi3nk39pw.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi3nk39pw.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi3nk39pw.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi3nk39pw.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpi3nk39pw.rs:17:24\n   |\n\
    17 |         let mut char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut longest_postfix_chars = String::new();\n    let mut longest_postfix_char_index\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpssi_d1l2.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpssi_d1l2.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpssi_d1l2.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpssi_d1l2.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpssi_d1l2.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpssi_d1l2.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpssi_d1l2.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpssi_d1l2.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ let Some(index) = string.rfind('a', longest_postfix_index) {\n        let mut\
    \ postfix_length = index - longest_postfix_index;\n        if postfix_length <\
    \ longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n    }\n    let mut postfix_length\
    \ = longest_postfix_length - 1;\n    while let Some(index) = string.rfind('a',\
    \ longest_postfix_index + 1, longest_postfix_length + 1) {\n        let mut postfix_length\
    \ = index - longest_postfix_index;\n        if postfix_length < longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix_index\
    \ = index;\n        }\n    }\n    string.append(&string[longest_postfix_index..]);\n\
    \    reversed_string.append(&string[longest_postfix_length..]);\n    string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjbxpor09.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjbxpor09.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjbxpor09.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjbxpor09.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpjbxpor09.rs:16:36\n\
    \     |\n16   |     while let Some(index) = string.rfind('a', longest_postfix_index)\
    \ {\n     |        "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix_length = string.len();\n        while postfix_length >= longest_postfix_length\
    \ {\n            let mut postfix = &string[..postfix_length];\n            let\
    \ mut reversed_postfix = &reversed_string[..postfix_length];\n            reversed_postfix.reverse();\n\
    \            if postfix != reversed_postfix {\n                longest_postfix_length\
    \ = postfix_length;\n                string = &string[postfix_length..];\n   \
    \             reversed_string = &reversed_string[postfix_length..];\n        \
    \    }\n        }\n        string = &string[1..];\n        reversed_string = &reversed_string[1..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp988y1k_c.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for reference `&str` in the current scope\n  --> /tmp/tmp988y1k_c.rs:20:30\n\
    \   |\n20 |             reversed_postfix.reverse();\n   |                    \
    \          ^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = string.len();\n    while longest_postfix_len\
    \ > 0 {\n        let mut postfix_len = longest_postfix_len;\n        while postfix_len\
    \ > 0 {\n            let mut postfix = &string[longest_postfix_len..];\n     \
    \       longest_postfix = &string[..postfix_len];\n            if longest_postfix.chars().all(|c|\
    \ !c.is_alphanumeric()) {\n                break;\n            }\n           \
    \ postfix_len -= 1;\n        }\n        if longest_postfix.chars().all(|c| !c.is_alphanumeric())\
    \ {\n            break;\n        }\n        reversed_string += &longest_postfix;\n\
    \        longest_postfix_len -= longest_postfix.len();\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjpb_ey2a.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjpb_ey2a.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjpb_ey2a.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjpb_ey2a.rs:19:31\n   |\n19 |             longest_postfix\
    \ = &string[..postfix_len];\n   |                               ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() {\n            if string[j] != string[j + 1] {\n          \
    \      break;\n            }\n            i += 1;\n            j += 1;\n     \
    \   }\n        if j == i {\n            break;\n        }\n        reverse.push_str(&string[i..j]);\n\
    \        i += 1;\n    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmoi3icuz.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmoi3icuz.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmoi3icuz.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmoi3icuz.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpmoi3icuz.rs:18:16\n   |\n\
    18 |             if string[j] != string[j + 1] {\n   |                ^^^^^^^^^\
    \ `String` cannot be indexed by `"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1;\n    \
    \    }\n        reverse.push_str(&string[i..j]);\n        i = j;\n    }\n    reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwyc8o6tt.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpwyc8o6tt.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwyc8o6tt.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpwyc8o6tt.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut suffix_length = 0;\n    while\
    \ !reversed_string.ends_with(string) {\n        let mut prefix_length = 0;\n \
    \       while !reversed_string.starts_with(string) {\n            reversed_string\
    \ = reversed_string[prefix_length..].to_string();\n            prefix_length +=\
    \ 1;\n        }\n        reversed_string = reversed_string[prefix_length..].to_string();\n\
    \        suffix_length += 1;\n    }\n    reversed_string += &string[suffix_length..];\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvbclgy7b.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvbclgy7b.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvbclgy7b.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvbclgy7b.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpvbclgy7b.rs:14:38\n\
    \   |\n14 |     while !reversed_string.ends_with(string) {\n   |             \
    \                         ^^^^^^\n   |"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_palindrome = string;\n\
    \    let mut reversed_palindrome_len = string.len();\n    let mut i = 0;\n   \
    \ while i < reversed_palindrome_len {\n        let mut j = i;\n        while j\
    \ < reversed_palindrome_len {\n            if palindrome[j] != reversed_palindrome[j]\
    \ {\n                break;\n            }\n            i += 1;\n            j\
    \ += 1\n        }\n        if j == reversed_palindrome_len {\n            palindrome\
    \ = &palindrome[i..];\n            reversed_palindrome = &reversed_palindrome[i..];\n\
    \            reversed_palindrome_len = i;\n        }\n    }\n    palindrome\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1ibnoxd1.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1ibnoxd1.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1ibnoxd1.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp1ibnoxd1.rs:19:16\n   |\n\
    19 |             if palindrome[j] != reversed_palindrome[j] {\n   |          \
    \      ^^^^^^^^^^^^^ `String` canno"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = 0;\n    let mut longest_palindrome_length = 0;\n    let\
    \ mut longest_palindrome_start = 0;\n    let mut longest_palindrome_end = 0;\n\
    \    let mut longest_palindrome_suffix = 0;\n    let mut longest_palindrome_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_start = 0;\n    let mut longest_palindrome_suffix_end\
    \ = 0;\n    while !string.is_empty() {\n        let mut current_char = string.chars().next().unwrap();\n\
    \        let mut current_char_length = 1;\n        while current_char == current_char.chars().next().unwrap()\
    \ {\n            current_char_length += 1;\n        }\n        if current_char_length\
    \ > longest_palindrome_length {\n            longest_palindrome_length = current_char_length;\n\
    \            longest_palindrome_start = longest_palindrome_end;\n            longest_palindrome_end\
    \ = longest_palindrome_start + longest_palindrome_length - 1;\n        }\n   \
    \     if longest_palindrome_length == 0 {\n            break;\n        }\n   \
    \     if longest_palindrome_length == 1 {\n            longest_palindrome_suffix\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_length =\
    \ longest_palindrome_end - longest_palindrome_start + 1;\n            longest_palindrome_suffix_start\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_end = longest_palindrome_start\
    \ + longest_palindrome_length - 1;\n        }\n        if longest_palindrome_length\
    \ == 2 {\n            longest_palindrome_suffix = longest_palindrome_start;\n\
    \            longest_palindrome_suffix_length = longest_palindrome_end - longest_palindrome_start\
    \ + 1;\n            longest_palindrome_suffix_start = longest_palindrome_start;\n\
    \            longest_palindrome_suffix_end = longest_palindrome_start + longest_palindrome_length\
    \ - 1;\n        }\n        if longest_palindrome_length == 3 {\n            longest_palindrome_suffix\
    \ = longest_palindrome_start;\n            longest_palindrome_suffix_length =\
    \ longest_palindrome_end - longest_palindrome_start + 1;\n            longest_palindrome_suffix_start\
    \ = longest_palindrome_\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpq5yccplk.rs:61:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n22 |     while !string.is_empty()\
    \ {\n   |                              - unclosed delimiter\n...\n48 |       \
    \  if longest_palindrome_length == 3 {\n   |                                 \
    \          - this delimiter might not be properly closed...\n...\n52 | }\n   |\
    \ - ...as it matches this but it has different indentation\n...\n61 | }\n   |\
    \   ^\n\nerror[E0425]: cannot find value `longest_palindrome_` in this scope\n\
    \  --> /tmp/tmpq5yccplk.rs:51:47\n   |\n51 |             longest_palindrome_suffix_start\
    \ = longest_palindrome_\n   |                                               ^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `longest_palindrome`\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq5yccplk.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq5yccplk.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq5yccplk.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq5yccplk.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq5yccplk.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq5yccplk.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq5yccplk.rs:"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ longest_postfix_length < string.len() {\n        let mut longest_postfix_length\
    \ = longest_postfix_length;\n        let mut longest_postfix_index = 0;\n    \
    \    while longest_postfix_length < string.len() {\n            let mut longest_postfix_length\
    \ = longest_postfix_length;\n            let mut longest_postfix_index = 0;\n\
    \            for index in 0..string.len() {\n                if index == longest_postfix_index\
    \ {\n                    continue;\n                }\n                let mut\
    \ current_char = string[index];\n                while longest_postfix_length\
    \ < string.len() {\n                    let mut current_char = string[index];\n\
    \                    while longest_postfix_length < string.len() {\n         \
    \               let mut current_char = string[index];\n                      \
    \  while longest_postfix_length < string.len() {\n                           \
    \ let mut current_char = string[index];\n                            while longest_postfix_length\
    \ < string.len() {\n                                let mut current_char = string[index];\n\
    \                                while longest_postfix_length < string.len() {\n\
    \                                    let mut current_char = string[index];\n \
    \                                   while longest_postfix_length < string.len()\
    \ {\n                                        let mut current_char = string[index];\n\
    \                                        while longest_postfix_length < string.len()\
    \ {\n                                            let mut current_char = string[index];\n\
    \                                            if longest_postfix_length == 0 {\n\
    \                                                break;\n                    \
    \                        }\n                                            longest_postfix_index\
    \ += 1;\n                                        }\n                         \
    \           }\n                                }\n                           \
    \ }\n                        }\n                    }\n                }\n   \
    \         }\n        }\n        reversed_string += &string[longest_postfix_index..];\n\
    \        longest_postfix_index += 1;\n    }\n    string += &reversed_string[..];\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp65_ywh4r.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp65_ywh4r.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp65_ywh4r.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp65_ywh4r.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp65_ywh4r.rs:26:40\n   |\n\
    26 |                 let mut current_char = string[index];\n   |             \
    \                           ^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_pos = 0;\n    let\
    \ mut longest_postfix_len = 0;\n    let mut longest_postfix_start = -1;\n    let\
    \ mut longest_postfix_end = -1;\n    while longest_postfix_len < string.len()\
    \ {\n        let mut postfix_start = -1;\n        let mut postfix_end = -1;\n\
    \        let mut postfix_len = 0;\n        while postfix_len < longest_postfix_len\
    \ {\n            let mut postfix_start = -1;\n            let mut postfix_end\
    \ = -1;\n            let mut postfix_len = 0;\n            while postfix_len <\
    \ longest_postfix_len {\n                let mut postfix_start = -1;\n       \
    \         let mut postfix_end = -1;\n                let mut postfix_len = 0;\n\
    \                while postfix_len < longest_postfix_len {\n                 \
    \   let mut postfix_start = -1;\n                    let mut postfix_end = -1;\n\
    \                    let mut postfix_len = 0;\n                    while postfix_len\
    \ < longest_postfix_len {\n                        let mut postfix_start = -1;\n\
    \                        let mut postfix_end = -1;\n                        let\
    \ mut postfix_len = 0;\n                        while postfix_len < longest_postfix_len\
    \ {\n                            let mut postfix_start = -1;\n               \
    \             let mut postfix_end = -1;\n                            let mut postfix_len\
    \ = 0;\n                            while postfix_len < longest_postfix_len {\n\
    \                                let mut postfix_start = -1;\n               \
    \                 let mut postfix_end = -1;\n                                let\
    \ mut postfix_len = 0;\n                                while postfix_len < longest_postfix_len\
    \ {\n                                    let mut postfix_start = -1;\n       \
    \                             let mut postfix_end = -1;\n                    \
    \                let mut postfix_len = 0;\n                                  \
    \  while postfix_len < longest_postfix_len {\n                               \
    \         let mut postfix_start = -1;\n                                      \
    \  let mut postfix_end = -1;\n                                        let mut\
    \ postfix_len = 0;\n                                        while postfix_len\
    \ < longest_postfix_len {\n                                            let mut\
    \ postfix_start = -1;\n                                            let mut postfix_end\
    \ = -1;\n                                            let mut postfix_len = 0;\n\
    \                                            while postfix_len < longest_postfix_len\
    \ {\n                                                let mut postfix_start = -1;\n\
    \                                                let mut postfix_end = -1;\n \
    \                                               let mut postfix_len = 0;\n   \
    \                                         }\n                                \
    \        }\n                                    }\n                          \
    \      }\n                            }\n                        }\n         \
    \           }\n                }\n            }\n        }\n        if longest_postfix_len\
    \ < postfix_len {\n            lon\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp077q0ita.rs:82:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n17 |     while longest_postfix_len\
    \ < string.len() {\n   |                                              - unclosed\
    \ delimiter\n...\n71 |         if longest_postfix_len < postfix_len {\n   |  \
    \                                            - this delimiter might not be properly\
    \ closed...\n72 |             lon\n73 | }\n   | - ...as it matches this but it\
    \ has different indentation\n...\n82 | }\n   |   ^\n\nerror[E0425]: cannot find\
    \ value `lon` in this scope\n  --> /tmp/tmp077q0ita.rs:72:13\n   |\n72 |     \
    \        lon\n   |             ^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp077q0ita.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp077q0ita.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp077q0ita.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp077q0ita.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp077q0ita.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp077q0ita.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp077q0ita.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E04"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n\n    while\
    \ !string.is_empty() {\n        let mut postfix = string;\n        let mut postfix_length\
    \ = 0;\n        while !postfix.is_empty() {\n            if postfix.chars().next().unwrap()\
    \ == postfix.chars().next().unwrap() {\n                postfix_length += 1;\n\
    \            } else {\n                break;\n            }\n            postfix\
    \ = postfix.chars().next().unwrap();\n        }\n        if postfix_length > longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix\
    \ = postfix;\n        }\n        string = string.chars().next().unwrap();\n  \
    \  }\n\n    longest_postfix.append(&reversed_string[longest_postfix_length..]);\n\
    \    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1lthsr5g.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1lthsr5g.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1lthsr5g.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1lthsr5g.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1lthsr5g.rs:26:23\n   |\n26 |             postfix = postfix.chars().next().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ co"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_char = 0;\n    let mut longest_postfix_char_length = 0;\n\
    \    let mut longest_postfix_char_length_index = 0;\n    let mut longest_postfix_char_length_index2\
    \ = 0;\n    let mut longest_postfix_char_length_index3 = 0;\n    let mut longest_postfix_char_length_index4\
    \ = 0;\n    let mut longest_postfix_char_length_index5 = 0;\n    let mut longest_postfix_char_length_index6\
    \ = 0;\n    let mut longest_postfix_char_length_index7 = 0;\n    let mut longest_postfix_char_length_index8\
    \ = 0;\n    let mut longest_postfix_char_length_index9 = 0;\n    let mut longest_postfix_char_length_index10\
    \ = 0;\n    let mut longest_postfix_char_length_index11 = 0;\n    let mut longest_postfix_char_length_index12\
    \ = 0;\n    let mut longest_postfix_char_length_index13 = 0;\n    let mut longest_postfix_char_length_index14\
    \ = 0;\n    let mut longest_postfix_char_length_index15 = 0;\n    let mut longest_postfix_char_length_index16\
    \ = 0;\n    let mut longest_postfix_char_length_index17 = 0;\n    let mut longest_postfix_char_length_index18\
    \ = 0;\n    let mut longest_postfix_char_length_index19 = 0;\n    let mut longest_postfix_char_length_index20\
    \ = 0;\n    let mut longest_postfix_char_length_index21 = 0;\n    let mut longest_postfix_char_length_index22\
    \ = 0;\n    let mut longest_postfix_char_length_index23 = 0;\n    let mut longest_postfix_char_length_index24\
    \ = 0;\n    let mut longest_postfix_char_length_index25 = 0;\n    let mut longest_postfix_char_length_index26\
    \ = 0;\n    let mut longest_postfix_char_length_index27 = 0;\n    let mut longest_postfix_char_length_index28\
    \ = 0;\n    let mut longest_postfix_char_length_index29 = 0;\n    let mut longest_postfix_char_length_index30\
    \ = 0;\n    let mut longest_postfix_char_length_index31 = 0;\n    let mut longest_postfix_char_length_index32\
    \ = 0;\n    let mut longest_postfix_char_length_index33 = 0;\n    let mut longest_postfix_char_length_index34\
    \ = 0;\n    let mut longest_postfix_char_length_index35 = 0;\n    let mut longest_postfix_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsek98ac9.rs:53:29\n   |\n\
    53 |     let mut longest_postfix_\n   |                             ^ help: add\
    \ `;` here\n54 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsek98ac9.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsek98ac9.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsek98ac9.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsek98ac9.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsek98ac9.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut palindrome = string;\n    let mut\
    \ prefix_len = 0;\n    let mut suffix_len = 0;\n    while palindrome.len() > 0\
    \ {\n        let mut i = palindrome.len() - 1;\n        let mut j = palindrome.len()\
    \ - 1;\n        while i >= 0 && j >= 0 {\n            if palindrome[i] != palindrome[j]\
    \ {\n                break;\n            }\n            i -= 1;\n            j\
    \ -= 1;\n        }\n        if i >= 0 {\n            suffix_len += 1;\n      \
    \      palindrome = &palindrome[i..];\n        } else {\n            prefix_len\
    \ += 1;\n            palindrome = &palindrome[i..];\n        }\n    }\n    let\
    \ mut result = string;\n    if suffix_len > prefix_len {\n        result = &result[0..prefix_len];\n\
    \    }\n    result += &reverse[..suffix_len];\n    result\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw02vgyp6.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw02vgyp6.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw02vgyp6.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw02vgyp6.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpw02vgyp6.rs:20:16\n   |\n\
    20 |             if palindrome[i] != palindrome[j] {\n   |                ^^^^^^^^^^^^^\
    \ `String` cannot be inde"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ !string.is_empty() {\n        let mut postfix_index = 0;\n        while !string.is_empty()\
    \ && postfix_index < longest_postfix_length {\n            if string[postfix_index]\
    \ != string[longest_postfix_index] {\n                break;\n            }\n\
    \            postfix_index += 1;\n        }\n        longest_postfix_length =\
    \ postfix_index;\n        longest_postfix_index += 1;\n        reversed_string\
    \ += &string[longest_postfix_index..];\n        string = &string[longest_postfix_length..];\n\
    \    }\n    string += &reversed_string[longest_postfix_length..];\n    string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpb97deiqs.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpb97deiqs.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpb97deiqs.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpb97deiqs.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpb97deiqs.rs:19:16\n\
    \   |\n19 |             if string[postfix_index] != string[longest_postfix_index]\
    \ {\n   |                ^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut palindrome = string;\n    let mut prefix_length = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut longest_postfix_length = 0;\n    let mut longest_postfix_length_index\
    \ = 0;\n    let mut longest_postfix_length_palindrome = 0;\n    let mut longest_postfix_length_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_index = 0;\n    let mut longest_postfix_length_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix = 0;\n    let mut longest_postfix_length_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_palindrome = 0;\n   \
    \ let mut longest_postfix_length_suffix_suffix_suffix = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_index = 0;\n    let mut\
    \ longest_postfix_length_suffix_suffix_suffix_suffix_palindrome = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_index = 0;\n \
    \   let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4_1_y05m.rs:42:21\n   |\n\
    42 |     let mut longest_\n   |                     ^ help: add `;` here\n43 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp4_1_y05m.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4_1_y05m.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4_1_y05m.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4_1_y05m.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4_1_y05m.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4_1_y05m.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4_1_y05m.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut suffix_length\
    \ = 0;\n    let mut prefix_length = 0;\n    while !string.ends_with(&reverse)\
    \ {\n        let mut suffix_length = suffix_length + 1;\n        if suffix_length\
    \ > string.len() {\n            break;\n        }\n        let mut prefix_length\
    \ = prefix_length + 1;\n        if prefix_length > string.len() {\n          \
    \  break;\n        }\n        let mut reverse = reverse.chars().collect::<String>().rev().collect::<String>();\n\
    \        let mut string = string.chars().collect::<String>().rev().collect::<String>();\n\
    \    }\n    string.push_str(&reverse);\n    string\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi6ka3jv8.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi6ka3jv8.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi6ka3jv8.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpi6ka3jv8.rs:25:63\n    |\n25  |           let mut reverse = reverse.chars().collect::<String>()."
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reverse_string = \"\";\n    let\
    \ mut prefix_length = 0;\n    while !palindrome.is_empty() {\n        let mut\
    \ current_char = String::new();\n        current_char.push(palindrome.chars().next().unwrap());\n\
    \        palindrome = palindrome.chars().collect();\n        reverse_string.push(palindrome.last().unwrap());\n\
    \        prefix_length = prefix_length + palindrome.last().unwrap().len();\n \
    \   }\n    palindrome.push(reverse_string);\n    palindrome.push(&string[prefix_length..]);\n\
    \    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmply8yn4uu.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmply8yn4uu.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmply8yn4uu.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmply8yn4uu.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `push` found for reference `&str` in the current scope\n  --> /tmp/tmply8yn4uu.rs:19:24\n\
    \   |\n19 |         reverse_string.push(palindrome.last().unwrap());\n   |   \
    \                 "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1;\n\
    \        }\n        reversed_string.push_str(&string[i..j]);\n        i = j;\n\
    \    }\n    string.push_str(&reversed_string);\n    string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvb4k1rz7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvb4k1rz7.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvb4k1rz7.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpvb4k1rz7.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut postfix_length = 0;\n    let\
    \ mut prefix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        let mut current_char_length\
    \ = 1;\n        while current_char_length < postfix_length {\n            if current_char\
    \ == reversed_string[current_char_length] {\n                current_char_length\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        postfix_length = current_char_length;\n        reversed_string =\
    \ reversed_string[current_char_length..];\n        if reversed_string == string\
    \ {\n            prefix_length = current_char_length;\n            break;\n  \
    \      }\n    }\n    String::from(string.to_owned() + &reversed_string[prefix_length..])\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiz5m6ou3.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiz5m6ou3.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiz5m6ou3.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpiz5m6ou3.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n        let\
    \ mut char = string[index];\n\n        while index >= 0 {\n            reversed_string.insert(0,\
    \ char);\n            index -= 1;\n            char = string[index];\n       \
    \ }\n        string = &string[1..];\n    }\n\n    reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplenw3s87.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplenw3s87.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplenw3s87.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplenw3s87.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplenw3s87.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplenw3s87.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmplenw3s87.rs:17:24\n   |\n\
    17 |         let mut char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix_length = 0;\n    while !string.ends_with(&reversed_string)\
    \ {\n        let mut postfix_length = string.len() - 1;\n        while postfix_length\
    \ >= 0 {\n            if string[postfix_length] != string[postfix_length].to_ascii_lowercase()\
    \ {\n                break;\n            }\n            postfix_length -= 1;\n\
    \        }\n        longest_postfix_length = postfix_length + 1;\n        reversed_string\
    \ = &string[..longest_postfix_length];\n        string = &string[longest_postfix_length..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpo7vyuq_f.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpo7vyuq_f.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpo7vyuq_f.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpo7vyuq_f.rs:18:16\n   |\n\
    18 |             if string[postfix_length] != string[postfix_length].to_ascii_lowercase()\
    \ {\n   |              "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reverse_length = 0;\n\n    while !string.ends_with(&reversed_string) {\n\
    \        reversed_string = reversed_string[..].to_owned();\n        reverse_length\
    \ += 1;\n    }\n\n    let mut reversed_string = reversed_string[..reverse_length].to_owned();\n\
    \    let mut reverse_length = 0;\n\n    while !string.starts_with(&reversed_string)\
    \ {\n        reversed_string = reversed_string[..reverse_length].to_owned();\n\
    \        reverse_length += 1;\n    }\n\n    string[..reverse_length].to_owned()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8lcssaew.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8lcssaew.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8lcssaew.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8lcssaew.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 10 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().collect();\n\
    \        if current_char == current_char.rev() {\n            suffix_length +=\
    \ 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut prefix_length = 0;\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:90:17\n\
    \   |\n90 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:90:25\n   |\n90 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:91:17\n   |\n91 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:91:25\n\
    \   |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp09g9_rfg.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp09g9_rfg.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp09g9_rfg.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp09g9_rfg.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp09g9_rfg.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < string.len() {\n        let\
    \ mut suffix_start = suffix_length;\n        let mut suffix_end = suffix_start;\n\
    \        while suffix_end < string.len() {\n            let mut suffix_char =\
    \ string[suffix_end];\n            suffix_end += 1;\n            if suffix_char\
    \ == string[suffix_end - 1] {\n                suffix_end += 1;\n            \
    \    suffix_length += 1;\n            } else {\n                break;\n     \
    \       }\n        }\n        let mut prefix_start = prefix_length;\n        let\
    \ mut prefix_end = prefix_start;\n        while prefix_end < string.len() {\n\
    \            let mut prefix_char = string[prefix_end];\n            prefix_end\
    \ += 1;\n            if prefix_char == string[prefix_end - 1] {\n            \
    \    prefix_end += 1;\n                prefix_length += 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        if suffix_start\
    \ < prefix_end {\n            reversed_string.push_str(&string[prefix_start..suffix_end]);\n\
    \            prefix_length = suffix_start;\n            suffix_length = prefix_end;\n\
    \        }\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate =\
    \ make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp53d4odax.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp53d4odax.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp53d4odax.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp53d4odax.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp53d4odax.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp53d4odax.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp53d4odax.rs:19:35\n   |\n\
    19 |             let mut suffix_char = string[suffix_end];\n   |             \
    \                      ^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n\
    \    let mut suffix_length = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length\
    \ = 0;\n    let mut suffix_pos = 0;\n    let mut suffix_length = 0;\n    let mut\
    \ suffix_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmppn33nl2j.rs:77:1\n  \
    \ |\n77 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmppn33nl2j.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppn33nl2j.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppn33nl2j.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppn33nl2j.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppn33nl2j.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppn33nl2j.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppn33nl2j.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().skip(1).collect();\n\
    \        if current_char == current_char.to_string().rev() {\n            suffix_length\
    \ += 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n\
    \    if suffix_length == 0 {\n        return string;\n    }\n    let mut reversed_string\
    \ = string;\n    while !reversed_string.is_empty() {\n        let mut current_char\
    \ = reversed_string[0];\n        reversed_string = reversed_string.chars().skip(1).collect();\n\
    \        if current_char == current_char.to_string().rev() {\n            break;\n\
    \        }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev() {\n            break;\n \
    \       }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev() {\n            break;\n \
    \       }\n    }\n    let mut reversed_string = string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip(1).collect();\n        if current_char == current_char.to_string().rev()\
    \ {\n            break;\n        }\n    }\n    let mut reversed_string = string;\n\
    \    while !reversed_string.is_empty() {\n        let mut current_char = reversed_string[0];\n\
    \        reversed_string = reversed_string.chars().skip(1).collect();\n      \
    \  if current_char == current_char.to_string().rev\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpui039p_2.rs:89:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n76 |     while !reversed_string.is_empty()\
    \ {\n   |                                       - this delimiter might not be\
    \ properly closed...\n...\n80 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n89 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  -->\
    \ /tmp/tmpui039p_2.rs:80:1\n   |\n79 |         if current_char == current_char.to_string().rev\n\
    \   |         -- this `if` expression has a condition, but no block\n80 | }\n\
    \   | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpui039p_2.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpui039p_2.rs:84:25\n   |\n84 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpui039p_2.rs:85:17\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpui039p_2.rs:85:25\n   |\n85 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpui039p_2.rs:86:17\n  \
    \ |\n86 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpui039p_2.rs:86:25\n   |\n86 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpui039p_2.rs:87:17\n   |\n87 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpui039p_2.rs:87:25\n\
    \   |\n87 |     "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n\
    \    let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpevdn9ecl.rs:59:34\n   |\n\
    59 |     let mut longest_postfix_index\n   |                                 \
    \ ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpevdn9ecl.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpevdn9ecl.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpevdn9ecl.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpevdn9ecl.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpevdn9ecl.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E030"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j <\
    \ string.len() {\n            if string[j] != string[i] {\n                break;\n\
    \            }\n            i += 1;\n            j += 1;\n        }\n        if\
    \ j == i {\n            break;\n        }\n        reverse.push_str(&string[j..i]);\n\
    \        i += 1;\n    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7cbrrjtq.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7cbrrjtq.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7cbrrjtq.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp7cbrrjtq.rs:18:16\n   |\n\
    18 |             if string[j] != string[i] {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usiz"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a') {\n        longest_postfix_length = pos;\n \
    \   }\n    for pos in string.rfind('a') {\n        if pos < longest_postfix_length\
    \ {\n            break;\n        }\n        reversed_string.push('a');\n    }\n\
    \    reversed_string.reverse();\n    string + &reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplyslgren.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplyslgren.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplyslgren.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplyslgren.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplyslgren.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplyslgren.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmplyslgren.rs:23:21\n\
    \   |\n23 |     reversed_string.reverse();\n   |                     ^^^^^^^ help:\
    \ there is "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = 0;\n\n    while !reversed_string.is_empty()\
    \ {\n        let mut postfix = reversed_string.clone();\n        let mut postfix_len\
    \ = 0;\n\n        while !postfix.is_empty() {\n            if postfix.chars().next().unwrap()\
    \ == postfix.chars().last().unwrap() {\n                postfix.pop();\n     \
    \           postfix_len += 1;\n            } else {\n                break;\n\
    \            }\n        }\n\n        if postfix_len > longest_postfix_len {\n\
    \            longest_postfix = postfix;\n            longest_postfix_len = postfix_len;\n\
    \        }\n\n        reversed_string = reversed_string.chars().collect::<String>().rev().collect();\n\
    \    }\n\n    longest_postfix.push_str(&string[longest_postfix_len..]);\n    longest_postfix\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfmqar30q.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfmqar30q.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfmqar30q.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfmqar30q.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpfmqar30q.rs:34:71\n    |\n34  |           reversed_string = reversed_string.chars().collect::<St"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j + 1] == string[j] {\n            j += 1\n \
    \       }\n        reversed_string.push_str(&string[i..j]);\n        i = j;\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppqdl5jg7.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppqdl5jg7.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppqdl5jg7.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppqdl5jg7.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppqdl5jg7.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j + 1] == string[j] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < string.len() {\n        let\
    \ mut suffix_start = suffix_length;\n        while suffix_start < string.len()\
    \ && string[suffix_start] != string[suffix_start + 1] {\n            suffix_start\
    \ += 1;\n        }\n        reversed_string.push_str(&string[prefix_length..suffix_start]);\n\
    \        suffix_length = suffix_start + 1;\n        prefix_length = suffix_length\
    \ - suffix_start;\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_06ojlj.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpt_06ojlj.rs:17:46\n   |\n\
    17 |         while suffix_start < string.len() && string[suffix_start] != string[suffix_start\
    \ + 1] {\n   |     "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1; //\
    \ j is incremented after each iteration\n        }\n        reversed_string.push_str(&string[i..j]);\n\
    \        i = j;\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg88zagfg.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg88zagfg.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg88zagfg.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg88zagfg.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpg88zagfg.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_palindrome = string;\n    let mut longest_palindrome_len\
    \ = 0;\n    while !reversed_string.is_empty() {\n        let mut current_char\
    \ = reversed_string[0];\n        let mut current_char_len = 1;\n        while\
    \ !current_char.is_ascii_lowercase() {\n            current_char = reversed_string[current_char_len];\n\
    \            current_char_len += 1;\n        }\n        if current_char_len >\
    \ reversed_string_len {\n            reversed_string = &reversed_string[current_char_len..];\n\
    \            reversed_string_len = current_char_len;\n        }\n        if current_char\
    \ == &reversed_string[reversed_string_len] {\n            reversed_string = &reversed_string[..reversed_string_len];\n\
    \            reversed_string_len -= 1;\n        } else {\n            longest_palindrome\
    \ = &reversed_string[..reversed_string_len];\n            longest_palindrome_len\
    \ = reversed_string_len;\n        }\n    }\n    longest_palindrome\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6sfdeh73.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6sfdeh73.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6sfdeh73.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6sfdeh73.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp6sfdeh73.rs:17:32\n\
    \   |\n17 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix_pos = 0;\n\
    \    while longest_postfix_len < longest_postfix.len() {\n        let mut postfix_pos\
    \ = longest_postfix_pos;\n        let mut postfix_len = longest_postfix_len;\n\
    \        while postfix_len > 0 {\n            let mut postfix_char = longest_postfix[postfix_pos];\n\
    \            while postfix_len > 0 && postfix_char != longest_postfix[postfix_pos\
    \ + 1] {\n                postfix_len -= 1;\n                postfix_pos += 1;\n\
    \            }\n            if postfix_len > 0 {\n                longest_postfix_len\
    \ += 1;\n            }\n            postfix_len -= 1;\n            postfix_pos\
    \ += 1;\n        }\n        if longest_postfix_len > longest_postfix_pos {\n \
    \           longest_postfix_len = longest_postfix_pos;\n        }\n        longest_postfix_pos\
    \ = postfix_pos;\n    }\n    let mut postfix_len = longest_postfix_len;\n    while\
    \ postfix_len > 0 {\n        let mut postfix_char = longest_postfix[longest_postfix_len\
    \ - 1];\n        while postfix_len > 0 && postfix_char != longest_postfix[longest_postfix_len\
    \ - postfix_len] {\n            postfix_len -= 1;\n        }\n        if postfix_len\
    \ > 0 {\n            longest_postfix_len -= postfix_len;\n        }\n        postfix_len\
    \ -= 1;\n    }\n    longest_postfix += &reversed_string[longest_postfix_len..];\n\
    \    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf1_3oy9g.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf1_3oy9g.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf1_3oy9g.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpf1_3oy9g.rs:20:36\n\
    \   |\n20 |             let mut postfix_char = longest_postfix[postfix_pos];\n\
    \   |                                "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut palindrome = string;\n    let mut\
    \ i = 0;\n    while i < palindrome.len() {\n        if palindrome[i] != reverse[i\
    \ as usize] {\n            palindrome = &palindrome[i..palindrome.len()].to_owned();\n\
    \            break;\n        }\n        i += 1;\n    }\n    palindrome\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp31xvoybe.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp31xvoybe.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp31xvoybe.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp31xvoybe.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp31xvoybe.rs:16:12\n   |\n\
    16 |         if palindrome[i] != reverse[i as usize] {\n   |            ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_string = \"\";\n    let mut longest_postfix_index2 = 0;\n\
    \    let mut longest_postfix_string2 = \"\";\n    let mut longest_postfix_index3\
    \ = 0;\n    let mut longest_postfix_string3 = \"\";\n    let mut longest_postfix_index4\
    \ = 0;\n    let mut longest_postfix_string4 = \"\";\n    let mut longest_postfix_index5\
    \ = 0;\n    let mut longest_postfix_string5 = \"\";\n    let mut longest_postfix_index6\
    \ = 0;\n    let mut longest_postfix_string6 = \"\";\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_string7 = \"\";\n    let mut longest_postfix_index8\
    \ = 0;\n    let mut longest_postfix_string8 = \"\";\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_string9 = \"\";\n    let mut longest_postfix_index10\
    \ = 0;\n    let mut longest_postfix_string10 = \"\";\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_string11 = \"\";\n    let mut longest_postfix_index12\
    \ = 0;\n    let mut longest_postfix_string12 = \"\";\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_string13 = \"\";\n    let mut longest_postfix_index14\
    \ = 0;\n    let mut longest_postfix_string14 = \"\";\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_string15 = \"\";\n    let mut longest_postfix_index16\
    \ = 0;\n    let mut longest_postfix_string16 = \"\";\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_string17 = \"\";\n    let mut longest_postfix_index18\
    \ = 0;\n    let mut longest_postfix_string18 = \"\";\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_string19 = \"\";\n    let mut longest_postfix_index20\
    \ = 0;\n    let mut longest_postfix_string20 = \"\";\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_string21 = \"\";\n    let mut longest_postfix_index22\
    \ = 0;\n    let mut longest_postfix_string22 = \"\";\n    let mut longest_postfix_index23\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_lhlw1tq.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index23\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_lhlw1tq.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_lhlw1tq.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_lhlw1tq.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_lhlw1tq.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reversed_string_index = 0;\n    while !string.is_empty() {\n        let\
    \ mut index = string.len();\n        while index > 0 {\n            let mut char\
    \ = string[reversed_string_index];\n            reversed_string[reversed_string_index]\
    \ = char;\n            reversed_string_index += 1;\n            index -= 1;\n\
    \        }\n        string = &string[1..];\n    }\n    string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbt5k609h.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbt5k609h.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbt5k609h.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbt5k609h.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbt5k609h.rs:18:28\n\
    \   |\n18 |             let mut char = string[reversed_string_index];\n   |  \
    \                          ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n\
    \    let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmplmw_5zrz.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplmw_5zrz.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplmw_5zrz.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplmw_5zrz.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplmw_5zrz.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplmw_5zrz.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut postfix = string;\n    let\
    \ mut palindrome = string;\n    while !postfix.is_empty() {\n        let mut index\
    \ = postfix.rfind('a');\n        if index == -1 {\n            break;\n      \
    \  }\n        let mut suffix = postfix.split_off(index);\n        let mut prefix\
    \ = reversed_string.split_off(index);\n        let mut suffix = suffix.iter().cloned().collect::<String>();\n\
    \        let mut prefix = prefix.iter().cloned().collect::<String>();\n      \
    \  let mut reversed_suffix = suffix.clone();\n        let mut reversed_prefix\
    \ = prefix.clone();\n        reversed_suffix.reverse();\n        reversed_prefix.reverse();\n\
    \        suffix.append(&mut reversed_suffix);\n        prefix.append(&mut reversed_prefix);\n\
    \        palindrome.append(&mut suffix);\n        postfix.remove(index);\n   \
    \ }\n    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcc0is0w5.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcc0is0w5.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcc0is0w5.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcc0is0w5.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpcc0is0w5.rs:17:21\n   |\n17 |         if index == -1 {\n\
    \   |                     ^^\n   |                     |\n   |               \
    \      expected enum `Option`, found "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = String::from(\"\");\n    let mut longest_palindrome_length\
    \ = 0;\n\n    while !string.is_empty() {\n        let mut current_char = string[0];\n\
    \        let mut current_char_length = 1;\n\n        while !string.is_empty()\
    \ && current_char == string[current_char_length] {\n            current_char_length\
    \ += 1;\n            string = &string[current_char_length..];\n        }\n\n \
    \       if current_char_length > longest_palindrome_length {\n            longest_palindrome_length\
    \ = current_char_length;\n            longest_palindrome = current_char;\n   \
    \     }\n\n        string = &string[1..];\n    }\n\n    longest_palindrome +=\
    \ &reversed_string[longest_palindrome_length..];\n    longest_palindrome\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvvv09lfi.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvvv09lfi.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvvv09lfi.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvvv09lfi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpvvv09lfi.rs:18:32\n\
    \   |\n18 |         let mut current_char = string[0];\n   |                  \
    \              ^^^^^^^^^ `String` cann"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    let mut longest_postfix_length_index = 0;\n    let mut longest_postfix_length_palindrome\
    \ = 0;\n    let mut longest_postfix_length_palindrome_index = 0;\n    let mut\
    \ longest_postfix_length_suffix = 0;\n    let mut longest_postfix_length_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_palindrome = 0;\n    let mut\
    \ longest_postfix_length_suffix_palindrome_index = 0;\n    let mut longest_postfix_length_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_index = 0;\n    let mut\
    \ longest_postfix_length_suffix_suffix_palindrome = 0;\n    let mut longest_postfix_length_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_index = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix_index = 0;\n \
    \   let mut longest_postfix_length_suffix_suffix_suffix_suffix_palindrome = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffi\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp84h7gm8e.rs:40:69\n   |\n\
    40 |     let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffi\n  \
    \ |                                                                     ^ help:\
    \ add `;` here\n41 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp84h7gm8e.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp84h7gm8e.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp84h7gm8e.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp84h7gm8e.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp84h7gm8e.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp84h7gm8e.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp84h7gm8e.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp84h7gm8e.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp84h7gm8e.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp84h7gm8e.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    while !reverse.starts_with(&prefix) {\n        prefix.reverse();\n\
    \    }\n    while !suffix.ends_with(&reverse) {\n        reverse.reverse();\n\
    \    }\n    reverse.push_str(&prefix);\n    reverse.push_str(&suffix);\n    reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp47lqooy.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp47lqooy.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp47lqooy.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp47lqooy.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp47lqooy.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp47lqooy.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp47lqooy.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp47lqooy.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp47lqooy.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp47lqooy.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpp47lqooy.rs:16:16\n\
    \   |\n16 |         prefix.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associa"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix_length = 0;\n        for (i, c) in string.chars().enumerate() {\n  \
    \          if i > longest_postfix_length {\n                longest_postfix_length\
    \ = i;\n            }\n            if c == string[longest_postfix_length] {\n\
    \                postfix_length += 1;\n            }\n        }\n        reversed_string\
    \ += string[longest_postfix_length..];\n        string = &string[longest_postfix_length..];\n\
    \    }\n    reversed_string += string;\n    String::from(reversed_string)\n}\n\
    \nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps96oysb1.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps96oysb1.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps96oysb1.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps96oysb1.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps96oysb1.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps96oysb1.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps96oysb1.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps96oysb1.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps96oysb1.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps96oysb1.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmps96oysb1.rs:21:21\n   |\n\
    21 |             if c == string[longest_postfix_length] {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        reverse_length = reversed_string.len()\
    \ - 1;\n        reversed_string = reversed_string[..reverse_length].to_string();\n\
    \    }\n    let mut reversed_string = reversed_string;\n    while !reversed_string.is_empty()\
    \ {\n        let mut reversed_string = reversed_string[..].to_string();\n    \
    \    reversed_string = reversed_string.rev().to_string();\n        if reversed_string\
    \ == string {\n            return string;\n        }\n    }\n    \"\".to_string()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvjc8qopt.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvjc8qopt.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvjc8qopt.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvjc8qopt.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvjc8qopt.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvjc8qopt.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvjc8qopt.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvjc8qopt.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvjc8qopt.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvjc8qopt.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmpvjc8qopt.rs:21:43\n    |\n21  |           reversed_string = reversed_string.rev().to_string();\n\
    \ "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut suffix_length = 0;\n    let mut prefix_length = 0;\n    while !string.ends_with(&reversed_string)\
    \ {\n        let mut suffix_length = suffix_length + 1;\n        let mut prefix_length\
    \ = prefix_length + 1;\n        if suffix_length == string.length() {\n      \
    \      break;\n        }\n        let mut suffix_char = string[suffix_length -\
    \ 1];\n        let mut prefix_char = string[prefix_length - 1];\n        while\
    \ suffix_char == prefix_char {\n            suffix_char = string[suffix_length\
    \ - 1];\n            prefix_char = string[prefix_length - 1];\n            prefix_length\
    \ = prefix_length - 1;\n        }\n        reversed_string = reversed_string[..suffix_length].to_string()\
    \ + reversed_string[suffix_length..prefix_length].to_string() + prefix_char.to_string();\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsxbs7vj2.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsxbs7vj2.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsxbs7vj2.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsxbs7vj2.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsxbs7vj2.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `length` found for struct `String` in the current scope\n  --> /tmp/tmpsxbs7vj2.rs:19:36\n\
    \   |\n19 |         if suffix_length == string.length() {\n   |              \
    \                "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string_to_reverse = string;\n    let mut reverse_string = \"\";\n\
    \    let mut longest_postfix_length = 0;\n    while !string_to_reverse.is_empty()\
    \ {\n        let mut postfix_length = string_to_reverse.len();\n        while\
    \ postfix_length >= longest_postfix_length {\n            let mut postfix = string_to_reverse.split_off(longest_postfix_length);\n\
    \            longest_postfix_length = postfix.len();\n            postfix.reverse();\n\
    \            string_to_reverse = postfix.join(\"\");\n        }\n        reverse_string\
    \ += string_to_reverse;\n        string_to_reverse = string_to_reverse.split_off(longest_postfix_length).join(\"\
    \");\n    }\n    reverse_string += string_to_reverse;\n    reverse_string\n}\n\
    \nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd7xobz06.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd7xobz06.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd7xobz06.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd7xobz06.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd7xobz06.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd7xobz06.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd7xobz06.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd7xobz06.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd7xobz06.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd7xobz06.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpd7xobz06.rs:20:21\n\
    \   |\n20 |             postfix.reverse();\n   |                     ^^^^^^^ help:\
    \ there is "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a') {\n        if pos == 0 {\n            break;\n\
    \        }\n        let mut prefix_length = pos - 1;\n        while prefix_length\
    \ >= 0 && reversed_string[prefix_length] != string[prefix_length] {\n        \
    \    prefix_length -= 1;\n        }\n        if prefix_length >= 0 {\n       \
    \     longest_postfix_length = prefix_length;\n        }\n    }\n    reversed_string.push_str(&string[longest_postfix_length..]);\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_res3f8j.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_res3f8j.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_res3f8j.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_res3f8j.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_res3f8j.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_res3f8j.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_res3f8j.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_res3f8j.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_res3f8j.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_res3f8j.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp_res3f8j.rs:19:37\n   |\n\
    19 |         while prefix_length >= 0 && reversed_string[prefix_length] != string[prefix_length]\
    \ {\n   |       "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n    while\
    \ !string.is_empty() {\n        let mut postfix = string;\n        let mut postfix_length\
    \ = 0;\n        while !postfix.is_empty() {\n            if postfix.chars().nth(postfix_length).unwrap()\
    \ == postfix.chars().nth(postfix_length).rev().unwrap() {\n                postfix_length\
    \ += 1;\n            } else {\n                break;\n            }\n       \
    \     postfix = postfix.chars().nth(postfix_length).unwrap();\n        }\n   \
    \     if postfix_length > longest_postfix_length {\n            longest_postfix\
    \ = postfix.clone();\n            longest_postfix_length = postfix_length;\n \
    \       }\n        string = postfix.chars().nth(longest_postfix_length).unwrap();\n\
    \    }\n    longest_postfix.chars().rev().cloned().collect::<String>()\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9a9jw1l_.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9a9jw1l_.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9a9jw1l_.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9a9jw1l_.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9a9jw1l_.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for enum `Option<char>`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmp9a9jw1l_.rs:20:100\n    |\n20  |               if postfix.chars().nth(postfix_length).unwrap"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.starts_with(string) {\n \
    \       reversed_string = reversed_string[..prefix_length];\n        prefix_length\
    \ += 1;\n    }\n    while !reversed_string.ends_with(string) {\n        reversed_string\
    \ = reversed_string[..suffix_length];\n        suffix_length += 1;\n    }\n  \
    \  reversed_string += &string[prefix_length..suffix_length];\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqq958e04.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqq958e04.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqq958e04.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqq958e04.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqq958e04.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqq958e04.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqq958e04.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqq958e04.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqq958e04.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqq958e04.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpqq958e04.rs:15:40\n\
    \   |\n15 |     while !reversed_string.starts_with(string) {\n   |           \
    \                             ^^^^^^\n"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = String::new();\n    let mut longest_postfix_length = 0;\n\
    \    let mut longest_postfix_index = -1;\n    let mut longest_postfix_index2 =\
    \ 0;\n    let mut longest_postfix_index3 = 0;\n    let mut longest_postfix_index4\
    \ = 0;\n    let mut longest_postfix_index5 = 0;\n    let mut longest_postfix_index6\
    \ = 0;\n    let mut longest_postfix_index7 = 0;\n    let mut longest_postfix_index8\
    \ = 0;\n    let mut longest_postfix_index9 = 0;\n    let mut longest_postfix_index10\
    \ = 0;\n    let mut longest_postfix_index11 = 0;\n    let mut longest_postfix_index12\
    \ = 0;\n    let mut longest_postfix_index13 = 0;\n    let mut longest_postfix_index14\
    \ = 0;\n    let mut longest_postfix_index15 = 0;\n    let mut longest_postfix_index16\
    \ = 0;\n    let mut longest_postfix_index17 = 0;\n    let mut longest_postfix_index18\
    \ = 0;\n    let mut longest_postfix_index19 = 0;\n    let mut longest_postfix_index20\
    \ = 0;\n    let mut longest_postfix_index21 = 0;\n    let mut longest_postfix_index22\
    \ = 0;\n    let mut longest_postfix_index23 = 0;\n    let mut longest_postfix_index24\
    \ = 0;\n    let mut longest_postfix_index25 = 0;\n    let mut longest_postfix_index26\
    \ = 0;\n    let mut longest_postfix_index27 = 0;\n    let mut longest_postfix_index28\
    \ = 0;\n    let mut longest_postfix_index29 = 0;\n    let mut longest_postfix_index30\
    \ = 0;\n    let mut longest_postfix_index31 = 0;\n    let mut longest_postfix_index32\
    \ = 0;\n    let mut longest_postfix_index33 = 0;\n    let mut longest_postfix_index34\
    \ = 0;\n    let mut longest_postfix_index35 = 0;\n    let mut longest_postfix_index36\
    \ = 0;\n    let mut longest_postfix_index37 = 0;\n    let mut longest_postfix_index38\
    \ = 0;\n    let mut longest_postfix_index39 = 0;\n    let mut longest_postfix_index40\
    \ = 0;\n    let mut longest_postfix_index41 = 0;\n    let mut longest_postfix_index42\
    \ = 0;\n    let mut longest_postfix_index43 = 0;\n    let mut longest_postfix_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0ja07w01.rs:59:29\n   |\n\
    59 |     let mut longest_postfix_\n   |                             ^ help: add\
    \ `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp0ja07w01.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0ja07w01.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0ja07w01.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0ja07w01.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0ja07w01.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0ja07w01.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0ja07w01.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0ja07w01.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0ja07w01.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0ja07w01.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_length = 0;\n    let mut longest_postfix_index =\
    \ 0;\n    while longest_postfix_length < reversed_string.len() {\n        let\
    \ mut postfix_index = longest_postfix_index;\n        while postfix_index >= 0\
    \ && longest_postfix_length < reversed_string.len() {\n            let mut current_char\
    \ = reversed_string[postfix_index];\n            if current_char == current_char.chars().next().unwrap()\
    \ {\n                longest_postfix_length += 1;\n                postfix_index\
    \ -= 1;\n            } else {\n                break;\n            }\n       \
    \ }\n        if postfix_index >= 0 {\n            longest_postfix_index = postfix_index;\n\
    \        } else {\n            break;\n        }\n    }\n    let mut longest_postfix_length\
    \ = longest_postfix_length;\n    let mut longest_postfix_index = longest_postfix_index;\n\
    \    while longest_postfix_length < reversed_string.len() {\n        let mut postfix_index\
    \ = longest_postfix_index;\n        while postfix_index >= 0 && longest_postfix_length\
    \ < reversed_string.len() {\n            let mut current_char = reversed_string[postfix_index];\n\
    \            if current_char == current_char.chars().next().unwrap() {\n     \
    \           longest_postfix_length += 1;\n                postfix_index -= 1;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if postfix_index >= 0 {\n            longest_postfix_index = postfix_index;\n\
    \        } else {\n            break;\n        }\n    }\n    let mut reversed_string\
    \ = reversed_string[longest_postfix_index..];\n    let mut reversed_string = reversed_string.reverse();\n\
    \    reversed_string += &string[longest_postfix_index..];\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpul6x184g.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpul6x184g.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpul6x184g.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpul6x184g.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpul6x184g.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpul6x184g.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpul6x184g.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpul6x184g.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpul6x184g.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpul6x184g.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpul6x184g.rs:19:36\n\
    \   |\n19 |             let mut current_char = reversed_string[postfix_index];\n\
    \   |                              "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut longest\
    \ = 0;\n    while !string.is_empty() {\n        let mut current = string.chars().nth(longest).unwrap();\n\
    \        let mut next = current.clone();\n        while !next.is_empty() {\n \
    \           if next == &current[..] {\n                longest = longest + 1;\n\
    \                next = next.clone();\n            } else {\n                break;\n\
    \            }\n        }\n        string = &string[..longest];\n        reverse\
    \ = &reverse[..longest];\n    }\n    string + &reverse\n}\n\nfn main() {\n   \
    \ let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphyky8db6.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyky8db6.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphyky8db6.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphyky8db6.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphyky8db6.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphyky8db6.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphyky8db6.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphyky8db6.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphyky8db6.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphyky8db6.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `is_empty` found for type `char` in the current scope\n  --> /tmp/tmphyky8db6.rs:18:21\n\
    \   |\n18 |         while !next.is_empty() {\n   |                     ^^^^^^^^\
    \ method not foun"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_index = 0;\n\
    \    let mut longest_postfix_index = 0;\n    let mut longest_postfix_length =\
    \ 0;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix = \"\";\n    let mut longest_postfix_postfix_length\
    \ = 0;\n    let mut longest_postfix_postfix_start = -1;\n    let mut longest_postfix_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix_postfix = \"\";\n    let mut longest_postfix_postfix_postfix_length\
    \ = 0;\n    let mut longest_postfix_postfix_postfix_start = -1;\n    let mut longest_postfix_postfix_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix_postfix_postfix = \"\";\n    let\
    \ mut longest_postfix_postfix_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_postfix_postfix_end = -1;\n    let\
    \ mut longest_postfix_postfix_postfix_postfix_postfix = \"\";\n    let mut longest_postfix_postfix_postfix_postfix_length\
    \ = 0;\n    let mut longest_postfix_postfix_postfix_postfix_start = -1;\n    let\
    \ mut longest_postfix_postfix_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_postfix_postfix_length = 0;\n \
    \   let mut longest_postfix_postfix_postfix_postfix_start = -1;\n    let mut longest_postfix_postfix_postfix_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix_postfix_postfix_postfix = \"\";\n\
    \    let mut longest_postfix_postfix_postfix_postfix_length = 0;\n    let mut\
    \ longest_postfix_postfix_postfix_postfix_start = -1;\n    let mut longest_postfix_postfix_postfix_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix_postfix_postfix_postfix = \"\";\n\
    \    let mut longest_postfix_postfix_postfix_postfix_length = 0;\n    let mut\
    \ longest_postfix_postfix_postfix_postfix_start = -1;\n    let mut longest_postfix_postfix_postfix_postfix_end\
    \ = -1;\n    let mut longest_postfix_postfix_postfix_postfix_postfix = \"\";\n\
    \    let mut longest_\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5cm_zqb2.rs:47:21\n   |\n\
    47 |     let mut longest_\n   |                     ^ help: add `;` here\n48 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp5cm_zqb2.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5cm_zqb2.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5cm_zqb2.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5cm_zqb2.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5cm_zqb2.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed = string;\n    let mut prefix = string;\n    let mut suffix_len\
    \ = string.len();\n    let mut suffix_pos = 0;\n    while suffix_pos < suffix_len\
    \ {\n        let mut suffix_char = string[suffix_pos];\n        let mut suffix_char_pos\
    \ = 0;\n        while suffix_char_pos < suffix_len {\n            if suffix_char\
    \ == string[suffix_char_pos] {\n                suffix_char_pos += 1;\n      \
    \      } else {\n                break;\n            }\n        }\n        let\
    \ mut suffix_char_len = suffix_char_pos - suffix_pos;\n        if suffix_char_len\
    \ > 0 {\n            suffix_pos += suffix_char_len;\n            suffix_char =\
    \ string[suffix_pos];\n        }\n        let mut prefix_char_pos = 0;\n     \
    \   while prefix_char_pos < prefix.len() {\n            if prefix[prefix_char_pos]\
    \ == suffix[suffix_pos] {\n                prefix_char_pos += 1;\n           \
    \ } else {\n                break;\n            }\n        }\n        let mut\
    \ prefix_char_len = prefix_char_pos - suffix_pos;\n        if prefix_char_len\
    \ > 0 {\n            prefix.truncate(prefix_char_len);\n            prefix.append(&suffix[suffix_pos]);\n\
    \        }\n        reversed.truncate(suffix_pos);\n        reversed.append(&prefix[prefix_pos]);\n\
    \    }\n    reversed\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `suffix` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:33:43\n\
    \   |\n33 |             if prefix[prefix_char_pos] == suffix[suffix_pos] {\n \
    \  |                                           ^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `suffix` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:42:28\n\
    \   |\n42 |             prefix.append(&suffix[suffix_pos]);\n   |            \
    \                ^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `prefix_pos` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:45:33\n   |\n45 |    \
    \     reversed.append(&prefix[prefix_pos]);\n   |                            \
    \     ^^^^^^^^^^ help: a local variable with a similar name exists: `suffix_pos`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqoxw9i5c.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqoxw9i5c.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqoxw9i5c.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqoxw9i5c.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  -"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = 0;\n    let mut longest_palindrome_length = 0;\n    let\
    \ mut longest_palindrome_start = 0;\n    let mut longest_palindrome_end = 0;\n\
    \    let mut longest_palindrome_suffix = 0;\n    let mut longest_palindrome_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_start = 0;\n    let mut longest_palindrome_suffix_end\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix = 0;\n    let mut longest_palindrome_suffix_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_start = 0;\n    let mut longest_palindrome_suffix_suffix_end\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_length = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_start\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_end = 0;\n    let\
    \ mut longest_palindrome_suffix_suffix_suffix_suffix = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_start = 0;\n\
    \    let mut longest_palindrome_suffix_suffix_suffix_suffix_end = 0;\n    let\
    \ mut longest_palindrome_suffix_suffix_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_length = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_start = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_end = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_length = 0;\n \
    \   let mut longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_suffix_start\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_suffix_end\
    \ = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfw7upxpj.rs:43:1\n\
    \   |\n43 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfw7upxpj.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfw7upxpj.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfw7upxpj.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfw7upxpj.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfw7upxpj.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfw7upxpj.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfw7upxpj.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfw7upxpj.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfw7upxpj.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfw7upxpj.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_index = -1;\n    let mut longest_postfix_length =\
    \ -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut lon\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpuf3_bp9_.rs:63:16\n   |\n\
    63 |     let mut lon\n   |                ^ help: add `;` here\n64 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpuf3_bp9_.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuf3_bp9_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuf3_bp9_.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuf3_bp9_.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuf3_bp9_.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_length = 0;\n    let mut longest_postfix_index =\
    \ 0;\n    while longest_postfix_length < reversed_string.len() {\n        let\
    \ mut postfix_index = longest_postfix_index;\n        while postfix_index >= 0\
    \ && longest_postfix_length < reversed_string.len() {\n            let c = reversed_string[postfix_index];\n\
    \            if c != longest_postfix[postfix_index] {\n                break;\n\
    \            }\n            postfix_index -= 1;\n            longest_postfix_length\
    \ += 1;\n        }\n        if postfix_index >= 0 {\n            longest_postfix_index\
    \ += 1;\n        }\n        if longest_postfix_index == reversed_string.len()\
    \ {\n            break;\n        }\n        longest_postfix_length = longest_postfix_index\
    \ - longest_postfix_length;\n        longest_postfix = &reversed_string[longest_postfix_index..];\n\
    \    }\n    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbtpgpqbr.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbtpgpqbr.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbtpgpqbr.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbtpgpqbr.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbtpgpqbr.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpbtpgpqbr.rs:19:21\n\
    \   |\n19 |             let c = reversed_string[postfix_index];\n   |        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len();\n        let mut\
    \ char = string[string.len() - 1];\n\n        while index > 0 {\n            let\
    \ mut char = string[index - 1];\n            reversed_string.insert(0, char);\n\
    \            index -= 1;\n        }\n\n        reversed_string.insert(0, char);\n\
    \        string = &string[1..];\n    }\n\n    reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp6b04aiv8.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6b04aiv8.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6b04aiv8.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6b04aiv8.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6b04aiv8.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6b04aiv8.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6b04aiv8.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6b04aiv8.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6b04aiv8.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6b04aiv8.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp6b04aiv8.rs:17:24\n   |\n\
    17 |         let mut char = string[string.len() - 1];\n   |                  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^ `St"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut index\
    \ = 0;\n    while !string.is_empty() {\n        let mut char = string[index];\n\
    \        let mut is_palindrome = true;\n        while !is_palindrome {\n     \
    \       if char != string[string.len() - index - 1] {\n                is_palindrome\
    \ = false;\n            } else {\n                index += 1;\n            }\n\
    \        }\n        reverse.push_str(&char);\n        string.push_str(&char);\n\
    \    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoei4gteg.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoei4gteg.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoei4gteg.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoei4gteg.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoei4gteg.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoei4gteg.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoei4gteg.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoei4gteg.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoei4gteg.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoei4gteg.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpoei4gteg.rs:16:24\n\
    \   |\n16 |         let mut char = string[index];\n   |                      \
    \  ^^^^^^^^^^^^^ `String` cannot be in"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for c in string.chars() {\n        if c.is_whitespace() {\n            continue;\n\
    \        }\n        let postfix_length = string.char_indices()\n            .filter(|&(_,\
    \ index)| index == 0)\n            .map(|(_, index)| index)\n            .max().unwrap();\n\
    \        if postfix_length > longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n        }\n    }\n    let mut postfix_length = longest_postfix_length;\n\
    \    let mut postfix_chars = Vec::new();\n    let mut postfix_chars_iter = string.char_indices().filter(|&(_,\
    \ index)| index == 0).collect::<Vec<_>>();\n    let mut postfix_chars_reverse\
    \ = Vec::new();\n    let mut postfix_chars_reverse_iter = string.char_indices().filter(|&(_,\
    \ index)| index == 0).rev().collect::<Vec<_>>();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = postfix_chars_iter.clone().rev();\n    let mut postfix_chars_reverse_iter\
    \ = \n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp4tauannr.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4tauannr.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4tauannr.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4tauannr.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4tauannr.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4tauannr.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4tauannr.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4tauannr.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4tauannr.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4tauannr.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4tauannr.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4tauannr.rs:19:44\n\
    \   |\n19 |             .filter(|&(_, "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_palindrome = string;\n\
    \    let mut suffix_length = 0;\n    let mut prefix_length = 0;\n    while !palindrome.is_empty()\
    \ {\n        let mut suffix_length = palindrome.len();\n        while suffix_length\
    \ >= 0 {\n            let mut prefix_length = palindrome.len();\n            while\
    \ prefix_length >= 0 {\n                let mut index = suffix_length - prefix_length;\n\
    \                while index >= 0 {\n                    let mut char = &palindrome[index];\n\
    \                    palindrome[index] = char;\n                    reversed_palindrome[prefix_length\
    \ + index] = char;\n                    index -= 1;\n                }\n     \
    \           prefix_length -= 1;\n            }\n            suffix_length -= 1;\n\
    \        }\n        palindrome.pop();\n        reversed_palindrome.pop();\n  \
    \  }\n    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5q2jotzi.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5q2jotzi.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5q2jotzi.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5q2jotzi.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5q2jotzi.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5q2jotzi.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5q2jotzi.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5q2jotzi.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5q2jotzi.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5q2jotzi.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp5q2jotzi.rs:23:37\n   |\n\
    23 |                     let mut char = &palindrome[index];\n   |            \
    \                         ^^^^^^^^^"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    while !reverse.starts_with(prefix) {\n        prefix.reverse();\n\
    \        suffix.reverse();\n    }\n    prefix.append(&suffix);\n    prefix\n}\n\
    \nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpieo490cv.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpieo490cv.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpieo490cv.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpieo490cv.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpieo490cv.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpieo490cv.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpieo490cv.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpieo490cv.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpieo490cv.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpieo490cv.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpieo490cv.rs:15:32\n\
    \   |\n15 |     while !reverse.starts_with(prefix) {\n   |                   \
    \             ^^^^^^\n   |            "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n \
    \       }\n        reversed_string.push((&string[i..j]).to_lowercase());\n   \
    \     i = j;\n    }\n    string.push((&reversed_string[i..]).to_lowercase());\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9cdmz6ij.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9cdmz6ij.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9cdmz6ij.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9cdmz6ij.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9cdmz6ij.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp9cdmz6ij.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n     \
    \   }\n        reverse.push_str(&string[i..j]);\n        i = j;\n    }\n    reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz45t9f05.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz45t9f05.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz45t9f05.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz45t9f05.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz45t9f05.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz45t9f05.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz45t9f05.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz45t9f05.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz45t9f05.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz45t9f05.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpz45t9f05.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = String::from(\"\");\n    let mut prefix = String::from(\"\
    \");\n    let mut suffix = String::from(\"\");\n    let mut longest_postfix =\
    \ String::from(\"\");\n    let mut longest_postfix_len = String::from(0);\n  \
    \  let mut longest_postfix_postfix = String::from(\"\");\n    let mut longest_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix = String::from(\"\
    \");\n    let mut longest_postfix_postfix_postfix_len = String::from(0);\n   \
    \ let mut longest_postfix_postfix_postfix_postfix = String::from(\"\");\n    let\
    \ mut longest_postfix_postfix_postfix_postfix_len = String::from(0);\n    let\
    \ mut longest_postfix_postfix_postfix_postfix_postfix = String::from(\"\");\n\
    \    let mut longest_postfix_postfix_postfix_postfix_postfix_len = String::from(0);\n\
    \    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix = String::from(\"\
    \");\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = String::from(\"\");\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = String::from(\"\");\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = String::from(\"\");\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = String::from(0);\n    let mut longest_\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzf0845hj.rs:36:21\n   |\n\
    36 |     let mut longest_\n   |                     ^ help: add `;` here\n37 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpzf0845hj.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzf0845hj.rs:41:25\n   |\n41 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzf0845hj.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzf0845hj.rs:42:25\n   |\n42 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzf0845hj.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzf0845hj.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzf0845hj.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzf0845hj.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzf0845hj.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzf0845hj.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0277]: the trait bound `Strin"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ string.len() > 0 {\n        let mut current_postfix_index = 0;\n        let\
    \ mut current_postfix_length = 0;\n        while current_postfix_index < longest_postfix_length\
    \ {\n            let mut current_postfix_char = string[current_postfix_index];\n\
    \            while current_postfix_char == string[current_postfix_index] {\n \
    \               current_postfix_index += 1;\n                current_postfix_length\
    \ += 1;\n            }\n            if current_postfix_index == longest_postfix_index\
    \ {\n                longest_postfix_index += 1;\n                longest_postfix_length\
    \ += 1;\n            }\n            current_postfix_char = string[current_postfix_index];\n\
    \        }\n        let mut current_postfix_char = string[current_postfix_index];\n\
    \        while current_postfix_char == string[current_postfix_index] {\n     \
    \       current_postfix_index += 1;\n            current_postfix_length += 1;\n\
    \        }\n        reversed_string += &string[longest_postfix_index..current_postfix_index];\n\
    \        string = &string[current_postfix_index..];\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt99_yu5y.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt99_yu5y.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt99_yu5y.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt99_yu5y.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt99_yu5y.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt99_yu5y.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt99_yu5y.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt99_yu5y.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt99_yu5y.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt99_yu5y.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpt99_yu5y.rs:20:44\n\
    \   |\n20 |             let mut current_postfix_char = string[current_postfix_index];\n\
    \   |                       "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n     \
    \   }\n        reverse = reverse.insert(j, string[i]);\n        i += 1;\n    }\n\
    \    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkplinmxl.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkplinmxl.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkplinmxl.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkplinmxl.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkplinmxl.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkplinmxl.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkplinmxl.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkplinmxl.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkplinmxl.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkplinmxl.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpkplinmxl.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_len_index = 0;\n    let mut longest_postfix_index2\
    \ = 0;\n    let mut longest_postfix_len_index2 = 0;\n    let mut longest_postfix_index3\
    \ = 0;\n    let mut longest_postfix_len_index3 = 0;\n    while string.len() >\
    \ 0 {\n        let mut postfix_len = string.len();\n        let mut postfix_index\
    \ = 0;\n        while postfix_len > 0 {\n            let mut postfix_len2 = postfix_len;\n\
    \            let mut postfix_index2 = 0;\n            while postfix_len2 > 0 {\n\
    \                let mut postfix_len3 = postfix_len2;\n                let mut\
    \ postfix_index3 = 0;\n                while postfix_len3 > 0 {\n            \
    \        let mut postfix_len4 = postfix_len3;\n                    let mut postfix_index4\
    \ = 0;\n                    while postfix_len4 > 0 {\n                       \
    \ let mut postfix_len5 = postfix_len4;\n                        let mut postfix_index5\
    \ = 0;\n                        while postfix_len5 > 0 {\n                   \
    \         let mut postfix_len6 = postfix_len5;\n                            let\
    \ mut postfix_index6 = 0;\n                            while postfix_len6 > 0\
    \ {\n                                let mut postfix_len7 = postfix_len6;\n  \
    \                              let mut postfix_index7 = 0;\n                 \
    \               while postfix_len7 > 0 {\n                                   \
    \ let mut postfix_len8 = postfix_len7;\n                                    let\
    \ mut postfix_index8 = 0;\n                                    while postfix_len8\
    \ > 0 {\n                                        let mut postfix_len9 = postfix_len8;\n\
    \                                        let mut postfix_index9 = 0;\n       \
    \                                 while postfix_len9 > 0 {\n                 \
    \                           let mut postfix_len10 = postfix_len9;\n          \
    \                                  let mut postfix_index10 = 0;\n            \
    \                                while postfix_len10 > 0 {\n                 \
    \                               let mut postfix_len11 = postfix_len10;\n     \
    \                                           let mut postfix_index11 = 0;\n   \
    \                                             while postfix_len11 > 0 {\n    \
    \                                                let mut postfix_len12 = postfix_len11;\n\
    \                                                    let mut postfix_index12 =\
    \ 0;\n                                                    while postfix_len12\
    \ > 0 {\n                                                        let mut postfix_len13\
    \ = postfix_len12;\n                                                        let\
    \ mut postfix_index13 = 0;\n                                                 \
    \       while postfix_len13 > 0 {\n                                          \
    \                  let mut postfix_len14\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4dza98rs.rs:72:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n22 |     while string.len()\
    \ > 0 {\n   |                            - unclosed delimiter\n...\n25 |     \
    \    while postfix_len > 0 {\n   |                               - unclosed delimiter\n\
    ...\n28 |             while postfix_len2 > 0 {\n   |                         \
    \           - unclosed delimiter\n...\n31 |                 while postfix_len3\
    \ > 0 {\n   |                                        - unclosed delimiter\n...\n\
    34 |                     while postfix_len4 > 0 {\n   |                      \
    \                      - unclosed delimiter\n...\n37 |                       \
    \  while postfix_len5 > 0 {\n   |                                            \
    \    - unclosed delimiter\n...\n40 |                             while postfix_len6\
    \ > 0 {\n   |                                                    - unclosed delimiter\n\
    ...\n43 |                                 while postfix_len7 > 0 {\n   |     \
    \                                                   - unclosed delimiter\n...\n\
    46 |                                     while postfix_len8 > 0 {\n   |      \
    \                                                      - unclosed delimiter\n\
    ...\n49 |                                         while postfix_len9 > 0 {\n \
    \  |                                                                - unclosed\
    \ delimiter\n...\n52 |                                             while postfix_len10\
    \ > 0 {\n   |                                                                \
    \     - unclosed delimiter\n...\n55 |                                        \
    \         while postfix_len11 > 0 {\n   |                                    \
    \                                     - unclosed delimiter\n...\n58 |        \
    \                                             while postfix_len12 > 0 {\n   |\
    \                                                                            \
    \ - unclosed delimiter\n...\n61 |                      "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n\n    while !string.is_empty()\
    \ {\n        let mut postfix = string;\n        let mut postfix_len = 0;\n\n \
    \       while !postfix.is_empty() {\n            if postfix.chars().next().unwrap()\
    \ != postfix.chars().last().unwrap() {\n                break;\n            }\n\
    \            postfix_len += 1;\n            postfix = postfix.chars().nth(postfix_len).unwrap();\n\
    \        }\n\n        if postfix_len > longest_postfix_len {\n            longest_postfix\
    \ = postfix.to_string();\n            longest_postfix_len = postfix_len;\n   \
    \     }\n\n        string = string.chars().nth(longest_postfix_len).unwrap();\n\
    \        reversed_string += &string[longest_postfix_len..];\n    }\n\n    reversed_string\
    \ += longest_postfix;\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv3w5econ.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv3w5econ.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv3w5econ.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv3w5econ.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv3w5econ.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv3w5econ.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpv3w5econ.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpv3w5econ.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpv3w5econ.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv3w5econ.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv3w5econ.rs:26:23\n   |\n26 |             postfix = postfix.chars().nth(postfix_len).unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix_length = string.len();\n        while postfix_length >= longest_postfix_length\
    \ {\n            let mut postfix = &string[..postfix_length];\n            let\
    \ mut reversed_postfix = &reversed_string[..postfix_length];\n            reversed_postfix.reverse();\n\
    \            if postfix != reversed_postfix {\n                longest_postfix_length\
    \ = postfix_length;\n                string = &string[postfix_length..];\n   \
    \             reversed_string = &reversed_string[postfix_length..];\n        \
    \    }\n        }\n        string = &string[1..];\n        reversed_string = &reversed_string[1..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp988y1k_c.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp988y1k_c.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp988y1k_c.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp988y1k_c.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for reference `&str` in the current scope\n  --> /tmp/tmp988y1k_c.rs:20:30\n\
    \   |\n20 |             reversed_postfix.reverse();\n   |                    \
    \          ^^^^"
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = 0;\n    let mut longest_palindrome_length = 0;\n    let\
    \ mut longest_palindrome_length_index = 0;\n    let mut longest_palindrome_length_index2\
    \ = 0;\n    let mut longest_palindrome_length_index3 = 0;\n    let mut longest_palindrome_length_index4\
    \ = 0;\n    let mut longest_palindrome_length_index5 = 0;\n    let mut longest_palindrome_length_index6\
    \ = 0;\n    let mut longest_palindrome_length_index7 = 0;\n    let mut longest_palindrome_length_index8\
    \ = 0;\n    let mut longest_palindrome_length_index9 = 0;\n    let mut longest_palindrome_length_index10\
    \ = 0;\n    let mut longest_palindrome_length_index11 = 0;\n    let mut longest_palindrome_length_index12\
    \ = 0;\n    let mut longest_palindrome_length_index13 = 0;\n    let mut longest_palindrome_length_index14\
    \ = 0;\n    let mut longest_palindrome_length_index15 = 0;\n    let mut longest_palindrome_length_index16\
    \ = 0;\n    let mut longest_palindrome_length_index17 = 0;\n    let mut longest_palindrome_length_index18\
    \ = 0;\n    let mut longest_palindrome_length_index19 = 0;\n    let mut longest_palindrome_length_index20\
    \ = 0;\n    let mut longest_palindrome_length_index21 = 0;\n    let mut longest_palindrome_length_index22\
    \ = 0;\n    let mut longest_palindrome_length_index23 = 0;\n    let mut longest_palindrome_length_index24\
    \ = 0;\n    let mut longest_palindrome_length_index25 = 0;\n    let mut longest_palindrome_length_index26\
    \ = 0;\n    let mut longest_palindrome_length_index27 = 0;\n    let mut longest_palindrome_length_index28\
    \ = 0;\n    let mut longest_palindrome_length_index29 = 0;\n    let mut longest_palindrome_length_index30\
    \ = 0;\n    let mut longest_palindrome_length_index31 = 0;\n    let mut longest_palindrome_length_index32\
    \ = 0;\n    let mut longest_palindrome_length_index33 = 0;\n    let mut longest_palindrome_length_index34\
    \ = 0;\n    let mut lon\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpm8qq5obx.rs:50:16\n   |\n\
    50 |     let mut lon\n   |                ^ help: add `;` here\n51 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpm8qq5obx.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm8qq5obx.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm8qq5obx.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm8qq5obx.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm8qq5obx.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm8qq5obx.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm8qq5obx.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm8qq5obx.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm8qq5obx.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm8qq5obx.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        let mut suffix_length = 0;\n        while\
    \ !reversed_string.starts_with(string[prefix_length..]) {\n            suffix_length\
    \ += 1;\n        }\n        reversed_string = reversed_string[..suffix_length];\n\
    \        prefix_length += suffix_length;\n    }\n    reversed_string\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdeamn25m.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdeamn25m.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdeamn25m.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdeamn25m.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdeamn25m.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdeamn25m.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdeamn25m.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdeamn25m.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdeamn25m.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdeamn25m.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the size\
    \ for values of type `str` cannot be known at compilation time\n  --> /tmp/tmpdeamn25m.rs:16:44\n\
    \   |\n16 |         while !reversed_string.starts_with(string[prefix_length..])\
    \ {\n   |        "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_string = string;\n   \
    \ let mut suffix_length = 0;\n    while palindrome.len() > 0 {\n        let mut\
    \ suffix_length = palindrome.len();\n        while suffix_length > 0 {\n     \
    \       let mut index = suffix_length - 1;\n            while index >= 0 {\n \
    \               let c = palindrome[index];\n                reversed_string.push(c);\n\
    \                index -= 1;\n            }\n            suffix_length -= 1;\n\
    \        }\n        palindrome = reversed_string;\n        reversed_string = string;\n\
    \    }\n    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyl3985i2.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyl3985i2.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyl3985i2.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyl3985i2.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyl3985i2.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyl3985i2.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyl3985i2.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyl3985i2.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyl3985i2.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyl3985i2.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpyl3985i2.rs:20:25\n   |\n\
    20 |                 let c = palindrome[index];\n   |                        \
    \ ^^^^^^^^^^^^^^^^^ `String` cannot"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ let Some(index) = string.rfind('a') {\n        let mut postfix_length = index;\n\
    \        while let Some(index) = string.rfind('a', index + 1) {\n            postfix_length\
    \ = std::cmp::max(postfix_length, index);\n        }\n        if postfix_length\
    \ > longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n        string = &string[index..];\n\
    \    }\n    string = &string[longest_postfix_index..];\n    while let Some(index)\
    \ = string.rfind('a') {\n        let mut postfix_length = index;\n        while\
    \ let Some(index) = string.rfind('a', index + 1) {\n            postfix_length\
    \ = std::cmp::max(postfix_length, index);\n        }\n        if postfix_length\
    \ > longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n        string = &string[index..];\n\
    \    }\n    string = &string[longest_postfix_index..];\n    while let Some(index)\
    \ = string.rfind('a') {\n        let mut postfix_length = index;\n        while\
    \ let Some(index) = string.rfind('a', index + 1) {\n            postfix_length\
    \ = std::cmp::max(postfix_length, index);\n        }\n        if postfix_length\
    \ > longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n        string = &string[index..];\n\
    \    }\n    string = &string[longest_postfix_index..];\n    while let Some(index)\
    \ = string.rfind('a') {\n        let mut postfix_length = index;\n        while\
    \ let Some(index) = string.rfind('a', index + 1) {\n            postfix_length\
    \ = std::cmp::max(postfix_length, index);\n        }\n        if postfix_length\
    \ > longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            longest_postfix_index = index;\n        }\n        string = &string[index..];\n\
    \    }\n    string = &string[longest_postfix_index..];\n    while let Some(index)\
    \ = string.rfind('a') {\n        let mut postfix_length = index;\n        while\
    \ let Some(index) = string.rfind('a', index + 1) {\n            postfix_length\
    \ = std::cmp::max(postfix_length, index);\n        }\n        if postfix_length\
    \ > longest_postfix_length {\n            longest_postfix_length = postfix_length;\n\
    \            \n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmps583xxfy.rs:81:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n64 |     while let\
    \ Some(index) = string.rfind('a') {\n   |                                    \
    \           - unclosed delimiter\n...\n69 |         if postfix_length > longest_postfix_length\
    \ {\n   |                                                    - this delimiter\
    \ might not be properly closed...\n...\n72 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n81 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps583xxfy.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps583xxfy.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps583xxfy.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps583xxfy.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps583xxfy.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps583xxfy.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps583xxfy.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps583xxfy.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = 1;\n    while !string.is_empty() {\n        let mut postfix\
    \ = string;\n        let mut i = 0;\n        while i < longest_postfix {\n   \
    \         if postfix[i] != string[longest_postfix - i - 1] {\n               \
    \ break;\n            }\n            i += 1;\n        }\n        longest_postfix\
    \ = i;\n        reversed_string += &string[longest_postfix - 1..];\n        string\
    \ = &string[longest_postfix..];\n    }\n    reversed_string += &string[longest_postfix\
    \ - 1..];\n    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfnw2gn5o.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfnw2gn5o.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfnw2gn5o.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfnw2gn5o.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfnw2gn5o.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpfnw2gn5o.rs:19:16\n\
    \   |\n19 |             if postfix[i] != string[longest_postfix - i - 1] {\n \
    \  |                ^^^^^^^^^^ `String"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpdbij9e8w.rs:63:21\n   |\n\
    63 |     let mut longest_\n   |                     ^ help: add `;` here\n64 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpdbij9e8w.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdbij9e8w.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdbij9e8w.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdbij9e8w.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdbij9e8w.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdbij9e8w.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdbij9e8w.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdbij9e8w.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdbij9e8w.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdbij9e8w.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n     \
    \   }\n        if j == i {\n            break;\n        }\n        reverse.push_str(&string[i..j]);\n\
    \        i = j;\n    }\n    reverse.push_str(&string[i..]);\n    reverse\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprfxjt59m.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfxjt59m.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprfxjt59m.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprfxjt59m.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprfxjt59m.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprfxjt59m.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprfxjt59m.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprfxjt59m.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprfxjt59m.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprfxjt59m.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmprfxjt59m.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.starts_with(string) {\n \
    \       reversed_string = reversed_string[..prefix_length];\n        prefix_length\
    \ += 1;\n    }\n    while !reversed_string.ends_with(string) {\n        reversed_string\
    \ = reversed_string[..suffix_length];\n        suffix_length += 1;\n    }\n  \
    \  let mut reversed_string = reversed_string[..suffix_length];\n    let mut prefix_length\
    \ = 0;\n    while !reversed_string.starts_with(string) {\n        reversed_string\
    \ = reversed_string[..prefix_length];\n        prefix_length += 1;\n    }\n  \
    \  reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_c1r4nlu.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_c1r4nlu.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_c1r4nlu.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_c1r4nlu.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_c1r4nlu.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmp_c1r4nlu.rs:15:40\n\
    \   |\n15 |     while !reversed_string.starts_with(string) {\n   |           \
    \                             ^^^^^^\n"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n        let\
    \ mut char = string[index];\n\n        while index >= 0 {\n            reversed_string.insert(0,\
    \ char);\n            index -= 1;\n            char = string[index];\n       \
    \ }\n        string = &string[..];\n    }\n\n    string\n}\n\nfn main() {\n  \
    \  let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfc19amky.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfc19amky.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfc19amky.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfc19amky.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfc19amky.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfc19amky.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfc19amky.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfc19amky.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfc19amky.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfc19amky.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpfc19amky.rs:17:24\n   |\n\
    17 |         let mut char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n     \
    \   }\n        if j == i {\n            break;\n        }\n        reverse = reverse.chars().collect::<String>().rev().collect::<String>().to_owned();\n\
    \        string = &string[i..j];\n        i += j - i;\n    }\n    string + reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppxtye760.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppxtye760.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppxtye760.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppxtye760.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppxtye760.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppxtye760.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppxtye760.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppxtye760.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppxtye760.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppxtye760.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppxtye760.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed = string;\n    let mut longest = 0;\n    while !reversed.is_empty()\
    \ {\n        let mut current = reversed.chars().nth(longest).unwrap();\n     \
    \   reversed = reversed.chars().skip(longest).take(longest).collect();\n     \
    \   if current == current {\n            longest = longest + 1;\n        } else\
    \ {\n            break;\n        }\n    }\n    longest\n        .to_string()\n\
    \        .chars()\n        .skip(longest)\n        .take(longest)\n        .collect::<String>()\n\
    \        .reverse()\n        .join(\"\")\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphrpnb83v.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphrpnb83v.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphrpnb83v.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphrpnb83v.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphrpnb83v.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphrpnb83v.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphrpnb83v.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphrpnb83v.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphrpnb83v.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphrpnb83v.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmphrpnb83v.rs:29:10\n\
    \   |\n29 |         .reverse()\n   |          ^^^^^^^ help: there is an associated\
    \ function "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3\
    \ = 0;\n    let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5\
    \ = 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpoks0jrrg.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoks0jrrg.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpoks0jrrg.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpoks0jrrg.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpoks0jrrg.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpoks0jrrg.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpoks0jrrg.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpoks0jrrg.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpoks0jrrg.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpoks0jrrg.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpoks0jrrg.rs:11:39\n   |\n11 | fn make_palindrome(string:\
    \ String) -> String {\n   |    ---------------                    ^^^^^^ expected\
    \ struct `String`, found `()`\n "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = \n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp771yal_n.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp771yal_n.rs:68:17\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:68:25\n \
    \  |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp771yal_n.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp771yal_n.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp771yal_n.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp771yal_n.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp771yal_n.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp771yal_n.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_string = \"\";\n    let mut longest_postfix_index = 0;\n\
    \    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_string = \"\";\n    let mut longest_postfix_index\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxochzuyf.rs:63:34\n   |\n\
    63 |     let mut longest_postfix_index\n   |                                 \
    \ ^ help: add `;` here\n64 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxochzuyf.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxochzuyf.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxochzuyf.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxochzuyf.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxochzuyf.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxochzuyf.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxochzuyf.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxochzuyf.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxochzuyf.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxochzuyf.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E030"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut palindrome = string;\n    let mut\
    \ prefix_len = 0;\n    let mut suffix_len = 0;\n    while !reverse.starts_with(palindrome)\
    \ {\n        prefix_len += 1;\n        palindrome += &reverse[prefix_len..];\n\
    \    }\n    while !palindrome.ends_with(reverse) {\n        suffix_len += 1;\n\
    \        reverse += &palindrome[..suffix_len];\n    }\n    reverse += &palindrome[..suffix_len];\n\
    \    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq8_v06m9.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq8_v06m9.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq8_v06m9.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq8_v06m9.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq8_v06m9.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq8_v06m9.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq8_v06m9.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq8_v06m9.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq8_v06m9.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq8_v06m9.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpq8_v06m9.rs:16:32\n\
    \   |\n16 |     while !reverse.starts_with(palindrome) {\n   |               \
    \                 ^^^^^^^^^^\n   |    "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_palindrome_len = -1;\n    let mut longest_palindrome = String::from(\"\
    \");\n    for pos in string.char_indices() {\n        let mut current_char = String::from(\"\
    \");\n        let mut current_char_len = 0;\n        let mut current_char_pos\
    \ = 0;\n        for (i, c) in string.char_indices() {\n            if i == pos\
    \ {\n                current_char.push(c);\n                current_char_len +=\
    \ 1;\n            } else {\n                if current_char_len > longest_palindrome_len\
    \ {\n                    longest_palindrome_len = current_char_len;\n        \
    \            longest_palindrome = current_char;\n                }\n         \
    \       current_char.push(c);\n                current_char_len += 1;\n      \
    \      }\n        }\n        if current_char_len > longest_palindrome_len {\n\
    \            longest_palindrome_len = current_char_len;\n            longest_palindrome\
    \ = current_char;\n        }\n    }\n    reversed_string.push_str(&longest_palindrome);\n\
    \    reversed_string.push_str(&longest_palindrome.reverse());\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2x4d6v48.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2x4d6v48.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2x4d6v48.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2x4d6v48.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2x4d6v48.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2x4d6v48.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2x4d6v48.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2x4d6v48.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2x4d6v48.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2x4d6v48.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2x4d6v48.rs:21:21\n   |\n21 |             if i == pos {\n\
    \   |                     ^^^ expected `usize`, found tuple\n   |\n   = note:\
    \ expected type `usize`\n            "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_suffix = 0;\n    let\
    \ mut reverse_prefix = 0;\n    while reverse_prefix < reversed_string.len() {\n\
    \        let mut reverse_prefix_char = reversed_string[reverse_prefix];\n    \
    \    let mut reverse_suffix_char = reverse_prefix_char;\n        while reverse_suffix\
    \ < reversed_string.len() {\n            let mut reverse_suffix_char = reversed_string[reverse_suffix];\n\
    \            if reverse_suffix_char != reverse_prefix_char {\n               \
    \ break;\n            }\n            reverse_suffix += 1;\n        }\n       \
    \ reverse_prefix += 1;\n        reversed_string = reversed_string[..reverse_prefix]\
    \ + &reverse_prefix_char + &reversed_string[reverse_suffix..];\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkqs8ktdq.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkqs8ktdq.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkqs8ktdq.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkqs8ktdq.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkqs8ktdq.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpkqs8ktdq.rs:16:39\n   |\n\
    16 |         let mut reverse_prefix_char = reversed_string[reverse_prefix];\n\
    \   |                              "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ !string.is_empty() {\n        let mut current_postfix_length = 0;\n        let\
    \ mut current_postfix_index = 0;\n        while current_postfix_index < longest_postfix_length\
    \ {\n            let mut current_postfix_char = string[current_postfix_index];\n\
    \            while current_postfix_char != string[current_postfix_index] {\n \
    \               current_postfix_char = string[current_postfix_index];\n      \
    \          current_postfix_index += 1;\n            }\n            current_postfix_length\
    \ += 1;\n        }\n        if current_postfix_index == longest_postfix_length\
    \ {\n            longest_postfix_index += 1;\n        }\n        if current_postfix_length\
    \ >= longest_postfix_length {\n            longest_postfix_length = current_postfix_length;\n\
    \            longest_postfix_index = current_postfix_index;\n        }\n     \
    \   string = &string[longest_postfix_index..];\n        reversed_string += &string[longest_postfix_length..];\n\
    \    }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp980q_hbl.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp980q_hbl.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp980q_hbl.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp980q_hbl.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp980q_hbl.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp980q_hbl.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp980q_hbl.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp980q_hbl.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp980q_hbl.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp980q_hbl.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp980q_hbl.rs:20:44\n\
    \   |\n20 |             let mut current_postfix_char = string[current_postfix_index];\n\
    \   |                       "
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    let mut longest_postfix = string;\n    let mut longest_postfix_len\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphtj6m6ae.rs:65:1\n\
    \   |\n65 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphtj6m6ae.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphtj6m6ae.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphtj6m6ae.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphtj6m6ae.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphtj6m6ae.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphtj6m6ae.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_length_index = 0;\n\
    \    let mut longest_postfix_length_palindrome = 0;\n    let mut longest_postfix_length_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix = 0;\n    let mut longest_postfix_length_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_palindrome = 0;\n    let mut\
    \ longest_postfix_length_suffix_palindrome_index = 0;\n    let mut longest_postfix_length_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_index = 0;\n    let mut\
    \ longest_postfix_length_suffix_suffix_palindrome = 0;\n    let mut longest_postfix_length_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix = 0;\n    let\
    \ mut longest_postfix_length_suffix_suffix_suffix_index = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix_index = 0;\n \
    \   let mut longest_postfix_length_suffix_suffix_suffix_suffix_palindrome = 0;\n\
    \    let mut longest_postfix_length_suffix_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_palindrome_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_index\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffix_suffix_suffix_suffix_suffix_suffix_palindrome\
    \ = 0;\n    let mut longest_postfix_length_suffix_suffi\n}\n\nfn main() {\n  \
    \  let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvm1zeep8.rs:41:48\n   |\n\
    41 |     let mut longest_postfix_length_suffix_suffi\n   |                   \
    \                             ^ help: add `;` here\n42 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvm1zeep8.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm1zeep8.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvm1zeep8.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvm1zeep8.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvm1zeep8.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvm1zeep8.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvm1zeep8.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvm1zeep8.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvm1zeep8.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm1zeep8.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not fou"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    let mut longest_postfix = prefix.clone();\n    let mut longest_postfix_len\
    \ = longest_postfix.len();\n    while longest_postfix_len > 0 {\n        let mut\
    \ postfix = longest_postfix.clone();\n        let mut postfix_len = postfix.len();\n\
    \        while postfix_len > 0 {\n            let mut postfix_char = postfix.chars().next().unwrap();\n\
    \            while postfix_char == longest_postfix.chars().next().unwrap() {\n\
    \                postfix_char = postfix.chars().next().unwrap();\n           \
    \     postfix_len -= 1;\n            }\n            postfix.push_front(postfix_char);\n\
    \            postfix_len -= 1;\n        }\n        if postfix.is_palindrome()\
    \ {\n            longest_postfix = postfix;\n            longest_postfix_len =\
    \ postfix_len;\n        }\n    }\n    reversed.push_str(longest_postfix);\n  \
    \  reversed\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp12yhg13f.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp12yhg13f.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp12yhg13f.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp12yhg13f.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp12yhg13f.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp12yhg13f.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp12yhg13f.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp12yhg13f.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp12yhg13f.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp12yhg13f.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `push_front` found for struct `String` in the current scope\n  --> /tmp/tmp12yhg13f.rs:26:21\n\
    \   |\n26 |             postfix.push_front(postfix_char);\n   |              \
    \       ^^^^^"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_index\
    \ = 0;\n    let mut longest_postfix_len_index = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let mut longest_postfix_len_index_start\
    \ = 0;\n    let mut longest_postfix_len_index_end = 0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpq50oxs_b.rs:57:1\n  \
    \ |\n57 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpq50oxs_b.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpq50oxs_b.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq50oxs_b.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq50oxs_b.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq50oxs_b.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq50oxs_b.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq50oxs_b.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq50oxs_b.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq50oxs_b.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq50oxs_b.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = string.len();\n\
    \    while reversed_string_len > 0 {\n        let mut reversed_string_start =\
    \ reversed_string.len() - 1;\n        while reversed_string_start >= 0 && reversed_string[reversed_string_start]\
    \ != string[reversed_string_start] {\n            reversed_string_start -= 1;\n\
    \        }\n        reversed_string_len = reversed_string_start + 1;\n       \
    \ reversed_string = &string[reversed_string_start..];\n    }\n    string\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9q4zujem.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9q4zujem.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9q4zujem.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9q4zujem.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9q4zujem.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9q4zujem.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9q4zujem.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9q4zujem.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9q4zujem.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9q4zujem.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp9q4zujem.rs:16:45\n   |\n\
    16 |         while reversed_string_start >= 0 && reversed_string[reversed_string_start]\
    \ != string[reversed_str"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j <\
    \ string.len() && string[j] != string[i - j] {\n            j = j + 1;\n     \
    \   }\n        reverse = reverse.insert(j, string[i]);\n        i = j;\n    }\n\
    \    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpijiwdgjc.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpijiwdgjc.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpijiwdgjc.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpijiwdgjc.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpijiwdgjc.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpijiwdgjc.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpijiwdgjc.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpijiwdgjc.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpijiwdgjc.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpijiwdgjc.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpijiwdgjc.rs:17:35\n   |\n\
    17 |         while j < string.len() && string[j] != string[i - j] {\n   |    \
    \                               ^^^"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut prefix_length = 0;\n    let mut suffix_length = 0;\n\n    while !reversed_string.is_empty()\
    \ {\n        let mut current_char = reversed_string[0];\n        reversed_string\
    \ = reversed_string.chars().skip_while(|c| !c.is_ascii()).collect();\n       \
    \ let mut is_palindrome = true;\n\n        // Find longest postfix of reversed\
    \ string that is a palindrome.\n        while !reversed_string.is_empty() {\n\
    \            let mut current_char = reversed_string[0];\n            reversed_string\
    \ = reversed_string.chars().skip_while(|c| !c.is_ascii()).collect();\n       \
    \     if current_char != current_char {\n                is_palindrome = false;\n\
    \                break;\n            }\n        }\n\n        // If longest postfix\
    \ of reversed string is not a palindrome, append it to the palindrome.\n     \
    \   if is_palindrome {\n            palindrome = palindrome.chars().skip_while(|c|\
    \ !c.is_ascii()).collect();\n            palindrome = palindrome.append(current_char);\n\
    \        }\n\n        // Find prefix of reversed string that comes before palindromic\
    \ suffix.\n        while !reversed_string.is_empty() {\n            let mut current_char\
    \ = reversed_string[0];\n            reversed_string = reversed_string.chars().skip_while(|c|\
    \ !c.is_ascii()).collect();\n            if current_char != current_char {\n \
    \               break;\n            }\n        }\n\n        // If prefix of reversed\
    \ string is not empty, append it to the palindrome.\n        if !reversed_string.is_empty()\
    \ {\n            prefix_length = prefix_length + 1;\n            palindrome =\
    \ palindrome.chars().skip_while(|c| !c.is_ascii()).collect();\n            palindrome\
    \ = palindrome.append(current_char);\n        }\n\n        // Find suffix of reversed\
    \ string that comes after palindromic prefix.\n        while !reversed_string.is_empty()\
    \ {\n            let mut current_char = reversed_string[0];\n            reversed_string\
    \ = reversed_string.chars().skip_while(|c| !c.is_ascii()).collect();\n       \
    \     if current_char != current_char {\n                break;\n            }\n\
    \        }\n\n        // If suffix of reversed string is not empty, append it\
    \ to the palindrome.\n        if !reversed_string.is_empty() {\n            suffix_length\
    \ = suffix_length + 1;\n            palindrome = palindrome.chars().skip_while(|c|\
    \ !c.is_ascii()).collect();\n            palindrome = palindrome.append(\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp37u1b8qp.rs:77:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n17 |     while !reversed_string.is_empty()\
    \ {\n   |                                       - unclosed delimiter\n...\n64\
    \ |         if !reversed_string.is_empty() {\n   |                           \
    \             - this delimiter might not be properly closed...\n...\n68 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n77 | }\n\
    \   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp37u1b8qp.rs:67:43\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - closing delimiter possibly meant for this\n\
    ...\n67 |             palindrome = palindrome.append(\n   |                  \
    \                         ^ unclosed delimiter\n68 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp37u1b8qp.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp37u1b8qp.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp37u1b8qp.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp37u1b8qp.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp37u1b8qp.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp37u1b8qp.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n    let mut\
    \ longest_postfix_index = 0;\n    while string.len() > 0 {\n        let mut postfix\
    \ = string;\n        let mut postfix_length = 0;\n        while postfix.len()\
    \ > 0 {\n            if postfix.chars().next().unwrap() != postfix.chars().next().unwrap()\
    \ {\n                break;\n            }\n            postfix_length += 1;\n\
    \            postfix = postfix.chars().next().unwrap();\n        }\n        if\
    \ postfix_length > longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n            longest_postfix_index = longest_postfix.len();\n\
    \            longest_postfix = postfix;\n        }\n        string = &string[postfix.len()..];\n\
    \    }\n    longest_postfix.push_str(&reversed_string[longest_postfix_index..]);\n\
    \    longest_postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvh__mp97.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvh__mp97.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvh__mp97.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvh__mp97.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvh__mp97.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvh__mp97.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvh__mp97.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvh__mp97.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvh__mp97.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvh__mp97.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvh__mp97.rs:25:23\n   |\n25 |             postfix = postfix.chars().next().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ co"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n\n    while !string.is_empty()\
    \ {\n        let mut postfix = string;\n        let mut postfix_len = 0;\n\n \
    \       while !postfix.is_empty() {\n            let mut char = postfix.chars().next().unwrap();\n\
    \            if char == char {\n                postfix_len += 1;\n          \
    \  } else {\n                break;\n            }\n            postfix = postfix.chars().next().unwrap();\n\
    \        }\n\n        if postfix_len > longest_postfix_len {\n            longest_postfix_len\
    \ = postfix_len;\n            longest_postfix = postfix.to_string();\n       \
    \ }\n\n        string = string.chars().skip_while(|c| !c.is_ascii_lowercase()).collect();\n\
    \        reversed_string += &string[longest_postfix_len..];\n    }\n\n    longest_postfix.to_string()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7wl_47p9.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7wl_47p9.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7wl_47p9.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7wl_47p9.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7wl_47p9.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7wl_47p9.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7wl_47p9.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7wl_47p9.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7wl_47p9.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7wl_47p9.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7wl_47p9.rs:28:23\n   |\n28 |             postfix = postfix.chars().next().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ co"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_palindrome = string;\n\
    \    let mut suffix_length = 0;\n    let mut prefix_length = 0;\n    while palindrome.len()\
    \ > 0 {\n        let mut suffix_start = palindrome.len() - 1;\n        while suffix_start\
    \ >= 0 && palindrome[suffix_start] == palindrome[suffix_start + 1] {\n       \
    \     suffix_start -= 1;\n        }\n        let mut prefix_start = suffix_start\
    \ - 1;\n        while prefix_start >= 0 && palindrome[prefix_start] == palindrome[prefix_start\
    \ + 1] {\n            prefix_start -= 1;\n        }\n        if suffix_start >=\
    \ 0 {\n            suffix_length += 1;\n            palindrome = &palindrome[..suffix_start];\n\
    \        }\n        if prefix_start >= 0 {\n            prefix_length += 1;\n\
    \            palindrome = &palindrome[prefix_start..];\n        }\n    }\n   \
    \ if suffix_length == 0 {\n        palindrome = &palindrome[..prefix_length];\n\
    \    }\n    if reversed_palindrome == palindrome {\n        palindrome\n    }\
    \ else {\n        palindrome.to_owned() + &reversed_palindrome[..prefix_length]\n\
    \    }\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk86bx458.rs:46:17\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk86bx458.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk86bx458.rs:47:17\n   |\n47 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk86bx458.rs:47:25\n\
    \   |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk86bx458.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk86bx458.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk86bx458.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk86bx458.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk86bx458.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk86bx458.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpk86bx458.rs:18:36\n   |\n\
    18 |         while suffix_start >= 0 && palindrome[suffix_start] == palindrome[suffix_start\
    \ + 1] {\n   |       "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ string.len() > 0 {\n        let mut current_postfix_length = 0;\n        let\
    \ mut current_postfix_index = 0;\n        while current_postfix_index < longest_postfix_length\
    \ {\n            if string[current_postfix_index] != string[longest_postfix_index]\
    \ {\n                break;\n            }\n            current_postfix_index\
    \ += 1;\n        }\n        longest_postfix_length = current_postfix_index;\n\
    \        let mut current_postfix_length_reversed = 0;\n        let mut current_postfix_index_reversed\
    \ = 0;\n        while current_postfix_length_reversed < longest_postfix_length\
    \ {\n            if string[current_postfix_index_reversed] != string[longest_postfix_length\
    \ - current_postfix_length_reversed - 1] {\n                break;\n         \
    \   }\n            current_postfix_length_reversed += 1;\n            current_postfix_index_reversed\
    \ += 1;\n        }\n        longest_postfix_index = current_postfix_index_reversed\
    \ - 1;\n        reversed_string += &string[longest_postfix_index..];\n       \
    \ string = &string[longest_postfix_length..];\n    }\n    reversed_string\n}\n\
    \nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdn0aoyiq.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdn0aoyiq.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdn0aoyiq.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdn0aoyiq.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdn0aoyiq.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpdn0aoyiq.rs:20:16\n\
    \   |\n20 |             if string[current_postfix_index] != string[longest_postfix_index]\
    \ {\n   |                ^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    let mut longest_postfix_index = 0;\n    while longest_postfix_length < string.len()\
    \ {\n        let mut longest_postfix_length = longest_postfix_length;\n      \
    \  let mut longest_postfix_index = 0;\n        for index in 0..string.len() {\n\
    \            if index == longest_postfix_index {\n                continue;\n\
    \            }\n            let mut postfix_character = string[index];\n     \
    \       while postfix_character != string[longest_postfix_index] {\n         \
    \       longest_postfix_index += 1;\n                longest_postfix_length +=\
    \ 1;\n                postfix_character = string[index];\n            }\n    \
    \    }\n        reversed_string.push_str(&string[longest_postfix_index..]);\n\
    \    }\n    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpyhu_fbep.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyhu_fbep.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyhu_fbep.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyhu_fbep.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyhu_fbep.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyhu_fbep.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyhu_fbep.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyhu_fbep.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyhu_fbep.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyhu_fbep.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpyhu_fbep.rs:22:41\n   |\n\
    22 |             let mut postfix_character = string[index];\n   |            \
    \                             ^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a') {\n        if pos == 0 {\n            break;\n\
    \        }\n        let mut postfix_length = pos - 1;\n        while postfix_length\
    \ >= 0 && reversed_string[postfix_length] != string[pos] {\n            postfix_length\
    \ -= 1;\n        }\n        if postfix_length >= 0 {\n            longest_postfix_length\
    \ = postfix_length;\n        }\n    }\n    let mut postfix_length = longest_postfix_length;\n\
    \    while postfix_length >= 0 {\n        let mut postfix_char = reversed_string[postfix_length];\n\
    \        reversed_string = reversed_string[..postfix_length].to_owned() + &postfix_char;\n\
    \        postfix_length -= 1;\n    }\n    reversed_string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd7uua9a2.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd7uua9a2.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd7uua9a2.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd7uua9a2.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd7uua9a2.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd7uua9a2.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd7uua9a2.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd7uua9a2.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd7uua9a2.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd7uua9a2.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpd7uua9a2.rs:19:38\n   |\n\
    19 |         while postfix_length >= 0 && reversed_string[postfix_length] != string[pos]\
    \ {\n   |               "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_string = string;\n   \
    \ let mut suffix_length = 0;\n    let mut prefix_length = 0;\n    while !palindrome.is_empty()\
    \ {\n        let mut current_char = String::new();\n        current_char.push(palindrome.chars().next().unwrap());\n\
    \        palindrome = palindrome.chars().collect();\n        if palindrome.len()\
    \ > 1 {\n            let mut current_char_2 = String::new();\n            current_char_2.push(palindrome.last().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_3\
    \ = String::new();\n            current_char_3.push(palindrome.first().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_4\
    \ = String::new();\n            current_char_4.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_5\
    \ = String::new();\n            current_char_5.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_6\
    \ = String::new();\n            current_char_6.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_7\
    \ = String::new();\n            current_char_7.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_8\
    \ = String::new();\n            current_char_8.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_9\
    \ = String::new();\n            current_char_9.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_10\
    \ = String::new();\n            current_char_10.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_11\
    \ = String::new();\n            current_char_11.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_12\
    \ = String::new();\n            current_char_12.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_13\
    \ = String::new();\n            current_char_13.push(palindrome.next().unwrap());\n\
    \            palindrome = palindrome.collect();\n            let mut current_char_14\
    \ = String::new();\n            current_\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0pct9s_5.rs:68:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while !palindrome.is_empty()\
    \ {\n   |                                  - unclosed delimiter\n...\n20 |   \
    \      if palindrome.len() > 1 {\n   |                                 - this\
    \ delimiter might not be properly closed...\n...\n59 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n68 | }\n   |   ^\n\nerror[E0425]:\
    \ cannot find value `current_` in this scope\n  --> /tmp/tmp0pct9s_5.rs:58:13\n\
    \   |\n58 |             current_\n   |             ^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0pct9s_5.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0pct9s_5.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0pct9s_5.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0pct9s_5.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0pct9s_5.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0pct9s_5.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0pct9s_5.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix = string;\n    let mut longest_postfix_index = -1;\n   \
    \ let mut longest_postfix_length = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_length\
    \ = -1;\n    let mut longest_postfix_end_length = -1;\n    let mut longest_postfix_start_\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpsl0r0_pb.rs:59:35\n   |\n\
    59 |     let mut longest_postfix_start_\n   |                                \
    \   ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsl0r0_pb.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsl0r0_pb.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsl0r0_pb.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsl0r0_pb.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_postfix =\
    \ \"\";\n\n    while !reversed_string.is_empty() {\n        let mut postfix_len\
    \ = reversed_string.len();\n        let mut postfix_start = -1;\n        let mut\
    \ postfix_end = -1;\n\n        while postfix_len > 0 {\n            let mut postfix_char\
    \ = reversed_string[postfix_len - 1];\n            reversed_string[postfix_len\
    \ - 1] = reversed_string[postfix_len];\n            reversed_string[postfix_len]\
    \ = postfix_char;\n            postfix_len -= 1;\n            postfix_end += 1;\n\
    \        }\n\n        if longest_postfix_len < postfix_len {\n            longest_postfix_len\
    \ = postfix_len;\n            longest_postfix_start = postfix_start;\n       \
    \     longest_postfix_end = postfix_end;\n            longest_postfix_postfix\
    \ = reversed_string;\n        }\n\n        reversed_string = reversed_string[..postfix_len];\n\
    \    }\n\n    if longest_postfix_start == -1 || longest_postfix_end == -1 {\n\
    \        longest_postfix_postfix = string;\n    }\n\n    longest_postfix_postfix.reverse()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpeora7mxb.rs:51:17\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeora7mxb.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpeora7mxb.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpeora7mxb.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpeora7mxb.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpeora7mxb.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpeora7mxb.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpeora7mxb.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpeora7mxb.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpeora7mxb.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpeora7mxb.rs:25:36\n   |\n\
    25 |             let mut postfix_char = reversed_string[postfix_len - 1];\n  \
    \ |                                "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j <\
    \ string.len() && string[j] != string[i - j] {\n            j = j + 1;\n     \
    \   }\n        reverse = reverse.insert(i, &string[j..]);\n        i = j;\n  \
    \  }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpm8td6jax.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm8td6jax.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm8td6jax.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm8td6jax.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm8td6jax.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm8td6jax.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm8td6jax.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm8td6jax.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm8td6jax.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm8td6jax.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpm8td6jax.rs:17:35\n   |\n\
    17 |         while j < string.len() && string[j] != string[i - j] {\n   |    \
    \                               ^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reverse_string = \"\";\n    let\
    \ mut prefix_length = 0;\n    while palindrome.len() > 0 {\n        let mut index\
    \ = palindrome.rfind('a');\n        if index == -1 {\n            break;\n   \
    \     }\n        let mut suffix = palindrome[index..].to_string();\n        reverse_string.push_str(&suffix);\n\
    \        palindrome = palindrome.split_off(index).unwrap();\n        prefix_length\
    \ += 1;\n    }\n    palindrome.push_str(&reverse_string);\n    palindrome\n}\n\
    \nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd0rmnhfl.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd0rmnhfl.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd0rmnhfl.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd0rmnhfl.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd0rmnhfl.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd0rmnhfl.rs:17:21\n   |\n17 |         if index == -1 {\n\
    \   |                     ^^\n   |                     |\n   |               \
    \      expected enum `Option`, found "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().skip_while(|c|\
    \ c != current_char).collect();\n        prefix_length += 1;\n        if prefix_length\
    \ > string.len() {\n            break;\n        }\n        let mut current_char\
    \ = string[prefix_length];\n        suffix_length += 1;\n        if suffix_length\
    \ > string.len() {\n            break;\n        }\n        if current_char !=\
    \ string[suffix_length - 1] {\n            break;\n        }\n    }\n    string\n\
    \        .chars()\n        .skip_while(|c| !c.is_alphanumeric())\n        .collect::<String>()\n\
    \        .join(\"\")\n        + &string[prefix_length..suffix_length]\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp71rvrh5s.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp71rvrh5s.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp71rvrh5s.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp71rvrh5s.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp71rvrh5s.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp71rvrh5s.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp71rvrh5s.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp71rvrh5s.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp71rvrh5s.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp71rvrh5s.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp71rvrh5s.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j <\
    \ string.len() && string[j] != string[string.len() - j] {\n            j = j +\
    \ 1;\n        }\n        reverse = reverse.insert(j, string[i]);\n        i =\
    \ j;\n    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp93wo1o0r.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp93wo1o0r.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp93wo1o0r.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp93wo1o0r.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp93wo1o0r.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp93wo1o0r.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp93wo1o0r.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp93wo1o0r.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp93wo1o0r.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp93wo1o0r.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp93wo1o0r.rs:17:35\n   |\n\
    17 |         while j < string.len() && string[j] != string[string.len() - j] {\n\
    \   |                           "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().skip_while(|c|\
    \ c != current_char).collect();\n        if current_char == current_char.rev()\
    \ {\n            suffix_length += 1;\n        } else {\n            prefix_length\
    \ += 1;\n        }\n    }\n    let mut palindrome = string;\n    palindrome.push_str(&string[prefix_length..suffix_length]);\n\
    \    palindrome\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpci2gxjf7.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpci2gxjf7.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpci2gxjf7.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpci2gxjf7.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpci2gxjf7.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpci2gxjf7.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpci2gxjf7.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpci2gxjf7.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpci2gxjf7.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpci2gxjf7.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpci2gxjf7.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        reverse_length = reversed_string.len()\
    \ - 1;\n        reversed_string = reversed_string[..reverse_length].to_string();\n\
    \    }\n    string + &reversed_string[..reverse_length]\n}\n\nfn main() {\n  \
    \  let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp42v3a64h.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp42v3a64h.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp42v3a64h.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp42v3a64h.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp42v3a64h.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp42v3a64h.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp42v3a64h.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp42v3a64h.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp42v3a64h.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp42v3a64h.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 10 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_index2 = 0;\n    let\
    \ mut longest_postfix_index3 = 0;\n    let mut longest_postfix_index4 = 0;\n \
    \   let mut longest_postfix_index5 = 0;\n    let mut longest_postfix_index6 =\
    \ 0;\n    let mut longest_postfix_index7 = 0;\n    let mut longest_postfix_index8\
    \ = 0;\n    let mut longest_postfix_index9 = 0;\n    let mut longest_postfix_index10\
    \ = 0;\n    let mut longest_postfix_index11 = 0;\n    let mut longest_postfix_index12\
    \ = 0;\n    let mut longest_postfix_index13 = 0;\n    let mut longest_postfix_index14\
    \ = 0;\n    let mut longest_postfix_index15 = 0;\n    let mut longest_postfix_index16\
    \ = 0;\n    let mut longest_postfix_index17 = 0;\n    let mut longest_postfix_index18\
    \ = 0;\n    let mut longest_postfix_index19 = 0;\n    let mut longest_postfix_index20\
    \ = 0;\n    let mut longest_postfix_index21 = 0;\n    let mut longest_postfix_index22\
    \ = 0;\n    let mut longest_postfix_index23 = 0;\n    let mut longest_postfix_index24\
    \ = 0;\n    let mut longest_postfix_index25 = 0;\n    let mut longest_postfix_index26\
    \ = 0;\n    let mut longest_postfix_index27 = 0;\n    let mut longest_postfix_index28\
    \ = 0;\n    let mut longest_postfix_index29 = 0;\n    let mut longest_postfix_index30\
    \ = 0;\n    let mut longest_postfix_index31 = 0;\n    let mut longest_postfix_index32\
    \ = 0;\n    let mut longest_postfix_index33 = 0;\n    let mut longest_postfix_index34\
    \ = 0;\n    let mut longest_postfix_index35 = 0;\n    let mut longest_postfix_index36\
    \ = 0;\n    let mut longest_postfix_index37 = 0;\n    let mut longest_postfix_index38\
    \ = 0;\n    let mut longest_postfix_index39 = 0;\n    let mut longest_postfix_index40\
    \ = 0;\n    let mut longest_postfix_index41 = 0;\n    let mut longest_postfix_index42\
    \ = 0;\n    let mut longest_postfix_index43 = 0;\n    let mut longest_postfix_index44\
    \ = 0;\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8k0porko.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8k0porko.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8k0porko.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8k0porko.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8k0porko.rs:11:39\n   |\n11 | fn make_palindrome(string:\
    \ String) -> String {\n   |    ---------------                    ^^^^^^ expected\
    \ struct `String`, found `()`\n "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_pos = 0;\n    let\
    \ mut pos = 0;\n    while pos < reversed_string.len() {\n        let mut char\
    \ = reversed_string[pos];\n        let mut next_char = reversed_string[reverse_pos];\n\
    \        if char != next_char {\n            break;\n        }\n        reverse_pos\
    \ += 1;\n        pos += 1;\n    }\n    let mut reversed_string = reversed_string.clone();\n\
    \    reversed_string.push_str(&string[reverse_pos - 1]);\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi4fsusqa.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi4fsusqa.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi4fsusqa.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi4fsusqa.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi4fsusqa.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi4fsusqa.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi4fsusqa.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi4fsusqa.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi4fsusqa.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi4fsusqa.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpi4fsusqa.rs:16:24\n   |\n\
    16 |         let mut char = reversed_string[pos];\n   |                      \
    \  ^^^^^^^^^^^^^^^^^^^^ `String` ca"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reversed_string_index = 0;\n    let mut longest_palindrome = string;\n \
    \   let mut longest_palindrome_index = 0;\n    while reversed_string_index < string.len()\
    \ {\n        let mut reversed_string_length = reversed_string.len();\n       \
    \ while reversed_string_length >= 1 {\n            let mut reversed_string_length\
    \ = reversed_string_length / 2;\n            let mut reversed_string_mid = reversed_string[reversed_string_index..].chars().nth(reversed_string_length).unwrap();\n\
    \            let mut reversed_string_mid = reversed_string_mid as u8;\n      \
    \      let mut reversed_string_mid = reversed_string_mid as u16;\n           \
    \ let mut reversed_string_mid = reversed_string_mid as u32;\n            let mut\
    \ reversed_string_mid = reversed_string_mid as u64;\n            let mut reversed_string_mid\
    \ = reversed_string_mid as usize;\n            let mut reversed_string_mid = reversed_string_mid\
    \ as u8;\n            let mut reversed_string_mid = reversed_string_mid as u16;\n\
    \            let mut reversed_string_mid = reversed_string_mid as u32;\n     \
    \       let mut reversed_string_mid = reversed_string_mid as u64;\n          \
    \  let mut reversed_string_mid = reversed_string_mid as usize;\n            let\
    \ mut reversed_string_mid = reversed_string_mid as u8;\n            let mut reversed_string_mid\
    \ = reversed_string_mid as u16;\n            let mut reversed_string_mid = reversed_string_mid\
    \ as u32;\n            let mut reversed_string_mid = reversed_string_mid as u64;\n\
    \            let mut reversed_string_mid = reversed_string_mid as usize;\n   \
    \         let mut reversed_string_mid = reversed_string_mid as u8;\n         \
    \   let mut reversed_string_mid = reversed_string_mid as u16;\n            let\
    \ mut reversed_string_mid = reversed_string_mid as u32;\n            let mut reversed_string_mid\
    \ = reversed_string_mid as u64;\n            let mut reversed_string_mid = reversed_string_mid\
    \ as usize;\n            let mut reversed_string_mid = reversed_string_mid as\
    \ u8;\n            let mut reversed_string_mid = reversed_string_mid as u16;\n\
    \            let mut reversed_string_mid = reversed_string_mid as u32;\n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpx4i_hxwk.rs:54:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n17 |     while reversed_string_index\
    \ < string.len() {\n   |                                                - unclosed\
    \ delimiter\n18 |         let mut reversed_string_length = reversed_string.len();\n\
    19 |         while reversed_string_length >= 1 {\n   |                       \
    \                    - this delimiter might not be properly closed...\n...\n45\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n54\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx4i_hxwk.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx4i_hxwk.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx4i_hxwk.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx4i_hxwk.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx4i_hxwk.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx4i_hxwk.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx4i_hxwk.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx4i_hxwk.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut last_char_index = 0;\n   \
    \ let mut last_char_index2 = 0;\n    let mut last_char_index3 = 0;\n    while\
    \ last_char_index < string.len() {\n        let mut current_char_index = last_char_index;\n\
    \        let mut current_char_index2 = last_char_index2;\n        let mut current_char_index3\
    \ = last_char_index3;\n        while current_char_index2 < string.len() {\n  \
    \          let mut current_char_index4 = current_char_index2;\n            let\
    \ mut current_char_index5 = current_char_index3;\n            while current_char_index4\
    \ < string.len() {\n                let mut current_char_index6 = current_char_index4;\n\
    \                let mut current_char_index7 = current_char_index5;\n        \
    \        while current_char_index6 < string.len() {\n                    let mut\
    \ current_char_index8 = current_char_index6;\n                    let mut current_char_index9\
    \ = current_char_index7;\n                    while current_char_index8 < string.len()\
    \ {\n                        let mut current_char_index10 = current_char_index8;\n\
    \                        let mut current_char_index11 = current_char_index9;\n\
    \                        while current_char_index10 < string.len() {\n       \
    \                     let mut current_char_index12 = current_char_index10;\n \
    \                           let mut current_char_index13 = current_char_index11;\n\
    \                            while current_char_index12 < string.len() {\n   \
    \                             let mut current_char_index14 = current_char_index12;\n\
    \                                let mut current_char_index15 = current_char_index13;\n\
    \                                while current_char_index14 < string.len() {\n\
    \                                    let mut current_char_index16 = current_char_index14;\n\
    \                                    let mut current_char_index17 = current_char_index15;\n\
    \                                    while current_char_index16 < string.len()\
    \ {\n                                        let mut current_char_index18 = current_char_index16;\n\
    \                                        let mut current_char_index19 = current_char_index17;\n\
    \                                        while current_char_index18 < string.len()\
    \ {\n                                            let mut current_char_index20\
    \ = current_char_index18;\n                                            let mut\
    \ current_char_index21 = current_char_index19;\n                             \
    \               if current_char_index20 == current_char_index21 && current_char_index20\
    \ < string.len() {\n                                                current_char_index20\
    \ += 1;\n                                            }\n                     \
    \                       current_char_index18 += 1;\n                         \
    \               }\n                                        current_char_index16\
    \ += 1;\n                                    }\n                             \
    \       current_char_index14 += 1;\n                                }\n      \
    \                          current_char_index10 += 1;\n                      \
    \      }\n                            current_char_index12 += 1;\n           \
    \             }\n                        current_char_index10 += 1;\n        \
    \            }\n                    current_char\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1nts60ri.rs:72:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while last_char_index\
    \ < string.len() {\n   |                                          - unclosed delimiter\n\
    ...\n20 |         while current_char_index2 < string.len() {\n   |           \
    \                                       - unclosed delimiter\n...\n23 |      \
    \       while current_char_index4 < string.len() {\n   |                     \
    \                                 - unclosed delimiter\n...\n26 |            \
    \     while current_char_index6 < string.len() {\n   |                       \
    \                                   - this delimiter might not be properly closed...\n\
    ...\n63 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    72 | }\n   |   ^\n\nerror[E0425]: cannot find value `current_char` in this scope\n\
    \  --> /tmp/tmp1nts60ri.rs:62:21\n   |\n62 |                     current_char\n\
    \   |                     ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1nts60ri.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1nts60ri.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1nts60ri.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1nts60ri.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1nts60ri.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  -"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_start = -1;\n \
    \   let mut longest_postfix_end = -1;\n    while !string.is_empty() {\n      \
    \  let mut postfix_start = -1;\n        let mut postfix_end = -1;\n        for\
    \ (i, c) in string.chars().enumerate() {\n            if longest_postfix_length\
    \ == i {\n                postfix_start = i;\n                postfix_end = i;\n\
    \            }\n            if longest_postfix_length < i {\n                longest_postfix_length\
    \ = i;\n                longest_postfix_start = postfix_start;\n             \
    \   longest_postfix_end = postfix_end;\n            }\n            if longest_postfix_length\
    \ == i && longest_postfix_start != i {\n                postfix_start = i;\n \
    \               postfix_end = i;\n            }\n            if longest_postfix_length\
    \ == i && longest_postfix_end != i {\n                postfix_end = i;\n     \
    \       }\n        }\n        let mut postfix_length = longest_postfix_end - longest_postfix_start\
    \ + 1;\n        let mut postfix_start = longest_postfix_start;\n        let mut\
    \ postfix_end = longest_postfix_end;\n        while postfix_start != postfix_end\
    \ {\n            let mut c = string.chars().nth(postfix_start);\n            string.set_char(&mut\
    \ c, postfix_end);\n            postfix_end--;\n            postfix_start++;\n\
    \        }\n        reversed_string += &string[..postfix_length];\n        string\
    \ = &string[postfix_length..];\n    }\n    reversed_string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpj50e14xz.rs:44:26\n\
    \   |\n44 |             postfix_end--;\n   |                          ^ expected\
    \ expression\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpj50e14xz.rs:55:17\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj50e14xz.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj50e14xz.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj50e14xz.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj50e14xz.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj50e14xz.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj50e14xz.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj50e14xz.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj50e14xz.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj50e14xz.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the trait\
    \ bound `usize: Neg` is no"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut palindrome\
    \ = string;\n    let mut start = string.len();\n    while start > 0 {\n      \
    \  let mut end = string.len();\n        while end > start {\n            let mut\
    \ char = string[end - 1];\n            string[end - 1] = string[start];\n    \
    \        string[start] = char;\n            end -= 1;\n            start -= 1;\n\
    \        }\n        let mut start = string.len();\n        while start > 0 {\n\
    \            let mut char = string[start - 1];\n            string[start - 1]\
    \ = string[end];\n            string[end] = char;\n            start -= 1;\n \
    \           end -= 1;\n        }\n        let mut start = string.len();\n    \
    \    while start > 0 {\n            let mut char = string[start - 1];\n      \
    \      string[start - 1] = string[end];\n            string[end] = char;\n   \
    \         start -= 1;\n            end -= 1;\n        }\n        let mut start\
    \ = string.len();\n        while start > 0 {\n            let mut char = string[start\
    \ - 1];\n            string[start - 1] = string[end];\n            string[end]\
    \ = char;\n            start -= 1;\n            end -= 1;\n        }\n       \
    \ let mut start = string.len();\n        while start > 0 {\n            let mut\
    \ char = string[start - 1];\n            string[start - 1] = string[end];\n  \
    \          string[end] = char;\n            start -= 1;\n            end -= 1;\n\
    \        }\n        let mut start = string.len();\n        while start > 0 {\n\
    \            let mut char = string[start - 1];\n            string[start - 1]\
    \ = string[end];\n            string[end] = char;\n            start -= 1;\n \
    \           end -= 1;\n        }\n        let mut start = string.len();\n    \
    \    while start > 0 {\n            let mut char = string[start - 1];\n      \
    \      string[start - 1] = string[end];\n            string[end] = char;\n   \
    \         start -= 1;\n            end -= 1;\n        }\n        let mut start\
    \ = string.len();\n        while start > 0 {\n            let mut char = string[start\
    \ - 1];\n            string[start - 1] = string[end];\n            string[end]\
    \ = char;\n            start -= 1;\n            end -= 1;\n        }\n       \
    \ let mut start = string.len();\n        while start > 0 {\n            let mut\
    \ char = string[start - 1];\n            string[start - 1] = string[end];\n  \
    \          string[end] = char;\n            start -= \n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpjtx9aqc1.rs:96:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while start\
    \ > 0 {\n   |                     - unclosed delimiter\n...\n82 |         while\
    \ start > 0 {\n   |                         - this delimiter might not be properly\
    \ closed...\n...\n87 | }\n   | - ...as it matches this but it has different indentation\n\
    ...\n96 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpjtx9aqc1.rs:87:1\n\
    \   |\n87 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpjtx9aqc1.rs:91:17\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpjtx9aqc1.rs:91:25\n \
    \  |\n91 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjtx9aqc1.rs:92:17\n   |\n92 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjtx9aqc1.rs:92:25\n   |\n92 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjtx9aqc1.rs:93:17\n   |\n93 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjtx9aqc1.rs:93:25\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjtx9aqc1.rs:94:17\n  \
    \ |\n94 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjtx9aqc1.rs:94:25\n   |\n94 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ n"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < string.len() {\n        let\
    \ mut suffix_start = suffix_length;\n        while suffix_start < string.len()\
    \ && string[suffix_start] != string[suffix_start + 1] {\n            suffix_start\
    \ += 1;\n        }\n        reversed_string.push_str(&string[prefix_length..suffix_start]);\n\
    \        suffix_length = suffix_start + 1;\n        prefix_length = suffix_length\
    \ - suffix_start;\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_06ojlj.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt_06ojlj.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt_06ojlj.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_06ojlj.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpt_06ojlj.rs:17:46\n   |\n\
    17 |         while suffix_start < string.len() && string[suffix_start] != string[suffix_start\
    \ + 1] {\n   |     "
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut palindrome = string;\n    let mut reversed_string\
    \ = string;\n    let mut reversed_palindrome = string;\n    let mut i = 0;\n \
    \   while i < string.len() {\n        let mut j = i;\n        while j < string.len()\
    \ {\n            if string[j] != string[i] {\n                break;\n       \
    \     }\n            i += 1;\n            j += 1;\n        }\n        if j ==\
    \ i {\n            palindrome = &string[i..];\n            i += 1;\n        }\n\
    \    }\n    while i < reversed_string.len() {\n        let mut j = i;\n      \
    \  while j < reversed_string.len() {\n            if reversed_string[j] != reversed_string[i]\
    \ {\n                break;\n            }\n            i += 1;\n            j\
    \ += 1;\n        }\n        if j == i {\n            reversed_palindrome = &reversed_string[i..];\n\
    \            i += 1;\n        }\n    }\n    String::from(\n        &palindrome\n\
    \            .iter()\n            .chain(reversed_palindrome.iter().rev())\n \
    \           .collect::<Vec<_>>()\n            .join(\"\"),\n    )\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgw9xpcwx.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgw9xpcwx.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgw9xpcwx.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgw9xpcwx.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgw9xpcwx.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpgw9xpcwx.rs:20:16\n   |\n\
    20 |             if string[j] != string[i] {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usiz"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_length = 0;\n    let\
    \ mut longest_postfix_string = \"\";\n    while !string.is_empty() {\n       \
    \ let mut current_postfix_index = 0;\n        let mut current_postfix_length =\
    \ 0;\n        while !string.is_empty() && current_postfix_length < longest_postfix_length\
    \ {\n            let current_postfix_string = &string[current_postfix_index..];\n\
    \            let current_postfix_length = current_postfix_string.len();\n    \
    \        if current_postfix_string.is_palindrome() {\n                longest_postfix_length\
    \ = current_postfix_length;\n                longest_postfix_index = current_postfix_index;\n\
    \                longest_postfix_string = current_postfix_string;\n          \
    \  }\n            current_postfix_index += 1;\n        }\n        string = &string[longest_postfix_index..];\n\
    \    }\n    longest_postfix_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph4959wmu.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph4959wmu.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph4959wmu.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph4959wmu.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph4959wmu.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph4959wmu.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph4959wmu.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph4959wmu.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph4959wmu.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph4959wmu.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `is_palindrome` found for reference `&str` in the current scope\n  -->\
    \ /tmp/tmph4959wmu.rs:23:39\n   |\n23 |             if current_postfix_string.is_palindrome()\
    \ {\n   |            "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() && string[j] == string[j + 1] {\n            j += 1\n \
    \       }\n        reversed_string.push((string[..j]).rev());\n        string\
    \ = &string[j..];\n        i += j - i;\n    }\n    string.push(reversed_string);\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfy7pdg7o.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfy7pdg7o.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfy7pdg7o.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfy7pdg7o.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfy7pdg7o.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpfy7pdg7o.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j] == string[j + 1] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_char: char;\n    let mut longest_postfix_char_length = 0;\n\
    \    while longest_postfix_index < string.len() {\n        longest_postfix_char\
    \ = string[longest_postfix_index];\n        longest_postfix_char_length = longest_postfix_char.len();\n\
    \        if longest_postfix_char_length > longest_postfix_length {\n         \
    \   longest_postfix_length = longest_postfix_char_length;\n            longest_postfix_index\
    \ = longest_postfix_index;\n        }\n        longest_postfix_index += 1;\n \
    \   }\n    let mut longest_postfix_string = string[longest_postfix_index..];\n\
    \    while longest_postfix_index > 0 {\n        longest_postfix_string = longest_postfix_string[..longest_postfix_index\
    \ - 1] + longest_postfix_string[longest_postfix_index..];\n        longest_postfix_index\
    \ -= 1;\n    }\n    reversed_string += longest_postfix_string;\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7uikgesu.rs:38:17\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7uikgesu.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7uikgesu.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7uikgesu.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7uikgesu.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7uikgesu.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7uikgesu.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7uikgesu.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7uikgesu.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7uikgesu.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp7uikgesu.rs:19:32\n   |\n\
    19 |         longest_postfix_char = string[longest_postfix_index];\n   |     \
    \                           ^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len() - 1;\n\n        while\
    \ index >= 0 {\n            let char = string[index];\n            let mut is_palindrome\
    \ = true;\n\n            if index == 0 {\n                is_palindrome = char\
    \ == char.to_string();\n            } else {\n                let mut prev_char\
    \ = string[index - 1];\n                is_palindrome = char == prev_char.to_string();\n\
    \            }\n\n            if is_palindrome {\n                reversed_string.insert(0,\
    \ char);\n                break;\n            }\n\n            index -= 1;\n \
    \       }\n\n        string = &string[..];\n    }\n\n    string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp96bwhh9s.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp96bwhh9s.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp96bwhh9s.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp96bwhh9s.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp96bwhh9s.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp96bwhh9s.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp96bwhh9s.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp96bwhh9s.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp96bwhh9s.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp96bwhh9s.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp96bwhh9s.rs:19:24\n   |\n\
    19 |             let char = string[index];\n   |                        ^^^^^^^^^^^^^\
    \ `String` cannot be indexe"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    while\
    \ !reversed_string.starts_with(string) {\n        reversed_string = reversed_string[..prefix_length].to_owned();\n\
    \        prefix_length += 1;\n    }\n    reversed_string += &string[prefix_length..];\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:24:17\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjcw5qqq0.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjcw5qqq0.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjcw5qqq0.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjcw5qqq0.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjcw5qqq0.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `String`\n  --> /tmp/tmpjcw5qqq0.rs:14:40\n\
    \   |\n14 |     while !reversed_string.starts_with(string) {\n   |           \
    \                             ^^^^^^\n"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_size = string.len();\n\
    \    let mut i = 0;\n    while i < reversed_string_size {\n        let mut j =\
    \ reversed_string_size - 1;\n        while j >= i {\n            if reversed_string[j]\
    \ != string[i] {\n                break;\n            }\n            j -= 1;\n\
    \        }\n        reversed_string.push(reversed_string[j]);\n        i += 1;\n\
    \    }\n    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnv5hf0rc.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnv5hf0rc.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnv5hf0rc.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnv5hf0rc.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnv5hf0rc.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpnv5hf0rc.rs:18:16\n   |\n\
    18 |             if reversed_string[j] != string[i] {\n   |                ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot b"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut prefix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.chars().skip_while(|c|\
    \ c != current_char).collect();\n        reverse_length += 1;\n        if current_char\
    \ == reversed_string[0] {\n            prefix_length += 1;\n        }\n    }\n\
    \    let mut reversed_string = reversed_string.chars().skip_while(|c| c != reversed_string[reverse_length]).collect();\n\
    \    reversed_string += &reversed_string[reverse_length..];\n    reversed_string\
    \ += &reversed_string[..prefix_length];\n    reversed_string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp374vzsuy.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp374vzsuy.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp374vzsuy.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp374vzsuy.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp374vzsuy.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp374vzsuy.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp374vzsuy.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp374vzsuy.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp374vzsuy.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp374vzsuy.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp374vzsuy.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut suffix_length = 0;\n    while palindrome.len() > 0 {\n        let mut\
    \ suffix_start = palindrome.len() - 1;\n        while suffix_start >= 0 && palindrome[suffix_start]\
    \ == reversed_string[suffix_start] {\n            suffix_start -= 1;\n       \
    \ }\n        if suffix_start >= 0 {\n            suffix_length += 1;\n       \
    \     palindrome = &palindrome[..suffix_start];\n        } else {\n          \
    \  palindrome = &palindrome[..];\n        }\n    }\n    String::from(palindrome)\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmgvvn0sq.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmgvvn0sq.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmgvvn0sq.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmgvvn0sq.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmgvvn0sq.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpmgvvn0sq.rs:17:36\n   |\n\
    17 |         while suffix_start >= 0 && palindrome[suffix_start] == reversed_string[suffix_start]\
    \ {\n   |      "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = String::new();\n    let mut longest_palindrome_length =\
    \ 0;\n    let mut longest_palindrome_start = 0;\n    let mut longest_palindrome_end\
    \ = 0;\n    while !string.is_empty() {\n        let mut current_char = string.chars().next().unwrap();\n\
    \        let mut current_char_length = 1;\n        while current_char != current_char.as_bytes().last().unwrap()\
    \ {\n            current_char_length +=1;\n            current_char = string.chars().next().unwrap();\n\
    \        }\n        if current_char_length < longest_palindrome_length {\n   \
    \         longest_palindrome_length = current_char_length;\n            longest_palindrome_start\
    \ = longest_palindrome_end;\n            longest_palindrome_end = longest_palindrome_start\
    \ + longest_palindrome_length - 1;\n        }\n        string = string.chars().skip(longest_palindrome_end).collect();\n\
    \    }\n    longest_palindrome = string.chars().skip(longest_palindrome_start).collect();\n\
    \    reversed_string = longest_palindrome.chars().collect();\n    reversed_string.insert(0,\
    \ reversed_string);\n    reversed_string\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpggn5e_k9.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpggn5e_k9.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpggn5e_k9.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpggn5e_k9.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpggn5e_k9.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpggn5e_k9.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpggn5e_k9.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpggn5e_k9.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpggn5e_k9.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpggn5e_k9.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `as_bytes` found for type `char` in the current scope\n  --> /tmp/tmpggn5e_k9.rs:21:44\n\
    \   |\n21 |         while current_char != current_char.as_bytes().last().unwrap()\
    \ {\n   |      "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_palindromic_suffix = 0;\n    let mut longest_palindromic_suffix_len\
    \ = 0;\n\n    while reversed_string_len < string.len() {\n        let mut palindromic_suffix\
    \ = &string[reversed_string_len..];\n        let mut palindromic_suffix_len =\
    \ 0;\n\n        while palindromic_suffix_len < palindromic_suffix.len() {\n  \
    \          let mut palindromic_prefix = &palindromic_suffix[palindromic_suffix_len..];\n\
    \            let mut prefix_len = 0;\n\n            while prefix_len < palindromic_prefix.len()\
    \ {\n                let mut prefix = &palindromic_prefix[prefix_len..];\n   \
    \             let mut prefix_len = 0;\n\n                while prefix_len < prefix.len()\
    \ {\n                    let mut prefix = &palindromic_prefix[prefix_len..];\n\
    \                    let mut prefix_len = 0;\n\n                    while prefix_len\
    \ < prefix.len() {\n                        let mut prefix = &palindromic_prefix[prefix_len..];\n\
    \                        let mut prefix_len = 0;\n\n                        while\
    \ prefix_len < prefix.len() {\n                            let mut prefix = &palindromic_prefix[prefix_len..];\n\
    \                            let mut prefix_len = 0;\n\n                     \
    \       while prefix_len < prefix.len() {\n                                let\
    \ mut prefix = &palindromic_prefix[prefix_len..];\n                          \
    \      let mut prefix_len = 0;\n\n                                while prefix_len\
    \ < prefix.len() {\n                                    let mut prefix = &palindromic_prefix[prefix_len..];\n\
    \                                    let mut prefix_len = 0;\n\n             \
    \                       while prefix_len < prefix.len() {\n                  \
    \                      let mut prefix = &palindromic_prefix[prefix_len..];\n \
    \                                       let mut prefix_len = 0;\n\n          \
    \                              while prefix_len < prefix.len() {\n           \
    \                                 let mut prefix = &palindromic_prefix[prefix_len..];\n\
    \                                            let mut prefix_len = 0;\n\n     \
    \                                       if palindromic_suffix == prefix {\n  \
    \                                              longest_palindromic_suffix = palindromic_suffix;\n\
    \                                                longest_palindromic_suffix_len\
    \ = palindromic_suffix_len;\n                                                break;\n\
    \                                            }\n\n                           \
    \                 prefix_len += 1;\n                                        }\n\
    \                                    }\n                                    prefix_len\
    \ += 1;\n                                }\n                                prefix_len\
    \ += 1;\n                            }\n                            prefix_len\
    \ += \n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkf409324.rs:80:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n17 |     while reversed_string_len\
    \ < string.len() {\n   |                                              - unclosed\
    \ delimiter\n...\n21 |         while palindromic_suffix_len < palindromic_suffix.len()\
    \ {\n   |                                                                 - unclosed\
    \ delimiter\n...\n25 |             while prefix_len < palindromic_prefix.len()\
    \ {\n   |                                                         - unclosed delimiter\n\
    ...\n29 |                 while prefix_len < prefix.len() {\n   |            \
    \                                     - unclosed delimiter\n...\n33 |        \
    \             while prefix_len < prefix.len() {\n   |                        \
    \                             - unclosed delimiter\n...\n37 |                \
    \         while prefix_len < prefix.len() {\n   |                            \
    \                             - this delimiter might not be properly closed...\n\
    ...\n71 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    80 | }\n   |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmpkf409324.rs:71:1\n\
    \   |\n71 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpkf409324.rs:75:17\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpkf409324.rs:75:25\n \
    \  |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkf409324.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkf409324.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E042"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for c in reversed_string.chars() {\n        if longest_postfix_length ==\
    \ 0 {\n            longest_postfix_length = c.len_utf8();\n        }\n       \
    \ if longest_postfix_length < c.len_utf8() {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n    }\n    let mut reversed_string = string;\n \
    \   let mut longest_postfix_length = 0;\n    for c in reversed_string.chars()\
    \ {\n        if longest_postfix_length == 0 {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n        if longest_postfix_length < c.len_utf8()\
    \ {\n            longest_postfix_length = c.len_utf8();\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for c in reversed_string.chars() {\n        if longest_postfix_length ==\
    \ 0 {\n            longest_postfix_length = c.len_utf8();\n        }\n       \
    \ if longest_postfix_length < c.len_utf8() {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n    }\n    let mut reversed_string = string;\n \
    \   let mut longest_postfix_length = 0;\n    for c in reversed_string.chars()\
    \ {\n        if longest_postfix_length == 0 {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n        if longest_postfix_length < c.len_utf8()\
    \ {\n            longest_postfix_length = c.len_utf8();\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for c in reversed_string.chars() {\n        if longest_postfix_length ==\
    \ 0 {\n            longest_postfix_length = c.len_utf8();\n        }\n       \
    \ if longest_postfix_length < c.len_utf8() {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n    }\n    let mut reversed_string = string;\n \
    \   let mut longest_postfix_length = 0;\n    for c in reversed_string.chars()\
    \ {\n        if longest_postfix_length == 0 {\n            longest_postfix_length\
    \ = c.len_utf8();\n        }\n        if longest_postfix_length < c.len_utf8()\
    \ {\n            longest_postfix_length = c.len_utf8();\n        }\n    }\n  \
    \  let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for c in reversed_string.chars() {\n        if longest_postfix_length ==\
    \ 0 {\n            longest_postfix_length = c.len_utf8();\n        }\n       \
    \ if longest_postfix_length < c.len_utf8() {\n            lon\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp3kao_vcq.rs:89:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n74 |     for c in\
    \ reversed_string.chars() {\n   |                                      - unclosed\
    \ delimiter\n...\n78 |         if longest_postfix_length < c.len_utf8() {\n  \
    \ |                                                  - this delimiter might not\
    \ be properly closed...\n79 |             lon\n80 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n89 | }\n   |   ^\n\nerror[E0425]:\
    \ cannot find value `lon` in this scope\n  --> /tmp/tmp3kao_vcq.rs:79:13\n   |\n\
    79 |             lon\n   |             ^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3kao_vcq.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3kao_vcq.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3kao_vcq.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3kao_vcq.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3kao_vcq.rs:86:17\n   |\n86 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3kao_vcq.rs:86:25\n   |\n86 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3kao_vcq.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: can"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = 0;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix = \"\";\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_postfix_len = 0;\n \
    \   let mut longest_postfix_len = 0;\n    let mut longest_\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnq5zsxw9.rs:63:21\n   |\n\
    63 |     let mut longest_\n   |                     ^ help: add `;` here\n64 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpnq5zsxw9.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnq5zsxw9.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnq5zsxw9.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnq5zsxw9.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnq5zsxw9.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -->"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_palindrome = String::from(\"\");\n    let mut longest_palindrome_length\
    \ = 0;\n    let mut longest_palindrome_start = 0;\n    let mut longest_palindrome_end\
    \ = 0;\n\n    while !string.is_empty() {\n        let mut current_char = string.chars().next().unwrap();\n\
    \        let mut current_char_length = 1;\n\n        while !current_char.is_ascii_lowercase()\
    \ {\n            current_char = string.chars().next().unwrap();\n            current_char_length\
    \ += 1;\n        }\n\n        if current_char_length > longest_palindrome_length\
    \ {\n            longest_palindrome_length = current_char_length;\n          \
    \  longest_palindrome_start = longest_palindrome_end;\n            longest_palindrome_end\
    \ = longest_palindrome_start + longest_palindrome_length - 1;\n        }\n\n \
    \       if current_char == string[longest_palindrome_end - 1] {\n            longest_palindrome_end\
    \ -= 1;\n        } else {\n            longest_palindrome_end += 1;\n        }\n\
    \n        string = string.chars().take(longest_palindrome_end - longest_palindrome_start\
    \ + 1).collect();\n        reversed_string += string[longest_palindrome_end -\
    \ longest_palindrome_start + 1];\n    }\n\n    longest_palindrome = longest_palindrome.chars().collect();\n\
    \    reversed_string += longest_palindrome;\n\n    String::from(reversed_string)\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgfx70jt7.rs:52:17\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgfx70jt7.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgfx70jt7.rs:53:17\n   |\n53 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgfx70jt7.rs:53:25\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgfx70jt7.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgfx70jt7.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgfx70jt7.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgfx70jt7.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgfx70jt7.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgfx70jt7.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmpgfx70jt7.rs:34:28\n\
    \   |\n34 |         if current_char == string[longest_palindrome_end - 1] {\n\
    \   |                            ^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = i;\n        while j +\
    \ 1 < string.len() && string[j + 1] == string[j] {\n            j += 1\n     \
    \   }\n        reverse.push_str(&string[i..j]);\n        i = j;\n    }\n    reverse\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpluksg0xu.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpluksg0xu.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpluksg0xu.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpluksg0xu.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpluksg0xu.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpluksg0xu.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpluksg0xu.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpluksg0xu.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpluksg0xu.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpluksg0xu.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpluksg0xu.rs:17:39\n   |\n\
    17 |         while j + 1 < string.len() && string[j + 1] == string[j] {\n   |\
    \                                  "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut prefix = string;\n    let mut suffix\
    \ = string;\n    let mut longest_postfix = string;\n    let mut longest_postfix_len\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut longest_postfix_end\
    \ = -1;\n    let mut longest_postfix_start = -1;\n    let mut \n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmphtj6m6ae.rs:65:1\n\
    \   |\n65 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmphtj6m6ae.rs:69:17\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:69:25\n \
    \  |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphtj6m6ae.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphtj6m6ae.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphtj6m6ae.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphtj6m6ae.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphtj6m6ae.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphtj6m6ae.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_prefix_len\
    \ = 0;\n    while !string.is_empty() {\n        let mut postfix = string;\n  \
    \      let mut postfix_len = 0;\n        while !postfix.is_empty() {\n       \
    \     let c = postfix.chars().next().unwrap();\n            if c != c.to_ascii_lowercase().unwrap()\
    \ {\n                break;\n            }\n            postfix_len += 1;\n  \
    \          postfix = postfix.chars().next().unwrap();\n        }\n        if postfix_len\
    \ > longest_postfix_len {\n            longest_postfix_len = postfix_len;\n  \
    \          longest_postfix = postfix.to_ascii_lowercase().unwrap();\n        }\n\
    \        let mut prefix = string;\n        let mut prefix_len = 0;\n        while\
    \ !prefix.is_empty() {\n            let c = prefix.chars().next().unwrap();\n\
    \            if c != c.to_ascii_lowercase().unwrap() {\n                break;\n\
    \            }\n            prefix_len += 1;\n            prefix = prefix.chars().next().unwrap();\n\
    \        }\n        if prefix_len > longest_prefix_len {\n            longest_prefix_len\
    \ = prefix_len;\n            longest_prefix = prefix.to_ascii_lowercase().unwrap();\n\
    \        }\n        string = string[longest_prefix_len..].to_ascii_lowercase().unwrap();\n\
    \        reversed_string += string[longest_postfix_len..].to_ascii_lowercase().unwrap();\n\
    \    }\n    reversed_string += longest_postfix.to_ascii_lowercase().unwrap();\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `longest_prefix` in this scope\n  --> /tmp/tmpmm_7c5no.rs:44:13\n\
    \   |\n44 |             longest_prefix = prefix.to_ascii_lowercase().unwrap();\n\
    \   |             ^^^^^^^^^^^^^^ help: a local variable with a similar name exists:\
    \ `longest_postfix`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmm_7c5no.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmm_7c5no.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmm_7c5no.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmm_7c5no.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmm_7c5no.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmm_7c5no.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmm_7c5no.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmm_7c5no.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmm_7c5no.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmm_7c5no.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {rig"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut longest\
    \ = 0;\n    while !string.is_empty() {\n        let mut i = 1;\n        while\
    \ i <= string.len() {\n            if string[i - 1].chars().nth(longest).unwrap()\
    \ != string[i - 1].chars().nth(longest + 1).unwrap() {\n                break;\n\
    \            }\n            i += 1;\n        }\n        longest = i;\n       \
    \ reverse.push_str(&string[longest - 1]);\n        string.truncate(longest + 1);\n\
    \    }\n    reverse\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplmwtsy6e.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplmwtsy6e.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplmwtsy6e.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplmwtsy6e.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplmwtsy6e.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplmwtsy6e.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplmwtsy6e.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplmwtsy6e.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplmwtsy6e.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplmwtsy6e.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmplmwtsy6e.rs:18:16\n   |\n\
    18 |             if string[i - 1].chars().nth(longest).unwrap() != string[i -\
    \ 1].chars().nth(longest + 1).unwr"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix = \"\";\n    let mut\
    \ longest_prefix_length = 0;\n    let mut longest_prefix = \"\";\n    while !string.is_empty()\
    \ {\n        let mut current_postfix_length = 0;\n        let mut current_postfix\
    \ = \"\";\n        let mut current_prefix_length = 0;\n        let mut current_prefix\
    \ = \"\";\n        while !string.is_empty() {\n            let mut current_char\
    \ = string.remove(0);\n            if current_char == current_postfix.chars().last().unwrap()\
    \ {\n                current_postfix_length += 1;\n                current_postfix\
    \ = current_postfix.to_owned();\n            } else {\n                break;\n\
    \            }\n        }\n        while !string.is_empty() {\n            let\
    \ mut current_char = string.remove(0);\n            if current_char == current_prefix.chars().last().unwrap()\
    \ {\n                current_prefix_length += 1;\n                current_prefix\
    \ = current_prefix.to_owned();\n            } else {\n                break;\n\
    \            }\n        }\n        if current_postfix_length < longest_postfix_length\
    \ {\n            longest_postfix_length = current_postfix_length;\n          \
    \  longest_postfix = current_postfix;\n        }\n        if current_prefix_length\
    \ < longest_prefix_length {\n            longest_prefix_length = current_prefix_length;\n\
    \            longest_prefix = current_prefix;\n        }\n    }\n    longest_postfix.append(&reversed_string[longest_prefix_length..]);\n\
    \    longest_prefix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy30p3o7n.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy30p3o7n.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy30p3o7n.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy30p3o7n.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy30p3o7n.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy30p3o7n.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy30p3o7n.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy30p3o7n.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy30p3o7n.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy30p3o7n.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpy30p3o7n.rs:27:35\n   |\n27 |                 current_postfix\
    \ = current_postfix.to_owned();\n   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |   "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n    let mut\
    \ longest_postfix_index = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix = string;\n        let mut postfix_length = 0;\n        while !postfix.is_empty()\
    \ {\n            postfix_length += 1;\n            postfix = postfix.chars().next().unwrap();\n\
    \        }\n        if postfix_length > longest_postfix_length {\n           \
    \ longest_postfix_length = postfix_length;\n            longest_postfix = postfix.to_string();\n\
    \        }\n        if postfix.chars().next().unwrap().is_lowercase() {\n    \
    \        string = string.chars().skip(longest_postfix_length).collect();\n   \
    \     } else {\n            string = string.chars().skip(longest_postfix_length).collect();\n\
    \        }\n    }\n    longest_postfix = longest_postfix.chars().collect();\n\
    \    reversed_string = longest_postfix.iter().rev().collect();\n    longest_postfix_index\
    \ = reversed_string.len();\n    longest_postfix.append(reversed_string);\n   \
    \ longest_postfix.to_string()\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzrb9mro9.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzrb9mro9.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzrb9mro9.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzrb9mro9.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzrb9mro9.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzrb9mro9.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzrb9mro9.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzrb9mro9.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzrb9mro9.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzrb9mro9.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzrb9mro9.rs:22:23\n   |\n22 |             postfix = postfix.chars().next().unwrap();\n\
    \   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a\
    \ co"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut postfix = string;\n    let mut i =\
    \ 0;\n    while i < reverse.len() {\n        if reverse[i] != postfix[i] {\n \
    \           break;\n        }\n        i += 1;\n    }\n    postfix.push_str(&reverse[i..]);\n\
    \    postfix\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpi_bdvls4.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi_bdvls4.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi_bdvls4.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi_bdvls4.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi_bdvls4.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi_bdvls4.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi_bdvls4.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi_bdvls4.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi_bdvls4.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi_bdvls4.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpi_bdvls4.rs:16:12\n   |\n\
    16 |         if reverse[i] != postfix[i] {\n   |            ^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n  "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut suffix_length = 0;\n    let\
    \ mut prefix_length = 0;\n    while suffix_length != 0 {\n        let mut suffix_length\
    \ = 0;\n        let mut prefix_length = 0;\n        while suffix_length != 0 {\n\
    \            let mut suffix_length = reversed_string.len();\n            let mut\
    \ prefix_length = 0;\n            while suffix_length != 0 {\n               \
    \ let mut suffix_length = suffix_length - 1;\n                let mut prefix_length\
    \ = reversed_string.len();\n                while suffix_length != 0 {\n     \
    \               let mut suffix_length = suffix_length - 1;\n                 \
    \   let mut prefix_length = prefix_length - 1;\n                    let mut reversed_string\
    \ = reversed_string[..prefix_length].reverse() + reversed_string[prefix_length..];\n\
    \                    if reversed_string == reversed_string.to_lowercase() {\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    reversed_string\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgflftdo_.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgflftdo_.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgflftdo_.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgflftdo_.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgflftdo_.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgflftdo_.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgflftdo_.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgflftdo_.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgflftdo_.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgflftdo_.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `reverse` found for type `str` in the current scope\n  --> /tmp/tmpgflftdo_.rs:27:80\n\
    \   |\n27 |                     let mut reversed_string = reversed_string[..prefix_length].rever"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut palindrome = string;\n    let mut suffix_length\
    \ = 0;\n    let mut prefix_length = 0;\n    while palindrome.len() > 0 {\n   \
    \     let mut suffix_start = palindrome.len();\n        while suffix_start > 0\
    \ && palindrome[suffix_start - 1] == palindrome[suffix_start] {\n            suffix_start\
    \ -= 1;\n        }\n        let mut prefix_start = suffix_start;\n        while\
    \ prefix_start > 0 && palindrome[prefix_start - 1] == palindrome[prefix_start]\
    \ {\n            prefix_start -= 1;\n        }\n        if suffix_start < prefix_start\
    \ {\n            palindrome = palindrome.clone();\n            palindrome.push(palindrome[prefix_start..].to_lowercase());\n\
    \            palindrome.push(palindrome[suffix_start..].to_lowercase());\n   \
    \         suffix_length += 1;\n            prefix_length += 1;\n        } else\
    \ {\n            palindrome = palindrome.clone();\n            palindrome.push(palindrome[prefix_start..].to_lowercase());\n\
    \            palindrome.push(palindrome[suffix_start..].to_lowercase());\n   \
    \         suffix_length += 1;\n            prefix_length += 1;\n            palindrome.push(palindrome[suffix_start..].to_lowercase());\n\
    \            palindrome.push(palindrome[prefix_start..].to_lowercase());\n   \
    \         suffix_length += 1;\n            prefix_length += 1;\n        }\n  \
    \  }\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw8lsdo3g.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw8lsdo3g.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw8lsdo3g.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw8lsdo3g.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw8lsdo3g.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpw8lsdo3g.rs:18:35\n   |\n\
    18 |         while suffix_start > 0 && palindrome[suffix_start - 1] == palindrome[suffix_start]\
    \ {\n   |        "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_start = -1;\n \
    \   let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpn08bhy01.rs:63:29\n   |\n\
    63 |     let mut longest_postfix_\n   |                             ^ help: add\
    \ `;` here\n64 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpn08bhy01.rs:68:17\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpn08bhy01.rs:68:25\n \
    \  |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn08bhy01.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn08bhy01.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn08bhy01.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn08bhy01.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn08bhy01.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn08bhy01.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn08bhy01.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn08bhy01.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_prefix_len\
    \ = 0;\n    while !string.is_empty() {\n        let mut postfix = string;\n  \
    \      let mut prefix_len = 0;\n        while !postfix.is_empty() {\n        \
    \    if postfix.chars().next().unwrap() == postfix.chars().last().unwrap() {\n\
    \                postfix.pop();\n            } else {\n                break;\n\
    \            }\n            prefix_len += 1;\n        }\n        if prefix_len\
    \ > longest_prefix_len {\n            longest_prefix_len = prefix_len;\n     \
    \       longest_postfix = postfix;\n        }\n        let mut postfix_reversed\
    \ = postfix;\n        let mut postfix_reversed_len = 0;\n        while !postfix_reversed.is_empty()\
    \ {\n            if postfix_reversed.chars().next().unwrap() == postfix_reversed.chars().last().unwrap()\
    \ {\n                postfix_reversed.pop();\n            } else {\n         \
    \       break;\n            }\n            postfix_reversed_len += 1;\n      \
    \  }\n        if postfix_reversed_len > longest_postfix_len {\n            longest_postfix_len\
    \ = postfix_reversed_len;\n            reversed_string += &postfix_reversed[0..longest_postfix_len];\n\
    \        }\n        string = &postfix_reversed[longest_postfix_len..];\n    }\n\
    \    string += &reversed_string[longest_prefix_len..];\n    string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkfdhl5ob.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkfdhl5ob.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkfdhl5ob.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkfdhl5ob.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkfdhl5ob.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkfdhl5ob.rs:30:31\n   |\n30 |             longest_postfix\
    \ = postfix;\n   |                               ^^^^^^^\n   |               \
    \                |\n   |            "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ longest_postfix_length < string.len() {\n        let mut postfix_index = longest_postfix_index;\n\
    \        let mut postfix_length = longest_postfix_length;\n        while postfix_length\
    \ < string.len() {\n            let mut postfix_char = string[postfix_index];\n\
    \            let mut postfix_char_length = postfix_length;\n            while\
    \ postfix_char_length < string.len() {\n                let mut postfix_char_char\
    \ = string[postfix_index + postfix_char_length];\n                let mut postfix_char_char_length\
    \ = postfix_char_length;\n                while postfix_char_char_length < string.len()\
    \ {\n                    let mut postfix_char_char_char = string[postfix_index\
    \ + postfix_char_length + postfix_char_char_length];\n                    let\
    \ mut postfix_char_char_char_length = postfix_char_char_length;\n            \
    \        while postfix_char_char_char_length < string.len() {\n              \
    \          let mut postfix_char_char_char_char = string[postfix_index + postfix_char_length\
    \ + postfix_char_char_length + postfix_char_char_char_length];\n             \
    \           let mut postfix_char_char_char_char_length = postfix_char_char_char_length;\n\
    \                        while postfix_char_char_char_char_length < string.len()\
    \ {\n                            let mut postfix_char_char_char_char_char = string[postfix_index\
    \ + postfix_char_length + postfix_char_char_length + postfix_char_char_char_length\
    \ + postfix_char_char_char_char_length];\n                            let mut\
    \ postfix_char_char_char_char_char_length = postfix_char_char_char_char_length;\n\
    \                            while postfix_char_char_char_char_char_length < string.len()\
    \ {\n                                let mut postfix_char_char_char_char_char_char\
    \ = string[postfix_index + postfix_char_length + postfix_char_char_length + postfix_char_char_char_length\
    \ + postfix_char_char_char_char_length + postfix_char_char_char_char_char_length];\n\
    \                                let mut postfix_char_char_char_char_char_char_length\
    \ = postfix_char_char_char_char_char_length;\n                               \
    \ while postfix_char_char_char_char_char_char_length < string.len() {\n      \
    \                              let mut postfix_char_char_char_char_char_char_char\
    \ = string[postfix_index + postfix_char_length + postfix_char_char_length + postfix_char_char_char_length\
    \ + postfix_char_char_char_char_length + postfix_char_char_char_char_char_length\
    \ + postfix_char_char_char_char_char_char_length];\n                         \
    \           let \n}\n\nfn main() {\n    let candidate = make_palindrome;\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpyhmx_9a9.rs:49:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while longest_postfix_length\
    \ < string.len() {\n   |                                                 - unclosed\
    \ delimiter\n...\n19 |         while postfix_length < string.len() {\n   |   \
    \                                          - unclosed delimiter\n...\n22 |   \
    \          while postfix_char_length < string.len() {\n   |                  \
    \                                    - unclosed delimiter\n...\n25 |         \
    \        while postfix_char_char_length < string.len() {\n   |               \
    \                                                - unclosed delimiter\n...\n28\
    \ |                     while postfix_char_char_char_length < string.len() {\n\
    \   |                                                                        -\
    \ unclosed delimiter\n...\n31 |                         while postfix_char_char_char_char_length\
    \ < string.len() {\n   |                                                     \
    \                            - unclosed delimiter\n...\n34 |                 \
    \            while postfix_char_char_char_char_char_length < string.len() {\n\
    \   |                                                                        \
    \                  - unclosed delimiter\n...\n37 |                           \
    \      while postfix_char_char_char_char_char_char_length < string.len() {\n \
    \  |                                                                         \
    \                          - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    49 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpyhmx_9a9.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpyhmx_9a9.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this sco"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   while !string.is_empty() {\n        let mut postfix_length = string.len();\n\
    \        let mut postfix_index = 0;\n        while postfix_index != postfix_length\
    \ {\n            if string[postfix_index] != string[postfix_length - postfix_index\
    \ - 1] {\n                break;\n            }\n            postfix_index +=\
    \ 1;\n        }\n        if postfix_index == postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n            longest_postfix_index = postfix_index;\n    \
    \    }\n        let mut postfix_index2 = 0;\n        while postfix_index2 != postfix_length\
    \ {\n            if string[postfix_index2] != string[postfix_length - postfix_index2\
    \ - 1] {\n                break;\n            }\n            postfix_index2 +=\
    \ 1;\n        }\n        if postfix_index2 == postfix_length {\n            longest_postfix_index2\
    \ = postfix_index2;\n        }\n        let mut postfix_index3 = 0;\n        while\
    \ postfix_index3 != postfix_length {\n            if string[postfix_index3] !=\
    \ string[postfix_length - postfix_index3 - 1] {\n                break;\n    \
    \        }\n            postfix_index3 += 1;\n        }\n        if postfix_index3\
    \ == postfix_length {\n            longest_postfix_index3 = postfix_index3;\n\
    \        }\n        string += &string[longest_postfix_index..postfix_index];\n\
    \        reversed_string += &string[postfix_index2..postfix_index];\n        string\
    \ += &string[longest_postfix_index2..postfix_index2];\n        string += &string[longest_postfix_index3..postfix_index3];\n\
    \        reversed_string += &string[postfix_length..postfix_length];\n    }\n\
    \    string += &string[longest_postfix_index..];\n    reversed_string += &string[longest_postfix_index..];\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfb1eaxr7.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfb1eaxr7.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfb1eaxr7.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfb1eaxr7.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfb1eaxr7.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpfb1eaxr7.rs:22:16\n   |\n\
    22 |             if string[postfix_index] != string[postfix_length - postfix_index\
    \ - 1] {\n   |                "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_index\
    \ = 0;\n    while !string.is_empty() {\n        let mut index = string.len() -\
    \ 1;\n        while index >= 0 {\n            if string[index] != string[string.len()\
    \ - index] {\n                break;\n            }\n            index -= 1;\n\
    \        }\n        let postfix = &string[index..];\n        let mut reversed_postfix\
    \ = \"\";\n        for c in postfix.chars() {\n            reversed_postfix.push(c);\n\
    \        }\n        if longest_postfix_len < reversed_postfix.len() {\n      \
    \      longest_postfix_len = reversed_postfix.len();\n            longest_postfix\
    \ = reversed_postfix;\n            longest_postfix_index = index;\n        }\n\
    \        string = &string[index..];\n    }\n    string\n}\n\nfn main() {\n   \
    \ let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplo3prkiu.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplo3prkiu.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplo3prkiu.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplo3prkiu.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplo3prkiu.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplo3prkiu.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplo3prkiu.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplo3prkiu.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplo3prkiu.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplo3prkiu.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmplo3prkiu.rs:20:16\n   |\n\
    20 |             if string[index] != string[string.len() - index] {\n   |    \
    \            ^^^^^^^^^^^^^ `String`"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_length_index = 0;\n    let mut longest_postfix_length_index_index\
    \ = 0;\n    let mut longest_postfix_length_index_index_index = 0;\n    while !string.is_empty()\
    \ {\n        let mut current_postfix_length = 0;\n        let mut current_postfix_index\
    \ = 0;\n        let mut current_postfix_length_index = 0;\n        let mut current_postfix_length_index_index\
    \ = 0;\n        let mut current_postfix_length_index_index_index = 0;\n      \
    \  while !string.is_empty() {\n            let current_postfix_length = string.len()\
    \ - current_postfix_index;\n            let current_postfix_length_index = string.len()\
    \ - current_postfix_index - 1;\n            let current_postfix_length_index_index\
    \ = string.len() - current_postfix_index - 2;\n            let current_postfix_length_index_index_index\
    \ = string.len() - current_postfix_index - 3;\n            if current_postfix_length\
    \ < longest_postfix_length {\n                longest_postfix_length = current_postfix_length;\n\
    \                longest_postfix_index = current_postfix_index;\n            \
    \    longest_postfix_length_index = current_postfix_length_index;\n          \
    \      longest_postfix_length_index_index = current_postfix_length_index_index;\n\
    \                longest_postfix_length_index_index_index = current_postfix_length_index_index_index;\n\
    \            }\n            if current_postfix_length_index < longest_postfix_length_index_index\
    \ {\n                longest_postfix_length_index_index = current_postfix_length_index_index;\n\
    \                longest_postfix_length_index_index_index = current_postfix_length_index_index_index;\n\
    \            }\n            if current_postfix_length_index_index < longest_postfix_length_index_index_index\
    \ {\n                longest_postfix_length_index_index_index = current_postfix_length_index_index_index;\n\
    \            }\n            if current_postfix_length_index_index_index < longest_postfix_length_index_index_index_index\
    \ {\n                longest_postfix_length_index_index_index_index = current_postfix_length_index_index_index_index;\n\
    \            }\n            if current_postfix_length < longest_postfix_length_index_index_index_index\
    \ {\n                longest_postfix_length = current_postfix_length;\n      \
    \          longest_postfix_index = current_postfix_index;\n                longest_postfix_length_index\
    \ = current_postfix_length_index;\n                longest_postfix_length_index_index\
    \ = current_postfix_length_index_index;\n                longest_postfix_length_index_index_index\
    \ = current_postfix_length_index_index_index;\n                longest_postfix_length_index_index_index_index\
    \ = current_postfix_length_index_index_index_index;\n\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpkmsv1l5l.rs:64:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n19 |     while !string.is_empty()\
    \ {\n   |                              - unclosed delimiter\n...\n25 |       \
    \  while !string.is_empty() {\n   |                                  - unclosed\
    \ delimiter\n...\n47 |             if current_postfix_length < longest_postfix_length_index_index_index_index\
    \ {\n   |                                                                    \
    \                    - this delimiter might not be properly closed...\n...\n55\
    \ | }\n   | - ...as it matches this but it has different indentation\n...\n64\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `longest_postfix_length_index_index_index_index`\
    \ in this scope\n  --> /tmp/tmpkmsv1l5l.rs:44:59\n   |\n44 |             if current_postfix_length_index_index_index\
    \ < longest_postfix_length_index_index_index_index {\n   |                   \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `longest_postfix_length_index_index_index`\n\
    \nerror[E0425]: cannot find value `longest_postfix_length_index_index_index_index`\
    \ in this scope\n  --> /tmp/tmpkmsv1l5l.rs:45:17\n   |\n45 |                 longest_postfix_length_index_index_index_index\
    \ = current_postfix_length_index_index_index_index;\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `longest_postfix_length_index_index_index`\n\
    \nerror[E0425]: cannot find value `current_postfix_length_index_index_index_index`\
    \ in this scope\n  --> /tmp/tmpkmsv1l5l.rs:45:66\n   |\n45 |                 longest_postfix_length_index_index_index_index\
    \ = current_postfix_length_index_index_index_index;\n   |                    \
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `current_postfix_length_index_"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut postfix = string;\n    let mut i =\
    \ 0;\n    while i < postfix.len() {\n        if postfix[i] == reverse[postfix.len()\
    \ - i - 1] {\n            i += 1;\n        } else {\n            postfix = postfix.to_owned()\
    \ + &reverse[postfix.len() - i - 1];\n        }\n    }\n    postfix.to_owned()\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpveo7yih3.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpveo7yih3.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpveo7yih3.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpveo7yih3.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpveo7yih3.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpveo7yih3.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpveo7yih3.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpveo7yih3.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpveo7yih3.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpveo7yih3.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpveo7yih3.rs:16:12\n   |\n\
    16 |         if postfix[i] == reverse[postfix.len() - i - 1] {\n   |         \
    \   ^^^^^^^^^^ `String` cannot be i"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ !string.is_empty() {\n        let mut index = longest_postfix_index;\n     \
    \   let mut char = string.chars().nth(longest_postfix_index).unwrap();\n     \
    \   while !char.is_ascii_lowercase() {\n            longest_postfix_index += 1;\n\
    \            char = string.chars().nth(longest_postfix_index).unwrap();\n    \
    \    }\n        let mut is_palindrome = true;\n        while !char.is_ascii_lowercase()\
    \ {\n            longest_postfix_index += 1;\n            char = string.chars().nth(longest_postfix_index).unwrap();\n\
    \            if char != char.to_ascii_lowercase() {\n                is_palindrome\
    \ = false;\n                break;\n            }\n        }\n        if is_palindrome\
    \ {\n            reversed_string += char.to_ascii_lowercase();\n            longest_postfix_length\
    \ += 1;\n        }\n        longest_postfix_index += 1;\n        string = string.chars().nth(longest_postfix_index).unwrap();\n\
    \    }\n    string + reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt_62g0ft.rs:44:17\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_62g0ft.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt_62g0ft.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt_62g0ft.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt_62g0ft.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt_62g0ft.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt_62g0ft.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt_62g0ft.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt_62g0ft.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt_62g0ft.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `&str`\n  --> /tmp/tmpt_62g0ft.rs:33:13\n\
    \   |\n33 |             reversed_string += char.to_ascii_lowercase();\n   |  \
    \           -----------"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_start = -1;\n \
    \   let mut longest_postfix_end = -1;\n    let mut longest_postfix_suffix = \"\
    \";\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = 0;\n    let mut longest_postfix_suffix_start\
    \ = -1;\n    let mut longest_postfix_suffix_end = -1;\n    let mut longest_postfix_suffix_length\
    \ = 0;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let \n}\n\nfn main() {\n    let candidate = make_palindrome;\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpov8zm4b4.rs:57:1\n  \
    \ |\n57 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpov8zm4b4.rs:61:17\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpov8zm4b4.rs:61:25\n \
    \  |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpov8zm4b4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpov8zm4b4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpov8zm4b4.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpov8zm4b4.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpov8zm4b4.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpov8zm4b4.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpov8zm4b4.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpov8zm4b4.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reverse_string = \"\";\n    let\
    \ mut reverse_start = 0;\n    let mut reverse_end = 0;\n    while !palindrome.is_empty()\
    \ {\n        let mut reverse_string = palindrome[..reverse_end].to_string();\n\
    \        reverse_string += &palindrome[reverse_end..];\n        reverse_end =\
    \ reverse_string.len();\n        palindrome = &palindrome[..reverse_end];\n  \
    \  }\n    palindrome = &palindrome[..reverse_end];\n    reverse_string += &palindrome[reverse_end..];\n\
    \    reverse_start += reverse_end;\n    reverse_string += &palindrome[..reverse_start];\n\
    \    reverse_start += reverse_start;\n    reverse_string\n}\n\nfn main() {\n \
    \   let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpip4lf6os.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpip4lf6os.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpip4lf6os.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpip4lf6os.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpip4lf6os.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpip4lf6os.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpip4lf6os.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpip4lf6os.rs:35:25\n   |\n35 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpip4lf6os.rs:36:17\n  \
    \ |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpip4lf6os.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpip4lf6os.rs:20:22\n   |\n20 |         palindrome = &palindrome[..reverse_end];\n\
    \   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_len = string.len();\n\
    \    while reversed_string_len > 0 {\n        let mut reversed_string_start =\
    \ reversed_string.len() - 1;\n        while reversed_string_start >= 0 && reversed_string[reversed_string_start]\
    \ != string[reversed_string_start] {\n            reversed_string_start -= 1;\n\
    \        }\n        reversed_string_len = reversed_string_start + 1;\n       \
    \ reversed_string = &reversed_string[reversed_string_start..];\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp42sm02ik.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp42sm02ik.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp42sm02ik.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp42sm02ik.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp42sm02ik.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp42sm02ik.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp42sm02ik.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp42sm02ik.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp42sm02ik.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp42sm02ik.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp42sm02ik.rs:16:45\n   |\n\
    16 |         while reversed_string_start >= 0 && reversed_string[reversed_string_start]\
    \ != string[reversed_str"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_length = 0;\n    let mut\
    \ longest_postfix_index = 0;\n    let mut longest_postfix_index2 = 0;\n    let\
    \ mut longest_postfix_index3 = 0;\n    let mut longest_postfix_index4 = 0;\n \
    \   let mut longest_postfix_index5 = 0;\n    let mut longest_postfix_index6 =\
    \ 0;\n    let mut longest_postfix_index7 = 0;\n    let mut longest_postfix_index8\
    \ = 0;\n    let mut longest_postfix_index9 = 0;\n    let mut longest_postfix_index10\
    \ = 0;\n    let mut longest_postfix_index11 = 0;\n    let mut longest_postfix_index12\
    \ = 0;\n    let mut longest_postfix_index13 = 0;\n    let mut longest_postfix_index14\
    \ = 0;\n    let mut longest_postfix_index15 = 0;\n    let mut longest_postfix_index16\
    \ = 0;\n    let mut longest_postfix_index17 = 0;\n    let mut longest_postfix_index18\
    \ = 0;\n    let mut longest_postfix_index19 = 0;\n    let mut longest_postfix_index20\
    \ = 0;\n    let mut longest_postfix_index21 = 0;\n    let mut longest_postfix_index22\
    \ = 0;\n    let mut longest_postfix_index23 = 0;\n    let mut longest_postfix_index24\
    \ = 0;\n    let mut longest_postfix_index25 = 0;\n    let mut longest_postfix_index26\
    \ = 0;\n    let mut longest_postfix_index27 = 0;\n    let mut longest_postfix_index28\
    \ = 0;\n    let mut longest_postfix_index29 = 0;\n    let mut longest_postfix_index30\
    \ = 0;\n    let mut longest_postfix_index31 = 0;\n    let mut longest_postfix_index32\
    \ = 0;\n    let mut longest_postfix_index33 = 0;\n    let mut longest_postfix_index34\
    \ = 0;\n    let mut longest_postfix_index35 = 0;\n    let mut longest_postfix_index36\
    \ = 0;\n    let mut longest_postfix_index37 = 0;\n    let mut longest_postfix_index38\
    \ = 0;\n    let mut longest_postfix_index39 = 0;\n    let mut longest_postfix_index40\
    \ = 0;\n    let mut longest_postfix_index41 = 0;\n    let mut longest_postfix_index42\
    \ = 0;\n    let mut longest_postfix_index43 = 0;\n    let mut longest_postfix_index44\
    \ = 0;\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8k0porko.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8k0porko.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8k0porko.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8k0porko.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8k0porko.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8k0porko.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8k0porko.rs:11:39\n   |\n11 | fn make_palindrome(string:\
    \ String) -> String {\n   |    ---------------                    ^^^^^^ expected\
    \ struct `String`, found `()`\n "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut last_index = 0;\n    while palindrome.len() > 0 {\n        let mut index\
    \ = palindrome.len();\n        while index > 0 {\n            let mut last_char\
    \ = reversed_string[last_index];\n            palindrome = &palindrome[..index].join()\
    \ + &last_char + &palindrome[index..];\n            index -= 1;\n            last_index\
    \ += 1;\n        }\n        last_index += 1;\n    }\n    palindrome\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1bfygpnz.rs:30:17\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1bfygpnz.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1bfygpnz.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1bfygpnz.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1bfygpnz.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1bfygpnz.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1bfygpnz.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1bfygpnz.rs:33:25\n   |\n33 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1bfygpnz.rs:34:17\n  \
    \ |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1bfygpnz.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp1bfygpnz.rs:18:33\n\
    \   |\n18 |             let mut last_char = reversed_string[last_index];\n   |\
    \                                 ^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n\n    while\
    \ !string.is_empty() {\n        let mut index = string.len();\n        while index\
    \ > 0 {\n            let mut char = string[--index];\n            if char == char.to_reverse_order()\
    \ {\n                reversed_string += char;\n                break;\n      \
    \      }\n        }\n        string += reversed_string;\n        reversed_string\
    \ = \"\";\n    }\n\n    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8uotpvyv.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8uotpvyv.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8uotpvyv.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8uotpvyv.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8uotpvyv.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8uotpvyv.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8uotpvyv.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8uotpvyv.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8uotpvyv.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8uotpvyv.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0600]: cannot\
    \ apply unary operator `-` to type `usize`\n  --> /tmp/tmp8uotpvyv.rs:18:36\n\
    \   |\n18 |             let mut char = string[--index];\n   |                \
    \                    ^^^^^^ cannot apply "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while suffix_length < reversed_string.len() {\n\
    \        let mut suffix_start = suffix_length;\n        let mut suffix_end = suffix_length;\n\
    \        while suffix_start < reversed_string.len() {\n            if reversed_string[suffix_start]\
    \ != reversed_string[suffix_end] {\n                break;\n            }\n  \
    \          suffix_start += 1;\n            suffix_end += 1;\n        }\n     \
    \   if suffix_start == reversed_string.len() {\n            break;\n        }\n\
    \        let mut prefix_start = prefix_length;\n        let mut prefix_end = prefix_length;\n\
    \        while prefix_start < suffix_end {\n            if reversed_string[prefix_start]\
    \ != reversed_string[prefix_end] {\n                break;\n            }\n  \
    \          prefix_start += 1;\n            prefix_end += 1;\n        }\n     \
    \   if prefix_start == suffix_end {\n            break;\n        }\n        reversed_string\
    \ = reversed_string[..suffix_start].to_string();\n        suffix_length = suffix_end\
    \ - suffix_start;\n        prefix_length = prefix_end - prefix_start;\n    }\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2ak5rado.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2ak5rado.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2ak5rado.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2ak5rado.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2ak5rado.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2ak5rado.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2ak5rado.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2ak5rado.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2ak5rado.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2ak5rado.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp2ak5rado.rs:19:16\n   |\n\
    19 |             if reversed_string[suffix_start] != reversed_string[suffix_end]\
    \ {\n   |                ^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut longest = string;\n    let mut longest_index\
    \ = 0;\n    while !reverse.starts_with(&longest) {\n        reverse = reverse.chars().collect::<String>().rev().collect();\n\
    \        longest = longest.chars().collect::<String>().rev().collect();\n    \
    \    longest_index += 1;\n    }\n    let mut reverse = reverse.chars().collect::<String>().rev().collect();\n\
    \    reverse.insert(0, &longest[longest_index..]);\n    reverse\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp07aj5ztx.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp07aj5ztx.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp07aj5ztx.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp07aj5ztx.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp07aj5ztx.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp07aj5ztx.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp07aj5ztx.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp07aj5ztx.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp07aj5ztx.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp07aj5ztx.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: the method\
    \ `rev` exists for struct `String`, but its trait bounds were not satisfied\n\
    \   --> /tmp/tmp07aj5ztx.rs:16:55\n    |\n16  |           reverse = reverse.chars().collect::<String>().rev().co"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   while let Some(index) = string.rfind('a') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('b') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('c') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('d') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('e') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('f') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('g') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('h') {\n        longest_postfix_length\
    \ = index;\n        longest_postfix_index2 = index;\n        longest_postfix_index3\
    \ = index;\n        longest_postfix_index = index;\n        string = &string[index..];\n\
    \    }\n    while let Some(index) = string.rfind('i\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `while`, `for`, `loop` or `{` after a label\n  --> /tmp/tmpdboad29s.rs:75:1\n\
    \   |\n75 | }\n   | ^ expected `while`, `for`, `loop` or `{` after a label\n\n\
    error: expected expression, found `)`\n  --> /tmp/tmpdboad29s.rs:75:1\n   |\n\
    75 | }\n   | ^ expected expression\n\nerror: mismatched closing delimiter: `}`\n\
    \  --> /tmp/tmpdboad29s.rs:74:41\n   |\n11 | fn make_palindrome(string: String)\
    \ -> String {\n   |                                              - closing delimiter\
    \ possibly meant for this\n...\n74 |     while let Some(index) = string.rfind('i\n\
    \   |                                         ^ unclosed delimiter\n75 | }\n \
    \  | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdboad29s.rs:79:17\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdboad29s.rs:79:25\n \
    \  |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdboad29s.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdboad29s.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdboad29s.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdboad29s.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdboad29s.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdboad29s.rs:82:25\n   |\n82 |     asser"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut prefix_length = 0;\n    let mut\
    \ suffix_length = 0;\n    let mut suffix_index = 0;\n    let mut prefix_index\
    \ = 0;\n    while suffix_index < palindrome.len() {\n        let mut suffix_char\
    \ = match palindrome[suffix_index] {\n            c if c >= 'a' && c <= 'z' =>\
    \ (c - 'a' + 10) as u8,\n            c if c >= 'A' && c <= 'Z' => (c - 'A' + 10)\
    \ as u8,\n            c => c,\n        };\n        suffix_char = suffix_char -\
    \ suffix_length as u8;\n        let mut prefix_char = match palindrome[prefix_index]\
    \ {\n            c if c >= 'a' && c <= 'z' => (c - 'a' + 10) as u8,\n        \
    \    c if c >= 'A' && c <= 'Z' => (c - 'A' + 10) as u8,\n            c => c,\n\
    \        };\n        prefix_char = prefix_char - prefix_length as u8;\n      \
    \  if suffix_char == prefix_char {\n            suffix_length += 1;\n        \
    \    prefix_length += 1;\n            suffix_index += 1;\n            prefix_index\
    \ += 1;\n        } else {\n            palindrome = &palindrome[..suffix_index]\
    \ + &palindrome[suffix_index..prefix_index];\n            suffix_length = 0;\n\
    \            prefix_length = 0;\n            suffix_index += 1;\n            prefix_index\
    \ += 1;\n        }\n    }\n    palindrome\n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgo0amaq8.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgo0amaq8.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgo0amaq8.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgo0amaq8.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgo0amaq8.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgo0amaq8.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgo0amaq8.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgo0amaq8.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgo0amaq8.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgo0amaq8.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpgo0amaq8.rs:18:37\n   |\n\
    18 |         let mut suffix_char = match palindrome[suffix_index] {\n   |    \
    \                                 ^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = String::new();\n    let mut longest_postfix_len = 0;\n   \
    \ let mut longest_postfix_start = String::new();\n    let mut longest_postfix_start_len\
    \ = 0;\n    let mut longest_postfix_end = String::new();\n    let mut longest_postfix_end_len\
    \ = 0;\n    let mut longest_postfix_start_end = String::new();\n    let mut longest_postfix_start_end_len\
    \ = 0;\n    let mut longest_postfix_start_end_start = String::new();\n    let\
    \ mut longest_postfix_start_end_start_len = 0;\n    let mut longest_postfix_start_end_start_start\
    \ = String::new();\n    let mut longest_postfix_start_end_start_start_len = 0;\n\
    \    let mut longest_postfix_start_end_start_start_start = String::new();\n  \
    \  let mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut longest_postfix_start_end_start_start_start\
    \ = String::new();\n    let mut longest_postfix_start_end_start_start_start_len\
    \ = 0;\n    let mut longest_postfix_start_end_start_start_start_start = String::new();\n\
    \    let mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut\
    \ longest_postfix_start_end_start_start_start_start = String::new();\n    let\
    \ mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut longest_postfix_start_end_start_start_start_start\
    \ = String::new();\n    let mut longest_postfix_start_end_start_start_start_len\
    \ = 0;\n    let mut longest_postfix_start_end_start_start_start_start = String::new();\n\
    \    let mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut\
    \ longest_postfix_start_end_start_start_start_start = String::new();\n    let\
    \ mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut longest_postfix_start_end_start_start_start_start\
    \ = String::new();\n    let mut longest_postfix_start_end_start_start_start_len\
    \ = 0;\n    let mut longest_postfix_start_end_start_start_start_start = String::new();\n\
    \    let mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut\
    \ longest_postfix_start_end_start_start_start_start = String::new();\n    let\
    \ mut longest_postfix_start_end_start_start_start_len = 0;\n    let mut longest_postfix_start_end_start_start_start_start\
    \ = String::\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp8qzo0pzy.rs:47:1\n\
    \   |\n47 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp8qzo0pzy.rs:51:17\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:51:25\n \
    \  |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8qzo0pzy.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8qzo0pzy.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8qzo0pzy.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8qzo0pzy.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_palindrome = string;\n\
    \    let mut longest_palindrome_length = 0;\n    let mut longest_palindrome_start\
    \ = 0;\n    let mut longest_palindrome_end = 0;\n    let mut longest_palindrome_suffix\
    \ = 0;\n    let mut longest_palindrome_suffix_length = 0;\n    let mut longest_palindrome_suffix_start\
    \ = 0;\n    let mut longest_palindrome_suffix_end = 0;\n    let mut longest_palindrome_suffix_suffix\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_length = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_start = 0;\n    let mut longest_palindrome_suffix_suffix_end\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_length = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_start\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_end = 0;\n    let\
    \ mut longest_palindrome_suffix_suffix_suffix_suffix = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_length\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_start = 0;\n\
    \    let mut longest_palindrome_suffix_suffix_suffix_suffix_end = 0;\n    let\
    \ mut longest_palindrome_suffix_suffix_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_length = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_start = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_end = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix = 0;\n    let mut\
    \ longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_length = 0;\n \
    \   let mut longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_suffix_start\
    \ = 0;\n    let mut longest_palindrome_suffix_suffix_suffix_suffix_suffix_suffix_suffix_end\
    \ = 0;\n    let mut longest_palindro\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmwm7zrxr.rs:41:29\n   |\n\
    41 |     let mut longest_palindro\n   |                             ^ help: add\
    \ `;` here\n42 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmwm7zrxr.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpmwm7zrxr.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmwm7zrxr.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmwm7zrxr.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    let\
    \ mut suffix_length = 0;\n    while !reversed_string.is_empty() {\n        let\
    \ mut current_char = reversed_string[0];\n        reversed_string = reversed_string.split_first_mut().unwrap();\n\
    \        if current_char == current_char.to_string().rev() {\n            suffix_length\
    \ += 1;\n        } else {\n            prefix_length += 1;\n        }\n    }\n\
    \    let mut result = string;\n    result.extend_from_slice(&reversed_string[prefix_length..suffix_length]);\n\
    \    result\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp8s2te6rb.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8s2te6rb.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8s2te6rb.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8s2te6rb.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8s2te6rb.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8s2te6rb.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8s2te6rb.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8s2te6rb.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8s2te6rb.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8s2te6rb.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp8s2te6rb.rs:16:32\n\
    \   |\n16 |         let mut current_char = reversed_string[0];\n   |         \
    \                       ^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        let mut suffix_length = 0;\n        while\
    \ !reversed_string.is_empty() && reversed_string[suffix_length] == reversed_string[suffix_length]\
    \ {\n            suffix_length += 1;\n        }\n        if suffix_length > prefix_length\
    \ {\n            prefix_length = suffix_length;\n        }\n        reversed_string\
    \ = reversed_string[..suffix_length].to_string();\n    }\n    prefix_length +\
    \ string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_qw9ibcb.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_qw9ibcb.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_qw9ibcb.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:32:25\n   |\n32 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_qw9ibcb.rs:33:17\n  \
    \ |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_qw9ibcb.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp_qw9ibcb.rs:16:46\n\
    \   |\n16 |         while !reversed_string.is_empty() && reversed_string[suffix_length]\
    \ == reversed_string[suffix"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    let\
    \ mut longest_postfix_index2 = 0;\n    let mut longest_postfix_index3 = 0;\n \
    \   let mut longest_postfix_index4 = 0;\n    let mut longest_postfix_index5 =\
    \ 0;\n    let mut longest_postfix_index6 = 0;\n    let mut longest_postfix_index7\
    \ = 0;\n    let mut longest_postfix_index8 = 0;\n    let mut longest_postfix_index9\
    \ = 0;\n    let mut longest_postfix_index10 = 0;\n    let mut longest_postfix_index11\
    \ = 0;\n    let mut longest_postfix_index12 = 0;\n    let mut longest_postfix_index13\
    \ = 0;\n    let mut longest_postfix_index14 = 0;\n    let mut longest_postfix_index15\
    \ = 0;\n    let mut longest_postfix_index16 = 0;\n    let mut longest_postfix_index17\
    \ = 0;\n    let mut longest_postfix_index18 = 0;\n    let mut longest_postfix_index19\
    \ = 0;\n    let mut longest_postfix_index20 = 0;\n    let mut longest_postfix_index21\
    \ = 0;\n    let mut longest_postfix_index22 = 0;\n    let mut longest_postfix_index23\
    \ = 0;\n    let mut longest_postfix_index24 = 0;\n    let mut longest_postfix_index25\
    \ = 0;\n    let mut longest_postfix_index26 = 0;\n    let mut longest_postfix_index27\
    \ = 0;\n    let mut longest_postfix_index28 = 0;\n    let mut longest_postfix_index29\
    \ = 0;\n    let mut longest_postfix_index30 = 0;\n    let mut longest_postfix_index31\
    \ = 0;\n    let mut longest_postfix_index32 = 0;\n    let mut longest_postfix_index33\
    \ = 0;\n    let mut longest_postfix_index34 = 0;\n    let mut longest_postfix_index35\
    \ = 0;\n    let mut longest_postfix_index36 = 0;\n    let mut longest_postfix_index37\
    \ = 0;\n    let mut longest_postfix_index38 = 0;\n    let mut longest_postfix_index39\
    \ = 0;\n    let mut longest_postfix_index40 = 0;\n    let mut longest_postfix_index41\
    \ = 0;\n    let mut longest_postfix_index42 = 0;\n    let mut longest_postfix_index43\
    \ = 0;\n    let mut longest_postfix_index44 = 0;\n    let mut longest_postfix_index45\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmps8z1aq0k.rs:59:36\n   |\n\
    59 |     let mut longest_postfix_index45\n   |                               \
    \     ^ help: add `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps8z1aq0k.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps8z1aq0k.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps8z1aq0k.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror["
  stdout: ''
  timestamp: 1659805896
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reverse_length = 0;\n    let\
    \ mut longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n  \
    \  let mut longest_postfix_char: char;\n    let mut longest_postfix_char_length\
    \ = 0;\n    let mut longest_postfix_char_length_index = 0;\n    let mut longest_postfix_char_length_index2\
    \ = 0;\n    let mut longest_postfix_char_length_index3 = 0;\n    let mut longest_postfix_char_length_index4\
    \ = 0;\n    let mut longest_postfix_char_length_index5 = 0;\n    let mut longest_postfix_char_length_index6\
    \ = 0;\n    let mut longest_postfix_char_length_index7 = 0;\n    let mut longest_postfix_char_length_index8\
    \ = 0;\n    let mut longest_postfix_char_length_index9 = 0;\n    let mut longest_postfix_char_length_index10\
    \ = 0;\n    let mut longest_postfix_char_length_index11 = 0;\n    let mut longest_postfix_char_length_index12\
    \ = 0;\n    let mut longest_postfix_char_length_index13 = 0;\n    let mut longest_postfix_char_length_index14\
    \ = 0;\n    let mut longest_postfix_char_length_index15 = 0;\n    let mut longest_postfix_char_length_index16\
    \ = 0;\n    let mut longest_postfix_char_length_index17 = 0;\n    let mut longest_postfix_char_length_index18\
    \ = 0;\n    let mut longest_postfix_char_length_index19 = 0;\n    let mut longest_postfix_char_length_index20\
    \ = 0;\n    let mut longest_postfix_char_length_index21 = 0;\n    let mut longest_postfix_char_length_index22\
    \ = 0;\n    let mut longest_postfix_char_length_index23 = 0;\n    let mut longest_postfix_char_length_index24\
    \ = 0;\n    let mut longest_postfix_char_length_index25 = 0;\n    let mut longest_postfix_char_length_index26\
    \ = 0;\n    let mut longest_postfix_char_length_index27 = 0;\n    let mut longest_postfix_char_length_index28\
    \ = 0;\n    let mut longest_postfix_char_length_index29 = 0;\n    let mut longest_postfix_char_length_index30\
    \ = 0;\n    let mut longest_postfix_char_length_index31 = 0;\n    let mut longest_postfix_char_length_index32\
    \ = 0;\n    let mut longest_postfix_char_length_index33 = 0;\n    let mut longest_postfix_char_length_index34\
    \ = 0;\n    let mut longest_postfix_char_length_index35 = 0;\n    let mut lon\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpc23q0wy7.rs:53:16\n   |\n\
    53 |     let mut lon\n   |                ^ help: add `;` here\n54 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpc23q0wy7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc23q0wy7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc23q0wy7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc23q0wy7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpc23q0wy7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc23q0wy7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc23q0wy7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc23q0wy7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc23q0wy7.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc23q0wy7.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut i = 0;\n    while i < string.len() {\n        let mut j = i;\n        while\
    \ j + 1 < string.len() {\n            if string[j] != string[j + 1] {\n      \
    \          break;\n            }\n            j += 1;\n        }\n        if j\
    \ == i {\n            break;\n        }\n        reversed_string.push(rev::reverse(&string[i..j]));\n\
    \        i = j;\n    }\n    string.push(reversed_string);\n    string\n}\n\nfn\
    \ main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `rev`\n\
    \  --> /tmp/tmp_i38zrpq.rs:26:30\n   |\n26 |         reversed_string.push(rev::reverse(&string[i..j]));\n\
    \   |                              ^^^ use of undeclared crate or module `rev`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_i38zrpq.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_i38zrpq.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_i38zrpq.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_i38zrpq.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_i38zrpq.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_i38zrpq.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_i38zrpq.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_i38zrpq.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_i38zrpq.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_i38zrpq.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \           "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reverse = string;\n    let mut i =\
    \ 0;\n    while i < string.len() {\n        let mut j = string.len() - 1;\n  \
    \      while j >= i {\n            if string[j] != string[i] {\n             \
    \   break;\n            }\n            j -= 1;\n        }\n        if j == i {\n\
    \            i += 1;\n        } else {\n            reverse.push_str(&string[..i]);\n\
    \            i += 1;\n        }\n    }\n    reverse\n}\n\nfn main() {\n    let\
    \ candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9ikdy7rb.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9ikdy7rb.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9ikdy7rb.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:38:25\n   |\n38 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9ikdy7rb.rs:39:17\n  \
    \ |\n39 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9ikdy7rb.rs:39:25\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp9ikdy7rb.rs:18:16\n   |\n\
    18 |             if string[j] != string[i] {\n   |                ^^^^^^^^^ `String`\
    \ cannot be indexed by `usiz"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_string = \"\";\n    let\
    \ mut i = 0;\n    while i < palindrome.len() {\n        let mut j = i;\n     \
    \   while j < palindrome.len() {\n            if palindrome[j] != palindrome[j].chars().nth(i).unwrap()\
    \ {\n                break;\n            }\n            i += 1;\n            j\
    \ += 1;\n        }\n        reversed_string.push(palindrome[..j]);\n        palindrome\
    \ = &palindrome[j..];\n        i += 1;\n    }\n    reversed_string\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0_pv2bhb.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0_pv2bhb.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0_pv2bhb.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:36:25\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0_pv2bhb.rs:37:17\n  \
    \ |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0_pv2bhb.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp0_pv2bhb.rs:18:16\n   |\n\
    18 |             if palindrome[j] != palindrome[j].chars().nth(i).unwrap() {\n\
    \   |                ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_string = string;\n   \
    \ let mut i = 0;\n    while i < palindrome.len() {\n        let mut j = palindrome.len()\
    \ - 1;\n        while j >= i {\n            if palindrome[j] != palindrome[j].chars().nth(i).unwrap()\
    \ {\n                break;\n            }\n            j -= 1;\n        }\n \
    \       if j == i {\n            palindrome = &palindrome[..i];\n            i\
    \ += 1;\n        } else {\n            palindrome = &palindrome[i..j];\n     \
    \       i += j - i;\n        }\n    }\n    reversed_string\n}\n\nfn main() {\n\
    \    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbxlug7lf.rs:36:17\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbxlug7lf.rs:36:25\n   |\n36 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbxlug7lf.rs:37:17\n   |\n37 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbxlug7lf.rs:37:25\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbxlug7lf.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbxlug7lf.rs:38:25\n   |\n38 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbxlug7lf.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbxlug7lf.rs:39:25\n   |\n39 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbxlug7lf.rs:40:17\n  \
    \ |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbxlug7lf.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpbxlug7lf.rs:18:16\n   |\n\
    18 |             if palindrome[j] != palindrome[j].chars().nth(i).unwrap() {\n\
    \   |                ^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut palindrome = string;\n   \
    \ let mut prefix_length = 0;\n    let mut suffix_length = 0;\n\n    while palindrome.len()\
    \ > 0 {\n        let mut index = palindrome.len() - 1;\n        let mut char =\
    \ String::new();\n        let mut is_palindrome = true;\n\n        while index\
    \ >= 0 {\n            char = char.to_ascii_lowercase()[index];\n            if\
    \ char != palindrome[index] {\n                is_palindrome = false;\n      \
    \          break;\n            }\n            index -= 1;\n        }\n\n     \
    \   if is_palindrome {\n            reversed_string = reversed_string\n      \
    \          .to_ascii_lowercase()\n                .chars()\n                .filter(|c|\
    \ c != palindrome[index])\n                .collect();\n            palindrome\
    \ = &palindrome[..index + 1];\n            prefix_length += 1;\n        } else\
    \ {\n            suffix_length += 1;\n        }\n    }\n\n    String::from(\n\
    \        &string[..prefix_length]\n            .reverse()\n            .chain(&string[prefix_length..suffix_length])\n\
    \            .collect(),\n    )\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpypuuykuq.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpypuuykuq.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpypuuykuq.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpypuuykuq.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpypuuykuq.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpypuuykuq.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpypuuykuq.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpypuuykuq.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpypuuykuq.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpypuuykuq.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpypuuykuq.rs:23:20\n   |\n\
    23 |             char = char.to_ascii_lowercase()[index];\n   |              \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a') {\n        if pos == 0 {\n            break;\n\
    \        }\n        let mut prefix_length = pos - 1;\n        while prefix_length\
    \ >= 0 && string[prefix_length] != string[prefix_length + pos] {\n           \
    \ prefix_length -= 1;\n        }\n        if prefix_length >= 0 {\n          \
    \  longest_postfix_length = prefix_length;\n        }\n    }\n    if longest_postfix_length\
    \ == 0 {\n        return string;\n    }\n    let mut reversed_string_reversed\
    \ = reversed_string;\n    let mut prefix_length = longest_postfix_length - 1;\n\
    \    while prefix_length >= 0 && reversed_string[prefix_length] != reversed_string[prefix_length\
    \ + longest_postfix_length] {\n        prefix_length -= 1;\n    }\n    if prefix_length\
    \ >= 0 {\n        reversed_string_reversed.push_str(&string[prefix_length..]);\n\
    \    }\n    reversed_string_reversed.push_str(&string[longest_postfix_length..]);\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph978ti7y.rs:43:17\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph978ti7y.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph978ti7y.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph978ti7y.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph978ti7y.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph978ti7y.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph978ti7y.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph978ti7y.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph978ti7y.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph978ti7y.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmph978ti7y.rs:19:37\n   |\n\
    19 |         while prefix_length >= 0 && string[prefix_length] != string[prefix_length\
    \ + pos] {\n   |          "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_len = 0;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start_index\
    \ = -1;\n    let mut longest_postfix_end_index = -1;\n    let mut longest_postfix_start_index2\
    \ = 0;\n    let mut longest_postfix_end_index2 = 0;\n    let mut longest_postfix_start_index3\
    \ = 0;\n    let mut longest_postfix_end_index3 = 0;\n    let mut longest_postfix_start_index4\
    \ = 0;\n    let mut longest_postfix_end_index4 = 0;\n    let mut longest_postfix_start_index5\
    \ = 0;\n    let mut longest_postfix_end_index5 = 0;\n    let mut longest_postfix_start_index6\
    \ = 0;\n    let mut longest_postfix_end_index6 = 0;\n    let mut longest_postfix_start_index7\
    \ = 0;\n    let mut longest_postfix_end_index7 = 0;\n    let mut longest_postfix_start_index8\
    \ = 0;\n    let mut longest_postfix_end_index8 = 0;\n    let mut longest_postfix_start_index9\
    \ = 0;\n    let mut longest_postfix_end_index9 = 0;\n    let mut longest_postfix_start_index10\
    \ = 0;\n    let mut longest_postfix_end_index10 = 0;\n    let mut longest_postfix_start_index11\
    \ = 0;\n    let mut longest_postfix_end_index11 = 0;\n    let mut longest_postfix_start_index12\
    \ = 0;\n    let mut longest_postfix_end_index12 = 0;\n    let mut longest_postfix_start_index13\
    \ = 0;\n    let mut longest_postfix_end_index13 = 0;\n    let mut longest_postfix_start_index14\
    \ = 0;\n    let mut longest_postfix_end_index14 = 0;\n    let mut longest_postfix_start_index15\
    \ = 0;\n    let mut longest_postfix_end_index15 = 0;\n    let mut longest_postfix_start_index16\
    \ = 0;\n    let mut longest_postfix_end_index16 = 0;\n    let mut longest_postfix_start_index17\
    \ = 0;\n    let mut longest_postfix_end_index17 = 0;\n    let mut longest_postfix_start_index18\
    \ = 0;\n    let mut longest_postfix_end_index18 = 0;\n    let mut longest_postfix_start_index19\
    \ = 0;\n    let mut longest_postfix_end_index19 = 0;\n    let mut longest_postfix_start_index20\
    \ = 0;\n    let mut longest_post\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk4sj0_wl.rs:56:25\n   |\n\
    56 |     let mut longest_post\n   |                         ^ help: add `;` here\n\
    57 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpk4sj0_wl.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk4sj0_wl.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk4sj0_wl.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk4sj0_wl.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk4sj0_wl.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        let mut suffix_length = 0;\n        while\
    \ !reversed_string.starts_with(string[prefix_length..prefix_length + suffix_length])\
    \ {\n            suffix_length += 1;\n        }\n        reversed_string = reversed_string[..prefix_length\
    \ + suffix_length];\n        prefix_length += suffix_length;\n    }\n    reversed_string\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu0ufwdod.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu0ufwdod.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu0ufwdod.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu0ufwdod.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu0ufwdod.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu0ufwdod.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu0ufwdod.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu0ufwdod.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu0ufwdod.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu0ufwdod.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the size\
    \ for values of type `str` cannot be known at compilation time\n  --> /tmp/tmpu0ufwdod.rs:16:44\n\
    \   |\n16 |         while !reversed_string.starts_with(string[prefix_length..prefix_length\
    \ + s"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    let mut longest_postfix_index = 0;\n    while\
    \ let Some(index) = string.rfind('a') {\n        let mut postfix_length = index\
    \ - longest_postfix_index;\n        if postfix_length > longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix_index\
    \ = index;\n        }\n        string = &string[index..];\n    }\n    let mut\
    \ postfix_length = longest_postfix_length - 1;\n    while let Some(index) = string.rfind('a')\
    \ {\n        let mut postfix_length = index - longest_postfix_index;\n       \
    \ if postfix_length < longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n            longest_postfix_index = index;\n        }\n \
    \       string = &string[index..];\n    }\n    let mut postfix_length = longest_postfix_length\
    \ - 1;\n    while let Some(index) = string.rfind('a') {\n        let mut postfix_length\
    \ = index - longest_postfix_index;\n        if postfix_length < longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix_index\
    \ = index;\n        }\n        string = &string[index..];\n    }\n    let mut\
    \ postfix_length = longest_postfix_length - 1;\n    while let Some(index) = string.rfind('a')\
    \ {\n        let mut postfix_length = index - longest_postfix_index;\n       \
    \ if postfix_length < longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n            longest_postfix_index = index;\n        }\n \
    \       string = &string[index..];\n    }\n    let mut postfix_length = longest_postfix_length\
    \ - 1;\n    while let Some(index) = string.rfind('a') {\n        let mut postfix_length\
    \ = index - longest_postfix_index;\n        if postfix_length < longest_postfix_length\
    \ {\n            longest_postfix_length = postfix_length;\n            longest_postfix_index\
    \ = index;\n        }\n        string = &string[index..];\n    }\n    let mut\
    \ postfix_length = longest_postfix_length - 1;\n    while let Some(index) = string.rfind('a')\
    \ {\n        let mut postfix_length = index - longest_postfix_index;\n       \
    \ if postfix_length < longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n            longest_postfix_index = index;\n        }\n \
    \       string = &string[index..];\n    }\n    let mut postfix_length = \n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpa08fg_0k.rs:70:1\n\
    \   |\n70 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpa08fg_0k.rs:74:17\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpa08fg_0k.rs:74:25\n \
    \  |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa08fg_0k.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa08fg_0k.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa08fg_0k.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa08fg_0k.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa08fg_0k.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa08fg_0k.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa08fg_0k.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa08fg_0k.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa08fg_0k.rs:22:18\n\
    \   |\n22 |         string = &string[i"
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix_length = 0;\n    while !string.is_empty() {\n        let mut\
    \ postfix_length = 0;\n        for c in string.chars() {\n            if !c.is_alphanumeric()\
    \ {\n                postfix_length += 1;\n            }\n        }\n        if\
    \ postfix_length > longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n        }\n        string = string[..postfix_length];\n \
    \       reversed_string += &string[..postfix_length];\n    }\n    string += &reversed_string[..longest_postfix_length];\n\
    \    string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5pql8odb.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5pql8odb.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5pql8odb.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5pql8odb.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5pql8odb.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5pql8odb.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5pql8odb.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5pql8odb.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5pql8odb.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5pql8odb.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5pql8odb.rs:25:18\n   |\n25 |         string = string[..postfix_length];\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_st"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reverse = string;\n    let mut longest = string;\n    let mut i =\
    \ 0;\n    while i < reverse.len() {\n        let mut j = i;\n        while j <\
    \ reverse.len() && reverse[j] != reverse[i - j] {\n            i += 1;\n     \
    \       longest = longest.prepend(reverse[j]);\n        }\n        i += 1;\n \
    \   }\n    longest\n}\n\nfn main() {\n    let candidate = make_palindrome;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmppy9f40x9.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppy9f40x9.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppy9f40x9.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppy9f40x9.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppy9f40x9.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppy9f40x9.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmppy9f40x9.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmppy9f40x9.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppy9f40x9.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppy9f40x9.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppy9f40x9.rs:17:36\n   |\n\
    17 |         while j < reverse.len() && reverse[j] != reverse[i - j] {\n   | \
    \                                  "
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = String::new();\n    let mut longest_postfix_len = 0;\n   \
    \ let mut longest_postfix_start = String::new();\n    let mut longest_postfix_start_len\
    \ = 0;\n    let mut longest_postfix_end = String::new();\n    let mut longest_postfix_end_len\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = 0;\n    let mut longest_postfix_end_pos\
    \ = 0;\n    let mut longest_postfix_start_pos = \n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpf0_4i46a.rs:59:1\n\
    \   |\n59 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpf0_4i46a.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpf0_4i46a.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf0_4i46a.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf0_4i46a.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf0_4i46a.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf0_4i46a.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf0_4i46a.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf0_4i46a.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf0_4i46a.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf0_4i46a.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut palindrome = string;\n    let mut reversed_palindrome = string;\n\
    \    let mut suffix_length = 0;\n    let mut prefix_length = 0;\n    while !palindrome.is_empty()\
    \ {\n        let mut suffix_length = 0;\n        let mut prefix_length = 0;\n\
    \        while !palindrome.is_empty() {\n            let mut suffix_length = 0;\n\
    \            let mut prefix_length = 0;\n            while !palindrome.is_empty()\
    \ {\n                let mut suffix_length = 0;\n                let mut prefix_length\
    \ = 0;\n                while !palindrome.is_empty() {\n                    let\
    \ mut suffix_length = 0;\n                    let mut prefix_length = 0;\n   \
    \                 while !palindrome.is_empty() {\n                        let\
    \ mut suffix_length = 0;\n                        let mut prefix_length = 0;\n\
    \                        while !palindrome.is_empty() {\n                    \
    \        let mut suffix_length = 0;\n                            let mut prefix_length\
    \ = 0;\n                            while !palindrome.is_empty() {\n         \
    \                       let mut suffix_length = 0;\n                         \
    \       let mut prefix_length = 0;\n                                while !palindrome.is_empty()\
    \ {\n                                    let mut suffix_length = 0;\n        \
    \                            let mut prefix_length = 0;\n                    \
    \                while !palindrome.is_empty() {\n                            \
    \            let mut suffix_length = 0;\n                                    \
    \    let mut prefix_length = 0;\n                                        while\
    \ !palindrome.is_empty() {\n                                            let mut\
    \ suffix_length = 0;\n                                            let mut prefix_length\
    \ = 0;\n                                            while !palindrome.is_empty()\
    \ {\n                                                let mut suffix_length = 0;\n\
    \                                                let mut prefix_length = 0;\n\
    \                                                while !palindrome.is_empty()\
    \ {\n                                                    let mut suffix_length\
    \ = 0;\n                                                    let mut prefix_length\
    \ = 0;\n                                                    while !palindrome.is_empty()\
    \ {\n                                                        let mut suffix_length\
    \ = 0;\n                                                        let mut prefix_length\
    \ = 0;\n                                                        while !palindrome.is_empty()\
    \ {\n                                                            let mut suffix_length\
    \ = 0;\n                                                            let mut prefix_length\
    \ = 0;\n                                                            while !palindrome.is_empty()\
    \ {\n                                                                let mut suffix_length\
    \ = 0;\n                                                                let mut\
    \ prefix_length = 0;\n                                                       \
    \         while !palindrome.is_empty() {\n                                   \
    \                                 let mut suffix_length = 0;\n               \
    \                                                     let mut prefix_length =\
    \ 0;\n                                                                    while\
    \ !palindrome.is_empty() {\n                                                 \
    \                       let mut suffix_length = 0;\n                         \
    \                                               let mut prefix_length = 0;\n \
    \                                                                       \n}\n\n\
    fn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpnxe5kond.rs:77:3\n\
    \   |\n11 | fn make_palindrome(string: String) -> String {\n   |             \
    \                                 - unclosed delimiter\n...\n16 |     while !palindrome.is_empty()\
    \ {\n   |                                  - unclosed delimiter\n...\n19 |   \
    \      while !palindrome.is_empty() {\n   |                                  \
    \    - unclosed delimiter\n...\n22 |             while !palindrome.is_empty()\
    \ {\n   |                                          - unclosed delimiter\n...\n\
    25 |                 while !palindrome.is_empty() {\n   |                    \
    \                          - unclosed delimiter\n...\n28 |                   \
    \  while !palindrome.is_empty() {\n   |                                      \
    \            - unclosed delimiter\n...\n31 |                         while !palindrome.is_empty()\
    \ {\n   |                                                      - unclosed delimiter\n\
    ...\n34 |                             while !palindrome.is_empty() {\n   |   \
    \                                                       - unclosed delimiter\n\
    ...\n37 |                                 while !palindrome.is_empty() {\n   |\
    \                                                              - unclosed delimiter\n\
    ...\n40 |                                     while !palindrome.is_empty() {\n\
    \   |                                                                  - unclosed\
    \ delimiter\n...\n43 |                                         while !palindrome.is_empty()\
    \ {\n   |                                                                    \
    \  - unclosed delimiter\n...\n46 |                                           \
    \  while !palindrome.is_empty() {\n   |                                      \
    \                                    - unclosed delimiter\n...\n49 |         \
    \                                        while !palindrome.is_empty() {\n   |\
    \                                                                            \
    \  - unclosed delimiter\n...\n52 |                                           \
    \          while !palindrom"
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_size = string.len();\n\
    \    let mut i = 0;\n    while i < reversed_string_size {\n        let mut j =\
    \ reversed_string_size - 1;\n        while j >= i {\n            if reversed_string[j]\
    \ != string[i] {\n                break;\n            }\n            j -= 1;\n\
    \        }\n        reversed_string.insert(i, string[j]);\n        i += 1;\n \
    \   }\n    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu8o8z6vk.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu8o8z6vk.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu8o8z6vk.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu8o8z6vk.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu8o8z6vk.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpu8o8z6vk.rs:18:16\n   |\n\
    18 |             if reversed_string[j] != string[i] {\n   |                ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot b"
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix = string;\n\
    \    let mut longest_postfix_length = 0;\n    let mut longest_postfix_index =\
    \ 0;\n    while longest_postfix_length < string.len() {\n        let mut longest_postfix_length\
    \ = longest_postfix.len();\n        let mut longest_postfix_index = 0;\n     \
    \   for (i, c) in string.chars().enumerate() {\n            if longest_postfix_length\
    \ == 0 {\n                longest_postfix_length = longest_postfix.len() - i;\n\
    \                longest_postfix_index = i;\n            }\n            if longest_postfix_length\
    \ == longest_postfix.len() - i {\n                longest_postfix_length = longest_postfix.len()\
    \ - i;\n                longest_postfix_index = i;\n            }\n          \
    \  if longest_postfix_length < longest_postfix.len() - i {\n                longest_postfix_length\
    \ = longest_postfix.len() - i;\n                longest_postfix_index = i;\n \
    \           }\n        }\n        let mut longest_postfix_postfix = longest_postfix.clone();\n\
    \        for (i, c) in longest_postfix.chars().enumerate() {\n            if longest_postfix_length\
    \ == 0 {\n                longest_postfix_postfix = longest_postfix.clone();\n\
    \                longest_postfix_postfix.push(c);\n            }\n           \
    \ if longest_postfix_length == longest_postfix.len() - i {\n                longest_postfix_postfix\
    \ = longest_postfix.clone();\n                longest_postfix_postfix.push(c);\n\
    \            }\n            if longest_postfix_length < longest_postfix.len()\
    \ - i {\n                longest_postfix_postfix = longest_postfix.clone();\n\
    \                longest_postfix_postfix.push(c);\n            }\n        }\n\
    \        if longest_postfix_postfix.is_palindrome() {\n            reversed_string\
    \ = reversed_string.clone();\n            reversed_string.push_str(longest_postfix_postfix.clone());\n\
    \        }\n    }\n    reversed_string\n}\n\nfn main() {\n    let candidate =\
    \ make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp06re3cvb.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp06re3cvb.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp06re3cvb.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp06re3cvb.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp06re3cvb.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp06re3cvb.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp06re3cvb.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp06re3cvb.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp06re3cvb.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp06re3cvb.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0599]: no method\
    \ named `is_palindrome` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp06re3cvb.rs:48:36\n   |\n48 |         if longest_postfix_postfix.is_palindrome()\
    \ {\n   |                "
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut prefix_length = 0;\n    while\
    \ !reversed_string.is_empty() {\n        let mut suffix_length = 0;\n        while\
    \ !reversed_string.is_empty() && reversed_string[suffix_length] == string[prefix_length]\
    \ {\n            suffix_length += 1;\n        }\n        reversed_string = &reversed_string[..suffix_length];\n\
    \        prefix_length += 1;\n    }\n    string + &reversed_string[..prefix_length]\n\
    }\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9btglai2.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9btglai2.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9btglai2.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9btglai2.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9btglai2.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9btglai2.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9btglai2.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9btglai2.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9btglai2.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9btglai2.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `{integer}`\n  --> /tmp/tmp9btglai2.rs:16:46\n\
    \   |\n16 |         while !reversed_string.is_empty() && reversed_string[suffix_length]\
    \ == string[prefix_length] "
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    for pos in string.rfind('a'..='z') {\n        if pos > longest_postfix_length\
    \ {\n            longest_postfix_length = pos;\n        }\n    }\n    let mut\
    \ prefix_length = longest_postfix_length;\n    while prefix_length < string.len()\
    \ {\n        let mut prefix_slice = &string[prefix_length..];\n        let mut\
    \ suffix_slice = &string[longest_postfix_length..];\n        let mut suffix_reversed_slice\
    \ = suffix_slice.clone();\n        suffix_reversed_slice.reverse();\n        if\
    \ prefix_slice == suffix_reversed_slice {\n            prefix_length += 1;\n \
    \       } else {\n            break;\n        }\n    }\n    reversed_string.push_str(&string[longest_postfix_length..]);\n\
    \    reversed_string\n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpbc6kztbg.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbc6kztbg.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpbc6kztbg.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpbc6kztbg.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpbc6kztbg.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpbc6kztbg.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpbc6kztbg.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpbc6kztbg.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpbc6kztbg.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpbc6kztbg.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0277]: expected\
    \ a `FnMut<(char,)>` closure, found `RangeInclusive<char>`\n  --> /tmp/tmpbc6kztbg.rs:14:29\n\
    \   |\n14 |     for pos in string.rfind('a'..='z') {\n   |                   \
    \          ^^^^^^^^^ ex"
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = string;\n    let\
    \ mut reverse_length = 0;\n    let mut longest_postfix_length = 0;\n    while\
    \ !string.ends_with(&reversed_string) {\n        let mut postfix_length = string.rfind('a',\
    \ reverse_length);\n        if postfix_length == -1 {\n            break;\n  \
    \      }\n        let mut postfix_length = postfix_length as usize;\n        if\
    \ postfix_length > longest_postfix_length {\n            longest_postfix_length\
    \ = postfix_length;\n        }\n        reverse_length = postfix_length + longest_postfix_length;\n\
    \        string = &string[..postfix_length];\n        reversed_string = &reversed_string[..postfix_length];\n\
    \    }\n    string + &reversed_string[..longest_postfix_length]\n}\n\nfn main()\
    \ {\n    let candidate = make_palindrome;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxcaeytva.rs:34:17\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxcaeytva.rs:34:25\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxcaeytva.rs:35:17\n   |\n35 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxcaeytva.rs:35:25\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxcaeytva.rs:36:17\n   |\n36 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxcaeytva.rs:36:25\n   |\n36 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxcaeytva.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxcaeytva.rs:37:25\n   |\n37 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxcaeytva.rs:38:17\n  \
    \ |\n38 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxcaeytva.rs:38:25\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 2 arguments were supplied\n    --> /tmp/tmpxcaeytva.rs:17:41\n\
    \     |\n17   |         let mut postfix_length = string.rfind('a', reverse_length);\n\
    \     |           "
  stdout: ''
  timestamp: 1659821547
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut string = string;\n    let mut reversed_string = \"\";\n    let mut\
    \ longest_postfix = \"\";\n    let mut longest_postfix_len = 0;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_start\
    \ = -1;\n    let mut longest_postfix_end = \n}\n\nfn main() {\n    let candidate\
    \ = make_palindrome;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp771yal_n.rs:64:1\n\
    \   |\n64 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp771yal_n.rs:68:17\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:68:25\n \
    \  |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp771yal_n.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp771yal_n.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp771yal_n.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp771yal_n.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp771yal_n.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp771yal_n.rs:72:17\n   |\n72 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp771yal_n.rs:72:25\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821545
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut reversed_string_length = 0;\n\
    \    let mut longest_postfix_length = 0;\n    let mut longest_postfix_start =\
    \ -1;\n    let mut longest_postfix_end = -1;\n    let mut longest_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut longest_postfix_postfix_length = 0;\n    let mut longest_postfix_postfix_start\
    \ = -1;\n    let mut longest_postfix_postfix_end = -1;\n    let mut longest_postfix_postfix_postfix\
    \ = \"\";\n    let mut \n}\n\nfn main() {\n    let candidate = make_palindrome;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpyy5zp5z0.rs:55:1\n\
    \   |\n55 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpyy5zp5z0.rs:59:17\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:59:25\n \
    \  |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyy5zp5z0.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyy5zp5z0.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyy5zp5z0.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyy5zp5z0.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821546
- exit_code: 1
  program: "/// Find the shortest palindrome that begins with a supplied string.\n\
    /// Algorithm idea is simple:\n/// - Find the longest postfix of supplied string\
    \ that is a palindrome.\n/// - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n/// >>> make_palindrome(String::from(\"\
    \"))\n/// String::from(\"\")\n/// >>> make_palindrome(String::from(\"cat\"))\n\
    /// String::from(\"catac\")\n/// >>> make_palindrome(String::from(\"cata\"))\n\
    /// String::from(\"catac\")\nfn make_palindrome(string: String) -> String {\n\
    \    let mut reversed_string = string;\n    let mut longest_postfix_length = 0;\n\
    \    let mut longest_postfix_index = 0;\n    let mut longest_postfix_start = -1;\n\
    \    let mut longest_postfix_end = -1;\n    let mut longest_postfix_suffix = -1;\n\
    \    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = -1;\n    let mut longest_postfix_suffix_length = -1;\n    let mut longest_postfix_suffix_index\
    \ = -1;\n    let mut longest_postfix_suffix_start = -1;\n    let mut longest_postfix_suffix_end\
    \ = \n}\n\nfn main() {\n    let candidate = make_palindrome;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpg_jqvxo6.rs:56:1\n\
    \   |\n56 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpg_jqvxo6.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg_jqvxo6.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg_jqvxo6.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg_jqvxo6.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg_jqvxo6.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659821546
