name: HumanEval_140_fix_spaces
language: rs
prompt: "/// Given a string text, replace all spaces in it with underscores, \n///\
  \ and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// >>> fix_spaces(String::from(\" Example\"))\n/// String::from(\"\
  Example\")\n/// >>> fix_spaces(String::from(\" Example 1\"))\n/// String::from(\"\
  Example_1\")\n/// >>> fix_spaces(String::from(\" Example 2\"))\n/// String::from(\"\
  _Example_2\")\n/// >>> fix_spaces(String::from(\" Example 3\"))\n/// String::from(\"\
  _Example-3\")\nfn fix_spaces(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = fix_spaces;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"\
    \  \", \" \");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"\
    _\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n   \
    \ }\n    s", "    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"-\"\
    , \"_\").trim_end().to_string()", "    let mut s = text;\n    s.replace(\"_\"\
    , \" \").replace(\"-\", \"_\").trim_end().to_string()", "    let mut result =\
    \ String::new();\n    let mut last_space = false;\n    for c in text.chars() {\n\
    \        if c == ' ' {\n            if last_space {\n                result.push('-');\n\
    \            } else {\n                result.push('_');\n            }\n    \
    \        last_space = true;\n        } else {\n            result.push(c);\n \
    \           last_space = false;\n        }\n    }\n    result", "    let mut s\
    \ = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n   \
    \     s.replace(\"  \", \"_\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \" -\"\
    );\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n   \
    \ if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut result\
    \ = text;\n    let mut spaces = 0;\n    for ch in text.chars() {\n        if ch\
    \ == ' ' {\n            spaces += 1;\n        } else {\n            if spaces\
    \ > 1 {\n                result.push_str(\"_\");\n                spaces = 0;\n\
    \            }\n            result.push_str(&format!(\"{}\", ch));\n        }\n\
    \    }\n    if spaces > 1 {\n        result.push_str(\"_\");\n    }\n    result",
  "    let mut s = text;\n    s.replace(\"_\", \" \").replace(\"-\", \"_\").trim().to_string()",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" \");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"\
    \  \", \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \",\
    \ \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \" - \");\n\
    \    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if\
    \ s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n    }\n    s", " \
    \   let mut s = text;\n    s.replace(\"_\", \" \").replace(\"-\", \"_\").trim().to_string()",
  "    let mut result = String::new();\n    let mut prev_space = false;\n    for c\
    \ in text.chars() {\n        if c == ' ' {\n            if prev_space {\n    \
    \            result.push('-');\n            } else {\n                result.push('_');\n\
    \            }\n            prev_space = true;\n        } else {\n           \
    \ result.push(c);\n            prev_space = false;\n        }\n    }\n    result",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n  \
    \      s.replace(\"  \", \"_\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \" -\"\
    );\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n   \
    \ if s.chars().count() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut result\
    \ = String::from(text);\n    let mut spaces = false;\n    for c in text.chars()\
    \ {\n        if c == ' ' {\n            spaces = true;\n        } else {\n   \
    \         if spaces {\n                result.push('-');\n                spaces\
    \ = false;\n            }\n            result.push(c);\n        }\n    }\n   \
    \ result", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"\
    \  \", \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \",\
    \ \" \").unwrap();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i]\
    \ == ' ' && s[i + 1] == ' ' && s[i + 2] == ' ' {\n            s.replace(\"  \"\
    , \" \").unwrap();\n            i += 2;\n        } else {\n            i += 1;\n\
    \        }\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\"\
    );\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n    }\n\
    \    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \"\
    , \" \");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\"\
    );\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \");\n    }\n\
    \    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \" \").unwrap();\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s[i] == ' ' {\n            i += 1;\n            if i == s.len()\
    \ {\n                break;\n            }\n            if s[i] != s[i + 1] {\n\
    \                s.replace(' ', '-');\n            }\n        } else {\n     \
    \       i += 1;\n        }\n    }\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \"_\");\n    if s.len() > 2 {\n        s.replace(\"  \", &format!(\"-{}\"\
    , &s[2..]));\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"\
    _\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n   \
    \ }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count()\
    \ > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"\
    \  \", \"_\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"\
    _\");\n    if s.len() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i] == ' ' && s[i + 1] == ' ' {\n            s.replace(\"\
    \  \", \"_\");\n            i += 2;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    s", "    let mut result = text;\n    let mut spaces = false;\n\
    \    for c in text.chars() {\n        if c == ' ' {\n            spaces = true;\n\
    \        } else {\n            if spaces {\n                result.push('_');\n\
    \            }\n            result.push(c);\n            spaces = false;\n   \
    \     }\n    }\n    result", "    let mut s = text;\n    s.replace(\"  \", \"\
    _\");\n    if s.len() > 2 {\n        s.replace(\"  \", \" -\");\n    }\n    s",
  "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    let mut last = 0;\n \
    \   while last < s.len() {\n        if s[last] == ' ' {\n            s.replace(\"\
    \  \", \"_\", last, last + 1);\n            last += 1;\n        } else {\n   \
    \         last += 1;\n        }\n    }\n    s", "    let mut s = text;\n    s.replace(\"\
    \  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \" \"\
    );\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n   \
    \ let mut i = 0;\n    while i < s.len() {\n        if s[i] == ' ' && s[i + 1]\
    \ == ' ' {\n            s.replace(\"  \", \"_\", &i, &i + 2);\n            i +=\
    \ 2;\n        } else {\n            i += 1;\n        }\n    }\n    s", "    let\
    \ mut s = text;\n    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n\
    \        s.replace(\"  \", \" -\");\n    }\n    s", "    let mut result = String::new();\n\
    \    let mut last_space = false;\n    for c in text.chars() {\n        if c ==\
    \ ' ' {\n            if last_space {\n                result.push('-');\n    \
    \        } else {\n                result.push('_');\n            }\n        \
    \    last_space = true;\n        } else {\n            result.push(c);\n     \
    \       last_space = false;\n        }\n    }\n    result", "    let mut s = text;\n\
    \    s.replace(\"  \", \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"\
    \  \", \" -\");\n    }\n    s", "    let mut s = text;\n    s.replace(\"  \",\
    \ \"_\");\n    if s.chars().count() > 2 {\n        s.replace(\"  \", \"_\");\n\
    \    }\n    s", "    let mut s = text;\n    s.replace(\"  \", \"_\");\n    if\
    \ s.chars().count() > 2 {\n        s.replace(\"  \", \" - \");\n    }\n    s"]
stop_tokens:
- "\n}"
