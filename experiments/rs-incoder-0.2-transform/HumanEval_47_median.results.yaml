language: rs
name: HumanEval_47_median
results:
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      match b {\n            None => a,\n            Some(x) => if x < a { a\
    \ } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp6k0s0swo.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6k0s0swo.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6k0s0swo.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp6k0s0swo.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6k0s0swo.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00026zzu.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp00026zzu.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp00026zzu.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp00026zzu.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo_nbsp6o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo_nbsp6o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo_nbsp6o.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpkb594jtg.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpkb594jtg.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkb594jtg.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if b < a {\n                b\n            } else\
    \ {\n                a\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxgfk25lq.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxgfk25lq.rs:10:20\n   |\n10 |\
    \             if b < a {\n   |                    ^ expected `&isize`, found `f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxgfk25lq.rs:11:17\n   |\n11 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnj0on5x.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.checked_add(b).unwrap().sqrt()).unwrap()\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp6kblnovx.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(b).unwrap().sqrt()).unwrap()\n  |                     \
    \                          ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0599]:\
    \ no method named `unwrap` found for type `f64` in the current scope\n --> /tmp/tmp6kblnovx.rs:7:79\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(b).unwrap().sqrt()).unwrap()\n\
    \  |                                                                         \
    \      ^^^^^^ method not found in `f64`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n      \
    \  sum + el\n    }) / l.len()\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpji2oufgv.rs:8:13\n\
    \  |\n8 |         sum + el\n  |             ^ no implementation for `{float} +\
    \ &isize`\n  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot\
    \ divide `{float}` by `usize`\n --> /tmp/tmpji2oufgv.rs:9:8\n  |\n9 |     }) /\
    \ l.len()\n  |        ^ no implementation for `{float} / usize`\n  |\n  = help:\
    \ the trait `Div<usize>` is not implemented for `{float}`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmps84_saj3.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmps84_saj3.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmps84_saj3.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |acc, x| {\n            if x < acc {\n                acc\n            } else\
    \ {\n                x\n            }\n        })\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmp9k9q3gvm.rs:8:11\n  |\n8 |         b.iter().fold(a,\
    \ |acc, x| {\n  |           ^^^^ method not found in `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        acc.checked_add(x / 2).unwrap()\n    })\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpo2d00e2l.rs:8:13\n  |\n8 |         acc.checked_add(x\
    \ / 2).unwrap()\n  |             ^^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { x } else { acc },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmprhjc0h15.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { x } else { acc },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:31\n\
    \  |\n9 |         |acc, x| if x < acc { x } else { acc },\n  |               \
    \                ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdgikxf88.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap()\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpiml70x2a.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2.0\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpvr38rh9j.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpvr38rh9j.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvr38rh9j.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvk79cgk6.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpvr38rh9j.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpvr38rh9j.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvr38rh9j.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x <= acc {\n            x\n        } else {\n           \
    \ acc\n        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp73kh3gpe.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp73kh3gpe.rs:9:26\n  |\n9 |    \
    \     |acc, x| if x <= acc {\n  |                          ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp73kh3gpe.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(b)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp752xbj7_.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |                  \
    \                     ++++++\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e / 2)\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmpa0_7uqqo.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e / 2)\n  |                  \
    \                   ^ no implementation for `f64 + isize`\n  |\n  = help: the\
    \ trait `Add<isize>` is not implemented for `f64`\n  = help: the following other\
    \ types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n     \
    \       <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n         \
    \   <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n            <&'a\
    \ i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize as\
    \ Add<isize>>\n          and 48 others\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n    \
    \              |median, elem| {\n                      if elem > median {\n  \
    \                        median\n                      } else if elem < median\
    \ {\n                          elem\n                      } else {\n        \
    \                  median\n                      }\n                  })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpm6qj_mtb.rs:9:33\n  |\n9 |\
    \                       if elem > median {\n  |                              \
    \   ^^^^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm6qj_mtb.rs:11:40\n   |\n11 |                       } else if elem\
    \ < median {\n   |                                        ^^^^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpm6qj_mtb.rs:12:27\n\
    \   |\n12 |                           elem\n   |                           ^^^^\
    \ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdgikxf88.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| a.checked_add(b).unwrap()\
    \ / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpev6gg7cu.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| a.checked_add(b).unwrap() / 2)\n  |                        ^^^\n  | \
    \                       |\n  |                        function or associated item\
    \ not found in `f64`\n  |                        help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0599]: no method named `checked_add`\
    \ found for type `f64` in the current scope\n --> /tmp/tmpev6gg7cu.rs:7:38\n \
    \ |\n7 |     l.iter().fold(f64::nan, |a, b| a.checked_add(b).unwrap() / 2)\n \
    \ |                                      ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo_nbsp6o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo_nbsp6o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo_nbsp6o.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap_or(l.len())\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxzfqywfd.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len().checked_div(2).unwrap_or(l.len())\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     l.len().checked_div(2).unwrap_or(l.len())\
    \ as f64\n  |                                               ++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    s /= l.len() as f64;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkdo3_nqw.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s\n  |     ^ expected `f64`, found\
    \ `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n  |\n9 |     s as\
    \ f64\n  |       ++++++\n\nerror[E0277]: cannot divide-assign `isize` by `f64`\n\
    \ --> /tmp/tmpkdo3_nqw.rs:8:7\n  |\n8 |     s /= l.len() as f64;\n  |       ^^\
    \ no implementation for `isize /= f64`\n  |\n  = help: the trait `DivAssign<f64>`\
    \ is not implemented for `isize`\n  = help: the following other types implement\
    \ trait `DivAssign<Rhs>`:\n            <f32 as DivAssign<&f32>>\n            <f32\
    \ as DivAssign>\n            <f64 as DivAssign<&f64>>\n            <f64 as DivAssign>\n\
    \            <i128 as DivAssign<&i128>>\n            <i128 as DivAssign>\n   \
    \         <i16 as DivAssign<&i16>>\n            <i16 as DivAssign>\n         \
    \ and 20 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if *a < *b {\n                a\n            }\
    \ else {\n                b\n            }\n        },\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmps7kbzsny.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmps7kbzsny.rs:10:16\n\
    \   |\n10 |             if *a < *b {\n   |                ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps7kbzsny.rs:13:17\n   |\n13 |              \
    \   b\n   |                 ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0.0, |s, x| s\
    \ + x);\n    s / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpqi3tz4lf.rs:7:45\n\
    \  |\n7 |     let mut s = l.iter().fold(0.0, |s, x| s + x);\n  |             \
    \                                ^ no implementation for `{float} + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  =\
    \ help: the following other types implement trait `Add<Rhs>`:\n            <&'a\
    \ f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as\
    \ Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot\
    \ divide `{float}` by `usize`\n --> /tmp/tmpqi3tz4lf.rs:8:7\n  |\n8 |     s /\
    \ l.len()\n  |       ^ no implementation for `{float} / usize`\n  |\n  = help:\
    \ the trait `Div<usize>` is not implemented for `{float}`\n  = help: the following\
    \ other types implement trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n\
    \            <&'a f64 as Div<f64>>\n            <&'a i128 as Div<i128>>\n    \
    \        <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n          \
    \  <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n            <&'a isize\
    \ as Div<isize>>\n          and 54 others\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphrqitrkz.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphrqitrkz.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().cloned().collect::<Vec<_>>();\n\
    \    s.sort();\n    s.len().checked_div(2).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpmchbrk0o.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     s.len().checked_div(2).unwrap()\n\
    \  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `usize`\n  |\n\
    help: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     s.len().checked_div(2).unwrap()\
    \ as f64\n  |                                     ++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if *a < *b {\n                a\n            }\
    \ else {\n                b\n            }\n        },\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmps7kbzsny.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0614]: type `f64` cannot be dereferenced\n  --> /tmp/tmps7kbzsny.rs:10:16\n\
    \   |\n10 |             if *a < *b {\n   |                ^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmps7kbzsny.rs:13:17\n   |\n13 |              \
    \   b\n   |                 ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.iter().fold(a,\
    \ |c, d| {\n            d if c < a else c\n        })\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n --> /tmp/tmpfn89mw34.rs:9:15\n  |\n9 |             d if\
    \ c < a else c\n  |               ^^ expected one of 8 possible tokens\n\nerror[E0599]:\
    \ no method named `iter` found for reference `&isize` in the current scope\n -->\
    \ /tmp/tmpfn89mw34.rs:8:11\n  |\n8 |         b.iter().fold(a, |c, d| {\n  |  \
    \         ^^^^ method not found in `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a < b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6zg08jp6.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6zg08jp6.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a < b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpc_i0jf33.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc_i0jf33.rs:10:20\n   |\n10 |\
    \             if a < b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc_i0jf33.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            acc\n        } else {\n          \
    \  x\n        },\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp9x849ktj.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp9x849ktj.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9x849ktj.rs:12:13\n\
    \   |\n12 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a < b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6zg08jp6.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6zg08jp6.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n    \
    \              |median, el| if el < median { el } else { median })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplvolgvx2.rs:8:40\n  |\n8 |\
    \                   |median, el| if el < median { el } else { median })\n  | \
    \                                       ^^^^^^ expected `&isize`, found `f64`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmplvolgvx2.rs:8:49\n  |\n8 |    \
    \               |median, el| if el < median { el } else { median })\n  |     \
    \                                            ^^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      a => a - 1,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy7r5eyh2.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0308]: `match` arms have incompatible\
    \ types\n  --> /tmp/tmpy7r5eyh2.rs:12:22\n   |\n10 | /             match b {\n\
    11 | |                 0 => a,\n   | |                      - this is found to\
    \ be of type `f64`\n12 | |                 a => a - 1,\n   | |               \
    \       ^^^^^ expected `f64`, found `isize`\n13 | |             }\n   | |_____________-\
    \ `match` arms have incompatible types\n   |\nhelp: you can convert an `isize`\
    \ to an `f64`, producing the floating point representation of the integer, rounded\
    \ if necessary\n   |\n12 |                 a => (a - 1) as f64,\n   |        \
    \              +     ++++++++\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY,\n    \
    \              |acc, x| if x < acc { x } else { acc })\n}\n\nfn main() {\n   \
    \ let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpk2w1gnak.rs:8:35\n  |\n8 |\
    \                   |acc, x| if x < acc { x } else { acc })\n  |             \
    \                      ^^^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk2w1gnak.rs:8:41\n  |\n8 |                   |acc, x| if\
    \ x < acc { x } else { acc })\n  |                                         ^ expected\
    \ `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| {\n    \
    \    b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmpq1e3a655.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq1e3a655.rs:8:23\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\n\
    \  |                       ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpq1e3a655.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap())\n  |                                          \
    \        ^ expected `&isize`, found `f64`\n\nerror[E0369]: cannot add `std::cmp::Ordering`\
    \ to `std::cmp::Ordering`\n --> /tmp/tmpq1e3a655.rs:8:62\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap())\n  |                                    -------------------------\
    \ ^ ------------------------- std::cmp::Ordering\n  |                        \
    \            |\n  |                                    std::cmp::Ordering\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpq1e3a655.rs:8:9\n  |\n8 |       \
    \  b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found enum `std::cmp::Ordering`\n\nerror: aborting due to 5\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvk79cgk6.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { x } else { acc },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmprhjc0h15.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { x } else { acc },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:31\n\
    \  |\n9 |         |acc, x| if x < acc { x } else { acc },\n  |               \
    \                ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo_nbsp6o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo_nbsp6o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo_nbsp6o.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00026zzu.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp00026zzu.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp00026zzu.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp00026zzu.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| {\n      \
    \  match el {\n            0 => sum,\n            x if x < sum => x,\n       \
    \     x if x > sum => sum,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pv5pxfl.rs:10:22\n   |\n\
    10 |             x if x < sum => x,\n   |                      ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp1pv5pxfl.rs:10:29\n\
    \   |\n8  | /         match el {\n9  | |             0 => sum,\n   | |       \
    \           --- this is found to be of type `f64`\n10 | |             x if x <\
    \ sum => x,\n   | |                             ^ expected `f64`, found `&isize`\n\
    11 | |             x if x > sum => sum,\n12 | |         }\n   | |_________- `match`\
    \ arms have incompatible types\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1pv5pxfl.rs:11:22\n\
    \   |\n11 |             x if x > sum => sum,\n   |                      ^^^ expected\
    \ `&isize`, found `f64`\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match x.partial_cmp(&acc) {\n            Some(Ordering::Less)\
    \ => acc,\n            Some(Ordering::Greater) => x,\n            Some(Ordering::Equal)\
    \ => x,\n            Some(Ordering::NotEqual) => acc,\n            None => x,\n\
    \        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmpji9ohtaj.rs:9:18\n  |\n9 |             Some(Ordering::Less) => acc,\n\
    \  |                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpji9ohtaj.rs:10:18\n\
    \   |\n10 |             Some(Ordering::Greater) => x,\n   |                  ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpji9ohtaj.rs:11:18\n   |\n11 |    \
    \         Some(Ordering::Equal) => x,\n   |                  ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0433]: failed to resolve: use of undeclared type `Ordering`\n\
    \  --> /tmp/tmpji9ohtaj.rs:12:18\n   |\n12 |             Some(Ordering::NotEqual)\
    \ => acc,\n   |                  ^^^^^^^^ use of undeclared type `Ordering`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpji9ohtaj.rs:8:29\n  |\n8 |      \
    \   match x.partial_cmp(&acc) {\n  |                             ^^^^ expected\
    \ `isize`, found `f64`\n  |\n  = note: expected reference `&isize`\n         \
    \    found reference `&f64`\n\nerror[E0308]: `match` arms have incompatible types\n\
    \  --> /tmp/tmpji9ohtaj.rs:10:40\n   |\n8  | /         match x.partial_cmp(&acc)\
    \ {\n9  | |             Some(Ordering::Less) => acc,\n   | |                 \
    \                    --- this is found to be of type `f64`\n10 | |           \
    \  Some(Ordering::Greater) => x,\n   | |                                     \
    \   ^ expected `f64`, found `&isize`\n11 | |             Some(Ordering::Equal)\
    \ => x,\n12 | |             Some(Ordering::NotEqual) => acc,\n13 | |         \
    \    None => x,\n14 | |         }\n   | |_________- `match` arms have incompatible\
    \ types\n\nerror: aborting due to 6 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a > b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprn4k8w9q.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprn4k8w9q.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| sum + e) /\
    \ l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpdk_8zh_2.rs:7:37\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, e| sum + e) / l.len()\n  |            \
    \                         ^ no implementation for `{float} + &isize`\n  |\n  =\
    \ help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help: the\
    \ following other types implement trait `Add<Rhs>`:\n            <&'a f32 as Add<f32>>\n\
    \            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n    \
    \        <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n          \
    \  <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a isize\
    \ as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide `{float}`\
    \ by `usize`\n --> /tmp/tmpdk_8zh_2.rs:7:42\n  |\n7 |     l.iter().fold(0.0, |sum,\
    \ e| sum + e) / l.len()\n  |                                          ^ no implementation\
    \ for `{float} / usize`\n  |\n  = help: the trait `Div<usize>` is not implemented\
    \ for `{float}`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.partial_cmp(b).unwrap().unwrap())\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq0yolc33.rs:7:59\n  |\n7 |\
    \     l.iter().fold(f64::NEG_INFINITY, |a, b| a.partial_cmp(b).unwrap().unwrap())\n\
    \  |                                                           ^ expected `f64`,\
    \ found `isize`\n  |\n  = note: expected reference `&f64`\n             found\
    \ reference `&isize`\n\nerror[E0599]: no method named `unwrap` found for enum\
    \ `std::cmp::Ordering` in the current scope\n --> /tmp/tmpq0yolc33.rs:7:71\n \
    \ |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.partial_cmp(b).unwrap().unwrap())\n\
    \  |                                                                       ^^^^^^\
    \ method not found in `std::cmp::Ordering`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match x.partial_cmp(&acc) {\n            Some(Ordering::Less)\
    \ => acc - x,\n            Some(Ordering::Greater) => x + acc,\n            Some(Ordering::Equal)\
    \ => x,\n            None => x,\n        }\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n -->\
    \ /tmp/tmp8l3quzc9.rs:9:18\n  |\n9 |             Some(Ordering::Less) => acc -\
    \ x,\n  |                  ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmp8l3quzc9.rs:10:18\n\
    \   |\n10 |             Some(Ordering::Greater) => x + acc,\n   |            \
    \      ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared type `Ordering`\n  --> /tmp/tmp8l3quzc9.rs:11:18\n   |\n11\
    \ |             Some(Ordering::Equal) => x,\n   |                  ^^^^^^^^ use\
    \ of undeclared type `Ordering`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp8l3quzc9.rs:8:29\n\
    \  |\n8 |         match x.partial_cmp(&acc) {\n  |                           \
    \  ^^^^ expected `isize`, found `f64`\n  |\n  = note: expected reference `&isize`\n\
    \             found reference `&f64`\n\nerror[E0277]: cannot subtract `&isize`\
    \ from `f64`\n --> /tmp/tmp8l3quzc9.rs:9:41\n  |\n9 |             Some(Ordering::Less)\
    \ => acc - x,\n  |                                         ^ no implementation\
    \ for `f64 - &isize`\n  |\n  = help: the trait `Sub<&isize>` is not implemented\
    \ for `f64`\n  = help: the following other types implement trait `Sub<Rhs>`:\n\
    \            <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n      \
    \      <&'a i128 as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n          \
    \  <&'a i32 as Sub<i32>>\n            <&'a i64 as Sub<i64>>\n            <&'a\
    \ i8 as Sub<i8>>\n            <&'a isize as Sub<isize>>\n          and 48 others\n\
    \nerror[E0277]: cannot add `f64` to `&isize`\n  --> /tmp/tmp8l3quzc9.rs:10:42\n\
    \   |\n10 |             Some(Ordering::Greater) => x + acc,\n   |            \
    \                              ^ no implementation for `&isize + f64`\n   |\n\
    \   = help: the trait `Add<f64>` is not implemented for `&isize`\n   = help: the\
    \ following other types implement trait `Add<Rhs>`:\n             <&'a f32 as\
    \ Add<f32>>\n             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n\
    \             <&'a i16 as Add<i16>>\n  "
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        if\
    \ a < b {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6zg08jp6.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp6zg08jp6.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| acc + x / 2)\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `f64`\n --> /tmp/tmp_4486thw.rs:7:51\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |acc, x| acc + x / 2)\n  |    \
    \                                               ^ no implementation for `f64 +\
    \ isize`\n  |\n  = help: the trait `Add<isize>` is not implemented for `f64`\n\
    \  = help: the following other types implement trait `Add<Rhs>`:\n           \
    \ <&'a f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128\
    \ as Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdgikxf88.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match acc.checked_add(x.into()) {\n            Some(mut m) =>\
    \ m,\n            None => return f64::NEG_INFINITY,\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpolf4b9a5.rs:8:19\n  |\n8 |         match acc.checked_add(x.into())\
    \ {\n  |                   ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.checked_add(f64::from(b)).unwrap())\n}\n\nfn main() {\n    let candidate =\
    \ median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpongqi_q_.rs:7:47\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |a, b| a.checked_add(f64::from(b)).unwrap())\n  |                          \
    \                     ^^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: the\
    \ trait bound `f64: From<&isize>` is not satisfied\n --> /tmp/tmpongqi_q_.rs:7:59\n\
    \  |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.checked_add(f64::from(b)).unwrap())\n\
    \  |                                                           ^^^^^^^^^ the trait\
    \ `From<&isize>` is not implemented for `f64`\n  |\n  = help: the following other\
    \ types implement trait `From<T>`:\n            <f32 as From<i16>>\n         \
    \   <f32 as From<i8>>\n            <f32 as From<u16>>\n            <f32 as From<u8>>\n\
    \            <f64 as From<f32>>\n            <f64 as From<i16>>\n            <f64\
    \ as From<i32>>\n            <f64 as From<i8>>\n          and 67 others\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(&a).unwrap().sqrt()\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvte5lqu.rs:8:23\n  |\n8 |\
    \         b.checked_add(&a).unwrap().sqrt()\n  |                       ^^ expected\
    \ `isize`, found `&f64`\n\nerror[E0599]: no method named `sqrt` found for type\
    \ `isize` in the current scope\n --> /tmp/tmpdvte5lqu.rs:8:36\n  |\n8 |      \
    \   b.checked_add(&a).unwrap().sqrt()\n  |                                   \
    \ ^^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(f64::nan())\n    })\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp3jqq7wk7.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp3jqq7wk7.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \       ^ expected `isize`, found `f64`\n\nerror[E0599]: no function or associated\
    \ item named `nan` found for type `f64` in the current scope\n --> /tmp/tmp3jqq7wk7.rs:8:41\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n  |                \
    \                         ^^^\n  |                                         |\n\
    \  |                                         function or associated item not found\
    \ in `f64`\n  |                                         help: there is an associated\
    \ function with a similar name: `is_nan`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmp3jqq7wk7.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(f64::nan())\
    \ as f64\n  |                                                ++++++\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if *a < *b {\n            a\n        } else {\n            b\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpdupm0g6h.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdupm0g6h.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match acc.checked_add(x.into()) {\n            Some(mut m) =>\
    \ m,\n            None => return f64::NEG_INFINITY,\n        }\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpolf4b9a5.rs:8:19\n  |\n8 |         match acc.checked_add(x.into())\
    \ {\n  |                   ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpg805svtr.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if a > b {\n                a\n            } else\
    \ {\n                b\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpdgikxf88.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:10:20\n   |\n10 |\
    \             if a > b {\n   |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdgikxf88.rs:13:17\n   |\n13 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpby5rsphl.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpby5rsphl.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpby5rsphl.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |  \
    \                                                     ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2,\n\
    \        |a, b| {\n            if *a > *b {\n                b\n            }\
    \ else {\n                a\n            }\n        },\n    )\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprfexk1e_.rs:8:9\n  |\n8 |\
    \         l.len() / 2,\n  |         ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \  |\nhelp: you can cast a `usize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         (l.len() / 2) as f64,\n\
    \  |         +           ++++++++\n\nerror[E0614]: type `f64` cannot be dereferenced\n\
    \  --> /tmp/tmprfexk1e_.rs:10:16\n   |\n10 |             if *a > *b {\n   |  \
    \              ^^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprfexk1e_.rs:11:17\n\
    \   |\n11 |                 b\n   |                 ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo_nbsp6o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo_nbsp6o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo_nbsp6o.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { x } else { acc },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmprhjc0h15.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { x } else { acc },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:31\n\
    \  |\n9 |         |acc, x| if x < acc { x } else { acc },\n  |               \
    \                ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n    })\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4xhkgxyh.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n  |         \
    \              ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp4xhkgxyh.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n\
    \  |                                                  ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4xhkgxyh.rs:8:9\n  |\n\
    8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n  |       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { acc } else { x },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpbeiarpzn.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpbeiarpzn.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { acc } else { x },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbeiarpzn.rs:9:44\n\
    \  |\n9 |         |acc, x| if x < acc { acc } else { x },\n  |               \
    \                             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, e| {\n       \
    \ match sum {\n            0.0 => e,\n            x => if x < e { x } else { e\
    \ },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpwvwlhoxq.rs:9:20\n  |\n9 |\
    \             0.0 => e,\n  |                    ^ expected `f64`, found `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwvwlhoxq.rs:10:25\n   |\n10 |\
    \             x => if x < e { x } else { e },\n   |                         ^\
    \ expected `f64`, found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwvwlhoxq.rs:10:40\n\
    \   |\n10 |             x => if x < e { x } else { e },\n   |                \
    \                        ^ expected `f64`, found `&isize`\n\nerror: aborting due\
    \ to 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| acc + f64::from(x.median()))\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `median` found for reference `&isize` in\
    \ the current scope\n --> /tmp/tmptx0hj6up.rs:7:65\n  |\n7 |     l.iter().fold(f64::NEG_INFINITY,\
    \ |acc, x| acc + f64::from(x.median()))\n  |                                 \
    \                                ^^^^^^ method not found in `&isize`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(1.0))\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt4m14a2o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |                \
    \       ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpt4m14a2o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n\
    \  |                                                  ^^^ expected `isize`, found\
    \ floating-point number\n\nerror[E0308]: mismatched types\n --> /tmp/tmpt4m14a2o.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |        \
    \                            ^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \  |\n  = note: expected type `isize`\n             found enum `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpt4m14a2o.rs:8:9\n  |\n8 |     \
    \    b.checked_add(a).unwrap_or(b.checked_add(1.0))\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(1.0)) as f64\n  | \
    \                                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan, |a, b| a.checked_add(f64::from(b.floor())).unwrap())\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp_xrxxyzh.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan,\
    \ |a, b| a.checked_add(f64::from(b.floor())).unwrap())\n  |                  \
    \      ^^^\n  |                        |\n  |                        function\
    \ or associated item not found in `f64`\n  |                        help: there\
    \ is an associated function with a similar name: `is_nan`\n\nerror[E0599]: no\
    \ method named `checked_add` found for type `f64` in the current scope\n --> /tmp/tmp_xrxxyzh.rs:7:38\n\
    \  |\n7 |     l.iter().fold(f64::nan, |a, b| a.checked_add(f64::from(b.floor())).unwrap())\n\
    \  |                                      ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0599]: no method named `floor` found for reference `&isize` in the current\
    \ scope\n --> /tmp/tmp_xrxxyzh.rs:7:62\n  |\n7 |     l.iter().fold(f64::nan, |a,\
    \ b| a.checked_add(f64::from(b.floor())).unwrap())\n  |                      \
    \                                        ^^^^^ help: there is an associated function\
    \ with a similar name: `div_floor`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ a.partial_cmp(b).unwrap().unwrap())\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq0yolc33.rs:7:59\n  |\n7 |\
    \     l.iter().fold(f64::NEG_INFINITY, |a, b| a.partial_cmp(b).unwrap().unwrap())\n\
    \  |                                                           ^ expected `f64`,\
    \ found `isize`\n  |\n  = note: expected reference `&f64`\n             found\
    \ reference `&isize`\n\nerror[E0599]: no method named `unwrap` found for enum\
    \ `std::cmp::Ordering` in the current scope\n --> /tmp/tmpq0yolc33.rs:7:71\n \
    \ |\n7 |     l.iter().fold(f64::NEG_INFINITY, |a, b| a.partial_cmp(b).unwrap().unwrap())\n\
    \  |                                                                       ^^^^^^\
    \ method not found in `std::cmp::Ordering`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(b)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp752xbj7_.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |                  \
    \                     ++++++\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00026zzu.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp00026zzu.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp00026zzu.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp00026zzu.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if b < a { a } else { b }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5gllu4vu.rs:8:16\n  |\n8 |\
    \         if b < a { a } else { b }\n  |                ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp5gllu4vu.rs:8:31\n  |\n\
    8 |         if b < a { a } else { b }\n  |                               ^ expected\
    \ `f64`, found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| if b < a { b } else { a },\n    )\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxxtx8rsa.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpxxtx8rsa.rs:9:23\n  |\n9 |    \
    \     |a, b| if b < a { b } else { a },\n  |                       ^ expected\
    \ `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxxtx8rsa.rs:9:27\n\
    \  |\n9 |         |a, b| if b < a { b } else { a },\n  |                     \
    \      ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 101
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() as f64 / 2.0\n\
    }\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2.5`,\n right: `3.0`', /tmp/tmpwidz76l_.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a > b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp0c76p7zt.rs:8:16\n  |\n8 |\
    \         if a > b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp0c76p7zt.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpadu9u0tf.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        a.checked_add(b).unwrap()\
    \ / 2.0\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpiml70x2a.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap()\
    \ / 2.0\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).unwrap().sqrt().ok()\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpg805svtr.rs:8:11\n  |\n8 |         a.checked_add(b).unwrap().sqrt().ok()\n\
    \  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            a if a < b => a,\n            a if a > b =>\
    \ b,\n            _ => a + b,\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphnyr1rn7.rs:9:27\n  |\n9 |\
    \             a if a < b => a,\n  |                           ^ expected `f64`,\
    \ found `&isize`\n\nerror[E0277]: cannot add `&isize` to `f64`\n  --> /tmp/tmphnyr1rn7.rs:11:20\n\
    \   |\n11 |             _ => a + b,\n   |                    ^ no implementation\
    \ for `f64 + &isize`\n   |\n   = help: the trait `Add<&isize>` is not implemented\
    \ for `f64`\n   = help: the following other types implement trait `Add<Rhs>`:\n\
    \             <&'a f32 as Add<f32>>\n             <&'a f64 as Add<f64>>\n    \
    \         <&'a i128 as Add<i128>>\n             <&'a i16 as Add<i16>>\n      \
    \       <&'a i32 as Add<i32>>\n             <&'a i64 as Add<i64>>\n          \
    \   <&'a i8 as Add<i8>>\n             <&'a isize as Add<isize>>\n           and\
    \ 48 others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnj0on5x.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        acc + (x.f64() / l.len() as f64)\n    })\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `f64` found for reference `&isize` in the\
    \ current scope\n --> /tmp/tmpd9w85ukk.rs:8:18\n  |\n8 |         acc + (x.f64()\
    \ / l.len() as f64)\n  |                  ^^^ method not found in `&isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc {\n            x\n        } else {\n            acc\n\
    \        }\n    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpvr38rh9j.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpvr38rh9j.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc {\n  |                         ^^^ expected `&isize`,\
    \ found `f64`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvr38rh9j.rs:10:13\n\
    \   |\n10 |             x\n   |             ^ expected `f64`, found `&isize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { x } else { acc },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmprhjc0h15.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { x } else { acc },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmprhjc0h15.rs:9:31\n\
    \  |\n9 |         |acc, x| if x < acc { x } else { acc },\n  |               \
    \                ^ expected `f64`, found `&isize`\n\nerror: aborting due to 3\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphrqitrkz.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphrqitrkz.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len().checked_div(2).unwrap();\n    l[(l.len()\
    \ - 1) >> 1].clone()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph1ooowzi.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l[(l.len() - 1) >> 1].clone()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n10 |     l[(l.len() - 1) >> 1].clone()\
    \ as f64\n   |                                   ++++++\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\
    \ / 2\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpsyyysefe.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\
    \ / 2\n  |                       ^ expected `&isize`, found `f64`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpsyyysefe.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap()) / 2\n  |                                      \
    \            ^ expected `&isize`, found `f64`\n\nerror[E0369]: cannot add `std::cmp::Ordering`\
    \ to `std::cmp::Ordering`\n --> /tmp/tmpsyyysefe.rs:8:62\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap()\
    \ + b.partial_cmp(b).unwrap()) / 2\n  |                                    -------------------------\
    \ ^ ------------------------- std::cmp::Ordering\n  |                        \
    \            |\n  |                                    std::cmp::Ordering\n\n\
    error[E0369]: cannot divide `std::cmp::Ordering` by `{integer}`\n --> /tmp/tmpsyyysefe.rs:8:91\n\
    \  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap() + b.partial_cmp(b).unwrap())\
    \ / 2\n  |         ---------------------------------------------------------------------------------\
    \ ^ - {integer}\n  |         |\n  |         std::cmp::Ordering\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            if b < a {\n                b\n            } else\
    \ {\n                a\n            }\n        },\n    )\n}\n\nfn main() {\n \
    \   let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpxgfk25lq.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxgfk25lq.rs:10:20\n   |\n10 |\
    \             if b < a {\n   |                    ^ expected `&isize`, found `f64`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxgfk25lq.rs:11:17\n   |\n11 |\
    \                 b\n   |                 ^ expected `f64`, found `&isize`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().check();\n    l.len() / 2\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `check` found for type `usize` in the current\
    \ scope\n --> /tmp/tmphrqitrkz.rs:9:13\n  |\n9 |     l.len().check();\n  |   \
    \          ^^^^^ method not found in `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmphrqitrkz.rs:10:5\n   |\n6  | fn median(l: Vec<isize>) -> f64 {\n\
    \   |                             --- expected `f64` because of return type\n\
    ...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^ expected `f64`, found `usize`\n\
    \   |\nhelp: you can cast a `usize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n10 |     (l.len()\
    \ / 2) as f64\n   |     +           ++++++++\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort_unstable();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0m8wf_e.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            None => a,\n            Some(x) => if x <\
    \ a { a } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp00026zzu.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp00026zzu.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp00026zzu.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp00026zzu.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n    })\n}\n\n\
    fn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmp4sk__vdp.rs:8:11\n  |\n8 |         a.checked_add(f64::from(a)\
    \ + f64::from(b)).unwrap()\n  |           ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: the trait bound `f64: From<&isize>` is not satisfied\n --> /tmp/tmp4sk__vdp.rs:8:38\n\
    \  |\n8 |         a.checked_add(f64::from(a) + f64::from(b)).unwrap()\n  |   \
    \                                   ^^^^^^^^^ the trait `From<&isize>` is not\
    \ implemented for `f64`\n  |\n  = help: the following other types implement trait\
    \ `From<T>`:\n            <f32 as From<i16>>\n            <f32 as From<i8>>\n\
    \            <f32 as From<u16>>\n            <f32 as From<u8>>\n            <f64\
    \ as From<f32>>\n            <f64 as From<i16>>\n            <f64 as From<i32>>\n\
    \            <f64 as From<i8>>\n          and 67 others\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.to_vec();\n    l.sort();\n\
    \    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmprg8082cv.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            match b {\n                0 => a,\n          \
    \      a => a - b,\n            }\n        },\n    )\n}\n\nfn main() {\n    let\
    \ candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmp5d180lss.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp5d180lss.rs:12:22\n\
    \   |\n10 | /             match b {\n11 | |                 0 => a,\n   | |  \
    \                    - this is found to be of type `f64`\n12 | |             \
    \    a => a - b,\n   | |                      ^^^^^ expected `f64`, found `isize`\n\
    13 | |             }\n   | |_____________- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n12 |            \
    \     a => (a - b) as f64,\n   |                      +     ++++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n    })\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4xhkgxyh.rs:8:23\n  |\n8 |\
    \         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n  |         \
    \              ^ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp4xhkgxyh.rs:8:50\n  |\n8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n\
    \  |                                                  ^ expected `&isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp4xhkgxyh.rs:8:9\n  |\n\
    8 |         b.partial_cmp(a).unwrap_or(b.partial_cmp(a).unwrap())\n  |       \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found\
    \ enum `std::cmp::Ordering`\n\nerror: aborting due to 3 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |acc,\
    \ x| {\n        match x.checked_div(acc.checked_add(acc)) {\n            Some(quotient)\
    \ => quotient,\n            None => f64::NEG_INFINITY,\n        }\n    })\n}\n\
    \nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1,\
    \ 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpui_1ktoe.rs:8:33\n  |\n8 |         match x.checked_div(acc.checked_add(acc))\
    \ {\n  |                                 ^^^^^^^^^^^ method not found in `f64`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpui_1ktoe.rs:9:31\n  |\n9 |    \
    \         Some(quotient) => quotient,\n  |                               ^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |             Some(quotient) => quotient as f64,\n  |                \
    \                        ++++++\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0, |a, b| a +\
    \ b);\n    s /= l.len();\n    s\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpl5gchoyp.rs:8:10\n  |\n8 |\
    \     s /= l.len();\n  |          ^^^^^^^ expected `isize`, found `usize`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpl5gchoyp.rs:9:5\n  |\n6 | fn median(l:\
    \ Vec<isize>) -> f64 {\n  |                             --- expected `f64` because\
    \ of return type\n...\n9 |     s\n  |     ^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n9 |     s as f64\n  |       ++++++\n\
    \nerror[E0277]: cannot divide-assign `isize` by `usize`\n --> /tmp/tmpl5gchoyp.rs:8:7\n\
    \  |\n8 |     s /= l.len();\n  |       ^^ no implementation for `isize /= usize`\n\
    \  |\n  = help: the trait `DivAssign<usize>` is not implemented for `isize`\n\
    \  = help: the following other types implement trait `DivAssign<Rhs>`:\n     \
    \       <f32 as DivAssign<&f32>>\n            <f32 as DivAssign>\n           \
    \ <f64 as DivAssign<&f64>>\n            <f64 as DivAssign>\n            <i128\
    \ as DivAssign<&i128>>\n            <i128 as DivAssign>\n            <i16 as DivAssign<&i16>>\n\
    \            <i16 as DivAssign>\n          and 20 others\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        match b {\n            Some(x) => a.checked_add(x),\n           \
    \ None => a,\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo7ozclao.rs:9:13\n  |\n8 |\
    \         match b {\n  |               - this expression has type `&isize`\n9\
    \ |             Some(x) => a.checked_add(x),\n  |             ^^^^^^^ expected\
    \ `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n       \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpo7ozclao.rs:10:13\n\
    \   |\n8  |         match b {\n   |               - this expression has type `&isize`\n\
    9  |             Some(x) => a.checked_add(x),\n10 |             None => a,\n \
    \  |             ^^^^ expected `isize`, found enum `Option`\n   |\n   = note:\
    \ expected type `isize`\n              found enum `Option<_>`\n\nerror[E0599]:\
    \ no method named `checked_add` found for type `f64` in the current scope\n -->\
    \ /tmp/tmpo7ozclao.rs:9:26\n  |\n9 |             Some(x) => a.checked_add(x),\n\
    \  |                          ^^^^^^^^^^^ method not found in `f64`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |a, b| {\n        b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpo_nbsp6o.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n  |         \
    \              ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpo_nbsp6o.rs:8:50\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |                                                  ^ expected `isize`, found\
    \ `&isize`\n  |\nhelp: consider dereferencing the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(*b).unwrap())\n\
    \  |                                                  +\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpo_nbsp6o.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap())\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n  |\n\
    8 |         b.checked_add(a).unwrap_or(b.checked_add(b).unwrap()) as f64\n  |\
    \                                                               ++++++\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if a < b {\n            a\n        } else {\n            b\n    \
    \    }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpue16hcrr.rs:8:16\n  |\n8 |\
    \         if a < b {\n  |                ^ expected `f64`, found `&isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpue16hcrr.rs:11:13\n   |\n11 |  \
    \           b\n   |             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n    })\n}\n\nfn main()\
    \ {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]),\
    \ 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpby5rsphl.rs:8:23\n  |\n8 |\
    \         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |                 \
    \      ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n -->\
    \ /tmp/tmpby5rsphl.rs:8:36\n  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n\
    \  |                                    ^^^^^^^^^^^^^^^^^ expected `isize`, found\
    \ `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpby5rsphl.rs:8:9\n  |\n\
    8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(f64::NEG_INFINITY) as f64\n  |  \
    \                                                     ++++++\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(0.0, |sum, el| sum + el)\
    \ / l.len()\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpt8x_338s.rs:7:38\n\
    \  |\n7 |     l.iter().fold(0.0, |sum, el| sum + el) / l.len()\n  |          \
    \                            ^ no implementation for `{float} + &isize`\n  |\n\
    \  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  = help:\
    \ the following other types implement trait `Add<Rhs>`:\n            <&'a f32\
    \ as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as Add<i128>>\n\
    \            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n      \
    \      <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n            <&'a\
    \ isize as Add<isize>>\n          and 48 others\n\nerror[E0277]: cannot divide\
    \ `{float}` by `usize`\n --> /tmp/tmpt8x_338s.rs:7:44\n  |\n7 |     l.iter().fold(0.0,\
    \ |sum, el| sum + el) / l.len()\n  |                                         \
    \   ^ no implementation for `{float} / usize`\n  |\n  = help: the trait `Div<usize>`\
    \ is not implemented for `{float}`\n  = help: the following other types implement\
    \ trait `Div<Rhs>`:\n            <&'a f32 as Div<f32>>\n            <&'a f64 as\
    \ Div<f64>>\n            <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n\
    \            <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n      \
    \      <&'a i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and\
    \ 54 others\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |a, b| {\n            b.floor() as f64 + a.ceil() as f64\n        },\n\
    \    )\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpylc6_wgi.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0599]: no method named `floor` found for reference `&isize` in the current\
    \ scope\n  --> /tmp/tmpylc6_wgi.rs:10:15\n   |\n10 |             b.floor() as\
    \ f64 + a.ceil() as f64\n   |               ^^^^^ help: there is an associated\
    \ function with a similar name: `div_floor`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(\n        l.len() / 2.0,\n\
    \        |acc, x| if x < acc { acc } else { x },\n    )\n}\n\nfn main() {\n  \
    \  let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `usize` by `{float}`\n --> /tmp/tmpbeiarpzn.rs:8:17\n\
    \  |\n8 |         l.len() / 2.0,\n  |                 ^ no implementation for\
    \ `usize / {float}`\n  |\n  = help: the trait `Div<{float}>` is not implemented\
    \ for `usize`\n  = help: the following other types implement trait `Div<Rhs>`:\n\
    \            <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n      \
    \      <&'a i128 as Div<i128>>\n            <&'a i16 as Div<i16>>\n          \
    \  <&'a i32 as Div<i32>>\n            <&'a i64 as Div<i64>>\n            <&'a\
    \ i8 as Div<i8>>\n            <&'a isize as Div<isize>>\n          and 54 others\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpbeiarpzn.rs:9:25\n  |\n9 |    \
    \     |acc, x| if x < acc { acc } else { x },\n  |                         ^^^\
    \ expected `&isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbeiarpzn.rs:9:44\n\
    \  |\n9 |         |acc, x| if x < acc { acc } else { x },\n  |               \
    \                             ^ expected `f64`, found `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(b)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp752xbj7_.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |                         \
    \           ^ expected `isize`, found `&isize`\n  |\nhelp: consider dereferencing\
    \ the borrow\n  |\n8 |         b.checked_add(a).unwrap_or(*b)\n  |           \
    \                         +\n\nerror[E0308]: mismatched types\n --> /tmp/tmp752xbj7_.rs:8:9\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b)\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n  |\nhelp: you can convert an `isize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(b) as f64\n  |                  \
    \                     ++++++\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len().checked_div(2).unwrap();\n    l.len() / 2\n}\n\nfn\
    \ main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2,\
    \ 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n\
    \    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6, 5]),\
    \ 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgnj0on5x.rs:10:5\n   |\n\
    6  | fn median(l: Vec<isize>) -> f64 {\n   |                             --- expected\
    \ `f64` because of return type\n...\n10 |     l.len() / 2\n   |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n   |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \   |\n10 |     (l.len() / 2) as f64\n   |     +           ++++++++\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        if *a < *b {\n            a\n        } else {\n            b\n  \
    \      }\n    })\n}\n\nfn main() {\n    let candidate = median;\n    assert_eq!(candidate(vec![3,\
    \ 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]),\
    \ 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `f64` cannot be dereferenced\n --> /tmp/tmpdupm0g6h.rs:8:12\n\
    \  |\n8 |         if *a < *b {\n  |            ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdupm0g6h.rs:11:13\n   |\n11 |             b\n   |     \
    \        ^ expected `f64`, found `&isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::NEG_INFINITY, |a, b|\
    \ {\n        a.checked_add(b).expect(\"overflow\")\n    })\n}\n\nfn main() {\n\
    \    let candidate = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n\
    \    assert_eq!(candidate(vec![-10, 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]),\
    \ 5.0);\n    assert_eq!(candidate(vec![6, 5]), 5.5);\n    assert_eq!(candidate(vec![8,\
    \ 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `checked_add` found for type `f64` in the\
    \ current scope\n --> /tmp/tmpadu9u0tf.rs:8:11\n  |\n8 |         a.checked_add(b).expect(\"\
    overflow\")\n  |           ^^^^^^^^^^^ method not found in `f64`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut s = l.iter().fold(0.0, |sum, e|\
    \ sum + e);\n    s / (l.len() as f64)\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `&isize` to `{float}`\n --> /tmp/tmpsap_vxmt.rs:7:49\n\
    \  |\n7 |     let mut s = l.iter().fold(0.0, |sum, e| sum + e);\n  |         \
    \                                        ^ no implementation for `{float} + &isize`\n\
    \  |\n  = help: the trait `Add<&isize>` is not implemented for `{float}`\n  =\
    \ help: the following other types implement trait `Add<Rhs>`:\n            <&'a\
    \ f32 as Add<f32>>\n            <&'a f64 as Add<f64>>\n            <&'a i128 as\
    \ Add<i128>>\n            <&'a i16 as Add<i16>>\n            <&'a i32 as Add<i32>>\n\
    \            <&'a i64 as Add<i64>>\n            <&'a i8 as Add<i8>>\n        \
    \    <&'a isize as Add<isize>>\n          and 48 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      match b {\n            None => a,\n            Some(x) => if x < a { a\
    \ } else { x },\n        }\n    })\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp6k0s0swo.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp6k0s0swo.rs:9:13\n\
    \  |\n8 |         match b {\n  |               - this expression has type `&isize`\n\
    9 |             None => a,\n  |             ^^^^ expected `isize`, found enum\
    \ `Option`\n  |\n  = note: expected type `isize`\n             found enum `Option<_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6k0s0swo.rs:10:13\n   |\n8  |\
    \         match b {\n   |               - this expression has type `&isize`\n\
    9  |             None => a,\n10 |             Some(x) => if x < a { a } else {\
    \ x },\n   |             ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected type `isize`\n              found enum `Option<_>`\n\nerror[E0277]:\
    \ can't compare `&_` with `f64`\n  --> /tmp/tmp6k0s0swo.rs:10:29\n   |\n10 | \
    \            Some(x) => if x < a { a } else { x },\n   |                     \
    \        ^ no implementation for `&_ < f64` and `&_ > f64`\n   |\n   = help: the\
    \ trait `PartialOrd<f64>` is not implemented for `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6k0s0swo.rs:10:46\n   |\n10 |             Some(x) => if\
    \ x < a { a } else { x },\n   |                                              ^\
    \ expected `f64`, found reference\n   |\n   = note:   expected type `f64`\n  \
    \         found reference `&_`\nhelp: consider dereferencing the borrow\n   |\n\
    10 |             Some(x) => if x < a { a } else { *x },\n   |                \
    \                              +\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    l.iter().fold(f64::nan(), |a, b| {\n  \
    \      b.checked_add(a).unwrap_or(a)\n    })\n}\n\nfn main() {\n    let candidate\
    \ = median;\n    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no function or associated item named `nan` found for type\
    \ `f64` in the current scope\n --> /tmp/tmp2piear19.rs:7:24\n  |\n7 |     l.iter().fold(f64::nan(),\
    \ |a, b| {\n  |                        ^^^\n  |                        |\n  |\
    \                        function or associated item not found in `f64`\n  | \
    \                       help: there is an associated function with a similar name:\
    \ `is_nan`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2piear19.rs:8:23\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                       ^ expected\
    \ `isize`, found `f64`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp2piear19.rs:8:36\n\
    \  |\n8 |         b.checked_add(a).unwrap_or(a)\n  |                         \
    \           ^ expected `isize`, found `f64`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp2piear19.rs:8:9\n  |\n8 |         b.checked_add(a).unwrap_or(a)\n\
    \  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n  |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n  |\n8 |         b.checked_add(a).unwrap_or(a)\
    \ as f64\n  |                                       ++++++\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660015728
- exit_code: 1
  program: "/// Return median of elements in the list l.\n/// >>> median(vec![3, 1,\
    \ 2, 4, 5])\n/// 3.0\n/// >>> median(vec![-10, 4, 6, 1000, 10, 20])\n/// 15.0\n\
    fn median(l: Vec<isize>) -> f64 {\n    let mut l = l.iter().cloned().collect::<Vec<_>>();\n\
    \    l.sort();\n    l.len() / 2\n}\n\nfn main() {\n    let candidate = median;\n\
    \    assert_eq!(candidate(vec![3, 1, 2, 4, 5]), 3.0);\n    assert_eq!(candidate(vec![-10,\
    \ 4, 6, 1000, 10, 20]), 8.0);\n    assert_eq!(candidate(vec![5]), 5.0);\n    assert_eq!(candidate(vec![6,\
    \ 5]), 5.5);\n    assert_eq!(candidate(vec![8, 1, 3, 9, 9, 2, 7]), 7.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1oto4xs_.rs:9:5\n  |\n6 |\
    \ fn median(l: Vec<isize>) -> f64 {\n  |                             --- expected\
    \ `f64` because of return type\n...\n9 |     l.len() / 2\n  |     ^^^^^^^^^^^\
    \ expected `f64`, found `usize`\n  |\nhelp: you can cast a `usize` to an `f64`,\
    \ producing the floating point representation of the integer, rounded if necessary\n\
    \  |\n9 |     (l.len() / 2) as f64\n  |     +           ++++++++\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660015728
