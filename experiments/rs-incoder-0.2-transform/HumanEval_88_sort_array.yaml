name: HumanEval_88_sort_array
language: rs
prompt: "/// Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n/// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given array.\n/// Examples:\n/// >>> sort_array(vec![])\n/// Vec::<isize>::new()\n\
  /// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1,\
  \ 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\n\
  /// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5]), vec![5]);\n    assert_eq!(candidate(vec![2,\
  \ 4, 3, 0, 1, 5]), vec![0, 1, 2, 3, 4, 5]);\n    assert_eq!(candidate(vec![2, 4,\
  \ 3, 0, 1, 5, 6]), vec![6, 5, 4, 3, 2, 1, 0]);\n    assert_eq!(candidate(vec![2,\
  \ 1]), vec![1, 2]);\n    assert_eq!(candidate(vec![15, 42, 87, 32, 11, 0]), vec![0,\
  \ 11, 15, 32, 42, 87]);\n    assert_eq!(candidate(vec![21, 14, 23, 11]), vec![23,\
  \ 21, 14, 11]);\n}\n"
completions: ["    if array.len() <= 1 {\n        return array;\n    }\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = array.len()\
    \ - 1;\n    while i < k {\n        sum += array[i];\n        i += 1;\n       \
    \ j += 1;\n        while j < k {\n            if sum % 2 == 0 {\n            \
    \    array[k] = array[j];\n                j += 1;\n            } else {\n   \
    \             array[k] = array[j];\n                j -= 1;\n            }\n \
    \           k += 1;\n        }\n    }\n    array", "    let mut array = array.clone();\n\
    \    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]).reverse());\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]));\n    }\n    array", "    let mut array = array.to_owned();\n    let\
    \ mut sum = 0;\n    for value in &array {\n        sum += value;\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    while i < array.len() {\n     \
    \   sum += array[i];\n        i += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.cmp(&array[array.len() - 1]));\n    } else {\n        array.sort_by_key(|&x|\
    \ x.cmp(&array[0]));\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut sum = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = array.len();\n    while i < k {\n\
    \        sum += array[i];\n        i += 1;\n    }\n    while j < k {\n       \
    \ sum += array[j];\n        j += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[j]).unwrap());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[j]).unwrap().reverse());\n    }\n    array", "    let mut\
    \ sum = 0;\n    for value in array {\n        sum += value;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut array = array.to_owned();\n    let mut\
    \ sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n \
    \   if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]).reverse());\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]));\n    }\n    array", "    if array.len() <= 1 {\n        return array;\n\
    \    }\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut result = Vec::new();\n    while i < array.len() {\n        sum += array[i];\n\
    \        if sum % 2 == 0 {\n            result.push(array[i]);\n            i\
    \ += 1;\n        } else {\n            result.push(array[j]);\n            j +=\
    \ 1;\n        }\n    }\n    result", "    if array.len() < 2 {\n        return\
    \ array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len() {\n       \
    \ sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.iter().cloned().sort_by_key(|&x| x).collect()\n\
    \    } else {\n        array.iter().cloned().sort_by_key(|&x| -x).collect()\n\
    \    }", "    let mut sum = 0;\n    for i in array.iter() {\n        sum += i;\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&i| i);\n    } else\
    \ {\n        array.sort_by_key(|&i| -i);\n    }\n    array", "    let mut sum\
    \ = 0;\n    for &i in array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n\
    \        array.iter().cloned().sort_by_key(|&i| i).collect()\n    } else {\n \
    \       array.iter().cloned().sort_by_key(|&i| -i).collect()\n    }", "    let\
    \ mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        if sum % 2 ==\
    \ 1 {\n            result.push(array[i]);\n            i += 1;\n        } else\
    \ {\n            result.push(array[j]);\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut array = array.clone();\n    array.sort();\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n    for value\
    \ in array {\n        sum += value;\n        result.push(value);\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.reverse();\n    }\n    result", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in &array {\n        sum += value;\n        if sum\
    \ % 2 == 1 {\n            min_value = value;\n        } else {\n            max_value\
    \ = value;\n        }\n    }\n    let mut new_array = Vec::new();\n    new_array.push(min_value);\n\
    \    new_array.push(max_value);\n    for value in &array {\n        if value ==\
    \ min_value {\n            new_array.push(value);\n        } else {\n        \
    \    new_array.push(max_value);\n            new_array.push(value);\n        }\n\
    \    }\n    new_array", "    let mut result = Vec::<isize>::new();\n    let mut\
    \ sum = 0;\n    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ array = array.clone();\n    array.sort();\n    array", "    let mut sum = 0;\n\
    \    for value in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut array = array.to_owned();\n    let mut\
    \ sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < array.len()\
    \ {\n        sum += array[i];\n        i += 1;\n    }\n    while j < array.len()\
    \ {\n        if sum % 2 == 1 {\n            array[j].swap(array[j + 1]);\n   \
    \         j += 1;\n        } else {\n            sum -= array[j];\n          \
    \  j += 1;\n        }\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in array {\n        sum += value;\n        if sum\
    \ % 2 == 1 {\n            min_value = value;\n        } else {\n            max_value\
    \ = value;\n        }\n    }\n    if min_value < max_value {\n        array.swap(0,\
    \ array.len() - 1);\n    }\n    array", "    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for value in array {\n \
    \       sum += value;\n        if sum % 2 == 1 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    let mut\
    \ array = array.clone();\n    array.sort();\n    if min_value < max_value {\n\
    \        array.reverse();\n    }\n    array", "    let mut sum = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut k = array.len();\n    while i < k {\n\
    \        sum += array[i];\n        if sum % 2 == 1 {\n            j = i;\n   \
    \         while j < k {\n                sum += array[j];\n                if\
    \ sum % 2 == 0 {\n                    k = j;\n                    break;\n   \
    \             }\n                j += 1;\n            }\n        } else {\n  \
    \          k = i;\n            while k < j {\n                sum += array[k];\n\
    \                if sum % 2 == 1 {\n                    i = k;\n             \
    \       break;\n                }\n                k += 1;\n            }\n  \
    \      }\n    }\n    array.sort_by_key(|&x| x);\n    array", "    let mut sum\
    \ = 0;\n    let mut result = Vec::new();\n    for value in array {\n        sum\
    \ += value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n     \
    \   result.sort();\n    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    if array.len() <= 1 {\n        return array;\n    }\n\
    \    let mut sum = 0;\n    let mut index = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while index < array.len() {\n        sum += array[index];\n        if sum\
    \ % 2 == 1 {\n            result.push(array[index]);\n        } else {\n     \
    \       result.push(-array[index]);\n        }\n        index += 1;\n    }\n \
    \   result", "    let mut array = array.to_owned();\n    let mut sum = 0;\n  \
    \  let mut i = 0;\n    while i < array.len() {\n        sum += array[i];\n   \
    \     i += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by(|a, b| a.cmp(b));\n\
    \    } else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array", " \
    \   if array.len() == 0 {\n        return array;\n    }\n    let mut sum = 0;\n\
    \    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum %\
    \ 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ result = vec![];\n    let mut sum = 0;\n    for value in array {\n        sum\
    \ += value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n     \
    \   result.sort();\n    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut sum = 0;\n    for &x in array {\n        sum\
    \ += x;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n  \
    \  } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", "    let\
    \ mut array = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut array = array.clone();\n    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for value in array {\n \
    \       sum += value;\n        if sum % 2 == 1 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    let mut\
    \ new_array: Vec<isize> = array.clone();\n    new_array.sort();\n    if min_value\
    \ < max_value {\n        new_array.swap(0, new_array.len() - 1);\n    }\n    new_array",
  "    let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < array.len() {\n        sum += array[i];\n \
    \       i += 1;\n    }\n    while j < array.len() {\n        sum += array[j];\n\
    \        j += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort();\n    } else\
    \ {\n        array.reverse();\n    }\n    array", "    let mut sum = 0;\n    for\
    \ value in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n    \
    \    array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ sum = 0;\n    let mut min_value = array[0];\n    let mut max_value = array[0];\n\
    \    for value in array {\n        sum += value;\n        if sum % 2 == 1 {\n\
    \            min_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    let mut array = array.clone();\n    array.sort();\n   \
    \ let mut i = 0;\n    while i < array.len() {\n        if sum % 2 == 1 {\n   \
    \         array[i] = max_value;\n        } else {\n            array[i] = min_value;\n\
    \        }\n        i += 1;\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in array {\n        sum += value;\n        if sum\
    \ % 2 == 0 {\n            max_value = value;\n        } else {\n            min_value\
    \ = value;\n        }\n    }\n    array.sort();\n    array", "    let mut sum\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        i += 1;\n    }\n\
    \    while j < array.len() {\n        sum += array[j];\n        j += 1;\n    }\n\
    \    if sum % 2 == 1 {\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n    } else {\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n    }\n    result", "    let mut sum = 0;\n    let mut min_value =\
    \ array[0];\n    let mut max_value = array[0];\n    for value in array {\n   \
    \     sum += value;\n        if sum % 2 == 0 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    let mut\
    \ array = array.clone();\n    array.sort();\n    array.sort_by_key(|&x| {\n  \
    \      if min_value < x {\n            -1\n        } else if max_value > x {\n\
    \            1\n        } else {\n            0\n        }\n    });\n    array",
  "    if array.len() < 2 {\n        return array;\n    }\n    let mut sum = 0;\n\
    \    for &i in array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n    \
    \    array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i|\
    \ -i);\n    }\n    array", "    let mut sum = 0;\n    let mut min_value = array[0];\n\
    \    let mut max_value = array[0];\n    for value in array {\n        sum += value;\n\
    \        if sum % 2 == 0 {\n            min_value = value;\n        } else {\n\
    \            max_value = value;\n        }\n    }\n    let mut array = array.clone();\n\
    \    array.sort();\n    if sum % 2 == 1 {\n        array.swap(0, array.len() -\
    \ 1);\n    }\n    array", "    let mut result = vec![];\n    let mut sum = 0;\n\
    \    for element in array {\n        sum += element;\n        result.push(element);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = array.len()\
    \ - 1;\n    while i < k {\n        while sum < array[j] {\n            sum +=\
    \ array[j];\n            j += 1;\n        }\n        while sum > array[k] {\n\
    \            sum -= array[k];\n            k -= 1;\n        }\n        if sum\
    \ < array[j] {\n            array[j], array[k] = array[k], array[j];\n       \
    \     i += 1;\n        }\n        if sum > array[k] {\n            array[k], array[j]\
    \ = array[j], array[k];\n            j -= 1;\n        }\n    }\n    array", " \
    \   let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut i = 0;\n\
    \    let mut j = 0;\n    while i < array.len() {\n        sum += array[i];\n \
    \       i += 1;\n    }\n    while j < array.len() {\n        if sum % 2 == 0 {\n\
    \            array[j].swap(array[j + 1]);\n            j += 1;\n        } else\
    \ {\n            array[j].swap(array[j - 1]);\n            j -= 1;\n        }\n\
    \    }\n    array", "    let mut sum = 0;\n    for value in array {\n        sum\
    \ += value;\n    }\n    if sum % 2 == 1 {\n        array.iter().cloned().sort().collect()\n\
    \    } else {\n        array.iter().cloned().rsort().collect()\n    }", "    let\
    \ mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x));\n    }\n   \
    \ array", "    let mut array = array.to_owned();\n    let mut sum = 0;\n    for\
    \ &x in &array {\n        sum += x;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   if array.len() < 2 {\n        return array;\n    }\n    let mut sum = 0;\n\
    \    let mut min_value = array[0];\n    let mut max_value = array[0];\n    for\
    \ value in array {\n        sum += value;\n        if sum % 2 == 0 {\n       \
    \     min_value = value;\n        } else {\n            max_value = value;\n \
    \       }\n    }\n    let mut array = array.clone();\n    array.sort();\n    if\
    \ sum % 2 == 1 {\n        array.reverse();\n    }\n    array", "    let mut sum\
    \ = 0;\n    for &x in array {\n        sum += x;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&x| -x);\n    } else {\n        array.sort_by_key(|&x|\
    \ x);\n    }\n    array", "    let mut sum = 0;\n    for i in 0..array.len() {\n\
    \        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[1..]));\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[..]));\n\
    \    }\n    array", "    let mut array = array.to_owned();\n    let mut sum =\
    \ 0;\n    let mut i = 0;\n    while i < array.len() {\n        sum += array[i];\n\
    \        i += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[i + 1]).unwrap());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[i + 1]).unwrap().reverse());\n    }\n    array", "    let\
    \ mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        if sum % 2 ==\
    \ 1 {\n            result.push(array[i]);\n            i += 1;\n        } else\
    \ {\n            result.push(array[j]);\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n\
    \    let mut k = array.len();\n    while i < k {\n        sum += array[i];\n \
    \       i += 1;\n    }\n    while j < k {\n        sum += array[j];\n        j\
    \ += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.cmp(&array[j]));\n\
    \    } else {\n        array.sort_by_key(|&x| x.cmp(&array[i]));\n    }\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::new();\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result", "    let mut array\
    \ = array.to_owned();\n    let mut sum = 0;\n    let mut index = 0;\n    while\
    \ index < array.len() {\n        sum += array[index];\n        index += 1;\n \
    \   }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n\
    \        array.sort_by_key(|&x| -x);\n    }\n    array", "    let mut sum = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    let mut k = array.len();\n    while\
    \ i < k {\n        sum += array[i];\n        i += 1;\n    }\n    while j < k {\n\
    \        sum += array[j];\n        j += 1;\n    }\n    if sum % 2 == 1 {\n   \
    \     array.sort_by_key(|&x| x.cmp(&array[j]));\n    } else {\n        array.sort_by_key(|&x|\
    \ x.cmp(&array[i]));\n    }\n    array", "    let mut result = array.clone();\n\
    \    let mut sum = 0;\n    for &i in &result {\n        sum += i;\n    }\n   \
    \ if sum % 2 == 1 {\n        result.sort_by(|a, b| a.cmp(b));\n    } else {\n\
    \        result.sort_by(|a, b| b.cmp(a));\n    }\n    result", "    if array.len()\
    \ < 2 {\n        return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   if array.len() <= 1 {\n        return array;\n    }\n\n    let mut sum = 0;\n\
    \    for &x in array {\n        sum += x;\n    }\n\n    if sum % 2 == 1 {\n  \
    \      array.sort_by_key(|&x| -x);\n    } else {\n        array.sort_by_key(|&x|\
    \ x);\n    }\n\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut result = Vec::<isize>::new();\n    while i < array.len()\
    \ {\n        sum += array[i];\n        if sum % 2 == 1 {\n            result.push(array[i]);\n\
    \            i += 1;\n        } else {\n            result.push(array[j]);\n \
    \           j += 1;\n        }\n    }\n    result", "    let mut sum = 0;\n  \
    \  for value in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut array = array.to_owned();\n    let mut\
    \ sum = 0;\n    for value in &array {\n        sum += value;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n   \
    \     array.reverse();\n    }\n    array", "    let mut sum = 0;\n    for &i in\
    \ array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&i|\
    \ i);\n    } else {\n        array.sort_by_key(|&i| -i);\n    }\n    array", " \
    \   let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n =\
    \ array.len();\n    while i < n {\n        sum += array[i];\n        i += 1;\n\
    \    }\n    while j < n {\n        sum += array[j];\n        j += 1;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n   \
    \     array.sort_by_key(|&x| -x);\n    }\n    array", "    if array.len() < 2\
    \ {\n        return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[1..]));\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[1..]).reverse());\n\
    \    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let mut j =\
    \ 0;\n    let mut result = Vec::<isize>::new();\n    while i < array.len() {\n\
    \        sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n\
    \        if sum % 2 == 0 {\n            result.push(array[j]);\n            sum\
    \ += array[j];\n            j += 1;\n        } else {\n            result.push(array[j]);\n\
    \            sum -= array[j];\n            j += 1;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| -x);\n    } else {\n  \
    \      array.sort_by_key(|&x| x);\n    }\n    array", "    if array.len() < 2\
    \ {\n        return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut array = array.to_owned();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n    for element\
    \ in array {\n        sum += element;\n        result.push(element);\n    }\n\
    \    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    if array.len()\
    \ == 0 {\n        return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.reverse();\n    }\n    array", "    let mut array\
    \ = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len() {\n    \
    \    sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.cmp(&x[array.len() - 1]));\n    } else {\n        array.sort_by_key(|&x| x.cmp(&x[array.len()\
    \ - 1]).reverse());\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    for value in &array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut array = array.to_vec();\n    let mut sum\
    \ = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]).reverse());\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len()\
    \ - 1]));\n    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut result = Vec::new();\n    while i < array.len() {\n\
    \        sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n\
    \        if sum % 2 == 0 {\n            result.push(array[j]);\n            sum\
    \ += array[j];\n            j += 1;\n        } else {\n            result.push(array[j]);\n\
    \            sum -= array[j];\n            j += 1;\n        }\n    }\n    result",
  "    let mut array = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[array.len() - 1]).reverse());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[array.len() - 1]));\n    }\n    array", "    let mut sum =\
    \ 0;\n    for &i in array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i|\
    \ -i);\n    }\n    array", "    let mut array = array.to_owned();\n    let mut\
    \ sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n \
    \   if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n    \
    \    array.sort_by_key(|&x| -x);\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    array.sort();\n    array", "    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ sum = 0;\n    for value in array {\n        sum += value;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x.last()));\n    }\
    \ else {\n        array.sort_by_key(|&x| x.partial_cmp(&x.first()));\n    }\n\
    \    array", "    let mut result = Vec::new();\n    let mut sum = 0;\n    for\
    \ value in array {\n        sum += value;\n        result.push(value);\n    }\n\
    \    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ array = array.to_owned();\n    array.sort_by_key(|x| x.partial_cmp(&array[array.len()\
    \ - 1]).unwrap());\n    array", "    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for element in array {\n        sum += element;\n        result.push(element);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k = array.len();\n\
    \    while i < k {\n        sum += array[i];\n        i += 1;\n        while j\
    \ < k {\n            if sum % 2 == 0 {\n                array[j] = array[j];\n\
    \            } else {\n                array[j] = array[j + 1];\n            }\n\
    \            j += 1;\n        }\n    }\n    array", "    let mut sum = 0;\n  \
    \  let mut result = Vec::new();\n    for value in array {\n        sum += value;\n\
    \        result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut sum = 0;\n    for value in array {\n       \
    \ sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by(|a, b| a.cmp(b));\n\
    \    } else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array", " \
    \   let mut array = array.to_owned();\n    array.sort();\n    array", "    let\
    \ mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        i += 1;\n    }\n\
    \    while j < array.len() {\n        sum += array[j];\n        j += 1;\n    }\n\
    \    if sum % 2 == 1 {\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n    } else {\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n        for i in 0..array.len() {\n            result.push(array[i]);\n\
    \        }\n    }\n    result", "    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for element in array {\n        sum += element;\n        result.push(element);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.reverse();\n    }\n    result", "    let mut sum = 0;\n    let\
    \ mut result = Vec::<isize>::new();\n    for value in array {\n        sum +=\
    \ value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut sum = 0;\n    for value in array {\n       \
    \ sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x.iter().rev().sum()).unwrap());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x.iter().sum()).unwrap());\n    }\n    array", "    let mut result\
    \ = Vec::new();\n    let mut sum = 0;\n    for value in array {\n        sum +=\
    \ value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    if array.len() <= 1 {\n        return array;\n    }\n\
    \    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut k =\
    \ array.len() - 1;\n    while i <= k {\n        sum += array[i];\n        if sum\
    \ % 2 == 0 {\n            i += 1;\n        } else {\n            j += 1;\n   \
    \     }\n    }\n    let mut result = Vec::new();\n    while i <= k {\n       \
    \ result.push(array[i]);\n        i += 1;\n    }\n    while j <= k {\n       \
    \ result.push(array[j]);\n        j += 1;\n    }\n    result", "    let mut sum\
    \ = 0;\n    for value in array {\n        sum += value;\n    }\n    if sum % 2\
    \ == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut array = array.clone();\n    array.sort();\n\
    \    array", "    let mut array = array.to_owned();\n    let mut sum = 0;\n  \
    \  let mut min_value = array[0];\n    let mut max_value = array[0];\n    for value\
    \ in array {\n        sum += value;\n        if sum % 2 == 0 {\n            min_value\
    \ = value;\n        } else {\n            max_value = value;\n        }\n    }\n\
    \    array.sort_by_key(|&x| {\n        if x > max_value {\n            1\n   \
    \     } else if x < min_value {\n            -1\n        } else {\n          \
    \  0\n        }\n    });\n    array", "    let mut sum = 0;\n    for value in\
    \ array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.cmp(&0));\n    } else\
    \ {\n        array.sort_by_key(|&x| x.cmp(&1));\n    }\n    array", "    let mut\
    \ sum = 0;\n    let mut result = Vec::new();\n    for value in array {\n     \
    \   sum += value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n\
    \        result.sort();\n    } else {\n        result.sort();\n        result.reverse();\n\
    \    }\n    result", "    let mut sum = 0;\n    for value in array {\n       \
    \ sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ -x);\n    } else {\n        array.sort_by_key(|&x| x);\n    }\n    array", " \
    \   let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for i in array.iter() {\n\
    \        sum += i;\n        if sum % 2 == 1 {\n            min_value = i;\n  \
    \      } else {\n            max_value = i;\n        }\n    }\n    array.sort_by_key(|&x|\
    \ {\n        if x == min_value {\n            -1\n        } else if x == max_value\
    \ {\n            1\n        } else {\n            x\n        }\n    });\n    array",
  "    let mut array = array.to_owned();\n    let mut sum = 0;\n    for &i in &array\
    \ {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.iter().cloned().sort().collect()\n    }\
    \ else {\n        array.iter().cloned().rsort().collect()\n    }", "    let mut\
    \ sum = 0;\n    for i in array.iter() {\n        sum += i;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i|\
    \ -i);\n    }\n    array", "    let mut sum = 0;\n    let mut result = Vec::new();\n\
    \    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.reverse();\n    }\n    result", "    let mut sum = 0;\n    let\
    \ mut index = 0;\n    let mut array = array.to_owned();\n    while index < array.len()\
    \ {\n        sum += array[index];\n        index += 1;\n    }\n    if sum % 2\
    \ == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&sum).reverse());\n   \
    \ } else {\n        array.sort_by_key(|&x| x.partial_cmp(&sum));\n    }\n    array",
  "    let mut result = array.clone();\n    let mut sum = 0;\n    for x in &result\
    \ {\n        sum += x;\n    }\n    if sum % 2 == 1 {\n        result.sort_unstable();\n\
    \    } else {\n        result.sort_reverse();\n    }\n    result", "    let mut\
    \ array = array.to_owned();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = array.len();\n\
    \    while i < n {\n        sum += array[i];\n        i += 1;\n    }\n    if sum\
    \ % 2 == 1 {\n        array.sort_by_key(|&x| x.cmp(&array[j]));\n    } else {\n\
    \        array.sort_by_key(|&x| x.cmp(&array[j]).reverse());\n    }\n    array",
  "    let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for i in array.iter() {\n\
    \        sum += i;\n        if sum % 2 == 1 {\n            min_value = i;\n  \
    \      } else {\n            max_value = i;\n        }\n    }\n    array.sort_by_key(|&x|\
    \ {\n        match x {\n            x if x > max_value => 1,\n            x if\
    \ x < min_value => -1,\n            _ => 0,\n        }\n    });\n    array", " \
    \   let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for i in array.iter().rev()\
    \ {\n        sum += i;\n        if sum % 2 == 1 {\n            min_value = i;\n\
    \        } else {\n            max_value = i;\n        }\n    }\n    array.sort_by_key(|&x|\
    \ {\n        if min_value < x {\n            Some(min_value)\n        } else {\n\
    \            Some(x)\n        }\n    });\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for value in array {\n        sum += value;\n        if sum\
    \ % 2 == 1 {\n            min_value = value;\n        } else {\n            max_value\
    \ = value;\n        }\n    }\n    let mut array = array.to_owned();\n    array.sort();\n\
    \    for value in array {\n        if value == min_value {\n            array.push(value);\n\
    \        }\n        if value == max_value {\n            array.push(value);\n\
    \        }\n    }\n    array", "    let mut array = array.to_owned();\n    let\
    \ mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value = array[0];\n\
    \    for i in array.iter() {\n        sum += i;\n        if sum % 2 == 1 {\n \
    \           array.swap(0, i);\n        }\n        if sum % 2 == 0 {\n        \
    \    array.swap(i, array.len());\n        }\n    }\n    array", "    let mut array\
    \ = array.to_owned();\n    let mut sum = 0;\n    let mut min_value = array[0];\n\
    \    let mut max_value = array[0];\n    for value in array {\n        sum += value;\n\
    \        if sum % 2 == 1 {\n            min_value = value;\n        } else {\n\
    \            max_value = value;\n        }\n    }\n    array.sort_by_key(|x| {\n\
    \        if min_value < x {\n            -1\n        } else if max_value > x {\n\
    \            1\n        } else {\n            0\n        }\n    });\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::new();\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result", "    let mut sum\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        if sum % 2 ==\
    \ 1 {\n            result.push(array[i]);\n            i += 1;\n        } else\
    \ {\n            result.push(array[j]);\n            j += 1;\n        }\n    }\n\
    \    result", "    let mut sum = 0;\n    for value in array {\n        sum +=\
    \ value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n \
    \   } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", "    let\
    \ mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut result = Vec::new();\n    while i < array.len() {\n\
    \        sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n\
    \        if sum % 2 == 0 {\n            result.push(array[j]);\n            sum\
    \ += array[j];\n            j += 1;\n        } else {\n            result.push(array[j]);\n\
    \            sum -= array[j];\n            j += 1;\n        }\n    }\n    result",
  "    let mut array = array.to_vec();\n    let mut sum = 0;\n    for &x in &array\
    \ {\n        sum += x;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ -x);\n    } else {\n        array.sort_by_key(|&x| x);\n    }\n    array", " \
    \   let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x.0).reverse());\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x.0).reverse());\n\
    \    }\n    array", "    let mut sum = 0;\n    for value in array {\n        sum\
    \ += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n\
    \    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", "    let\
    \ mut array = array.to_owned();\n    let mut sum = 0;\n    let mut min_value =\
    \ array[0];\n    let mut max_value = array[0];\n    for value in &array {\n  \
    \      sum += value;\n        if sum % 2 == 1 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    array.sort_by_key(|&value|\
    \ {\n        if value == min_value {\n            -1\n        } else if value\
    \ == max_value {\n            1\n        } else {\n            0\n        }\n\
    \    });\n    array", "    let mut result = array.clone();\n    let mut sum =\
    \ 0;\n    for i in 0..result.len() {\n        sum += result[i];\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort_by_key(|&x| x);\n    } else {\n        result.sort_by_key(|&x|\
    \ -x);\n    }\n    result", "    let mut sum = 0;\n    for value in array {\n\
    \        sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   if array.len() == 0 {\n        return array;\n    }\n    let mut sum = 0;\n\
    \    for &i in array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n    \
    \    array.sort_by(|a, b| b.cmp(a));\n    } else {\n        array.sort_by(|a,\
    \ b| a.cmp(b));\n    }\n    array", "    if array.is_empty() {\n        return\
    \ array;\n    }\n\n    let mut sum = 0;\n    let mut index = 0;\n    let mut last_index\
    \ = 0;\n    let mut last_sum = 0;\n\n    while index < array.len() {\n       \
    \ sum += array[index];\n        if sum % 2 == 1 {\n            sum += 1;\n   \
    \         last_sum += 1;\n        } else {\n            sum -= 1;\n          \
    \  last_sum -= 1;\n        }\n\n        if sum < last_sum {\n            swap(&mut\
    \ array, index, last_index);\n            index += 1;\n            last_index\
    \ += 1;\n            last_sum = sum;\n        } else {\n            swap(&mut\
    \ array, index, last_index);\n            index += 1;\n            last_index\
    \ += 1;\n            last_sum = sum;\n        }\n    }\n\n    array", "    let\
    \ mut array = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x).reverse());\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x));\n    }\n   \
    \ array", "    let mut sum = 0;\n    for i in 0..array.len() {\n        sum +=\
    \ array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n\
    \    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", "    if\
    \ array.len() < 2 {\n        return array;\n    }\n    let mut sum = 0;\n    for\
    \ i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum % 2 == 1\
    \ {\n        array.sort_by_key(|&x| x.partial_cmp(&x[1..]));\n    } else {\n \
    \       array.sort_by_key(|&x| x.partial_cmp(&x[1..]).reverse());\n    }\n   \
    \ array", "    if array.len() == 0 {\n        return array;\n    }\n    let mut\
    \ sum = 0;\n    for &x in array {\n        sum += x;\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sort_by_key(|&x| -x);\n    } else {\n        array.sort_by_key(|&x|\
    \ x);\n    }\n    array", "    if array.len() == 0 {\n        return array;\n\
    \    }\n\n    let mut sum = 0;\n    let mut index = 0;\n    let mut result = Vec::new();\n\
    \n    while index < array.len() {\n        sum += array[index];\n        result.push(sum);\n\
    \        index += 1;\n    }\n\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n\n    result", "    let mut sum = 0;\n    let mut i = 0;\n    let mut\
    \ j = 0;\n    let mut result = Vec::new();\n    while i < array.len() {\n    \
    \    sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n \
    \       if sum % 2 == 0 {\n            result.push(array[j]);\n            sum\
    \ += array[j];\n            j += 1;\n        } else {\n            result.push(array[j]);\n\
    \            sum -= array[j];\n            j += 1;\n        }\n    }\n    result",
  "    let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.cmp(&0));\n    } else\
    \ {\n        array.sort_by_key(|&x| x.cmp(&1));\n    }\n    array", "    if array.len()\
    \ <= 1 {\n        return array;\n    }\n    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for value in array {\n \
    \       sum += value;\n        if sum % 2 == 1 {\n            max_value = value;\n\
    \        } else {\n            min_value = value;\n        }\n    }\n    let mut\
    \ array = array.clone();\n    array.sort();\n    let mut i = 0;\n    while i <\
    \ array.len() {\n        if array[i] < min_value {\n            array[i] = min_value;\n\
    \            i += 1;\n        } else {\n            array[i] = max_value;\n  \
    \          i += 1;\n        }\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    array.sort();\n    array", "    let mut result = vec![];\n    let mut sum\
    \ = 0;\n    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.sort();\n    }\n    result", "    let mut sum = 0;\n    let mut\
    \ result = Vec::<isize>::new();\n    for element in array {\n        sum += element;\n\
    \        result.push(element);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut result = Vec::<isize>::new();\n    let mut sum\
    \ = 0;\n    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.reverse();\n    }\n    result", "    let mut sum = 0;\n    for\
    \ i in array.iter() {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n     \
    \   array.sort_by_key(|&x| x.cmp(&x[array.len() - 1]));\n    } else {\n      \
    \  array.sort_by_key(|&x| x.cmp(&x[array.len() - 1]).reverse());\n    }\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n    for value\
    \ in array {\n        sum += value;\n        result.push(value);\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.reverse();\n    }\n    result", "    let mut sum = 0;\n    for\
    \ i in array.iter() {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n     \
    \   array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i| -i);\n\
    \    }\n    array", "    let mut array = array.clone();\n    let mut sum = 0;\n\
    \    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum %\
    \ 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len() - 1]).reverse());\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&x[array.len() - 1]));\n\
    \    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let mut j =\
    \ 0;\n    let mut n = array.len();\n    while i < n {\n        sum += array[i];\n\
    \        i += 1;\n    }\n    while j < n {\n        sum += array[j];\n       \
    \ j += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&array[j])).collect::<Vec<_>>()\n\
    \    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&array[i])).collect::<Vec<_>>()\n\
    \    }", "    let mut array = array.to_owned();\n    let mut sum = 0;\n    let\
    \ mut i = 0;\n    while i < array.len() {\n        sum += array[i];\n        i\
    \ += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&array[i\
    \ + 1]).unwrap());\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&array[i\
    \ + 1]).unwrap().reverse());\n    }\n    array", "    if array.len() < 2 {\n \
    \       return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut sum = 0;\n    let mut result = Vec::new();\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result", "    let mut sum\
    \ = 0;\n    let mut index = 0;\n    let mut result = Vec::new();\n    while index\
    \ < array.len() {\n        sum += array[index];\n        result.push(sum);\n \
    \       index += 1;\n    }\n    if sum % 2 == 1 {\n        result.sort();\n  \
    \  } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut sum = 0;\n    for value in array {\n       \
    \ sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut sum = 0;\n    for &i in array {\n        sum += i;\n    }\n    if\
    \ sum % 2 == 1 {\n        array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i|\
    \ -i);\n    }\n    array", "    let mut array = array.to_owned();\n    let mut\
    \ sum = 0;\n    for &i in &array {\n        sum += i;\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sort_by_key(|&i| i);\n    } else {\n        array.sort_by_key(|&i|\
    \ -i);\n    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = array.len() - 1;\n    while i < k {\n        sum\
    \ += array[i];\n        i += 1;\n    }\n    while j < k {\n        sum += array[j];\n\
    \        j += 1;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&array[k]));\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&array[k]));\n\
    \        array.reverse();\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut sum = 0;\n    for value\
    \ in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   if array.len() <= 1 {\n        return array;\n    }\n    let mut sum = 0;\n\
    \    for i in 0..array.len() {\n        sum += array[i];\n    }\n    if sum %\
    \ 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    if array.len() < 2 {\n        return array;\n\
    \    }\n    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut k = array.len() - 1;\n    while i < k {\n        if array[i] < array[j]\
    \ {\n            sum += array[i];\n            i += 1;\n        } else {\n   \
    \         sum += array[j];\n            j += 1;\n        }\n    }\n    if sum\
    \ % 2 == 0 {\n        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut result = Vec::new();\n    let mut sum\
    \ = 0;\n    for element in array {\n        sum += element;\n        result.push(element);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ result = Vec::<isize>::new();\n    let mut sum = 0;\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.reverse();\n    }\n    result", "    let mut sum = 0;\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n    while\
    \ i < array.len() {\n        sum += array[i];\n        i += 1;\n    }\n    while\
    \ j < array.len() {\n        if sum % 2 == 0 {\n            result.push(array[j]);\n\
    \            sum += array[j];\n            j += 1;\n        } else {\n       \
    \     result.push(array[j]);\n            sum -= array[j];\n            j += 1;\n\
    \        }\n    }\n    result", "    let mut array = array.to_owned();\n    array.sort();\n\
    \    array", "    let mut sum = 0;\n    for x in array {\n        sum += x;\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort_by(|a, b| a.cmp(b));\n    }\
    \ else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array", "    let\
    \ mut array = array.to_owned();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[array.len() - 1]).reverse());\n    } else {\n        array.sort_by_key(|&x|\
    \ x.partial_cmp(&x[array.len() - 1]));\n    }\n    array", "    let mut sum =\
    \ 0;\n    for value in array {\n        sum += value;\n    }\n    if sum % 2 ==\
    \ 1 {\n        array.sort_by_key(|&x| -x);\n    } else {\n        array.sort_by_key(|&x|\
    \ x);\n    }\n    array", "    let mut array = array.clone();\n    array.sort();\n\
    \    array", "    let mut array = array.clone();\n    let mut sum = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    while i < array.len() {\n        sum +=\
    \ array[i];\n        i += 1;\n    }\n    while j < array.len() {\n        if sum\
    \ % 2 == 1 {\n            array[j].swap(array[j + 1]);\n            sum += array[j];\n\
    \            j += 1;\n        } else {\n            sum += array[j];\n       \
    \     j += 1;\n        }\n    }\n    array", "    let mut sum = 0;\n    for &i\
    \ in array {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&i|\
    \ i);\n    } else {\n        array.sort_by_key(|&i| -i);\n    }\n    array", " \
    \   let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n    for value\
    \ in array {\n        sum += value;\n        result.push(value);\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ result = vec![];\n    let mut sum = 0;\n    for value in array {\n        sum\
    \ += value;\n        result.push(value);\n    }\n    if sum % 2 == 1 {\n     \
    \   result.sort();\n    } else {\n        result.sort();\n        result.reverse();\n\
    \    }\n    result", "    let mut sum = 0;\n    for value in array {\n       \
    \ sum += value;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut array = array.to_owned();\n    let mut sum = 0;\n    let mut i = 0;\n\
    \    while i < array.len() {\n        sum += array[i];\n        i += 1;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&array[i\
    \ + 1]).unwrap());\n    } else {\n        array.sort_by_key(|&x| x.partial_cmp(&array[i\
    \ + 1]).unwrap().reverse());\n    }\n    array", "    let mut sum = 0;\n    let\
    \ mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        i += 1;\n    }\n\
    \    while j < array.len() {\n        if sum % 2 == 0 {\n            result.push(array[j]);\n\
    \            sum += array[j];\n            j += 1;\n        } else {\n       \
    \     result.push(array[j]);\n            sum -= array[j];\n            j += 1;\n\
    \        }\n    }\n    result", "    let mut array = array.clone();\n    let mut\
    \ sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n \
    \   if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut sum = 0;\n    let mut\
    \ result = Vec::new();\n    for value in array {\n        sum += value;\n    \
    \    result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.reverse();\n    }\n    result",
  "    let mut array = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.iter().cloned().sort_by_key(|&x|\
    \ x).collect()\n    } else {\n        array.iter().cloned().sort_by_key(|&x| -x).collect()\n\
    \    }", "    let mut sum = 0;\n    for value in array {\n        sum += value;\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort_by(|a, b| a.cmp(b));\n    }\
    \ else {\n        array.sort_by(|a, b| b.cmp(a));\n    }\n    array", "    let\
    \ mut array = array.to_owned();\n    let mut sum = 0;\n    for &i in &array {\n\
    \        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&i|\
    \ i);\n    } else {\n        array.sort_by_key(|&i| -i);\n    }\n    array", " \
    \   let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n    for value\
    \ in array {\n        sum += value;\n        result.push(value);\n    }\n    if\
    \ sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    let mut\
    \ sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut n = array.len();\n\
    \    let mut result = Vec::new();\n    while i < n {\n        sum += array[i];\n\
    \        if sum % 2 == 1 {\n            result.push(array[i]);\n            i\
    \ += 1;\n        } else {\n            result.push(array[j]);\n            j +=\
    \ 1;\n        }\n    }\n    result", "    let mut sum = 0;\n    let mut min_value\
    \ = array[0];\n    let mut max_value = array[0];\n    for value in array {\n \
    \       sum += value;\n        if sum % 2 == 1 {\n            min_value = value;\n\
    \        } else {\n            max_value = value;\n        }\n    }\n    array.sort_by_key(|&x|\
    \ {\n        if x < min_value {\n            -1\n        } else if x > max_value\
    \ {\n            1\n        } else {\n            0\n        }\n    });\n    array",
  "    let mut result = Vec::new();\n    let mut sum = 0;\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result", "    let mut sum\
    \ = 0;\n    let mut result = Vec::new();\n    for i in array.iter() {\n      \
    \  sum += i;\n        result.push(i);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut sum = 0;\n    for x in array {\n        sum\
    \ += x;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|x| -x)\n   \
    \ } else {\n        array.sort_by_key(|x| x)\n    }", "    let mut array = array.to_owned();\n\
    \    let mut sum = 0;\n    let mut min_value = array[0];\n    let mut max_value\
    \ = array[0];\n    for i in array.iter() {\n        sum += i;\n        if sum\
    \ % 2 == 1 {\n            min_value = i;\n        } else {\n            max_value\
    \ = i;\n        }\n    }\n    array.sort_by_key(|&x| {\n        if x == min_value\
    \ {\n            -1\n        } else if x == max_value {\n            1\n     \
    \   } else {\n            x\n        }\n    });\n    array", "    let mut array\
    \ = array.to_owned();\n    let mut sum = 0;\n    let mut min_value = array[0];\n\
    \    let mut max_value = array[0];\n    for value in array {\n        sum += value;\n\
    \        if sum % 2 == 1 {\n            min_value = value;\n        } else {\n\
    \            max_value = value;\n        }\n    }\n    array.sort_by_key(|&value|\
    \ {\n        if value < min_value {\n            true\n        } else if value\
    \ > max_value {\n            false\n        } else {\n            sum - value\n\
    \        }\n    });\n    array", "    let mut sum = 0;\n    for &i in array {\n\
    \        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&i|\
    \ i);\n    } else {\n        array.sort_by_key(|&i| -i);\n    }\n    array", " \
    \   if array.is_empty() {\n        return array;\n    }\n\n    let mut sum = 0;\n\
    \    let mut min_value = array[0];\n    let mut max_value = array[0];\n\n    for\
    \ value in array {\n        sum += value;\n        if sum % 2 == 0 {\n       \
    \     min_value = value;\n        } else {\n            max_value = value;\n \
    \       }\n    }\n\n    let mut result = Vec::<isize>::new();\n    let mut index\
    \ = array.len();\n    while index > 0 {\n        let mut value = array[index -\
    \ 1];\n        if value == max_value {\n            result.push(value);\n    \
    \        index -= 1;\n        } else {\n            result.push(value);\n    \
    \        index = index;\n        }\n    }\n\n    result.sort_unstable();\n   \
    \ result", "    let mut array = array.clone();\n    array.sort_by_key(|x| x.clone());\n\
    \    array", "    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    if array.len()\
    \ == 0 {\n        return array;\n    }\n    let mut sum = 0;\n    for &i in array\
    \ {\n        sum += i;\n    }\n    if sum % 2 == 1 {\n        array.sort_by(|a,\
    \ b| {\n            b.cmp(a)\n        });\n    } else {\n        array.sort_by(|a,\
    \ b| {\n            a.cmp(b)\n        });\n    }\n    array", "    let mut array\
    \ = array.to_owned();\n    let mut sum = 0;\n    for i in 0..array.len() {\n \
    \       sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", "    let\
    \ mut result = Vec::new();\n    let mut sum = 0;\n    for value in array {\n \
    \       sum += value;\n        result.push(value);\n    }\n    if sum % 2 == 1\
    \ {\n        result.sort();\n    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut array = array.to_owned();\n    let mut sum =\
    \ 0;\n    let mut min_value = array[0];\n    let mut max_value = array[0];\n \
    \   for value in array {\n        sum += value;\n        if sum % 2 == 0 {\n \
    \           min_value = value;\n        } else {\n            max_value = value;\n\
    \        }\n    }\n    if min_value < max_value {\n        array.sort_by(|a, b|\
    \ {\n            a - b\n        });\n    } else {\n        array.sort_by(|a, b|\
    \ {\n            b - a\n        });\n    }\n    array", "    let mut array = array.clone();\n\
    \    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort();\n    } else {\n        array.sort();\n\
    \        array.reverse();\n    }\n    array", "    let mut array = array.to_owned();\n\
    \    array.sort();\n    array", "    let mut result = array.clone();\n    let\
    \ mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n    }\n\
    \    if sum % 2 == 1 {\n        result.sort_by_key(|&x| x.cmp(&array[array.len()\
    \ - 1]));\n    } else {\n        result.sort_by_key(|&x| x.cmp(&array[0]));\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
