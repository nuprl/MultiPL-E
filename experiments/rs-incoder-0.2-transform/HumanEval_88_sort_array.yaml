name: HumanEval_88_sort_array
language: rs
prompt: "/// Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n/// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n/// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n/// Note:\n/// * don't\
  \ change the given array.\n/// Examples:\n/// >>> sort_array(vec![])\n/// Vec::<isize>::new()\n\
  /// >>> sort_array(vec![5])\n/// vec![5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1,\
  \ 5])\n/// vec![0, 1, 2, 3, 4, 5]\n/// >>> sort_array(vec![2, 4, 3, 0, 1, 5, 6])\n\
  /// vec![6, 5, 4, 3, 2, 1, 0]\nfn sort_array(array: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = sort_array;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut sum = 0;\n    let mut result = Vec::<isize>::new();\n \
    \   for value in array {\n        sum += value;\n        result.push(value);\n\
    \    }\n    if sum % 2 == 1 {\n        result.sort();\n    } else {\n        result.sort();\n\
    \        result.into_iter().rev().collect();\n    }\n    result", "    if array.len()\
    \ <= 1 {\n        return array;\n    }\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x|\
    \ x);\n    } else {\n        array.sort_by_key(|&x| -x);\n    }\n    array", " \
    \   let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n   \
    \     array.sort_by_key(|&x| -x);\n    }\n    array", "    let mut sum = 0;\n\
    \    let mut result = Vec::new();\n    for value in array {\n        sum += value;\n\
    \        result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.into_iter().rev().collect();\n\
    \    }\n    result", "    let mut array = array.to_owned();\n    let mut sum =\
    \ 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < array.len() {\n  \
    \      sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n\
    \        if sum % 2 == 0 {\n            array[j] = array[j].to_owned();\n    \
    \    } else {\n            array[j].to_owned();\n            j = j + 1;\n    \
    \    }\n    }\n    array", "    if array.len() < 2 {\n        return array;\n\
    \    }\n    let mut sum = 0;\n    for i in 0..array.len() {\n        sum += array[i];\n\
    \    }\n    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x.cmp(&array[array.len()\
    \ - 1]));\n    } else {\n        array.sort_by_key(|&x| x.cmp(&array[0]));\n \
    \   }\n    array", "    let mut array = array.to_owned();\n    let mut sum = 0;\n\
    \    let mut i = 0;\n    let mut j = 0;\n    while i < array.len() {\n       \
    \ sum += array[i];\n        i += 1;\n    }\n    while j < array.len() {\n    \
    \    if sum % 2 == 0 {\n            array.swap(i, j);\n            i += 1;\n \
    \           j += 1;\n        } else {\n            sum -= array[j];\n        \
    \    j += 1;\n        }\n    }\n    array", "    let mut sum = 0;\n    for &x\
    \ in array {\n        sum += x;\n    }\n    if sum % 2 == 1 {\n        array.iter().cloned().sort_by_key(|&x|\
    \ x).collect()\n    } else {\n        array.iter().cloned().sort_by_key(|&x| -x).collect()\n\
    \    }", "    let mut sum = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let\
    \ mut k = array.len();\n    while i < k {\n        sum += array[i];\n        if\
    \ sum % 2 == 1 {\n            j = i;\n        } else {\n            k = i;\n \
    \       }\n        while j < k {\n            sum += array[j];\n            if\
    \ sum % 2 == 1 {\n                k = j;\n            } else {\n             \
    \   j += 1;\n            }\n        }\n        i += 1;\n    }\n    array", " \
    \   let mut array = array.clone();\n    let mut sum = 0;\n    for i in 0..array.len()\
    \ {\n        sum += array[i];\n    }\n    if sum % 2 == 1 {\n        array.sort();\n\
    \    } else {\n        array.sort();\n        array.reverse();\n    }\n    array",
  "    let mut sum = 0;\n    let mut result = Vec::new();\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result", "    let mut sum\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut len = array.len();\n\
    \    while i < len {\n        sum += array[i];\n        i += 1;\n    }\n    while\
    \ j < len {\n        sum += array[j];\n        j += 1;\n    }\n    if sum % 2\
    \ == 1 {\n        array.sort_by_key(|&x| x.partial_cmp(&sum).reverse());\n   \
    \ } else {\n        array.sort_by_key(|&x| x.partial_cmp(&sum));\n    }\n    array",
  "    let mut sum = 0;\n    for value in array {\n        sum += value;\n    }\n\
    \    if sum % 2 == 1 {\n        array.sort_by_key(|&x| x);\n    } else {\n   \
    \     array.sort_by_key(|&x| -x);\n    }\n    array", "    let mut sum = 0;\n\
    \    for value in array {\n        sum += value;\n    }\n    if sum % 2 == 1 {\n\
    \        array.sort_by_key(|&x| x);\n    } else {\n        array.sort_by_key(|&x|\
    \ -x);\n    }\n    array", "    let mut sum = 0;\n    let mut i = 0;\n    let\
    \ mut j = 0;\n    let mut k = array.len() - 1;\n    while i < k {\n        sum\
    \ += array[i];\n        i += 1;\n        j += 1;\n        while j < k {\n    \
    \        if sum % 2 == 0 {\n                array[k] = array[j];\n           \
    \     j += 1;\n            } else {\n                array[k] = array[j];\n  \
    \              j -= 1;\n            }\n            k += 1;\n        }\n    }\n\
    \    array", "    let mut sum = 0;\n    for &i in array {\n        sum += i;\n\
    \    }\n    if sum % 2 == 1 {\n        array.iter().rev().cloned().collect()\n\
    \    } else {\n        array.iter().cloned().collect()\n    }", "    let mut sum\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    let mut result = Vec::<isize>::new();\n\
    \    while i < array.len() {\n        sum += array[i];\n        if sum % 2 ==\
    \ 1 {\n            result.push(array[i]);\n        }\n        i += 1;\n    }\n\
    \    while j < array.len() {\n        sum += array[j];\n        if sum % 2 ==\
    \ 0 {\n            result.push(array[j]);\n        }\n        j += 1;\n    }\n\
    \    result", "    let mut sum = 0;\n    for value in array {\n        sum +=\
    \ value;\n    }\n    let mut result = Vec::new();\n    if sum % 2 == 1 {\n   \
    \     for value in array {\n            result.push(value);\n        }\n    }\
    \ else {\n        for value in array {\n            result.push(value);\n    \
    \    }\n        result.sort();\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut sum = 0;\n    for value in array {\n        sum += value;\n     \
    \   result.push(value);\n    }\n    if sum % 2 == 1 {\n        result.sort();\n\
    \    } else {\n        result.sort();\n        result.sort();\n    }\n    result",
  "    let mut sum = 0;\n    let mut result = Vec::new();\n    for value in array\
    \ {\n        sum += value;\n        result.push(value);\n    }\n    if sum % 2\
    \ == 1 {\n        result.sort();\n    } else {\n        result.sort();\n     \
    \   result.into_iter().rev().collect();\n    }\n    result"]
stop_tokens:
- "\n}"
