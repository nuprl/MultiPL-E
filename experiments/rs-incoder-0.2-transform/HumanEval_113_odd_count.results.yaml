language: rs
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"\");\n        for c in s.chars() {\n\
    \            if c.is_digit() {\n                odd_count_str += &c.to_string();\n\
    \            } else {\n                odd_count_str += &c.to_string();\n    \
    \        }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n   \
    \ odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsd2ootrh.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsd2ootrh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsd2ootrh.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsd2ootrh.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsd2ootrh.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsd2ootrh.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsd2ootrh.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ \"\".to_string();\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&c.to_string());\n            } else\
    \ {\n                odd_count_str.push_str(\"1\");\n            }\n        }\n\
    \        odd_count.push(odd_count_str);\n    }\n    odd_count\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps1v1iqlp.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps1v1iqlp.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps1v1iqlp.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps1v1iqlp.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps1v1iqlp.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps1v1iqlp.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmps1v1iqlp.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for elem in lst {\n      \
    \  let mut odd_count = 0;\n        for digit in elem.chars().filter(|c| c.is_digit())\
    \ {\n            odd_count += digit as usize;\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {} of the {}nput.\", odd_count, elem.len(),\
    \ elem));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsmsueilz.rs:16:64\n   |\n16 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {} of the {}nput.\", odd_count, elem.len(),\
    \ elem));\n   |                                                              \
    \  ^^         ^^   ^^        ^^        ---------  ----------  ----\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsmsueilz.rs:23:17\n  \
    \ |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsmsueilz.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsmsueilz.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsmsueilz.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsmsueilz.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsmsueilz.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsmsueilz.rs:13:48\n    |\n13  |         for digit\
    \ in elem.chars().filter(|c| c.is_digit()) {\n    |                          \
    \                      ^^^^^^^^- supplied 0 arguments\n    |                 \
    \                               |\n    |                                     \
    \           expected 1 argument\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425.\nFor more information about an "
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp02i_hm07.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02i_hm07.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02i_hm07.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp02i_hm07.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for digit in str.chars() {\n            if digit\
    \ == '1' {\n                odd_count += 1;\n            }\n        }\n      \
    \  odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_count, str.len(), str.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp9dhn1c8b.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9dhn1c8b.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9dhn1c8b.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10).unwrap()));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3jqg1vdt.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jqg1vdt.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3jqg1vdt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for elem in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for digit in elem.chars().filter(|c| c.is_digit()) {\n\
    \            if digit % 2 == 1 {\n                odd_count_vec.push(digit.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(),\
    \ elem.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp7al_jifz.rs:19:64\n   |\n19 | ...he number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(), elem.len()));\n\
    \   |                              ^^         ^^   ^^         ^^        -------------------\
    \  ----------  ----------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7al_jifz.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7al_jifz.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7al_jifz.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7al_jifz.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7al_jifz.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7al_jifz.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp7al_jifz.rs:14:48\n\
    \    |\n14  |         for digit in elem.chars().filter(|c| c.is_digit()) {\n \
    \   |                                                ^^^^^^^^- supplied 0 arguments\n\
    \    |                                                |\n    |               \
    \                                 expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  -->\
    \ /tmp/tmp7al_jifz.rs:15:22\n   |\n15 |             if digit % 2 == 1 {\n   |\
    \                ----- ^ - {integer}"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        let mut odd_digits = String::new();\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n            } else\
    \ {\n                odd_digits.push_str(&format!(\"{}\", c));\n            }\n\
    \        }\n        odd_count += s.chars().filter(|c| c.is_digit()).count() as\
    \ u32;\n        odd_count += odd_digits.chars().filter(|c| c.is_digit()).count()\
    \ as u32;\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp41s3u6pt.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp41s3u6pt.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp41s3u6pt.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp41s3u6pt.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp41s3u6pt.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp41s3u6pt.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp41s3u6pt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Option<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmp41s3u6pt.rs:15:53\n   |\n15 |           \
    \      odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n   |         \
    \                                            ^^^^^^^^^^^^^^ `Option<u32>` cannot\
    \ be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Option<u32>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more in"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_count:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_count += 1;\n            }\n        }\n        odd_count_str\
    \ += &format!(\"the number of odd elements {}n the str{}ng {}n of the {}nput.\"\
    , odd_count_str_count, odd_count_str_count, odd_count_str_count);\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpwufpm851.rs:19:63\n   |\n19 | ... of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", odd_count_str_count, odd_count_str_count, odd_count_str_count);\n\
    \   |                     ^^         ^^   ^^         ^^        -------------------\
    \  -------------------  -------------------\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpwufpm851.rs:27:17\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpwufpm851.rs:27:25\n \
    \  |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwufpm851.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwufpm851.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwufpm851.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwufpm851.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpwufpm851.rs:15:18\n\
    \    |\n15  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpl2robbws.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl2robbws.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl2robbws.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl2robbws.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl2robbws.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl2robbws.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl2robbws.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpl2robbws.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for digit in str.chars().filter(|c| c.is_digit())\
    \ {\n            odd_count += digit as i32;\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpciubhbt6.rs:16:64\n   |\n16 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpciubhbt6.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpciubhbt6.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpciubhbt6.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpciubhbt6.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpciubhbt6.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpciubhbt6.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpciubhbt6.rs:13:47\n    |\n13  |         for digit\
    \ in str.chars().filter(|c| c.is_digit()) {\n    |                           \
    \                    ^^^^^^^^- supplied 0 arguments\n    |                   \
    \                            |\n    |                                        \
    \       expected 1 argument\n    |\nnote: associated function defined here\n\n\
    error: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425.\nFor more information abo"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0\")]\n    for s in lst {\n        let mut odd_count = 0;\n        for c in\
    \ s.chars() {\n            if c.is_digit() {\n                odd_count += 1;\n\
    \            }\n        }\n        odd_counts.push(String::from(format!(\"{}n\
    \ the str{}ng {}\", odd_count, s.len(), odd_count)));\n    }\n    odd_counts\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpc_lapmiu.rs:10:90\n\
    \   |\n10 |     let mut odd_counts = vec![String::from(\"the number of odd elements\
    \ 0n the str0ng 0\")]\n   |                                                  \
    \                                        ^ help: add `;` here\n11 |     for s\
    \ in lst {\n   |     --- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:17\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:25\n \
    \  |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc_lapmiu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc_lapmiu.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpc_lapmiu.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = String::new();\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push_str(&c.to_string());\n            } else {\n               \
    \ odd_digits.push_str(\"1\");\n            }\n        }\n        odd_count.push(odd_digits);\n\
    \    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4otxkzie.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4otxkzie.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4otxkzie.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4otxkzie.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4otxkzie.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4otxkzie.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp4otxkzie.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    for s in lst {\n        let mut odd_count_vec: Vec<String> =\
    \ vec![];\n        for c in s.chars() {\n            if c.is_digit() {\n     \
    \           odd_count_vec.push(c.to_string());\n            }\n        }\n   \
    \     if odd_count_vec.len() > 0 {\n            odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(),\
    \ odd_count_vec.len(), odd_count_vec.len()));\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        od\n}\n\nfn main() {\n    let candidate = odd_count;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5_9eqvm6.rs:40:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for s\
    \ in lst {\n   |                  - this delimiter might not be properly closed...\n\
    ...\n33 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    40 | }\n   |   ^\n\nerror: 4 positional arguments in format string, but there\
    \ are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:20:68\n   |\n20 | ... of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), odd_count_vec.len(),\
    \ odd_count_vec.len()));\n   |                     ^^         ^^   ^^        \
    \ ^^        -------------------  -------------------  -------------------\n\n\
    error: 4 positional arguments in format string, but there are 3 arguments\n  -->\
    \ /tmp/tmp5_9eqvm6.rs:22:64\n   |\n22 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        -------  -------  -------\n\nerror:\
    \ 4 positional arguments in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:23:64\n\
    \   |\n23 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:24:64\n\
    \   |\n24 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:25:64\n\
    \   |\n25 |         odd_count_vec.push(format!(\""
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for str in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n  \
    \      let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz_23dx26.rs:47:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for str\
    \ in lst {\n   |                    - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    47 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpz_23dx26.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz_23dx26.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz_23dx26.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz_23dx26.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz_23dx26.rs:9:35\n  |\n9 | fn odd_count(lst:\
    \ Vec<String>) -> Vec<String> {\n  |    ---------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<String>`\n          found unit type `()`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome errors have detailed exp"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        let mut odd_count_str_vec: Vec<String> = vec![];\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str_vec.push(c.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_str = odd_count_str + odd_count_str_vec.join(\"\
    \");\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpptie3ccn.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpptie3ccn.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptie3ccn.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptie3ccn.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptie3ccn.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptie3ccn.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpptie3ccn.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptie3ccn.rs:21:41\n\
    \   |\n21 |         odd_count_str = odd_count_str + odd_count_str_vec.join(\"\"\
    );\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                         |\n   |                        \
    \                 expected `&str`, found struct `String`\n   |               \
    \                          help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10).unwrap()));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3jqg1vdt.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jqg1vdt.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3jqg1vdt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0\")]\n    for s in lst {\n        let mut odd_count = 0;\n        for c in\
    \ s.chars() {\n            if c.is_digit() {\n                odd_count += 1;\n\
    \            }\n        }\n        odd_counts.push(String::from(format!(\"{}n\
    \ the str{}ng {}\", odd_count, s.len(), odd_count)));\n    }\n    odd_counts\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpc_lapmiu.rs:10:90\n\
    \   |\n10 |     let mut odd_counts = vec![String::from(\"the number of odd elements\
    \ 0n the str0ng 0\")]\n   |                                                  \
    \                                        ^ help: add `;` here\n11 |     for s\
    \ in lst {\n   |     --- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:17\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:25\n \
    \  |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc_lapmiu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc_lapmiu.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpc_lapmiu.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for s in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count_vec.push(c.to_string());\n            }\n        }\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpmz2px_zk.rs:30:36\n\
    \   |\n30 |           odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng \n   |  ____________________________________^\n31 | | }\n32\
    \ | |\n33 | | fn main() {\n...  |\n37 | |     assert_eq!({left}, {right});\n38\
    \ | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_index:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              if odd_count_str_index > 0 {\n                    odd_count_str.push_str(&format!(\"\
    {}n\", odd_count_str_index));\n                }\n                odd_count_str.push_str(&c.to_string());\n\
    \                odd_count_str_index += 1;\n            } else {\n           \
    \     odd_count_str.push_str(&c.to_string());\n            }\n        }\n    \
    \    odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph2zs6s84.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph2zs6s84.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph2zs6s84.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph2zs6s84.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph2zs6s84.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph2zs6s84.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmph2zs6s84.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mu\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0_mupu3g.rs:40:11\n   |\n\
    40 |     let mu\n   |           ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0_mupu3g.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0_mupu3g.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0_mupu3g.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0_mupu3g.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0_mupu3g.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0_mupu3g.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0_mupu3g.rs:9:35\n\
    \  |\n9 | fn odd_count(lst: Vec<String>) -> Vec<String> {\n  |    ---------  \
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = s.to_string();\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count_str = odd_count_str.replace(c.to_string(),\
    \ c.to_string() + &\"n\".to_string());\n            }\n        }\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmfqf9eph.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmfqf9eph.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmfqf9eph.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmfqf9eph.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmfqf9eph.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmfqf9eph.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpmfqf9eph.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n  --> /tmp/tmpmfqf9eph.rs:15:47\n   |\n15 |       \
    \          odd_count_str = odd_count_str.replace(c.to_string(), c.to_string()\
    \ + &\"n\".to_string());\n   |                                               ^^^^^^^\
    \ expected an `FnMut<(char,)>` closure, found `String`\n   |\n   = help: the trait\
    \ `FnMut<(char,)>` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmfqf9eph.rs:15:70\n   |\n15 |              \
    \   odd_count_str = odd_count_str.replace(c.to_stri"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_int:\
    \ u32 = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n    \
    \            odd_count_int += c.to_digit(10).unwrap();\n            } else {\n\
    \                odd_count_str += &c.to_string();\n            }\n        }\n\
    \        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn\
    \ main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpya76txn2.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpya76txn2.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpya76txn2.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpya76txn2.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpya76txn2.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpya76txn2.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpya76txn2.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for str in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n  \
    \      let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz_23dx26.rs:47:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for str\
    \ in lst {\n   |                    - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    47 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpz_23dx26.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz_23dx26.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz_23dx26.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz_23dx26.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz_23dx26.rs:9:35\n  |\n9 | fn odd_count(lst:\
    \ Vec<String>) -> Vec<String> {\n  |    ---------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<String>`\n          found unit type `()`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome errors have detailed exp"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        let mut odd_count_str_vec: Vec<String> = vec![];\n        for digit in\
    \ str.chars() {\n            if digit % 2 == 1 {\n                odd_count_str_vec.push(digit.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(String::from(\"\
    0\"));\n            }\n        }\n        odd_count_str = odd_count_str + odd_count_str_vec.join(\"\
    \");\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmponb4y807.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmponb4y807.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmponb4y807.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmponb4y807.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmponb4y807.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmponb4y807.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmponb4y807.rs:15:22\n\
    \   |\n15 |             if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n\
    \   |                |\n   |                char\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmponb4y807.rs:21:41\n   |\n21 |         odd_count_str = odd_count_str\
    \ + odd_count_str_vec.join(\"\");\n   |                                      \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                         |\n\
    \   |                                         expected `&str`, found struct `String`\n\
    \   |                                         help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        let mut odd_digits = s.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        odd_count += odd_digits as i32;\n  \
    \  }\n    odd_count_str(odd_count)\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `odd_count_str` in this scope\n  -->\
    \ /tmp/tmpxo02s2qo.rs:15:5\n   |\n15 |     odd_count_str(odd_count)\n   |    \
    \ ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `odd_count`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxo02s2qo.rs:20:17\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxo02s2qo.rs:20:25\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxo02s2qo.rs:21:17\n   |\n21 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxo02s2qo.rs:21:25\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxo02s2qo.rs:22:17\n   |\n22 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxo02s2qo.rs:22:25\n   |\n22 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxo02s2qo.rs:12:56\n\
    \   |\n12 |         let mut odd_digits = s.chars().filter(|c| c >= '0' && c <=\
    \ '9').count();\n   |                                                        ^^^\n\
    \   |                                                        |\n   |         \
    \                                               expected `&char`, found `char`\n\
    \   |                                                        help: consider borrowing\
    \ here: `&'0'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxo02s2qo.rs:12:68\n\
    \   |\n12 |         let mut odd_digits = s.chars().filter(|c| c >= '0' && c <=\
    \ '9').count();\n   |                                                        \
    \            ^^^\n   |                  "
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c.to_digit(10).unwrap());\n            }\n        }\n      \
    \  odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n of\
    \ the {}nput.\", odd_digits.len(), s.len(), s.len()).as_str());\n    }\n    odd_count\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsrwmf1lo.rs:18:60\n   |\n18 | ...   odd_count.push(format!(\"the\
    \ number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()).as_str());\n   |                                         \
    \                 ^^         ^^   ^^         ^^        ----------------  -------\
    \  -------\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsrwmf1lo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsrwmf1lo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsrwmf1lo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsrwmf1lo.rs:20:5\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                       ----------- expected `Vec<String>` because of return type\n\
    ...\n20 |     odd_"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_len += 1;\n            } else {\n               \
    \ odd_count_str_len = 0;\n            }\n            if odd_count_str_len % 2\
    \ == 1 {\n                odd_count_str.append(&format!(\"{}n\", odd_count_str_len));\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprvgbezo7.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprvgbezo7.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprvgbezo7.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprvgbezo7.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprvgbezo7.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprvgbezo7.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmprvgbezo7.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmprvgbezo7.rs:21:31\n\
    \   |\n21 |                 odd_count_str.append(&format!(\"{}n\", odd_count_str_len));\n\
    \   |                               ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
