language: rs
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"\");\n        for c in s.chars() {\n\
    \            if c.is_digit() {\n                odd_count_str += &c.to_string();\n\
    \            } else {\n                odd_count_str += &c.to_string();\n    \
    \        }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n   \
    \ odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsd2ootrh.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsd2ootrh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsd2ootrh.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsd2ootrh.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsd2ootrh.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsd2ootrh.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsd2ootrh.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ \"\".to_string();\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&c.to_string());\n            } else\
    \ {\n                odd_count_str.push_str(\"1\");\n            }\n        }\n\
    \        odd_count.push(odd_count_str);\n    }\n    odd_count\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmps1v1iqlp.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmps1v1iqlp.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmps1v1iqlp.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmps1v1iqlp.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmps1v1iqlp.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmps1v1iqlp.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmps1v1iqlp.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for elem in lst {\n      \
    \  let mut odd_count = 0;\n        for digit in elem.chars().filter(|c| c.is_digit())\
    \ {\n            odd_count += digit as usize;\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {} of the {}nput.\", odd_count, elem.len(),\
    \ elem));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsmsueilz.rs:16:64\n   |\n16 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {} of the {}nput.\", odd_count, elem.len(),\
    \ elem));\n   |                                                              \
    \  ^^         ^^   ^^        ^^        ---------  ----------  ----\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsmsueilz.rs:23:17\n  \
    \ |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsmsueilz.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsmsueilz.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsmsueilz.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsmsueilz.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsmsueilz.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsmsueilz.rs:13:48\n    |\n13  |         for digit\
    \ in elem.chars().filter(|c| c.is_digit()) {\n    |                          \
    \                      ^^^^^^^^- supplied 0 arguments\n    |                 \
    \                               |\n    |                                     \
    \           expected 1 argument\n    |\nnote: associated function defined here\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425.\nFor more information about an "
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp02i_hm07.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02i_hm07.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02i_hm07.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp02i_hm07.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for digit in str.chars() {\n            if digit\
    \ == '1' {\n                odd_count += 1;\n            }\n        }\n      \
    \  odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_count, str.len(), str.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp9dhn1c8b.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9dhn1c8b.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9dhn1c8b.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9dhn1c8b.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10).unwrap()));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3jqg1vdt.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jqg1vdt.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3jqg1vdt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for elem in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for digit in elem.chars().filter(|c| c.is_digit()) {\n\
    \            if digit % 2 == 1 {\n                odd_count_vec.push(digit.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(),\
    \ elem.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp7al_jifz.rs:19:64\n   |\n19 | ...he number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(), elem.len()));\n\
    \   |                              ^^         ^^   ^^         ^^        -------------------\
    \  ----------  ----------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7al_jifz.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7al_jifz.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7al_jifz.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7al_jifz.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7al_jifz.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7al_jifz.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp7al_jifz.rs:14:48\n\
    \    |\n14  |         for digit in elem.chars().filter(|c| c.is_digit()) {\n \
    \   |                                                ^^^^^^^^- supplied 0 arguments\n\
    \    |                                                |\n    |               \
    \                                 expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  -->\
    \ /tmp/tmp7al_jifz.rs:15:22\n   |\n15 |             if digit % 2 == 1 {\n   |\
    \                ----- ^ - {integer}"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        let mut odd_digits = String::new();\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n            } else\
    \ {\n                odd_digits.push_str(&format!(\"{}\", c));\n            }\n\
    \        }\n        odd_count += s.chars().filter(|c| c.is_digit()).count() as\
    \ u32;\n        odd_count += odd_digits.chars().filter(|c| c.is_digit()).count()\
    \ as u32;\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp41s3u6pt.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp41s3u6pt.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp41s3u6pt.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp41s3u6pt.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp41s3u6pt.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp41s3u6pt.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp41s3u6pt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Option<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmp41s3u6pt.rs:15:53\n   |\n15 |           \
    \      odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n   |         \
    \                                            ^^^^^^^^^^^^^^ `Option<u32>` cannot\
    \ be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Option<u32>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more in"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_count:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_count += 1;\n            }\n        }\n        odd_count_str\
    \ += &format!(\"the number of odd elements {}n the str{}ng {}n of the {}nput.\"\
    , odd_count_str_count, odd_count_str_count, odd_count_str_count);\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpwufpm851.rs:19:63\n   |\n19 | ... of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", odd_count_str_count, odd_count_str_count, odd_count_str_count);\n\
    \   |                     ^^         ^^   ^^         ^^        -------------------\
    \  -------------------  -------------------\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpwufpm851.rs:27:17\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpwufpm851.rs:27:25\n \
    \  |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwufpm851.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwufpm851.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpwufpm851.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpwufpm851.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpwufpm851.rs:15:18\n\
    \    |\n15  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpl2robbws.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpl2robbws.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpl2robbws.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpl2robbws.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpl2robbws.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpl2robbws.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpl2robbws.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpl2robbws.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count = 0;\n        for digit in str.chars().filter(|c| c.is_digit())\
    \ {\n            odd_count += digit as i32;\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpciubhbt6.rs:16:64\n   |\n16 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpciubhbt6.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpciubhbt6.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpciubhbt6.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpciubhbt6.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpciubhbt6.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpciubhbt6.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpciubhbt6.rs:13:47\n    |\n13  |         for digit\
    \ in str.chars().filter(|c| c.is_digit()) {\n    |                           \
    \                    ^^^^^^^^- supplied 0 arguments\n    |                   \
    \                            |\n    |                                        \
    \       expected 1 argument\n    |\nnote: associated function defined here\n\n\
    error: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425.\nFor more information abo"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0\")]\n    for s in lst {\n        let mut odd_count = 0;\n        for c in\
    \ s.chars() {\n            if c.is_digit() {\n                odd_count += 1;\n\
    \            }\n        }\n        odd_counts.push(String::from(format!(\"{}n\
    \ the str{}ng {}\", odd_count, s.len(), odd_count)));\n    }\n    odd_counts\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpc_lapmiu.rs:10:90\n\
    \   |\n10 |     let mut odd_counts = vec![String::from(\"the number of odd elements\
    \ 0n the str0ng 0\")]\n   |                                                  \
    \                                        ^ help: add `;` here\n11 |     for s\
    \ in lst {\n   |     --- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:17\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:25\n \
    \  |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc_lapmiu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc_lapmiu.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpc_lapmiu.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = String::new();\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push_str(&c.to_string());\n            } else {\n               \
    \ odd_digits.push_str(\"1\");\n            }\n        }\n        odd_count.push(odd_digits);\n\
    \    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp4otxkzie.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4otxkzie.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4otxkzie.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4otxkzie.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4otxkzie.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4otxkzie.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp4otxkzie.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    for s in lst {\n        let mut odd_count_vec: Vec<String> =\
    \ vec![];\n        for c in s.chars() {\n            if c.is_digit() {\n     \
    \           odd_count_vec.push(c.to_string());\n            }\n        }\n   \
    \     if odd_count_vec.len() > 0 {\n            odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(),\
    \ odd_count_vec.len(), odd_count_vec.len()));\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        od\n}\n\nfn main() {\n    let candidate = odd_count;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5_9eqvm6.rs:40:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for s\
    \ in lst {\n   |                  - this delimiter might not be properly closed...\n\
    ...\n33 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    40 | }\n   |   ^\n\nerror: 4 positional arguments in format string, but there\
    \ are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:20:68\n   |\n20 | ... of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), odd_count_vec.len(),\
    \ odd_count_vec.len()));\n   |                     ^^         ^^   ^^        \
    \ ^^        -------------------  -------------------  -------------------\n\n\
    error: 4 positional arguments in format string, but there are 3 arguments\n  -->\
    \ /tmp/tmp5_9eqvm6.rs:22:64\n   |\n22 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        -------  -------  -------\n\nerror:\
    \ 4 positional arguments in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:23:64\n\
    \   |\n23 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:24:64\n\
    \   |\n24 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp5_9eqvm6.rs:25:64\n\
    \   |\n25 |         odd_count_vec.push(format!(\""
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for str in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n  \
    \      let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz_23dx26.rs:47:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for str\
    \ in lst {\n   |                    - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    47 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpz_23dx26.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz_23dx26.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz_23dx26.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz_23dx26.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz_23dx26.rs:9:35\n  |\n9 | fn odd_count(lst:\
    \ Vec<String>) -> Vec<String> {\n  |    ---------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<String>`\n          found unit type `()`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome errors have detailed exp"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        let mut odd_count_str_vec: Vec<String> = vec![];\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str_vec.push(c.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_str = odd_count_str + odd_count_str_vec.join(\"\
    \");\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpptie3ccn.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpptie3ccn.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpptie3ccn.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpptie3ccn.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpptie3ccn.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpptie3ccn.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpptie3ccn.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpptie3ccn.rs:21:41\n\
    \   |\n21 |         odd_count_str = odd_count_str + odd_count_str_vec.join(\"\"\
    );\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                         |\n   |                        \
    \                 expected `&str`, found struct `String`\n   |               \
    \                          help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10).unwrap()));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3jqg1vdt.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jqg1vdt.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3jqg1vdt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0\")]\n    for s in lst {\n        let mut odd_count = 0;\n        for c in\
    \ s.chars() {\n            if c.is_digit() {\n                odd_count += 1;\n\
    \            }\n        }\n        odd_counts.push(String::from(format!(\"{}n\
    \ the str{}ng {}\", odd_count, s.len(), odd_count)));\n    }\n    odd_counts\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpc_lapmiu.rs:10:90\n\
    \   |\n10 |     let mut odd_counts = vec![String::from(\"the number of odd elements\
    \ 0n the str0ng 0\")]\n   |                                                  \
    \                                        ^ help: add `;` here\n11 |     for s\
    \ in lst {\n   |     --- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:17\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:25\n \
    \  |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc_lapmiu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc_lapmiu.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpc_lapmiu.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for s in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count_vec.push(c.to_string());\n            }\n        }\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpmz2px_zk.rs:30:36\n\
    \   |\n30 |           odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng \n   |  ____________________________________^\n31 | | }\n32\
    \ | |\n33 | | fn main() {\n...  |\n37 | |     assert_eq!({left}, {right});\n38\
    \ | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_index:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              if odd_count_str_index > 0 {\n                    odd_count_str.push_str(&format!(\"\
    {}n\", odd_count_str_index));\n                }\n                odd_count_str.push_str(&c.to_string());\n\
    \                odd_count_str_index += 1;\n            } else {\n           \
    \     odd_count_str.push_str(&c.to_string());\n            }\n        }\n    \
    \    odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph2zs6s84.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph2zs6s84.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph2zs6s84.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph2zs6s84.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph2zs6s84.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph2zs6s84.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmph2zs6s84.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec:\
    \ Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String> = vec![];\n  \
    \  let mu\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp0_mupu3g.rs:40:11\n   |\n\
    40 |     let mu\n   |           ^ help: add `;` here\n41 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0_mupu3g.rs:45:17\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0_mupu3g.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0_mupu3g.rs:46:17\n   |\n46 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0_mupu3g.rs:46:25\n\
    \   |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0_mupu3g.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0_mupu3g.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp0_mupu3g.rs:9:35\n\
    \  |\n9 | fn odd_count(lst: Vec<String>) -> Vec<String> {\n  |    ---------  \
    \                    ^^^^^^^^^^^ expected struct `Vec`, found `()`\n  |    |\n\
    \  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<String>`\n          found unit type `()`\n\
    \nerror: aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = s.to_string();\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count_str = odd_count_str.replace(c.to_string(),\
    \ c.to_string() + &\"n\".to_string());\n            }\n        }\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmfqf9eph.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmfqf9eph.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmfqf9eph.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmfqf9eph.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmfqf9eph.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmfqf9eph.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpmfqf9eph.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: expected a `FnMut<(char,)>`\
    \ closure, found `String`\n  --> /tmp/tmpmfqf9eph.rs:15:47\n   |\n15 |       \
    \          odd_count_str = odd_count_str.replace(c.to_string(), c.to_string()\
    \ + &\"n\".to_string());\n   |                                               ^^^^^^^\
    \ expected an `FnMut<(char,)>` closure, found `String`\n   |\n   = help: the trait\
    \ `FnMut<(char,)>` is not implemented for `String`\n   = note: required because\
    \ of the requirements on the impl of `Pattern<'_>` for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmfqf9eph.rs:15:70\n   |\n15 |              \
    \   odd_count_str = odd_count_str.replace(c.to_stri"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_int:\
    \ u32 = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n    \
    \            odd_count_int += c.to_digit(10).unwrap();\n            } else {\n\
    \                odd_count_str += &c.to_string();\n            }\n        }\n\
    \        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn\
    \ main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpya76txn2.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpya76txn2.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpya76txn2.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpya76txn2.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpya76txn2.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpya76txn2.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpya76txn2.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for str in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n  \
    \      let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpz_23dx26.rs:47:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for str\
    \ in lst {\n   |                    - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    47 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpz_23dx26.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpz_23dx26.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz_23dx26.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz_23dx26.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz_23dx26.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpz_23dx26.rs:9:35\n  |\n9 | fn odd_count(lst:\
    \ Vec<String>) -> Vec<String> {\n  |    ---------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<String>`\n          found unit type `()`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome errors have detailed exp"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        let mut odd_count_str_vec: Vec<String> = vec![];\n        for digit in\
    \ str.chars() {\n            if digit % 2 == 1 {\n                odd_count_str_vec.push(digit.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(String::from(\"\
    0\"));\n            }\n        }\n        odd_count_str = odd_count_str + odd_count_str_vec.join(\"\
    \");\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmponb4y807.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmponb4y807.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmponb4y807.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmponb4y807.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmponb4y807.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmponb4y807.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmponb4y807.rs:15:22\n\
    \   |\n15 |             if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n\
    \   |                |\n   |                char\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmponb4y807.rs:21:41\n   |\n21 |         odd_count_str = odd_count_str\
    \ + odd_count_str_vec.join(\"\");\n   |                                      \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                         |\n\
    \   |                                         expected `&str`, found struct `String`\n\
    \   |                                         help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        let mut odd_digits = s.chars().filter(|c|\
    \ c >= '0' && c <= '9').count();\n        odd_count += odd_digits as i32;\n  \
    \  }\n    odd_count_str(odd_count)\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `odd_count_str` in this scope\n  -->\
    \ /tmp/tmpxo02s2qo.rs:15:5\n   |\n15 |     odd_count_str(odd_count)\n   |    \
    \ ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `odd_count`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpxo02s2qo.rs:20:17\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxo02s2qo.rs:20:25\n   |\n20 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxo02s2qo.rs:21:17\n   |\n21 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxo02s2qo.rs:21:25\n\
    \   |\n21 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxo02s2qo.rs:22:17\n   |\n22 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxo02s2qo.rs:22:25\n   |\n22 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxo02s2qo.rs:12:56\n\
    \   |\n12 |         let mut odd_digits = s.chars().filter(|c| c >= '0' && c <=\
    \ '9').count();\n   |                                                        ^^^\n\
    \   |                                                        |\n   |         \
    \                                               expected `&char`, found `char`\n\
    \   |                                                        help: consider borrowing\
    \ here: `&'0'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxo02s2qo.rs:12:68\n\
    \   |\n12 |         let mut odd_digits = s.chars().filter(|c| c >= '0' && c <=\
    \ '9').count();\n   |                                                        \
    \            ^^^\n   |                  "
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c.to_digit(10).unwrap());\n            }\n        }\n      \
    \  odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n of\
    \ the {}nput.\", odd_digits.len(), s.len(), s.len()).as_str());\n    }\n    odd_count\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsrwmf1lo.rs:18:60\n   |\n18 | ...   odd_count.push(format!(\"the\
    \ number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()).as_str());\n   |                                         \
    \                 ^^         ^^   ^^         ^^        ----------------  -------\
    \  -------\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsrwmf1lo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsrwmf1lo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsrwmf1lo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsrwmf1lo.rs:20:5\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                       ----------- expected `Vec<String>` because of return type\n\
    ...\n20 |     odd_"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_len += 1;\n            } else {\n               \
    \ odd_count_str_len = 0;\n            }\n            if odd_count_str_len % 2\
    \ == 1 {\n                odd_count_str.append(&format!(\"{}n\", odd_count_str_len));\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprvgbezo7.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprvgbezo7.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprvgbezo7.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprvgbezo7.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprvgbezo7.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprvgbezo7.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmprvgbezo7.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmprvgbezo7.rs:21:31\n\
    \   |\n21 |                 odd_count_str.append(&format!(\"{}n\", odd_count_str_len));\n\
    \   |                               ^^^^^^ method not found in `String`\n\nerror:\
    \ aborting due to 8 previous errors\n\nSome errors have detailed explanations:\
    \ E0061, E0425, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0061`.\n"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0\")]\n    for s in lst {\n        let mut odd_count = 0;\n        for c in\
    \ s.chars() {\n            if c.is_digit() {\n                odd_count += 1;\n\
    \            }\n        }\n        odd_counts.push(String::from(format!(\"{}n\
    \ the str{}ng {}\", odd_count, s.len(), odd_count)));\n    }\n    odd_counts\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmpc_lapmiu.rs:10:90\n\
    \   |\n10 |     let mut odd_counts = vec![String::from(\"the number of odd elements\
    \ 0n the str0ng 0\")]\n   |                                                  \
    \                                        ^ help: add `;` here\n11 |     for s\
    \ in lst {\n   |     --- unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:17\n   |\n25 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:25:25\n \
    \  |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc_lapmiu.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpc_lapmiu.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpc_lapmiu.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpc_lapmiu.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659794822
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str_vec.push(c.to_string());\n            } else\
    \ {\n                odd_count_str += c.to_string();\n            }\n        }\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec.iter() {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        let mut odd_count_str_vec_len\
    \ = odd_count_str_vec.len();\n        for c in odd_count_str_vec.iter() {\n  \
    \          odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec.iter() {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        let mut odd_count_str_vec_len\
    \ = odd_count_str_vec.len();\n        for c in odd_count_str_vec.iter() {\n  \
    \          odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec.iter() {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        let mut odd_count_str_vec_len\
    \ = odd_count_str_vec.len();\n        for c in odd_count_str_vec.iter() {\n  \
    \          odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec.iter() {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        let mut odd_count_str_vec_len\
    \ = odd_count_str_vec.len();\n        for c in odd_count_str_vec.iter() {\n  \
    \          odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec.iter() {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_\n}\n\nfn main() {\n    let candidate = odd_count;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcst7_6uv.rs:73:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n11 |     for s in lst {\n   |                  -\
    \ this delimiter might not be properly closed...\n...\n66 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n73 | }\n   |   ^\n\nerror[E0425]:\
    \ cannot find value `odd_` in this scope\n  --> /tmp/tmpcst7_6uv.rs:65:9\n   |\n\
    65 |         odd_\n   |         ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcst7_6uv.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcst7_6uv.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcst7_6uv.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcst7_6uv.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcst7_6uv.rs:72:17\n   |\n72 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcst7_6uv.rs:72:25\n   |\n72 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpcst7_6uv.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec_len:\
    \ usize = 0;\n    for s in lst {\n        let mut odd_count_vec_len = 0;\n   \
    \     for c in s.chars() {\n            if c.is_digit() {\n                odd_count_vec_len\
    \ += 1;\n            }\n        }\n        odd_count_vec_len += 1;\n        odd_count_vec.push(String::from(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec_len,\
    \ odd_count_vec_len, odd_count_vec_len)));\n    }\n    odd_count_vec\n}\n\nfn\
    \ main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuuc2c6mx.rs:20:77\n   |\n20 | ...ber of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", odd_count_vec_len, odd_count_vec_len, odd_count_vec_len)));\n\
    \   |                        ^^         ^^   ^^         ^^        -----------------\
    \  -----------------  -----------------\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpuuc2c6mx.rs:27:17\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpuuc2c6mx.rs:27:25\n \
    \  |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuuc2c6mx.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuuc2c6mx.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpuuc2c6mx.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpuuc2c6mx.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpuuc2c6mx.rs:15:18\n\
    \    |\n15  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"the number of odd elements \");\n   \
    \     let mut odd_count_str_vec: Vec<String> = vec![];\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str_vec.push(c.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(String::from(\"\
    the str\"));\n            }\n        }\n        odd_count_str = odd_count_str\
    \ + odd_count_str_vec.join(\"\");\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp86_0syr9.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp86_0syr9.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp86_0syr9.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp86_0syr9.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp86_0syr9.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp86_0syr9.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp86_0syr9.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86_0syr9.rs:21:41\n\
    \   |\n21 |         odd_count_str = odd_count_str + odd_count_str_vec.join(\"\"\
    );\n   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                                         |\n   |                        \
    \                 expected `&str`, found struct `String`\n   |               \
    \                          help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0061, E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp02i_hm07.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02i_hm07.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02i_hm07.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp02i_hm07.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = String::new();\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n            } else\
    \ {\n                odd_digits.push_str(&format!(\"{}\", c));\n            }\n\
    \        }\n        odd_count.push(odd_digits);\n    }\n    odd_count\n}\n\nfn\
    \ main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_tsh6eb8.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_tsh6eb8.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_tsh6eb8.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_tsh6eb8.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_tsh6eb8.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_tsh6eb8.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp_tsh6eb8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Option<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmp_tsh6eb8.rs:15:53\n   |\n15 |           \
    \      odd_digits.push_str(&format!(\"{}n\", c.to_digit(10)));\n   |         \
    \                                            ^^^^^^^^^^^^^^ `Option<u32>` cannot\
    \ be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Option<u32>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more in"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for char in str.chars() {\n            if\
    \ char.chars().count() > 1 {\n                odd_count_str_vec.push(String::from(char));\n\
    \            } else {\n                odd_count_str += char;\n            }\n\
    \        }\n        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n\
    \        for _ in 0..odd_count_str_vec_len {\n            odd_count_str_vec.push(String::from(\"\
    \"));\n        }\n        for char in odd_count_str_vec {\n            if char.chars().count()\
    \ > 1 {\n                odd_count_str += char;\n            }\n        }\n  \
    \      odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpd6vkys4p.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd6vkys4p.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd6vkys4p.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd6vkys4p.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd6vkys4p.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd6vkys4p.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n  --> /tmp/tmpd6vkys4p.rs:15:21\n   |\n15 |          \
    \   if char.chars().count() > 1 {\n   |                     ^^^^^ method not found\
    \ in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd6vkys4p.rs:18:34\n\
    \   |\n18 |                 odd_count_str += char;\n   |                     \
    \             ^^^^ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd6vkys4p.rs:27:34\n   |\n27 |                 odd_count_str +=\
    \ char;\n   |                                  ^^^^\n   |                    \
    \              |\n   |                                  expected `&str`, found\
    \ struct `String`\n   |                                  help: consider borrowing\
    \ here: `&char`\n\nerror: aborting due to 9 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str.append(&c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpucuo28mv.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpucuo28mv.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpucuo28mv.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpucuo28mv.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpucuo28mv.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpucuo28mv.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpucuo28mv.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpucuo28mv.rs:15:31\n\
    \   |\n15 |                 odd_count_str.append(&c.to_string());\n   |      \
    \                         ^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"the number of odd elements \");\n   \
    \     let mut odd_count_str_len: usize = 0;\n        for c in s.chars() {\n  \
    \          if c.is_digit() {\n                odd_count_str_len += 1;\n      \
    \      } else {\n                break;\n            }\n        }\n        odd_count_str_len\
    \ += 1;\n        for _ in 0..odd_count_str_len {\n            odd_count_str.push_str(\"\
    \ \");\n        }\n        odd_count_str.push_str(&s.chars().filter(|c| c.is_digit()).count());\n\
    \        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn\
    \ main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp03fnwf6m.rs:33:17\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp03fnwf6m.rs:33:25\n   |\n33 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp03fnwf6m.rs:34:17\n   |\n34 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp03fnwf6m.rs:34:25\n\
    \   |\n34 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp03fnwf6m.rs:35:17\n   |\n35 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp03fnwf6m.rs:35:25\n   |\n35 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp03fnwf6m.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0061]: this function takes 1 argument\
    \ but 0 arguments were supplied\n   --> /tmp/tmp03fnwf6m.rs:25:56\n    |\n25 \
    \ |         odd_count_str.push_str(&s.chars().filter(|c| c.is_digit()).count());\n\
    \    |                                                        ^^^^^^^^- supplied\
    \ 0 arguments\n    |                                                        |\n\
    \    |                                                        expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp03fnwf6m.rs:25:32\n   |\n25 |         odd_count_str.push_str(&s.chars().filter(|c|\
    \ c.is_digit()).count()"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for elem in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n  \
    \      let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let mut odd_count_vec: Vec<String> = Vec::new();\n        let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n        let mut odd_count_vec: Vec<String> = Vec::new();\n\
    \        let \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk1dt4lhw.rs:47:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for elem\
    \ in lst {\n   |                     - this delimiter might not be properly closed...\n\
    ...\n40 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    47 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpk1dt4lhw.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpk1dt4lhw.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpk1dt4lhw.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk1dt4lhw.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk1dt4lhw.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk1dt4lhw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk1dt4lhw.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpk1dt4lhw.rs:9:35\n  |\n9 | fn odd_count(lst:\
    \ Vec<String>) -> Vec<String> {\n  |    ---------                      ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<String>`\n          found unit type `()`\n\nerror: aborting due to 9 previous\
    \ errors\n\nSome errors have detailed e"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str.append(&c.to_string());\n\
    \            } else {\n                odd_count_str.append(&c.to_string() + &c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpw48o6xb3.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw48o6xb3.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw48o6xb3.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw48o6xb3.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw48o6xb3.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw48o6xb3.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpw48o6xb3.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpw48o6xb3.rs:15:31\n\
    \   |\n15 |                 odd_count_str.append(&c.to_string());\n   |      \
    \                         ^^^^^^ method not found in `String`\n\nerror[E0599]:\
    \ no method named `append` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpw48o6xb3.rs:17:31\n   |\n17 |                 odd_count_str.append(&c.to_string()\
    \ + &c.to_string());\n   |                               ^^^^^^ method not found\
    \ in `String`\n\nerror[E0369]: cannot add `&String` to `&String`\n  --> /tmp/tmpw48o6xb3.rs:17:53\n\
    \   |\n17 |            "
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in str.chars() {\n            if c.is_digit() {\n\
    \                odd_count_str_len += 1;\n            } else {\n             \
    \   odd_count_str += &c.to_string();\n            }\n        }\n        odd_count_vec.push(&odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc2vure4m.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc2vure4m.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc2vure4m.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc2vure4m.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc2vure4m.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc2vure4m.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpc2vure4m.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc2vure4m.rs:21:28\n\
    \   |\n21 |         odd_count_vec.push(&odd_count_str);\n   |                \
    \            ^^^^^^^^^^^^^^ expected struct `String`, found `&String`\n   |\n\
    help: consider removing the borrow\n   |\n21 -         odd_count_vec.push(&odd_count_str);\n\
    21 +         odd_count_vec.push(odd_count_str);\n   | \n\nerror: aborting due\
    \ to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0308,\
    \ E0425.\nFor more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in str.chars() {\n            if c.is_digit() {\n\
    \                odd_count_str_len += 1;\n            }\n        }\n        odd_count_str\
    \ += &odd_count_str_len.to_string();\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpzn_q85w0.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzn_q85w0.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzn_q85w0.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzn_q85w0.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzn_q85w0.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzn_q85w0.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpzn_q85w0.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count += 1;\n            }\n  \
    \      }\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp01drfkzb.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp01drfkzb.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp01drfkzb.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp01drfkzb.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp01drfkzb.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp01drfkzb.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp01drfkzb.rs:13:18\n    |\n13  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: the method `into_iter` exists\
    \ for struct `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp01drfkzb.rs:18:27\n\
    \    |\n18  |       odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Siz"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp02i_hm07.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp02i_hm07.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp02i_hm07.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp02i_hm07.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp02i_hm07.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c.to_digit(10).unwrap());\n            }\n        }\n      \
    \  odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n of\
    \ the {}nput.\", odd_digits, s.len(), s.len()));\n    }\n    odd_count\n}\n\n\
    fn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3vie002r.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ----------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3vie002r.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3vie002r.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3vie002r.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3vie002r.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3vie002r.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3vie002r.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3vie002r.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Vec<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmp3vie002r.rs:18:97\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits, s.len(),\
    \ s.len()));\n   |              "
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp79r_3qwo.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp79r_3qwo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp79r_3qwo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp79r_3qwo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `push` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmp79r_3qwo.rs:18:19\n\
    \   |\n18 |         odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len()));"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"\");\n        let mut odd_count_str_vec:\
    \ Vec<String> = vec![];\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str_vec.push(c.to_string());\n            } else\
    \ {\n                odd_count_str += c.to_string();\n            }\n        }\n\
    \        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        for\
    \ c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n    \
    \    }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec {\n\
    \            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            odd_count_str += c.to_string();\n        }\n        odd_count_str_vec.pop();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str += c.to_string();\n\
    \        }\n        odd_count_str_vec.pop();\n        for c in odd_count_str_vec\
    \ {\n            od\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4uts_eyx.rs:83:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = vec![];\n11 |     for s in lst {\n   |                  - unclosed\
    \ delimiter\n...\n74 |         for c in odd_count_str_vec {\n   |            \
    \                        - this delimiter might not be properly closed...\n75\
    \ |             od\n76 | }\n   | - ...as it matches this but it has different\
    \ indentation\n...\n83 | }\n   |   ^\n\nerror[E0425]: cannot find value `od` in\
    \ this scope\n  --> /tmp/tmp4uts_eyx.rs:75:13\n   |\n75 |             od\n   |\
    \             ^^ not found in this scope\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4uts_eyx.rs:80:17\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4uts_eyx.rs:80:25\n \
    \  |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4uts_eyx.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4uts_eyx.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4uts_eyx.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4uts_eyx.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp4uts_eyx.rs:15:18\n\
    \    |\n15  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |       "
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str_vec.push(c.to_string());\n            } else\
    \ {\n                odd_count_str_vec.push(String::from(\"0\"));\n          \
    \  }\n        }\n        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n\
    \        for c in odd_count_str_vec {\n            odd_count_str.append(&c.to_string());\n\
    \        }\n        let mut odd_count_str_vec_len = odd_count_str_vec.len();\n\
    \        for c in odd_count_str_vec {\n            if odd_count_str_vec_len %\
    \ 2 == 0 {\n                odd_count_str_vec_len -= 1;\n            } else {\n\
    \                odd_count_str_vec_len += 1;\n            }\n        }\n     \
    \   odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\nfn main()\
    \ {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2b9khghe.rs:40:17\n\
    \   |\n40 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2b9khghe.rs:40:25\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2b9khghe.rs:41:17\n   |\n41 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2b9khghe.rs:41:25\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2b9khghe.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2b9khghe.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp2b9khghe.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `append` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp2b9khghe.rs:23:27\n\
    \   |\n23 |             odd_count_str.append(&c.to_string());\n   |          \
    \                 ^^^^^^ method not found in `String`\n\nerror: aborting due to\
    \ 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425, E0599.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp79r_3qwo.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp79r_3qwo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp79r_3qwo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp79r_3qwo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `push` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmp79r_3qwo.rs:18:19\n\
    \   |\n18 |         odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len()));"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for digit in str.chars() {\n            if digit\
    \ == '1' {\n                odd_count += 1;\n            }\n        }\n      \
    \  odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_count, str.len(), str.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsaoq_ag2.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsaoq_ag2.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsaoq_ag2.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsaoq_ag2.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsaoq_ag2.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsaoq_ag2.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsaoq_ag2.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        odd_count += s.chars().filter(|c|\
    \ c % 2 == 1).count();\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv86olojs.rs:19:17\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv86olojs.rs:19:25\n   |\n19 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv86olojs.rs:20:17\n   |\n20 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv86olojs.rs:20:25\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv86olojs.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv86olojs.rs:21:25\n   |\n21 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `&char` by `{integer}`\n  --> /tmp/tmpv86olojs.rs:12:45\n\
    \   |\n12 |         odd_count += s.chars().filter(|c| c % 2 == 1).count();\n \
    \  |                                           - ^ - {integer}\n   |         \
    \                                  |\n   |                                   \
    \        &char\n\nerror[E0599]: the method `into_iter` exists for struct `String`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpv86olojs.rs:14:27\n\
    \    |\n14  |       odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Si"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for d in s.chars() {\n            if d.is_digit() {\n               \
    \ odd_digits.push(d.to_digit(10).unwrap());\n            } else {\n          \
    \      break;\n            }\n        }\n        odd_count.push(format!(\"the\
    \ number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp1knnecxn.rs:20:60\n   |\n20 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \          ^^         ^^   ^^         ^^        ----------------  -------  -------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp1knnecxn.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1knnecxn.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp1knnecxn.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp1knnecxn.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1knnecxn.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1knnecxn.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp1knnecxn.rs:14:18\n    |\n14  |             if\
    \ d.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10).unwrap()));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3jqg1vdt.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3jqg1vdt.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3jqg1vdt.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3jqg1vdt.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_vec: Vec<String> = vec![];\n        for c in s.chars() {\n       \
    \     if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n\
    \        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n      \
    \  odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqiffengh.rs:78:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = vec![];\n11 |     for s in lst {\n   |                  - this\
    \ delimiter might not be properly closed...\n...\n71 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n78 | }\n   |   ^\n\nerror: 4 positional\
    \ arguments in format string, but there are 3 arguments\n  --> /tmp/tmpqiffengh.rs:18:64\n\
    \   |\n18 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpqiffengh.rs:75:17\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqiffengh.rs:75:25\n \
    \  |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqiffengh.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqiffengh.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqiffengh.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqiffengh.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpqiffengh.rs:14:18\n\
    \    |\n1"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    let mut odd_count_vec: Vec<String>\
    \ = vec![];\n    for elem in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = vec![];\n        for digit in elem.chars().filter(|c| c.is_digit()) {\n  \
    \          if digit.parse::<usize>().is_ok() {\n                odd_count_vec.push(digit.parse::<usize>().unwrap());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(),\
    \ elem.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp8dt2skr8.rs:19:64\n   |\n19 | ...he number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(), elem.len()));\n\
    \   |                              ^^         ^^   ^^         ^^        -------------------\
    \  ----------  ----------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8dt2skr8.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8dt2skr8.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8dt2skr8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8dt2skr8.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8dt2skr8.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8dt2skr8.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp8dt2skr8.rs:14:48\n\
    \    |\n14  |         for digit in elem.chars().filter(|c| c.is_digit()) {\n \
    \   |                                                ^^^^^^^^- supplied 0 arguments\n\
    \    |                                                |\n    |               \
    \                                 expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror[E0599]: no method named `parse` found for type\
    \ `char` in the current scope\n  --> /tmp/tmp8dt2skr8.rs:15:22\n   |\n15 |   \
    \          if digit.parse::<usize>()"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp79r_3qwo.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp79r_3qwo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp79r_3qwo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp79r_3qwo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `push` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmp79r_3qwo.rs:18:19\n\
    \   |\n18 |         odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len()));"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_len += 1;\n            } else {\n               \
    \ odd_count_str += &c.to_string();\n            }\n        }\n        odd_count_str\
    \ += &format!(\"{}n\", odd_count_str_len);\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphu2iy5c5.rs:29:17\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphu2iy5c5.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphu2iy5c5.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphu2iy5c5.rs:30:25\n\
    \   |\n30 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphu2iy5c5.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphu2iy5c5.rs:31:25\n   |\n31 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmphu2iy5c5.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for str in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for digit in str.chars() {\n            if digit % 2\
    \ == 1 {\n                odd_count_vec.push(digit.to_string());\n           \
    \ }\n        }\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), str.len(), str.len()));\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpde3na3s0.rs:19:64\n   |\n19 | ...the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", odd_count_vec.len(), str.len(), str.len()));\n\
    \   |                               ^^         ^^   ^^         ^^        -------------------\
    \  ---------  ---------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpde3na3s0.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpde3na3s0.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpde3na3s0.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpde3na3s0.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpde3na3s0.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpde3na3s0.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0369]: cannot\
    \ mod `char` by `{integer}`\n  --> /tmp/tmpde3na3s0.rs:15:22\n   |\n15 |     \
    \        if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n   |  \
    \              |\n   |                char\n\nerror: aborting due to 8 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 0;\n        for char in str.chars() {\n            if char\
    \ == '1' {\n                odd_count += 1;\n            }\n        }\n      \
    \  odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_count, str.len(), str.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpwq1vhy3b.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpwq1vhy3b.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpwq1vhy3b.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpwq1vhy3b.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpwq1vhy3b.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpwq1vhy3b.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpwq1vhy3b.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str += &c.to_string();\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprjahzjd2.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprjahzjd2.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprjahzjd2.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprjahzjd2.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprjahzjd2.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprjahzjd2.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmprjahzjd2.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        odd_count += s.chars().filter(|c|\
    \ c % 2 == 1).count();\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpv86olojs.rs:19:17\n\
    \   |\n19 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpv86olojs.rs:19:25\n   |\n19 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpv86olojs.rs:20:17\n   |\n20 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpv86olojs.rs:20:25\n\
    \   |\n20 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpv86olojs.rs:21:17\n   |\n21 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpv86olojs.rs:21:25\n   |\n21 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `&char` by `{integer}`\n  --> /tmp/tmpv86olojs.rs:12:45\n\
    \   |\n12 |         odd_count += s.chars().filter(|c| c % 2 == 1).count();\n \
    \  |                                           - ^ - {integer}\n   |         \
    \                                  |\n   |                                   \
    \        &char\n\nerror[E0599]: the method `into_iter` exists for struct `String`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpv86olojs.rs:14:27\n\
    \    |\n14  |       odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Si"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count = 1;\n        for char in str.chars() {\n            if char\
    \ == '1' {\n                odd_count += 1;\n            }\n        }\n      \
    \  odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_count, str.len(), str.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpgn2gy9qq.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpgn2gy9qq.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgn2gy9qq.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgn2gy9qq.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgn2gy9qq.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgn2gy9qq.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgn2gy9qq.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec_len:\
    \ usize = 0;\n    for str in lst {\n        let mut odd_count_str: usize = 0;\n\
    \        for digit in str.chars() {\n            if digit % 2 == 1 {\n       \
    \         odd_count_str += 1;\n            }\n        }\n        odd_count_vec_len\
    \ += odd_count_str;\n        odd_count_vec.push(String::from(format!(\"the number\
    \ of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_str, str, odd_count_vec_len)));\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp05of5f8v.rs:20:77\n   |\n20 | ...(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count_str, str, odd_count_vec_len)));\n\
    \   |                                 ^^         ^^   ^^         ^^        -------------\
    \  ---  -----------------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp05of5f8v.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp05of5f8v.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp05of5f8v.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp05of5f8v.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp05of5f8v.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp05of5f8v.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0369]: cannot\
    \ mod `char` by `{integer}`\n  --> /tmp/tmp05of5f8v.rs:15:22\n   |\n15 |     \
    \        if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n   |  \
    \              |\n   |                char\n\nerror: aborting due to 8 previous\
    \ errors\n\nSome errors have detailed explanations: E0369, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_vec: Vec<String> = vec![];\n        for c in s.chars() {\n       \
    \     if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        od\n}\n\nfn main() {\n    let candidate = odd_count;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxty2fzbp.rs:38:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = vec![];\n11 |     for s in lst {\n   |                  - this\
    \ delimiter might not be properly closed...\n...\n31 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n38 | }\n   |   ^\n\nerror: 4 positional\
    \ arguments in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:18:64\n\
    \   |\n18 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:19:64\n\
    \   |\n19 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:20:64\n\
    \   |\n20 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:21:64\n\
    \   |\n21 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::new();\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for char in str.chars() {\n            if\
    \ char.chars().count() > 1 {\n                odd_count_str_vec.push(char.to_string());\n\
    \            } else {\n                odd_count_str.push_str(&char.to_string());\n\
    \            }\n        }\n        odd_count_str_vec.sort_unstable();\n      \
    \  let mut odd_count_str_vec_len = odd_count_str_vec.len();\n        let mut odd_count_str_vec_len_2\
    \ = odd_count_str_vec.len() - 1;\n        let mut odd_count_str_vec_len_3 = odd_count_str_vec.len()\
    \ - 2;\n        let mut odd_count_str_vec_len_4 = odd_count_str_vec.len() - 3;\n\
    \        let mut odd_count_str_vec_len_5 = odd_count_str_vec.len() - 4;\n    \
    \    let mut odd_count_str_vec_len_6 = odd_count_str_vec.len() - 5;\n        let\
    \ mut odd_count_str_vec_len_7 = odd_count_str_vec.len() - 6;\n        let mut\
    \ odd_count_str_vec_len_8 = odd_count_str_vec.len() - 7;\n        let mut odd_count_str_vec_len_9\
    \ = odd_count_str_vec.len() - 8;\n        let mut odd_count_str_vec_len_10 = odd_count_str_vec.len()\
    \ - 9;\n        let mut odd_count_str_vec_len_11 = odd_count_str_vec.len() - 10;\n\
    \        let mut odd_count_str_vec_len_12 = odd_count_str_vec.len() - 11;\n  \
    \      let mut odd_count_str_vec_len_13 = odd_count_str_vec.len() - 12;\n    \
    \    let mut odd_count_str_vec_len_14 = odd_count_str_vec.len() - 13;\n      \
    \  let mut odd_count_str_vec_len_15 = odd_count_str_vec.len() - 14;\n        let\
    \ mut odd_count_str_vec_len_16 = odd_count_str_vec.len() - 15;\n        let mut\
    \ odd_count_str_vec_len_17 = odd_count_str_vec.len() - 16;\n        let mut odd_count_str_vec_len_18\
    \ = odd_count_str_vec.len() - 17;\n        let mut odd_count_str_vec_len_19 =\
    \ odd_count_str_vec.len() - 18;\n        let mut odd_count_str_vec_len_20 = odd_count_str_vec.len()\
    \ - 19;\n        let mut odd_count_str_vec_len_\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9nqpmuft.rs:50:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n11 |     for str in lst {\n   |                 \
    \   - this delimiter might not be properly closed...\n...\n43 | }\n   | - ...as\
    \ it matches this but it has different indentation\n...\n50 | }\n   |   ^\n\n\
    error: expected `;`, found `}`\n  --> /tmp/tmp9nqpmuft.rs:42:39\n   |\n42 |  \
    \       let mut odd_count_str_vec_len_\n   |                                 \
    \      ^ help: add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9nqpmuft.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9nqpmuft.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9nqpmuft.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9nqpmuft.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9nqpmuft.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9nqpmuft.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n  --> /tmp/tmp9nqpmuft.rs:15:21\n   |\n15 |          \
    \   if char.chars().count() > 1 {\n   |                     ^^^^^ method not found\
    \ in `char`\n\nerror[E0308]: mismatched types\n --> /tmp/tmp9nqpmuft"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![String::from(\"the number of odd elements 0n the str0ng\
    \ 0 of the 0nput.\")];\n    for s in lst {\n        let mut odd_count = 0;\n \
    \       for c in s.chars() {\n            if c.is_digit() {\n                odd_count\
    \ += 1;\n            }\n        }\n        odd_counts.push(String::from(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len())));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp5u4a4vx3.rs:18:74\n   |\n18 | ...rmat!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len())));\n   |\
    \                                      ^^         ^^   ^^         ^^        ---------\
    \  -------  -------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5u4a4vx3.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5u4a4vx3.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5u4a4vx3.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5u4a4vx3.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5u4a4vx3.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5u4a4vx3.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp5u4a4vx3.rs:14:18\n\
    \    |\n14  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror: aborting\
    \ due to 8 previous errors\n\nSome errors have detailed explanations: E0061, E0425.\n\
    For more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count: u32 = 0;\n        for c in str.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpu9tu0v9v.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, str.len(),\
    \ str.len()));\n   |                                                         \
    \       ^^         ^^   ^^         ^^        ---------  ---------  ---------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu9tu0v9v.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu9tu0v9v.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu9tu0v9v.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu9tu0v9v.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu9tu0v9v.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu9tu0v9v.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpu9tu0v9v.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count_str.push_str(&c.to_string());\n            } else {\n            \
    \    odd_count_str.push_str(\"1\");\n            }\n        }\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3ip9un44.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3ip9un44.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3ip9un44.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3ip9un44.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3ip9un44.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3ip9un44.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3ip9un44.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_str: String = String::from(\"\");\n        let mut odd_count_digit:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_digit += 1;\n            }\n        }\n        odd_count_str\
    \ += &format!(\"{}n\", odd_count_digit);\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5rym1k9r.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5rym1k9r.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5rym1k9r.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5rym1k9r.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5rym1k9r.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5rym1k9r.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp5rym1k9r.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for elem in lst {\n        let\
    \ mut odd_count_vec: Vec<String> = vec![];\n        for digit in elem.chars().filter(|c|\
    \ c >= '0' && c <= '9') {\n            if digit % 2 == 1 {\n                odd_count_vec.push(digit.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(elem.to_string());\n   \
    \     odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", odd_count_vec.len(), elem.len(), elem.len()));\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3x62vsk4.rs:19:64\n   |\n19 | ...he number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", odd_count_vec.len(), elem.len(), elem.len()));\n\
    \   |                              ^^         ^^   ^^         ^^        -------------------\
    \  ----------  ----------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3x62vsk4.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3x62vsk4.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3x62vsk4.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3x62vsk4.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3x62vsk4.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3x62vsk4.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3x62vsk4.rs:13:51\n   |\n13 |         for digit in elem.chars().filter(|c|\
    \ c >= '0' && c <= '9') {\n   |                                              \
    \     ^^^\n   |                                                   |\n   |    \
    \                                               expected `&char`, found `char`\n\
    \   |                                                   help: consider borrowing\
    \ here: `&'0'`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3x62vsk4.rs:13:63\n\
    \   |\n13 |         for digit in elem.chars().filter(|c| c >= '0' && c <= '9')\
    \ {\n   |               "
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec_len:\
    \ usize = 0;\n    for s in lst {\n        let mut odd_count_vec_len = 0;\n   \
    \     for c in s.chars() {\n            if c.is_digit() {\n                odd_count_vec_len\
    \ += 1;\n            }\n        }\n        odd_count_vec_len += 1;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.chars().filter(|c| !c.is_digit()).count() as usize;\n        odd_count_vec_len\
    \ += s.\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp1utkunvr.rs:46:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n...\n12 |     for s\
    \ in lst {\n   |                  - this delimiter might not be properly closed...\n\
    ...\n39 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    46 | }\n   |   ^\n\nerror: unexpected token: `}`\n  --> /tmp/tmp1utkunvr.rs:39:1\n\
    \   |\n39 | }\n   | ^\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp1utkunvr.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp1utkunvr.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp1utkunvr.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp1utkunvr.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp1utkunvr.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp1utkunvr.rs:45:25\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp1utkunvr.rs:15:18\n\
    \    |\n15  |             if c.is_digit() {\n    |                  ^^^^^^^^-\
    \ supplied 0 arguments\n    |                  |\n    |                  expected\
    \ 1 argument\n    |\nnote: associated function defined here\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmp1utkunvr.rs:20:53\n\
    \    |\n20  |         odd_count_vec_le"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for str in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        let mut odd_count_str_vec: Vec<String> = vec![];\n        for digit in\
    \ str.chars() {\n            if digit % 2 == 1 {\n                odd_count_str_vec.push(digit.to_string());\n\
    \            }\n        }\n        odd_count_str = odd_count_str + odd_count_str_vec.join(\"\
    \");\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsychvung.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsychvung.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsychvung.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsychvung.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsychvung.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsychvung.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmpsychvung.rs:15:22\n\
    \   |\n15 |             if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n\
    \   |                |\n   |                char\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsychvung.rs:19:41\n   |\n19 |         odd_count_str = odd_count_str\
    \ + odd_count_str_vec.join(\"\");\n   |                                      \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                                         |\n\
    \   |                                         expected `&str`, found struct `String`\n\
    \   |                                         help: consider borrowing here: `&odd_count_str_vec.join(\"\
    \")`\n\nerror: aborting due to 8 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0369, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::from(\"\");\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for digit in str.chars() {\n            if\
    \ digit % 2 == 1 {\n                odd_count_str.append(digit.to_string());\n\
    \                odd_count_str_vec.push(String::from(digit.to_string()));\n  \
    \          }\n        }\n        odd_count_vec.push(odd_count_str);\n        odd_count_vec.push(odd_count_str_vec);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpdximcgcc.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdximcgcc.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdximcgcc.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdximcgcc.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdximcgcc.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdximcgcc.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0369]: cannot mod `char` by `{integer}`\n  --> /tmp/tmpdximcgcc.rs:15:22\n\
    \   |\n15 |             if digit % 2 == 1 {\n   |                ----- ^ - {integer}\n\
    \   |                |\n   |                char\n\nerror[E0599]: no method named\
    \ `append` found for struct `String` in the current scope\n  --> /tmp/tmpdximcgcc.rs:16:31\n\
    \   |\n16 |                 odd_count_str.append(digit.to_string());\n   |   \
    \                            ^^^^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdximcgcc.rs:21:28\n   |\n21 |         odd_count_vec.push(odd_count_str_vec);\n\
    \   |                            ^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ struct `Vec`\n   |\n   = note: expected struct `String`\n              found\
    \ struct `Vec<String>`\n\nerror: aborting due to 9 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0369, E0425, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_vec: Vec<String> = vec![];\n        for c in s.chars() {\n       \
    \     if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(\"\");\n    }\n    odd_count_vec\n}\n\
    \nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpta7kjsoq.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \              ^^         ^^   ^^         ^^        -------------------  -------\
    \  -------\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpta7kjsoq.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpta7kjsoq.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpta7kjsoq.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpta7kjsoq.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpta7kjsoq.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpta7kjsoq.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpta7kjsoq.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpta7kjsoq.rs:19:28\n\
    \   |\n19 |         odd_count_vec.push(\"\");\n   |                          \
    \  ^^- help: try using a conversion method: `.to_string()`\n   |             \
    \               "
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for d in s.chars().filter(|c| c.is_digit()) {\n            if d.is_odd()\
    \ {\n                odd_digits.push(d.clone());\n            }\n        }\n \
    \       odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", odd_digits, s.chars().filter(|c| c.is_digit()).count(), s.chars().filter(|c|\
    \ c.is_digit()).count()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp2v39ptf2.rs:18:60\n   |\n18 | ...ts {}n the str{}ng {}n of the\
    \ {}nput.\", odd_digits, s.chars().filter(|c| c.is_digit()).count(), s.chars().filter(|c|\
    \ c.is_digit()).count()...\n   |       ^^         ^^   ^^         ^^        ----------\
    \  ------------------------------------------  ------------------------------------------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2v39ptf2.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2v39ptf2.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2v39ptf2.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2v39ptf2.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2v39ptf2.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2v39ptf2.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp2v39ptf2.rs:13:41\n    |\n13  |         for d\
    \ in s.chars().filter(|c| c.is_digit()) {\n    |                             \
    \            ^^^^^^^^- supplied 0 arguments\n    |                           \
    \              |\n    |                                         expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror[E0599]: no method named\
    \ `is_odd` found for type `char` in the current scope\n  --> /tmp/tmp2v39ptf2.rs:14:18\n\
    \   |\n14 | "
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    let mut odd_count_vec: Vec<String> = Vec::new();\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: \n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected type, found `}`\n  --> /tmp/tmppg32jn5t.rs:39:1\n   |\n\
    38 |     let mut odd_count_vec: \n   |         ----------------- while parsing\
    \ the type for `mut odd_count_vec`\n39 | }\n   | ^ expected type\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmppg32jn5t.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmppg32jn5t.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmppg32jn5t.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmppg32jn5t.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmppg32jn5t.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmppg32jn5t.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror: aborting due to 7 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count_str =\
    \ String::from(\"\");\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10)));\n\
    \            } else {\n                odd_count_str.push_str(&format!(\"{}\"\
    , c));\n            }\n        }\n        odd_count.push(odd_count_str);\n   \
    \ }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpe7yfn06u.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe7yfn06u.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe7yfn06u.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe7yfn06u.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe7yfn06u.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe7yfn06u.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpe7yfn06u.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Option<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmpe7yfn06u.rs:15:56\n   |\n15 |           \
    \      odd_count_str.push_str(&format!(\"{}n\", c.to_digit(10)));\n   |      \
    \                                                  ^^^^^^^^^^^^^^ `Option<u32>`\
    \ cannot be formatted with the default formatter\n   |\n   = help: the trait `std::fmt::Display`\
    \ is not implemented for `Option<u32>`\n   = note: in format strings you may be\
    \ able to use `{:?}` (or {:#?} for pretty-print) instead\n   = note: this error\
    \ originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for m"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"the number of odd elements \");\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count_str.push_str(&c.to_string());\n            } else {\n            \
    \    odd_count_str.push_str(\"n\");\n            }\n        }\n        odd_count_vec.push(odd_count_str);\n\
    \    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu7buc1q0.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu7buc1q0.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu7buc1q0.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu7buc1q0.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu7buc1q0.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu7buc1q0.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpu7buc1q0.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        let mut odd_digits = 0;\n  \
    \      for c in s.chars() {\n            if c.is_digit() {\n                odd_digits\
    \ += 1;\n            }\n        }\n        odd_count += odd_digits as usize;\n\
    \    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7d2g5uf7.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7d2g5uf7.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7d2g5uf7.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7d2g5uf7.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7d2g5uf7.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7d2g5uf7.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp7d2g5uf7.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: the method `into_iter` exists\
    \ for struct `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp7d2g5uf7.rs:20:27\n\
    \    |\n20  |       odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Siz"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for str in lst {\n       \
    \ let mut odd_count_str: String = String::new();\n        let mut odd_count_str_vec:\
    \ Vec<String> = Vec::new();\n        for digit in str.chars() {\n            if\
    \ digit.chars().count() > 1 {\n                odd_count_str_vec.push(digit);\n\
    \            }\n        }\n        for digit in odd_count_str_vec.iter() {\n \
    \           if digit.chars().count() > 1 {\n                odd_count_str.push_str(digit);\n\
    \            }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp30cy093q.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp30cy093q.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp30cy093q.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp30cy093q.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp30cy093q.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp30cy093q.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0599]: no method named `chars` found for type `char`\
    \ in the current scope\n  --> /tmp/tmp30cy093q.rs:15:22\n   |\n15 |          \
    \   if digit.chars().count() > 1 {\n   |                      ^^^^^ method not\
    \ found in `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp30cy093q.rs:16:40\n\
    \   |\n16 |                 odd_count_str_vec.push(digit);\n   |             \
    \                           ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                                        |\n   |                         \
    \               expected struct `String`, found `char`\n\nerror: aborting due\
    \ to 8 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::new();\n        let mut odd_count_str_len:\
    \ usize = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n  \
    \              odd_count_str_len += 1;\n            } else {\n               \
    \ odd_count_str_len = 0;\n            }\n            if odd_count_str_len % 2\
    \ == 1 {\n                odd_count_str += &c.to_string();\n            }\n  \
    \      }\n        odd_count_vec.push(odd_count_str);\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp2xpd3pvf.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2xpd3pvf.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2xpd3pvf.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp2xpd3pvf.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2xpd3pvf.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2xpd3pvf.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp2xpd3pvf.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpfdui3mqo.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfdui3mqo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfdui3mqo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfdui3mqo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpfdui3mqo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for d in s.chars().filter(|c| c.is_digit()) {\n            odd_digits.push(d);\n\
    \        }\n        odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_digits.len(), s.len(), s.len()));\n    }\n\
    \    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpmr58g2lj.rs:16:60\n   |\n16 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \          ^^         ^^   ^^         ^^        ----------------  -------  -------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpmr58g2lj.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpmr58g2lj.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpmr58g2lj.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpmr58g2lj.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmr58g2lj.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmr58g2lj.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpmr58g2lj.rs:13:41\n    |\n13  |         for d\
    \ in s.chars().filter(|c| c.is_digit()) {\n    |                             \
    \            ^^^^^^^^- supplied 0 arguments\n    |                           \
    \              |\n    |                                         expected 1 argument\n\
    \    |\nnote: associated function defined here\n\nerror: aborting due to 8 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c);\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpc8v50moc.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \          ^^         ^^   ^^         ^^        ----------------  -------  -------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc8v50moc.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc8v50moc.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpc8v50moc.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_vec: Vec<String> = vec![];\n        for c in s.chars() {\n       \
    \     if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n\
    \        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n      \
    \  odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\
    \");\n        odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n \
    \       odd_count_vec.push(\"\");\n        odd_count_vec.push(\"\");\n       \
    \ \n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqiffengh.rs:78:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = vec![];\n11 |     for s in lst {\n   |                  - this\
    \ delimiter might not be properly closed...\n...\n71 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n78 | }\n   |   ^\n\nerror: 4 positional\
    \ arguments in format string, but there are 3 arguments\n  --> /tmp/tmpqiffengh.rs:18:64\n\
    \   |\n18 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpqiffengh.rs:75:17\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqiffengh.rs:75:25\n \
    \  |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqiffengh.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqiffengh.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqiffengh.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqiffengh.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0061]:\
    \ this function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpqiffengh.rs:14:18\n\
    \    |\n1"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c);\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpc8v50moc.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \          ^^         ^^   ^^         ^^        ----------------  -------  -------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc8v50moc.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc8v50moc.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpc8v50moc.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count += 1;\n            }\n  \
    \      }\n    }\n    odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp01drfkzb.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp01drfkzb.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp01drfkzb.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp01drfkzb.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp01drfkzb.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp01drfkzb.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp01drfkzb.rs:13:18\n    |\n13  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: the method `into_iter` exists\
    \ for struct `String`, but its trait bounds were not satisfied\n   --> /tmp/tmp01drfkzb.rs:18:27\n\
    \    |\n18  |       odd_count.to_string().into_iter().map(|s| s.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Siz"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c);\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpc8v50moc.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \          ^^         ^^   ^^         ^^        ----------------  -------  -------\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpc8v50moc.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpc8v50moc.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpc8v50moc.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpc8v50moc.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count += 1;\n            }\n  \
    \      }\n    }\n    let mut odd_count_str = String::new();\n    for _ in 0..odd_count\
    \ {\n        odd_count_str.push_str(\"1\");\n    }\n    for _ in 0..(odd_count\
    \ - 1) {\n        odd_count_str.push_str(\"n\");\n    }\n    odd_count_str.push_str(\"\
    1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n\
    \    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"\
    n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n\
    \    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"\
    1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n\
    \    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"\
    n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n\
    \    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"\
    1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n\
    \    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"\
    n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n\
    \    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"\
    1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n\
    \    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"\
    n\");\n    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n\
    \    odd_count_str.push_str(\"1\");\n    odd_count_str.push_str(\"n\");\n    odd_count_str.push_str(\"\
    1\");\n    odd_count_str.push_str(\"n\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0765]: unterminated double quote string\n  --> /tmp/tmpm8it41ts.rs:66:28\n\
    \   |\n66 |       odd_count_str.push_str(\"n\n   |  ____________________________^\n\
    67 | | }\n68 | |\n69 | | fn main() {\n...  |\n73 | |     assert_eq!({left}, {right});\n\
    74 | | }\n   | |__^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = s.to_string();\n        let mut odd_count_str_vec:\
    \ Vec<String> = vec![String::from(\"\")];\n        for c in odd_count_str.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str_vec.push(c.to_string());\n\
    \            } else {\n                odd_count_str_vec.push(c.to_string() +\
    \ &\"n\".to_string());\n            }\n        }\n        let mut odd_count_str_vec_len\
    \ = odd_count_str_vec.len();\n        for i in 0..odd_count_str_vec_len {\n  \
    \          odd_count_str_vec.insert(i, &odd_count_str_vec[i as usize].to_string());\n\
    \        }\n        odd_count_vec.push(odd_count_str_vec.join(\"\"));\n    }\n\
    \    odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp340a3ww1.rs:32:17\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp340a3ww1.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp340a3ww1.rs:33:17\n   |\n33 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp340a3ww1.rs:33:25\n\
    \   |\n33 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp340a3ww1.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp340a3ww1.rs:34:25\n   |\n34 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp340a3ww1.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp340a3ww1.rs:23:41\n\
    \   |\n23 |             odd_count_str_vec.insert(i, &odd_count_str_vec[i as usize].to_string());\n\
    \   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\nhelp: consider removing the\
    \ borrow\n   |\n23 -             odd_count_str_vec.insert(i, &odd_count_str_vec[i\
    \ as usize].to_string());\n23 +             odd_count_str_vec.insert(i, odd_count_str_vec[i\
    \ as usize].to_string());\n   | \n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0425.\nFor "
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp79r_3qwo.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp79r_3qwo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp79r_3qwo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp79r_3qwo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `push` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmp79r_3qwo.rs:18:19\n\
    \   |\n18 |         odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len()));"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_str: String = String::from(\"\");\n        for c in s.chars()\
    \ {\n            if c.is_digit() {\n                odd_count_str += &c.to_string();\n\
    \            } else {\n                odd_count_str += &c.to_string();\n    \
    \        }\n        }\n        odd_count_vec.push(odd_count_str);\n    }\n   \
    \ odd_count_vec\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplgtjpf2d.rs:27:17\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplgtjpf2d.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplgtjpf2d.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplgtjpf2d.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplgtjpf2d.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplgtjpf2d.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmplgtjpf2d.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c.to_digit(10).unwrap());\n            }\n        }\n      \
    \  odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n of\
    \ the {}nput.\", odd_digits.len(), s.len(), s.len()).as_str());\n    }\n    odd_count\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpsrwmf1lo.rs:18:60\n   |\n18 | ...   odd_count.push(format!(\"the\
    \ number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits.len(),\
    \ s.len(), s.len()).as_str());\n   |                                         \
    \                 ^^         ^^   ^^         ^^        ----------------  -------\
    \  -------\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:25:17\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsrwmf1lo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsrwmf1lo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsrwmf1lo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpsrwmf1lo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsrwmf1lo.rs:20:5\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                       ----------- expected `Vec<String>` because of return type\n\
    ...\n20 |     odd_"
  stdout: ''
  timestamp: 1659794823
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = 0;\n    for s in lst {\n        for c in s.chars() {\n     \
    \       if c.is_digit() {\n                odd_count += 1;\n            }\n  \
    \      }\n    }\n    odd_count.to_string().into_iter().map(|x| x.to_string()).collect()\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt9pu31k3.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9pu31k3.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9pu31k3.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9pu31k3.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9pu31k3.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9pu31k3.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpt9pu31k3.rs:13:18\n    |\n13  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: the method `into_iter` exists\
    \ for struct `String`, but its trait bounds were not satisfied\n   --> /tmp/tmpt9pu31k3.rs:18:27\n\
    \    |\n18  |       odd_count.to_string().into_iter().map(|x| x.to_string()).collect()\n\
    \    |                             ^^^^^^^^^\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `String: IntoIterator`\n            `&String: Iterator`\n\
    \            which is required by `&String: IntoIterator`\n            `&mut String:\
    \ Iterator`\n            which is required by `&mut String: IntoIterator`\n  \
    \          `str: Siz"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp79r_3qwo.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp79r_3qwo.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp79r_3qwo.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp79r_3qwo.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp79r_3qwo.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0599]: no method named `push` found\
    \ for type `{integer}` in the current scope\n  --> /tmp/tmp79r_3qwo.rs:18:19\n\
    \   |\n18 |         odd_count.push(format!(\"the number of odd elements {}n the\
    \ str{}ng {}n of the {}nput.\", odd_count, s.len(), s.len()));"
  stdout: ''
  timestamp: 1659822394
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n    for s in lst {\n        let mut odd_count_vec: Vec<String>\
    \ = Vec::new();\n        for c in s.chars() {\n            if c.is_digit() {\n\
    \                odd_count_vec.push(c.to_string());\n            }\n        }\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", odd_count_vec.len(), s.len(), s.len()));\n    }\n    odd_count_vec\n\
    }\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpvr27ruah.rs:19:64\n   |\n19 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count_vec.len(),\
    \ s.len(), s.len()));\n   |                                                  \
    \              ^^         ^^   ^^         ^^        -------------------  -------\
    \  -------\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvr27ruah.rs:26:17\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvr27ruah.rs:26:25\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvr27ruah.rs:27:17\n   |\n27 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvr27ruah.rs:27:25\n\
    \   |\n27 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvr27ruah.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvr27ruah.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpvr27ruah.rs:15:18\n    |\n15  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for elem in lst {\n      \
    \  let mut odd_count = 0;\n        for digit in elem.chars().filter(|c| c.is_digit())\
    \ {\n            odd_count += digit as i32;\n        }\n        odd_count_vec.push(String::from(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, elem.len(),\
    \ elem.len())));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate\
    \ = odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpzwhave4f.rs:16:77\n   |\n16 | ...t!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", odd_count, elem.len(), elem.len())));\n\
    \   |                                   ^^         ^^   ^^         ^^        ---------\
    \  ----------  ----------\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzwhave4f.rs:23:17\n   |\n23 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzwhave4f.rs:23:25\n   |\n23 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzwhave4f.rs:24:17\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzwhave4f.rs:24:25\n   |\n24 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzwhave4f.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzwhave4f.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0061]: this\
    \ function takes 1 argument but 0 arguments were supplied\n   --> /tmp/tmpzwhave4f.rs:13:48\n\
    \    |\n13  |         for digit in elem.chars().filter(|c| c.is_digit()) {\n \
    \   |                                                ^^^^^^^^- supplied 0 arguments\n\
    \    |                                                |\n    |               \
    \                                 expected 1 argument\n    |\nnote: associated\
    \ function defined here\n\nerror: aborting due to 8 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = vec![];\n    for s in lst {\n        let mut\
    \ odd_count_vec: Vec<String> = vec![];\n        for c in s.chars() {\n       \
    \     if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        od\n}\n\nfn main() {\n    let candidate = odd_count;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpxty2fzbp.rs:38:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = vec![];\n11 |     for s in lst {\n   |                  - this\
    \ delimiter might not be properly closed...\n...\n31 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n38 | }\n   |   ^\n\nerror: 4 positional\
    \ arguments in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:18:64\n\
    \   |\n18 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:19:64\n\
    \   |\n19 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:20:64\n\
    \   |\n20 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpxty2fzbp.rs:21:64\n\
    \   |\n21 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_counts = vec![];\n    for s in lst {\n        let mut odd_count = 0;\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_count += 1;\n            }\n        }\n        odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_counts\n}\n\nfn main() {\n    let candidate = odd_count;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3m70ydw8.rs:18:61\n   |\n18 |         odd_counts.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \  ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3m70ydw8.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3m70ydw8.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3m70ydw8.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3m70ydw8.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n        for c in s.chars() {\n\
    \            if c.is_digit() {\n                odd_count_vec.push(c.to_string());\n\
    \            }\n        }\n        odd_count_vec.push(format!(\"the number of\
    \ odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n\
    \        odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng\
    \ {}n of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n        odd_count_vec.push(format!(\"the number of odd elements\
    \ {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n       \
    \ odd_count_vec.push(format!(\"the number of odd elements {}n the str{}ng {}n\
    \ of the {}nput.\", s.len(), s.len(), s.len()));\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", s.len(), s.len(),\
    \ s.len()));\n\n}\n\nfn main() {\n    let candidate = odd_count;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpqr4ehdyy.rs:38:3\n\
    \   |\n9  | fn odd_count(lst: Vec<String>) -> Vec<String> {\n   |            \
    \                                   - unclosed delimiter\n10 |     let mut odd_count_vec:\
    \ Vec<String> = Vec::new();\n11 |     for s in lst {\n   |                  -\
    \ this delimiter might not be properly closed...\n...\n31 | }\n   | - ...as it\
    \ matches this but it has different indentation\n...\n38 | }\n   |   ^\n\nerror:\
    \ 4 positional arguments in format string, but there are 3 arguments\n  --> /tmp/tmpqr4ehdyy.rs:18:64\n\
    \   |\n18 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpqr4ehdyy.rs:19:64\n\
    \   |\n19 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpqr4ehdyy.rs:20:64\n\
    \   |\n20 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp/tmpqr4ehdyy.rs:21:64\n\
    \   |\n21 |         odd_count_vec.push(format!(\"the number of odd elements {}n\
    \ the str{}ng {}n of the {}nput.\", s.len(), s.len(), s.len()));\n   |       \
    \                                                         ^^         ^^   ^^ \
    \        ^^        -------  -------  -------\n\nerror: 4 positional arguments\
    \ in format string, but there are 3 arguments\n  --> /tmp"
  stdout: ''
  timestamp: 1659822395
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count_vec: Vec<String> = Vec::new();\n    for s in lst {\n        let\
    \ mut odd_count = 0;\n        for c in s.chars() {\n            if c.is_digit()\
    \ {\n                odd_count += 1;\n            }\n        }\n        odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n    }\n    odd_count_vec\n}\n\nfn main() {\n    let candidate =\
    \ odd_count;\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmpuomzl1ni.rs:18:64\n   |\n18 |         odd_count_vec.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_count, s.len(),\
    \ s.len()));\n   |                                                           \
    \     ^^         ^^   ^^         ^^        ---------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpuomzl1ni.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpuomzl1ni.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpuomzl1ni.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmpuomzl1ni.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror: aborting due to 8 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747905
- exit_code: 1
  program: "/// Given a list of strings, where each string consists of only digits,\
    \ return a list.\n/// Each element i of the output should be \"the number of odd\
    \ elements in the\n/// string i of the input.\" where all the i's should be replaced\
    \ by the number\n/// of odd digits in the i'th string of the input.\n/// >>> odd_count(vec![String::from(\"\
    1234567\")])\n/// vec![String::from(\"the number of odd elements 4n the str4ng\
    \ 4 of the 4nput.\")]\n/// >>> odd_count(vec![String::from(\"3\"), String::from(\"\
    11111111\")])\n/// vec![String::from(\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\"), String::from(\"the number of odd elements 8n the str8ng\
    \ 8 of the 8nput.\")]\nfn odd_count(lst: Vec<String>) -> Vec<String> {\n    let\
    \ mut odd_count = vec![];\n    for s in lst {\n        let mut odd_digits = vec![];\n\
    \        for c in s.chars() {\n            if c.is_digit() {\n               \
    \ odd_digits.push(c.to_digit(10).unwrap());\n            }\n        }\n      \
    \  odd_count.push(format!(\"the number of odd elements {}n the str{}ng {}n of\
    \ the {}nput.\", odd_digits, s.len(), s.len()));\n    }\n    odd_count\n}\n\n\
    fn main() {\n    let candidate = odd_count;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: 4 positional arguments in format string, but there are 3 arguments\n\
    \  --> /tmp/tmp3vie002r.rs:18:60\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits, s.len(),\
    \ s.len()));\n   |                                                           \
    \ ^^         ^^   ^^         ^^        ----------  -------  -------\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3vie002r.rs:25:17\n  \
    \ |\n25 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3vie002r.rs:25:25\n   |\n25 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3vie002r.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3vie002r.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3vie002r.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3vie002r.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n   --> /tmp/tmp3vie002r.rs:14:18\n    |\n14  |             if\
    \ c.is_digit() {\n    |                  ^^^^^^^^- supplied 0 arguments\n    |\
    \                  |\n    |                  expected 1 argument\n    |\nnote:\
    \ associated function defined here\n\nerror[E0277]: `Vec<u32>` doesn't implement\
    \ `std::fmt::Display`\n  --> /tmp/tmp3vie002r.rs:18:97\n   |\n18 |         odd_count.push(format!(\"\
    the number of odd elements {}n the str{}ng {}n of the {}nput.\", odd_digits, s.len(),\
    \ s.len()));\n   |              "
  stdout: ''
  timestamp: 1659822394
