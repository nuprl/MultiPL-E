name: HumanEval_20_find_closest_elements
language: rs
prompt: "/// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) ->\
  \ (f64, f64) {\n"
tests: "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!(candidate(vec![1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]), (3.9, 4.0));\n    assert_eq!(candidate(vec![1.0, 2.0,\
  \ 5.9, 4.0, 5.0]), (5.0, 5.9));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]), (2.0, 2.2));\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]), (2.0, 2.0));\n    assert_eq!(candidate(vec![1.1, 2.2, 3.1, 4.1, 5.1]),\
  \ (2.2, 3.1));\n}\n"
completions: ["    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest_difference = numbers[0];\n\
    \    let mut largest_difference = numbers[0];\n    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for &n in numbers {\n        if\
    \ n < smallest_difference {\n            smallest_difference = n;\n          \
    \  smallest_number = n;\n        }\n        if n > largest_difference {\n    \
    \        largest_difference = n;\n            largest_number = n;\n        }\n\
    \    }\n    (smallest_number, largest_number)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \n    for &n in numbers {\n        let dist = std::f64::MAX;\n        let mut\
    \ element = n;\n\n        for &e in &numbers {\n            if e < element {\n\
    \                element = e;\n            }\n        }\n\n        if element\
    \ < min_element {\n            min_element = element;\n        }\n\n        if\
    \ element > max_element {\n            max_element = element;\n        }\n\n \
    \       if min_dist > dist {\n            min_dist = dist;\n        }\n    }\n\
    \n    (min_element, max_element)", "    let mut smallest = numbers[0];\n    let\
    \ mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n\
    \    let mut second_smallest_distance = std::f64::MAX;\n    let mut smallest_number\
    \ = numbers[0];\n    let mut second_smallest_number = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        let distance = number.abs() - smallest_number.abs();\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance < second_smallest_distance\
    \ {\n            second_smallest_distance = distance;\n            second_smallest_number\
    \ = number;\n        }\n    }\n    (smallest_number, second_smallest_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut min_dist = std::f64::MAX;\n    let mut min_number =\
    \ std::f64::MAX;\n    for number in numbers {\n        let dist = number.abs()\
    \ - min_dist;\n        if dist < min_dist {\n            min_dist = dist;\n  \
    \          min_number = number;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_difference = numbers[0];\n  \
    \  let mut largest_difference = numbers[0];\n    for n in numbers {\n        let\
    \ difference = n - smallest_difference;\n        if difference < smallest_difference\
    \ {\n            smallest_difference = difference;\n        }\n        if difference\
    \ > largest_difference {\n            largest_difference = difference;\n     \
    \   }\n    }\n    (smallest_difference, largest_difference)", "    let mut min_distance\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n\n    for number in numbers.iter().rev() {\n        let distance\
    \ = number.powf(2) - min_number.powf(2);\n        if distance < min_distance {\n\
    \            min_distance = distance;\n            min_number = number;\n    \
    \    }\n        if distance > max_distance {\n            max_distance = distance;\n\
    \            max_number = number;\n        }\n    }\n\n    (min_number, max_number)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_element;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_element = n;\n\
    \        }\n    }\n    (min_element, min_dist)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        let distance = number.abs() - min_number;\n        if distance <\
    \ min_distance {\n            min_distance = distance;\n            min_number\
    \ = number;\n        }\n        if distance > max_distance {\n            max_distance\
    \ = distance;\n            max_number = number;\n        }\n    }\n    (min_number,\
    \ max_number)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest_number = numbers[0];\n \
    \   let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers.iter().rev() {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for number in numbers {\n        if number < smallest {\n \
    \           smallest = number;\n        }\n        if number > largest {\n   \
    \         largest = number;\n        }\n    }\n    (smallest, largest)", "   \
    \ let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    for n in numbers {\n        let\
    \ dist = n.abs() - min_dist;\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_number = n;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_element = numbers[0];\n    let mut min_element_index = -1;\n    let mut\
    \ max_element = numbers[0];\n    let mut max_element_index = -1;\n    for i in\
    \ 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_element = numbers[i];\n\
    \            min_element_index = i;\n        }\n        let dist = max_element\
    \ - numbers[i];\n        if dist < min_dist {\n            max_element = numbers[i];\n\
    \            max_element_index = i;\n        }\n    }\n    (min_element, min_element_index),\
    \ (max_element, max_element_index)", "    let mut smallest = numbers[0];\n   \
    \ let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for &n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n    }\n \
    \   (min_number, min_dist)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_element = numbers[0];\n    let mut min_element_index = -1;\n    for (i,\
    \ element) in numbers.iter().enumerate() {\n        let dist = std::f64::MAX;\n\
    \        let element = element;\n        let element_index = i;\n        if min_dist\
    \ > dist {\n            min_dist = dist;\n            min_element = element;\n\
    \            min_element_index = element_index;\n        }\n    }\n    (min_element,\
    \ min_element_index)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut second_smallest_distance = std::f64::MAX;\n    let mut smallest_number\
    \ = numbers[0];\n    let mut second_smallest_number = numbers[0];\n    for &n\
    \ in numbers {\n        let distance = n.abs() - smallest_distance;\n        if\
    \ distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = n;\n        }\n        if distance < second_smallest_distance\
    \ {\n            second_smallest_distance = distance;\n            second_smallest_number\
    \ = n;\n        }\n    }\n    (smallest_number, second_smallest_number)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest_number {\n        \
    \    smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \n    for &n in numbers {\n        let dist = n.abs() - min_dist;\n        if\
    \ dist < min_dist {\n            min_dist = dist;\n            min_element = n;\n\
    \        }\n        if dist > max_dist {\n            max_dist = dist;\n     \
    \       max_element = n;\n        }\n    }\n\n    (min_element, max_element)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = Vec::new();\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n    }\n    (min_element,\
    \ min_element_index)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number;\n        }\n        if number > largest {\n  \
    \          largest = number;\n        }\n    }\n    (smallest, largest)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest_difference = std::f64::MAX;\n    let mut largest_difference = std::f64::MIN;\n\
    \    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        let difference = number - smallest_number;\n\
    \        if difference < smallest_difference {\n            smallest_difference\
    \ = difference;\n            smallest_number = number;\n        }\n        if\
    \ difference > largest_difference {\n            largest_difference = difference;\n\
    \            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    let mut smallest_number = std::f64::MAX;\n    let mut largest_number\
    \ = std::f64::MIN;\n    for n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = n;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = n;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let\
    \ mut max_element = numbers[0];\n    for i in 1..numbers.len() {\n        let\
    \ dist = numbers[i] - min_element;\n        if dist < min_dist {\n           \
    \ min_dist = dist;\n            min_element = numbers[i];\n        }\n       \
    \ if dist > max_dist {\n            max_dist = dist;\n            max_element\
    \ = numbers[i];\n        }\n    }\n    (min_element, max_element)", "    let mut\
    \ smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n  \
    \  for &n in numbers {\n        if n < smallest_number {\n            smallest_number\
    \ = n;\n        }\n        if n > largest_number {\n            largest_number\
    \ = n;\n        }\n    }\n    (smallest_number, largest_number)", "    let mut\
    \ min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut\
    \ min_element_index = numbers.len() - 1;\n\n    for &number in &numbers[1..] {\n\
    \        let dist = std::f64::MAX;\n        let index = numbers.iter().position(|&x|\
    \ {\n            dist += f64::abs(x - number);\n            dist < dist\n    \
    \    });\n\n        if index != min_element_index {\n            min_dist = dist;\n\
    \            min_element = number;\n            min_element_index = index;\n \
    \       }\n    }\n\n    (min_element, min_dist)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut min_dist = std::f64::MAX;\n    let mut min_number =\
    \ numbers[0];\n    let mut max_number = numbers[0];\n    for n in numbers {\n\
    \        let dist = std::f64::MAX;\n        for m in numbers {\n            if\
    \ *m > n {\n                continue;\n            }\n            let d = *n -\
    \ m;\n            if d < dist {\n                dist = d;\n            }\n  \
    \      }\n        if dist < min_dist {\n            min_dist = dist;\n       \
    \     min_number = n;\n        }\n        if dist > max_dist {\n            max_dist\
    \ = dist;\n            max_number = n;\n        }\n    }\n    (min_number, max_number)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_element = numbers[0];\n    let mut max_element = numbers[0];\n    for element\
    \ in &numbers[1..] {\n        let dist = std::f64::MAX;\n        for other_element\
    \ in &numbers[1..] {\n            if element < other_element {\n             \
    \   dist = other_element - element;\n            }\n        }\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = element;\n\
    \        }\n        if dist > max_dist {\n            max_dist = dist;\n     \
    \       max_element = element;\n        }\n    }\n    (min_element, max_element)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = Vec::new();\n    let mut max_element = numbers[0];\n\
    \    let mut max_element_index = Vec::new();\n    for i in 1..numbers.len() {\n\
    \        let dist = numbers[i] - min_element;\n        if dist < min_dist {\n\
    \            min_dist = dist;\n            min_element = numbers[i];\n       \
    \     min_element_index = Vec::new();\n        }\n        if numbers[i] > max_element\
    \ {\n            max_element = numbers[i];\n            max_element_index = Vec::new();\n\
    \        }\n        min_element_index.push(i);\n        max_element_index.push(i);\n\
    \    }\n    (min_element, min_element_index), (max_element, max_element_index)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n    for n in\
    \ numbers {\n        let distance = n.abs() - smallest_distance;\n        if distance\
    \ < largest_distance {\n            smallest_distance = distance;\n        }\n\
    \        if distance > largest_distance {\n            largest_distance = distance;\n\
    \        }\n    }\n    (smallest_distance, largest_distance)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_difference = numbers[0];\n    let mut largest_difference =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest_difference {\n\
    \            smallest_difference = n;\n        }\n        if n > largest_difference\
    \ {\n            largest_difference = n;\n        }\n    }\n    (smallest_difference,\
    \ largest_difference)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut min_distance = std::f64::MAX;\n    let mut min_number\
    \ = std::f64::MAX;\n\n    for number in numbers {\n        let distance = number.abs()\
    \ - min_distance;\n        if distance < min_distance {\n            min_distance\
    \ = distance;\n            min_number = number;\n        }\n    }\n\n    (min_number,\
    \ min_distance)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = std::f64::MAX;\n        for &m in\
    \ numbers {\n            if m == n {\n                continue;\n            }\n\
    \            let d = m - n;\n            if d < dist {\n                dist =\
    \ d;\n            }\n        }\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = n;\n        }\n        if dist > max_dist\
    \ {\n            max_dist = dist;\n            max_element = n;\n        }\n \
    \   }\n    (min_element, max_element)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n\
    \    for number in numbers {\n        let dist = std::f64::MAX;\n        for element\
    \ in numbers {\n            if element < number {\n                dist = std::f64::MAX;\n\
    \                break;\n            }\n            dist = std::f64::MAX if element\
    \ < dist {\n                dist = element;\n            }\n        }\n      \
    \  if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = number;\n        }\n        if dist > max_dist {\n            max_dist = dist;\n\
    \            max_element = number;\n        }\n    }\n    (min_element, max_element)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_number = n;\n  \
    \      }\n    }\n    (min_number, min_dist)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for number in numbers {\n     \
    \   if number < smallest_number {\n            smallest_number = number;\n   \
    \     }\n        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut min_element\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = n.abs() - min_element.abs();\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = n;\n        }\n    }\n    (min_element, min_dist)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n    let\
    \ mut min_number = std::f64::MAX;\n    let mut min_element = std::f64::MAX;\n\
    \    for number in numbers {\n        let distance = number.abs() - min_element;\n\
    \        if distance < min_distance {\n            min_distance = distance;\n\
    \            min_number = number;\n        }\n    }\n    (min_number, min_element)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers {\n        if number < smallest_number {\n       \
    \     smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest_distance =\
    \ std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n\n    for number\
    \ in numbers {\n        let distance = number.abs() - smallest_distance;\n   \
    \     if distance < largest_distance {\n            smallest_distance = distance;\n\
    \        }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n        }\n    }\n\n    (smallest_distance, largest_distance)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n    let\
    \ mut min_number = std::f64::MAX;\n    for number in numbers {\n        let distance\
    \ = number.abs() - min_distance;\n        if distance < min_distance {\n     \
    \       min_distance = distance;\n            min_number = number;\n        }\n\
    \    }\n    (min_number, min_distance)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] < smallest_number {\n            smallest_number = numbers[i];\n\
    \        }\n        if numbers[i] > largest_number {\n            largest_number\
    \ = numbers[i];\n        }\n    }\n    (smallest_number, largest_number)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers.iter().rev() {\n        if number < smallest {\n         \
    \   smallest = number;\n        }\n        if number > largest {\n           \
    \ largest = number;\n        }\n    }\n    (smallest, largest)", "    let mut\
    \ smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers\
    \ {\n        if n < smallest {\n            smallest = n;\n        }\n       \
    \ if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    for &n in numbers {\n        let\
    \ dist = n.abs() - min_dist;\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_number = n;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = numbers[0];\n \
    \   let mut max_number = numbers[0];\n    for i in 1..numbers.len() {\n      \
    \  let dist = numbers[i] - min_number;\n        if dist < min_dist {\n       \
    \     min_dist = dist;\n            min_number = numbers[i];\n        }\n    \
    \    if dist > max_dist {\n            max_dist = dist;\n            max_number\
    \ = numbers[i];\n        }\n    }\n    (min_number, max_number)", "    let mut\
    \ min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut\
    \ max_element = numbers[0];\n    for n in numbers {\n        let dist = std::f64::MAX;\n\
    \        for (i, e) in numbers.iter().enumerate() {\n            let d = std::f64::MAX;\n\
    \            if e < n {\n                d = std::f64::MAX;\n            } else\
    \ {\n                d = std::f64::MAX;\n            }\n            if d < dist\
    \ {\n                dist = d;\n                min_element = e;\n           \
    \     max_element = n;\n            }\n        }\n        if dist < min_dist {\n\
    \            min_dist = dist;\n            min_element = n;\n            max_element\
    \ = n;\n        }\n    }\n    (min_element, max_element)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut max_element = numbers[0];\n    for &n in numbers {\n        let dist\
    \ = std::f64::MAX;\n        for &m in numbers {\n            if *m > n {\n   \
    \             continue;\n            }\n            let d = (*n - m).abs();\n\
    \            if d < dist {\n                dist = d\n            }\n        }\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = n;\n        }\n        if dist > max_dist {\n            max_dist = dist;\n\
    \            max_element = n;\n        }\n    }\n    (min_element, max_element)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\n    for\
    \ &n in numbers {\n        let dist = std::f64::MAX;\n        let val = n;\n \
    \       for &v in numbers {\n            if v == val {\n                continue;\n\
    \            }\n            let d = (v - val).abs();\n            if d < dist\
    \ {\n                dist = d\n            }\n        }\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_val = val;\n        }\n   \
    \     if dist > max_dist {\n            max_dist = dist;\n            max_val\
    \ = val;\n        }\n    }\n    (min_val, max_val)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_difference\
    \ = numbers[0];\n    let mut largest_difference = numbers[0];\n    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for n in numbers\
    \ {\n        let difference = n - smallest_number;\n        if difference < smallest_difference\
    \ {\n            smallest_difference = difference;\n            smallest_number\
    \ = n;\n        }\n        if difference > largest_difference {\n            largest_difference\
    \ = difference;\n            largest_number = n;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest_distance = std::f64::MAX;\n    let mut\
    \ second_smallest_distance = std::f64::MAX;\n    let mut smallest_number = numbers[0];\n\
    \    let mut second_smallest_number = numbers[0];\n    for &n in numbers {\n \
    \       let distance = n.abs() - smallest_distance;\n        if distance < smallest_distance\
    \ {\n            smallest_distance = distance;\n            smallest_number =\
    \ n;\n        }\n        if distance < second_smallest_distance {\n          \
    \  second_smallest_distance = distance;\n            second_smallest_number =\
    \ n;\n        }\n    }\n    (smallest_number, second_smallest_number)", "    let\
    \ mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n   \
    \ for number in numbers {\n        let dist = number.abs() - min_dist;\n     \
    \   if dist < min_dist {\n            min_dist = dist;\n            min_number\
    \ = number;\n        }\n    }\n    (min_number, min_dist)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n\n    for number in numbers {\n        if\
    \ number < smallest_number {\n            smallest_number = number;\n        }\n\
    \        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_difference = numbers[0];\n    let mut largest_difference =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest_difference {\n\
    \            smallest_difference = n;\n        }\n        if n > largest_difference\
    \ {\n            largest_difference = n;\n        }\n    }\n    (smallest_difference,\
    \ largest_difference)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_number = n;\n  \
    \      }\n    }\n    (min_number, min_dist)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n\n    for number in numbers {\n   \
    \     if number < smallest_number {\n            smallest_number = number;\n \
    \       }\n\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut min_dist = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let\
    \ mut min_idx = 1;\n\n    for &n in &numbers[1..] {\n        let dist = n.f64()\
    \ - min_val;\n        if dist < min_dist {\n            min_dist = dist;\n   \
    \         min_val = n;\n            min_idx = 1;\n        } else if dist == min_dist\
    \ {\n            min_idx++;\n        }\n    }\n\n    (min_val, min_idx)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest_number = numbers[0];\n \
    \   let mut largest_number = numbers[0];\n    for number in numbers {\n      \
    \  if number < smallest_number {\n            smallest_number = number;\n    \
    \    }\n        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_number;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for &n in numbers {\n        let dist\
    \ = std::f64::MAX;\n        let index = -1;\n        for &i in &numbers {\n  \
    \          let d = f64::powf(f64::abs(n - i), 2.0);\n            if d < dist {\n\
    \                dist = d\n            }\n        }\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_element = n;\n            min_element_index\
    \ = index;\n        }\n    }\n    (min_element, min_element_index)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest_number {\n        \
    \    smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest_distance =\
    \ std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n    for number\
    \ in numbers {\n        let distance = number.abs() - smallest_distance;\n   \
    \     if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \        }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n        }\n    }\n    (smallest_distance, largest_distance)", " \
    \   let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers {\n        if number < smallest_number {\n       \
    \     smallest_number = number;\n        }\n\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut min_dist = std::f64::MAX;\n    let mut min_number\
    \ = numbers[0];\n    let mut max_number = numbers[0];\n\n    for &n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n        if\
    \ dist > max_dist {\n            max_dist = dist;\n            max_number = n;\n\
    \        }\n    }\n\n    (min_number, max_number)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = -1;\n\
    \    for (i, element) in numbers.iter().enumerate() {\n        let dist = std::f64::MAX;\n\
    \        for j in 0..i {\n            let dist = std::f64::MAX;\n            if\
    \ element < numbers[j] {\n                dist = element - numbers[j];\n     \
    \       }\n            if dist < dist {\n                dist = dist;\n      \
    \      }\n        }\n        if dist < min_dist {\n            min_dist = dist;\n\
    \            min_element = element;\n            min_element_index = i;\n    \
    \    }\n    }\n    (min_element, min_element_index)", "    let mut smallest =\
    \ numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n  \
    \      if n < smallest {\n            smallest = n;\n        }\n        if n >\
    \ largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers.iter().rev() {\n        if number < smallest {\n         \
    \   smallest = number;\n        }\n        if number > largest {\n           \
    \ largest = number;\n        }\n    }\n    (smallest, largest)", "    let mut\
    \ smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers\
    \ {\n        if n < smallest {\n            smallest = n;\n        }\n       \
    \ if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for number in numbers {\n        if number < smallest\
    \ {\n            smallest = number;\n        }\n        if number > largest {\n\
    \            largest = number;\n        }\n    }\n    (smallest, largest)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest {\n\
    \            smallest = number;\n        }\n        if number > largest {\n  \
    \          largest = number;\n        }\n    }\n    (smallest, largest)", "  \
    \  let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    let mut smallest_number = std::f64::MAX;\n    let mut largest_number\
    \ = std::f64::MIN;\n\n    for number in numbers {\n        let distance = number.abs()\
    \ - smallest_distance;\n        if distance < smallest_distance {\n          \
    \  smallest_distance = distance;\n            smallest_number = number;\n    \
    \    }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    let mut max_element = numbers[0];\n    for &n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_element = n;\n        }\n       \
    \ if dist > max_dist {\n            max_dist = dist;\n            max_element\
    \ = n;\n        }\n    }\n    (min_element, max_element)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n  \
    \  let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    let mut min_number = std::f64",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_element = numbers[0];\n    let mut min_element_index = Vec::new();\n   \
    \ let mut max_element = numbers[0];\n    let mut max_element_index = Vec::new();\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = Vec::new();\n        }\n    \
    \    if dist > max_dist {\n            max_dist = dist;\n            max_element\
    \ = numbers[i];\n            max_element_index = Vec::new();\n        }\n    \
    \    min_element_index.push(i);\n    }\n    (min_element, min_element_index),\
    \ (max_element, max_element_index)", "    let mut smallest = numbers[0];\n   \
    \ let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut closest_numbers = Vec::new();\n    let mut closest_number\
    \ = std::f64::MAX;\n    for number in numbers {\n        let distance = number.abs()\
    \ - closest_number;\n        if distance < smallest_distance {\n            smallest_distance\
    \ = distance;\n            closest_numbers = vec![number];\n            closest_number\
    \ = number;\n        } else {\n            closest_numbers.push(number);\n   \
    \     }\n    }\n    (closest_number, closest_numbers)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for i in 1..numbers.len() {\n      \
    \  let dist = numbers[i] - min_element;\n        if dist < min_dist {\n      \
    \      min_dist = dist;\n            min_element = numbers[i];\n            min_element_index\
    \ = i;\n        }\n    }\n    (min_element, min_element_index)", "    let mut\
    \ smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n  \
    \  for number in numbers {\n        if number < smallest_number {\n          \
    \  smallest_number = number;\n        }\n        if number > largest_number {\n\
    \            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    for n in numbers {\n        let\
    \ dist = n.abs() - min_dist;\n        if dist < std::f64::EPSILON {\n        \
    \    continue;\n        }\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_number = n;\n        }\n    }\n    (min_number, min_dist)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut max_element = numbers[0];\n\n    for n in numbers {\n        let\
    \ dist = n.abs() - min_dist;\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = n;\n        }\n        if dist > max_dist\
    \ {\n            max_dist = dist;\n            max_element = n;\n        }\n \
    \   }\n\n    (min_element, max_element)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for number in numbers {\n     \
    \   if number < smallest_number {\n            smallest_number = number;\n   \
    \     }\n        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for &n in numbers\
    \ {\n        if n < smallest_number {\n            smallest_number = n;\n    \
    \    }\n        if n > largest_number {\n            largest_number = n;\n   \
    \     }\n    }\n\n    (smallest_number, largest_number)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut min_element_index\
    \ = -1;\n    for (i, element) in numbers.iter().enumerate() {\n        let dist\
    \ = std::f64::MAX;\n        if element < min_element {\n            min_element\
    \ = element;\n            min_element_index = i;\n        }\n        if min_dist\
    \ > dist {\n            min_dist = dist;\n        }\n    }\n    (min_element,\
    \ numbers[min_element_index])", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for number in numbers.iter().rev() {\n        if\
    \ number < smallest {\n            smallest = number;\n        }\n        if number\
    \ > largest {\n            largest = number;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest_distance = std::f64::MAX;\n    let mut smallest_number\
    \ = std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n    let mut\
    \ largest_number = std::f64::MIN;\n\n    for number in numbers {\n        let\
    \ distance = number.abs() - smallest_number;\n        if distance < smallest_distance\
    \ {\n            smallest_distance = distance;\n            smallest_number =\
    \ number;\n        }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = -1;\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n    }\n    (min_element,\
    \ min_element_index)", "    let mut smallest_number = numbers[0];\n    let mut\
    \ largest_number = numbers[0];\n\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n\n  \
    \      if number > largest_number {\n            largest_number = number;\n  \
    \      }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = numbers[0];\n \
    \   let mut max_number = numbers[0];\n    for number in numbers.iter().rev() {\n\
    \        let dist = number.powf(2) - min_number.powf(2);\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = number;\n        }\n\
    \        if dist > max_dist {\n            max_dist = dist;\n            max_number\
    \ = number;\n        }\n    }\n    (min_number, max_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for &n in numbers {\n        let distance = n.abs() - min_distance;\n   \
    \     if distance < min_distance {\n            min_distance = distance;\n   \
    \         min_number = n;\n        }\n    }\n    (min_number, min_distance)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut smallest_number = std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n\
    \    let mut largest_number = std::f64::MIN;\n\n    for number in numbers {\n\
    \        let distance = number.abs() - smallest_number;\n        if distance <\
    \ smallest_distance {\n            smallest_distance = distance;\n           \
    \ smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)"]
stop_tokens:
- "\n}"
