name: HumanEval_20_find_closest_elements
language: rs
prompt: "/// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) ->\
  \ (f64, f64) {\n"
tests: "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers {\n        if number < smallest_number {\n       \
    \     smallest_number = number;\n        }\n\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    let mut min_element_index = -1;\n    let mut max_element\
    \ = numbers[0];\n    let mut max_element_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        let dist = std::f64::MAX;\n        let element = numbers[i];\n  \
    \      for j in 0..numbers.len() {\n            let dist = std::f64::MAX;\n  \
    \          if i != j {\n                let distance = element.distance_to(numbers[j]);\n\
    \                if distance < dist {\n                    dist = distance;\n\
    \                }\n            }\n        }\n        if dist < min_dist {\n \
    \           min_dist = dist;\n            min_element = element;\n           \
    \ min_element_index = i;\n        }\n        if dist > max_dist {\n          \
    \  max_dist = dist;\n            max_element = element;\n            max_element_index\
    \ = i;\n        }\n    }\n    (min_element, min_element_index), (max_element,\
    \ max_element_index)", "    let mut smallest_number = numbers[0];\n    let mut\
    \ largest_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n    (smallest_number, largest_number)", "    let mut smallest =\
    \ numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n   \
    \     if n < smallest {\n            smallest = n;\n        }\n        if n >\
    \ largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_difference = numbers[0];\n  \
    \  let mut largest_difference = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        let difference = number - smallest_difference;\n        if difference\
    \ < smallest_difference {\n            smallest_difference = difference;\n   \
    \     }\n        if difference > largest_difference {\n            largest_difference\
    \ = difference;\n        }\n    }\n    (smallest_difference, largest_difference)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for (i, element) in numbers.iter().enumerate()\
    \ {\n        let dist = std::f64::MAX;\n        if element < min_element {\n \
    \           min_element = element;\n            min_element_index = i;\n     \
    \   }\n        if element < min_dist {\n            dist = element - min_element;\n\
    \        }\n        if dist < min_dist {\n            min_dist = dist;\n     \
    \       min_element = element;\n            min_element_index = i;\n        }\n\
    \    }\n    (min_element, numbers[min_element_index])", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    for n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < largest_distance {\n            smallest_distance = distance;\n\
    \        } else {\n            largest_distance = distance;\n        }\n    }\n\
    \    (smallest_distance, numbers[numbers.iter().position(|n| n.abs() == smallest_distance).unwrap()])",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut closest_number = std::f64::MAX;\n    for number in numbers {\n   \
    \     let distance = number.abs() - closest_number;\n        if distance < smallest_distance\
    \ {\n            smallest_distance = distance;\n            closest_number = number;\n\
    \        }\n    }\n    (closest_number, smallest_distance)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut min_element_index\
    \ = -1;\n    for &n in numbers {\n        let dist = n.abs() - min_dist;\n   \
    \     if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = n;\n            min_element_index = numbers.iter().position(|&n| n == n);\n\
    \        }\n    }\n    (min_element, min_element_index)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n    for number in numbers {\n      \
    \  let dist = std::f64::MAX;\n        for other_number in numbers {\n        \
    \    if number < other_number {\n                continue;\n            }\n  \
    \          let distance = std::f64::abs(number - other_number);\n            if\
    \ distance < dist {\n                dist = distance;\n            }\n       \
    \ }\n        if dist < min_dist {\n            min_dist = dist;\n            min_number\
    \ = number;\n        }\n    }\n    (min_number, min_dist)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for number in numbers {\n        let dist = number.abs() - min_dist;\n  \
    \      if dist < min_dist {\n            min_dist = dist;\n            min_number\
    \ = number;\n        }\n    }\n    (min_number, min_dist)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = numbers[0];\n    let mut max_number = numbers[0];\n\n    for &n\
    \ in numbers {\n        let dist = n.abs();\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n        if\
    \ dist > max_dist {\n            max_dist = dist;\n            max_number = n;\n\
    \        }\n    }\n\n    (min_number, max_number)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut second_smallest_distance = std::f64::MAX;\n  \
    \  let mut smallest_number = numbers[0];\n    let mut second_smallest_number =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest_number {\n   \
    \         smallest_number = n;\n        }\n        if n > second_smallest_number\
    \ {\n            second_smallest_number = n;\n        }\n        if n < smallest_distance\
    \ {\n            smallest_distance = n;\n        }\n        if n > second_smallest_distance\
    \ {\n            second_smallest_distance = n;\n        }\n    }\n    (smallest_number,\
    \ second_smallest_number)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut largest_distance = std::f64::MIN;\n    let mut\
    \ smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n  \
    \  for &n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = n;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = n;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut second_smallest_distance = std::f64::MAX;\n  \
    \  let mut smallest_number = numbers[0];\n    let mut second_smallest_number =\
    \ numbers[0];\n    for number in numbers {\n        let distance = number.abs()\
    \ - smallest_distance;\n        if distance < smallest_distance {\n          \
    \  smallest_distance = distance;\n            smallest_number = number;\n    \
    \    }\n        if distance < second_smallest_distance {\n            second_smallest_distance\
    \ = distance;\n            second_smallest_number = number;\n        }\n    }\n\
    \    (smallest_number, second_smallest_number)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for number in\
    \ numbers.iter().rev() {\n        if number < smallest_number {\n            smallest_number\
    \ = number;\n        }\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_number = n;\n  \
    \      }\n    }\n    (min_number, min_dist)", "    let mut min_distance = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n\n    for n in numbers {\n        let\
    \ distance = n.abs() - min_distance;\n        if distance < min_distance {\n \
    \           min_distance = distance;\n            min_number = n;\n        }\n\
    \    }\n\n    (min_number, min_distance)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for number in\
    \ numbers.iter().rev() {\n        if number < smallest_number {\n            smallest_number\
    \ = number;\n        }\n\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n\
    \ in numbers {\n        if n < smallest {\n            smallest = n;\n       \
    \ }\n        if n > largest {\n            largest = n;\n        }\n    }\n  \
    \  (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n   \
    \ let mut second_smallest_distance = std::f64::MAX;\n    let mut smallest_number\
    \ = numbers[0];\n    let mut second_smallest_number = numbers[0];\n    for &n\
    \ in numbers {\n        let distance = n.abs() - smallest_number.abs();\n    \
    \    if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = n;\n        }\n        if distance < second_smallest_distance\
    \ {\n            second_smallest_distance = distance;\n            second_smallest_number\
    \ = n;\n        }\n    }\n    (smallest_number, second_smallest_number)", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = std::f64::MAX;\n    for (i, n) in numbers.iter().enumerate() {\n\
    \        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n      \
    \      min_dist = dist;\n            min_number = i;\n        }\n    }\n    (numbers[min_number],\
    \ numbers[min_number + 1])", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for number in\
    \ numbers.iter().rev() {\n        if number < smallest_number {\n            smallest_number\
    \ = number;\n        }\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n\
    \ in numbers {\n        if n < smallest {\n            smallest = n;\n       \
    \ }\n        if n > largest {\n            largest = n;\n        }\n    }\n  \
    \  (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let mut\
    \ largest_number = numbers[0];\n\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n\n    for number in numbers.iter().rev() {\n\
    \        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n\
    \            smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_difference\
    \ = numbers[0] - numbers[1];\n    let mut smallest_difference_index = -1;\n  \
    \  let mut largest_difference = numbers[0] - numbers[1];\n    let mut largest_difference_index\
    \ = -1;\n\n    for i in 1..numbers.len() {\n        let difference = numbers[i]\
    \ - numbers[i - 1];\n        if difference < smallest_difference {\n         \
    \   smallest_difference = difference;\n            smallest_difference_index =\
    \ i;\n        }\n        if difference > largest_difference {\n            largest_difference\
    \ = difference;\n            largest_difference_index = i;\n        }\n    }\n\
    \n    (numbers[smallest_difference_index], numbers[largest_difference_index])",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element = numbers[0];\n    for number in numbers {\n        let\
    \ dist = std::f64::MAX;\n        for element in numbers {\n            if element\
    \ < number {\n                dist = std::f64::MAX;\n            } else {\n  \
    \              dist = std::f64::MAX;\n            }\n            if dist < dist\
    \ {\n                dist = std::f64::MAX;\n            }\n        }\n       \
    \ if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = number;\n        }\n    }\n    (min_element, min_dist)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = std::f64::MAX;\n    for n in numbers {\n        let dist = n.abs()\
    \ - min_dist;\n        if dist < min_dist {\n            min_dist = dist;\n  \
    \          min_number = n;\n        }\n    }\n    (min_number, min_dist)", " \
    \   let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for &n in numbers {\n        let dist\
    \ = std::f64::MAX;\n        let index = -1;\n        for (i, &e) in numbers.iter().enumerate()\
    \ {\n            let d = e - n;\n            if d < dist {\n                dist\
    \ = d;\n                index = i;\n            }\n        }\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = n;\n \
    \           min_element_index = index;\n        }\n    }\n    (min_element, min_element_index)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number;\n        }\n        if number > largest {\n            largest = number;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let\
    \ mut max_element = numbers[0];\n    for &n in numbers {\n        let dist = std::f64::MAX;\n\
    \        for &m in numbers {\n            if m == n {\n                continue;\n\
    \            }\n            let d = n - m;\n            if d < dist {\n      \
    \          dist = d;\n            }\n        }\n        if dist < min_dist {\n\
    \            min_dist = dist;\n            min_element = n;\n        }\n     \
    \   if dist > max_dist {\n            max_dist = dist;\n            max_element\
    \ = n;\n        }\n    }\n    (min_element, max_element)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_number = numbers[0];\n\
    \    let mut max_number = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_distance;\n        if distance < min_distance {\n          \
    \  min_distance = distance;\n            min_number = n;\n        }\n        if\
    \ distance > max_distance {\n            max_distance = distance;\n          \
    \  max_number = n;\n        }\n    }\n    (min_number, max_number)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for number in numbers {\n     \
    \   if number < smallest_number {\n            smallest_number = number;\n   \
    \     }\n        if number > largest_number {\n            largest_number = number;\n\
    \        }\n    }\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for &n in numbers {\n        if n < smallest_number {\n            smallest_number\
    \ = n;\n        }\n        if n > largest_number {\n            largest_number\
    \ = n;\n        }\n    }\n    (smallest_number, largest_number)", "    let mut\
    \ smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers\
    \ {\n        if n < smallest {\n            smallest = n;\n        }\n       \
    \ if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element =\
    \ numbers[0];\n    let mut min_element_index = -1;\n    for (i, element) in numbers.iter().enumerate()\
    \ {\n        let dist = std::f64::MAX;\n        if min_dist > dist {\n       \
    \     min_dist = dist;\n            min_element = element;\n            min_element_index\
    \ = i;\n        }\n    }\n    (min_element, numbers[min_element_index])", "  \
    \  let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_distance = std::f64::MAX;\n    let\
    \ mut min_number = std::f64::MAX;\n    for number in numbers {\n        let distance\
    \ = number.abs() - min_number;\n        if distance < min_distance {\n       \
    \     min_distance = distance;\n            min_number = number;\n        }\n\
    \    }\n    (min_number, min_number)", "    let mut smallest = numbers[0];\n \
    \   let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n    }\n \
    \   (min_number, min_dist)", "    let mut smallest_distance = std::f64::MAX;\n\
    \    let mut second_smallest_distance = std::f64::MAX;\n    for number in numbers\
    \ {\n        let distance = numbers.iter().map(|x| x.powf(2.0)).sum();\n     \
    \   if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \        }\n        if distance < second_smallest_distance {\n            second_smallest_distance\
    \ = distance;\n        }\n    }\n    (smallest_distance, second_smallest_distance)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_number = numbers[0];\n    let\
    \ mut largest_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n    (smallest_number, largest_number)", "    let mut min_dist =\
    \ std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\n    for n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n    }\n\n\
    \    (min_number, min_dist)", "    let mut min_dist = std::f64::MAX;\n    let\
    \ mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n    for\
    \ &n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = n;\n        }\n  \
    \      if dist > max_dist {\n            max_dist = dist;\n            max_number\
    \ = n;\n        }\n    }\n    (min_number, max_number)", "    let mut min_distance\
    \ = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for number in\
    \ numbers {\n        let distance = number.abs() - min_distance;\n        if distance\
    \ < min_distance {\n            min_distance = distance;\n            min_number\
    \ = number;\n        }\n    }\n    (min_number, min_distance)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n\n    for number in\
    \ numbers.iter().rev() {\n        if number < smallest_number {\n            smallest_number\
    \ = number;\n        }\n        if number > largest_number {\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n\
    \ in numbers {\n        if n < smallest {\n            smallest = n;\n       \
    \ }\n        if n > largest {\n            largest = n;\n        }\n    }\n  \
    \  (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    let mut min_element = numbers[0];\n    for &n in numbers\
    \ {\n        let dist = std::f64::MAX;\n        for &m in numbers {\n        \
    \    if *m > n {\n                continue;\n            }\n            let dist\
    \ = std::f64::MAX;\n            if *m < n {\n                dist = *m - *n;\n\
    \            }\n            if dist < dist {\n                dist = *m - *n;\n\
    \            }\n        }\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = n;\n        }\n    }\n    (min_element, min_dist)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest {\n            smallest\
    \ = number;\n        }\n        if number > largest {\n            largest = number;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ number in numbers {\n        if number < smallest {\n            smallest =\
    \ number;\n        }\n        if number > largest {\n            largest = number;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_difference\
    \ = std::f64::MAX;\n    let mut largest_difference = std::f64::MIN;\n    let mut\
    \ smallest_number = std::f64::MAX;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let difference = number - smallest_number;\n\
    \        if difference < smallest_difference {\n            smallest_difference\
    \ = difference;\n            smallest_number = number;\n        }\n\n        let\
    \ difference = number - largest_number;\n        if difference > largest_difference\
    \ {\n            largest_difference = difference;\n            largest_number\
    \ = number;\n        }\n    }\n\n    (smallest_number, largest_number)", "   \
    \ let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n\
    \ in numbers {\n        if n < smallest {\n            smallest = n;\n       \
    \ }\n        if n > largest {\n            largest = n;\n        }\n    }\n  \
    \  (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest {\n            smallest = number;\n        }\n        if number >\
    \ largest {\n            largest = number;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    for &n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < largest_distance {\n            smallest_distance = distance;\n\
    \        }\n        if distance > largest_distance {\n            largest_distance\
    \ = distance;\n        }\n    }\n    (smallest_distance, largest_distance)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = numbers[0];\n    let mut max_number\
    \ = numbers[0];\n    for n in numbers {\n        let dist = std::f64::MAX;\n \
    \       if n >= min_number {\n            for m in numbers {\n               \
    \ if m > n {\n                    continue;\n                }\n             \
    \   let d = n - m;\n                if d < dist {\n                    dist =\
    \ d;\n                }\n            }\n        }\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_number = n;\n        }\n  \
    \      if n > max_number {\n            max_number = n;\n        }\n    }\n  \
    \  (min_number, max_number)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_distance = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut max_element = numbers[0];\n    for &n in numbers {\n        let distance\
    \ = n.abs() - min_distance;\n        if distance < min_distance {\n          \
    \  min_distance = distance;\n            min_element = n;\n        }\n       \
    \ if distance > max_distance {\n            max_distance = distance;\n       \
    \     max_element = n;\n        }\n    }\n    (min_element, max_element)", " \
    \   let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest_number {\n        \
    \    smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n    for &n in numbers\
    \ {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n  \
    \          min_dist = dist;\n            min_number = n;\n        }\n    }\n \
    \   (min_number, min_dist)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_element = numbers[0];\n    let mut max_element = numbers[0];\n    for i\
    \ in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n      \
    \  if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n        }\n        if dist > max_dist {\n            max_dist\
    \ = dist;\n            max_element = numbers[i];\n        }\n    }\n    (min_element,\
    \ max_element)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    let mut min_element_index = Vec::new();\n    let mut max_element\
    \ = numbers[0];\n    let mut max_element_index = Vec::new();\n    for i in 1..numbers.len()\
    \ {\n        let dist = numbers[i] - min_element;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_element = numbers[i];\n   \
    \         min_element_index = Vec::new();\n        }\n        if numbers[i] >\
    \ max_element {\n            max_element = numbers[i];\n            max_element_index\
    \ = Vec::new();\n        }\n        min_element_index.push(i);\n        max_element_index.push(i);\n\
    \    }\n    (min_element, min_element_index), (max_element, max_element_index)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \    for number in numbers {\n        if number < smallest_number {\n        \
    \    smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_val = numbers[0];\n    let mut max_val = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs();\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_val = n;\n        }\n     \
    \   if dist > max_dist {\n            max_dist = dist;\n            max_val =\
    \ n;\n        }\n    }\n    (min_val, max_val)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut min_element_index\
    \ = -1;\n    let mut max_element = numbers[0];\n    let mut max_element_index\
    \ = -1;\n\n    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n        let dist\
    \ = max_element - numbers[i];\n        if dist < min_dist {\n            max_element\
    \ = numbers[i];\n            max_element_index = i;\n        }\n    }\n\n    (min_element,\
    \ numbers[min_element_index])", "    let mut smallest_number = numbers[0];\n \
    \   let mut largest_number = numbers[0];\n    for &n in numbers {\n        if\
    \ n < smallest_number {\n            smallest_number = n;\n        }\n       \
    \ if n > largest_number {\n            largest_number = n;\n        }\n    }\n\
    \    (smallest_number, largest_number)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let mut\
    \ min_number = std::f64::MAX;\n    for n in numbers {\n        let dist = n.abs()\
    \ - min_dist;\n        if dist < min_dist {\n            min_dist = dist;\n  \
    \          min_number = n;\n        }\n    }\n    (min_number, min_dist)", " \
    \   let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element = numbers[0];\n\
    \    for &n in numbers {\n        let dist = n.abs() - min_element.abs();\n  \
    \      if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = n;\n        }\n    }\n    (min_element, min_dist)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut max_element\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = std::f64::MAX;\n\
    \        for &m in numbers {\n            if *n < m {\n                dist =\
    \ std::f64::MAX;\n            } else {\n                dist = std::f64::MAX;\n\
    \            }\n        }\n        if dist < min_dist {\n            min_dist\
    \ = dist;\n            min_element = n;\n        }\n        if dist > max_dist\
    \ {\n            max_dist = dist;\n            max_element = n;\n        }\n \
    \   }\n    (min_element, max_element)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_idx = 1;\n   \
    \ let mut max_element = numbers[0];\n    let mut max_element_idx = 1;\n\n    for\
    \ &n in numbers {\n        let dist = std::f64::MAX;\n        let element = &n;\n\
    \        let element_idx = 1;\n        for &idx in &mut [min_element, max_element]\
    \ {\n            let dist = std::f64::MAX;\n            if *idx < element {\n\
    \                let dist = *idx as f64 - element as f64;\n                *idx\
    \ = element;\n            }\n            if *idx > element {\n               \
    \ let dist = element as f64 - *idx as f64;\n                *idx = element;\n\
    \            }\n            if dist < dist {\n                min_dist = dist;\n\
    \                min_element = element;\n                min_element_idx = element_idx;\n\
    \            }\n        }\n        let element = &n;\n        let element_idx\
    \ = 1;\n        for &idx in &mut [min_element, max_element] {\n            let\
    \ dist = std::f64::MAX;\n            if *idx < element {\n                let\
    \ dist = *idx as f64 - element as f64;\n                *idx = element;\n    \
    \        }\n            if *idx > element {\n                let dist = element\
    \ as f64 - *idx as f64;\n                *idx = element;\n            }\n    \
    \        if dist > dist {\n                max_dist = dist;\n                max_element\
    \ = element;\n                max_element_idx = element_idx;\n            }\n\
    \        }\n    }\n    (min_element, min_element_idx)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest {\n            smallest = number;\n        }\n\
    \        if number > largest {\n            largest = number;\n        }\n   \
    \ }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n    let\
    \ mut min_element = numbers[0];\n    let mut max_element = numbers[0];\n    for\
    \ &n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist < min_dist\
    \ {\n            min_dist = dist;\n            min_element = n;\n        }\n \
    \       if dist > max_dist {\n            max_dist = dist;\n            max_element\
    \ = n;\n        }\n    }\n    (min_element, max_element)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for number in numbers.iter().rev() {\n\
    \        if number < smallest {\n            smallest = number;\n        }\n \
    \       if number > largest {\n            largest = number;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_difference = numbers[0];\n  \
    \  let mut largest_difference = numbers[0];\n    for n in numbers {\n        if\
    \ n < smallest_difference {\n            smallest_difference = n;\n        }\n\
    \        if n > largest_difference {\n            largest_difference = n;\n  \
    \      }\n    }\n    (smallest_difference, largest_difference)", "    let mut\
    \ smallest = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers\
    \ {\n        if n < smallest {\n            smallest = n;\n        }\n       \
    \ if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n\
    \    for n in numbers {\n        if n < smallest {\n            smallest = n;\n\
    \        }\n        if n > largest {\n            largest = n;\n        }\n  \
    \  }\n    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n\
    \    let mut largest_distance = std::f64::MIN;\n    let mut smallest_number =\
    \ numbers[0];\n    let mut largest_number = numbers[0];\n    for &n in numbers\
    \ {\n        let distance = n.abs() - smallest_distance;\n        if distance\
    \ < smallest_distance {\n            smallest_distance = distance;\n         \
    \   smallest_number = n;\n        }\n        if distance > largest_distance {\n\
    \            largest_distance = distance;\n            largest_number = n;\n \
    \       }\n    }\n    (smallest_number, largest_number)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    let mut max_element\
    \ = numbers[0];\n    for &n in numbers {\n        let dist = n.abs() - min_dist;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = n;\n        }\n        if dist > max_dist {\n            max_dist = dist;\n\
    \            max_element = n;\n        }\n    }\n    (min_element, max_element)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for &n in numbers {\n        if n < smallest {\n        \
    \    smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_element = numbers[0];\n    let mut min_element_index = -1;\n\
    \    for i in 1..numbers.len() {\n        let dist = numbers[i] - min_element;\n\
    \        if dist < min_dist {\n            min_dist = dist;\n            min_element\
    \ = numbers[i];\n            min_element_index = i;\n        }\n    }\n    (min_element,\
    \ min_element_index)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_number = std::f64::MAX;\n\
    \    for n in numbers {\n        let dist = n.abs() - min_dist;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_number = n;\n  \
    \      }\n    }\n    (min_number, min_dist)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for &n in numbers {\n        if n < smallest_number {\n            smallest_number\
    \ = n;\n        }\n        if n > largest_number {\n            largest_number\
    \ = n;\n        }\n    }\n\n    (smallest_number, largest_number)", "    let mut\
    \ smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n  \
    \  for number in numbers {\n        if number < smallest_number {\n          \
    \  smallest_number = number;\n        }\n        if number > largest_number {\n\
    \            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for &n in numbers {\n        if n < smallest {\n          \
    \  smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut min_dist\
    \ = std::f64::MAX;\n    let mut min_element = numbers[0];\n    for &n in numbers\
    \ {\n        let dist = std::f64::MAX;\n        for &m in numbers {\n        \
    \    if *n - *m < *min_dist {\n                dist = *n - *m;\n             \
    \   min_dist = (*n, *m);\n            }\n        }\n        if *min_dist < dist\
    \ {\n            min_dist = dist;\n            min_element = n;\n        }\n \
    \   }\n    (min_element, min_dist)", "    let mut smallest_number = numbers[0];\n\
    \    let mut largest_number = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n    for\
    \ &n in numbers {\n        let dist = n.abs() - min_element;\n        if dist\
    \ < min_dist {\n            min_dist = dist;\n            min_element = n;\n \
    \       }\n    }\n    (min_element, min_dist)", "    let mut min_dist = std::f64::MAX;\n\
    \    let mut min_number = std::f64::MAX;\n\n    for number in numbers {\n    \
    \    let dist = number.abs() - min_dist;\n        if dist < min_dist {\n     \
    \       min_dist = dist;\n            min_number = number;\n        }\n    }\n\
    \n    (min_number, min_dist)", "    let mut smallest = numbers[0];\n    let mut\
    \ largest = numbers[0];\n    for n in numbers {\n        if n < smallest {\n \
    \           smallest = n;\n        }\n        if n > largest {\n            largest\
    \ = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest_number\
    \ = numbers[0];\n    let mut largest_number = numbers[0];\n    for number in numbers\
    \ {\n        if number < smallest_number {\n            smallest_number = number;\n\
    \        }\n        if number > largest_number {\n            largest_number =\
    \ number;\n        }\n    }\n    (smallest_number, largest_number)", "    let\
    \ mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for n in\
    \ numbers {\n        if n < smallest {\n            smallest = n;\n        }\n\
    \        if n > largest {\n            largest = n;\n        }\n    }\n    (smallest,\
    \ largest)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element =\
    \ numbers[0];\n    let mut min_element_index = -1;\n    for &n in numbers {\n\
    \        let dist = n.abs() - min_dist;\n        if dist < min_dist {\n      \
    \      min_dist = dist;\n            min_element = n;\n            min_element_index\
    \ = -1;\n        }\n        if min_element_index == -1 || dist < min_dist {\n\
    \            min_element_index = i;\n        }\n    }\n    (min_element, min_element_index)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n \
    \       if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)"]
stop_tokens:
- "\n}"
