name: HumanEval_20_find_closest_elements
language: rs
prompt: "/// From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n/// other and return them in order (smaller\
  \ number, larger number).\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements(vec![1.0, 2.0, 3.0,\
  \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfn find_closest_elements(numbers: Vec<f64>) ->\
  \ (f64, f64) {\n"
tests: "}\n\nfn main() {\n    let candidate = find_closest_elements;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut smallest_number = numbers[0];\n    let mut largest_number\
    \ = numbers[0];\n    for number in numbers {\n        if number < smallest_number\
    \ {\n            smallest_number = number;\n        }\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n    (smallest_number,\
    \ largest_number)", "    let mut smallest = numbers[0];\n    let mut largest =\
    \ numbers[0];\n    for n in numbers {\n        if n < smallest {\n           \
    \ smallest = n;\n        }\n        if n > largest {\n            largest = n;\n\
    \        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for &n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_number = numbers[0];\n    let mut largest_number = numbers[0];\n\
    \n    for number in numbers {\n        if number < smallest_number {\n       \
    \     smallest_number = number;\n        }\n\n        if number > largest_number\
    \ {\n            largest_number = number;\n        }\n    }\n\n    (smallest_number,\
    \ largest_number)", "    let mut min_dist = std::f64::MAX;\n    let mut min_element\
    \ = numbers[0];\n    let mut min_element_index = -1;\n    let mut max_element\
    \ = numbers[0];\n    let mut max_element_index = -1;\n    for i in 1..numbers.len()\
    \ {\n        let dist = std::f64::MAX;\n        let element = numbers[i];\n  \
    \      for j in 0..numbers.len() {\n            let dist = std::f64::MAX;\n  \
    \          if i != j {\n                let distance = element.distance_to(numbers[j]);\n\
    \                if distance < dist {\n                    dist = distance;\n\
    \                }\n            }\n        }\n        if dist < min_dist {\n \
    \           min_dist = dist;\n            min_element = element;\n           \
    \ min_element_index = i;\n        }\n        if dist > max_dist {\n          \
    \  max_dist = dist;\n            max_element = element;\n            max_element_index\
    \ = i;\n        }\n    }\n    (min_element, min_element_index), (max_element,\
    \ max_element_index)", "    let mut smallest_number = numbers[0];\n    let mut\
    \ largest_number = numbers[0];\n    for number in numbers {\n        if number\
    \ < smallest_number {\n            smallest_number = number;\n        }\n    \
    \    if number > largest_number {\n            largest_number = number;\n    \
    \    }\n    }\n    (smallest_number, largest_number)", "    let mut smallest =\
    \ numbers[0];\n    let mut largest = numbers[0];\n    for n in numbers {\n   \
    \     if n < smallest {\n            smallest = n;\n        }\n        if n >\
    \ largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest = numbers[0];\n    let mut largest\
    \ = numbers[0];\n    for n in numbers {\n        if n < smallest {\n         \
    \   smallest = n;\n        }\n        if n > largest {\n            largest =\
    \ n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest = numbers[0];\n\
    \    let mut largest = numbers[0];\n    for n in numbers {\n        if n < smallest\
    \ {\n            smallest = n;\n        }\n        if n > largest {\n        \
    \    largest = n;\n        }\n    }\n    (smallest, largest)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ n in numbers {\n        if n < smallest {\n            smallest = n;\n     \
    \   }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_difference = numbers[0];\n  \
    \  let mut largest_difference = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        let difference = number - smallest_difference;\n        if difference\
    \ < smallest_difference {\n            smallest_difference = difference;\n   \
    \     }\n        if difference > largest_difference {\n            largest_difference\
    \ = difference;\n        }\n    }\n    (smallest_difference, largest_difference)",
  "    let mut min_dist = std::f64::MAX;\n    let mut min_element = numbers[0];\n\
    \    let mut min_element_index = -1;\n    for (i, element) in numbers.iter().enumerate()\
    \ {\n        let dist = std::f64::MAX;\n        if element < min_element {\n \
    \           min_element = element;\n            min_element_index = i;\n     \
    \   }\n        if element < min_dist {\n            dist = element - min_element;\n\
    \        }\n        if dist < min_dist {\n            min_dist = dist;\n     \
    \       min_element = element;\n            min_element_index = i;\n        }\n\
    \    }\n    (min_element, numbers[min_element_index])", "    let mut smallest_distance\
    \ = std::f64::MAX;\n    let mut smallest_number = std::f64::MAX;\n    let mut\
    \ largest_distance = std::f64::MIN;\n    let mut largest_number = std::f64::MIN;\n\
    \n    for number in numbers {\n        let distance = number.abs() - smallest_distance;\n\
    \        if distance < smallest_distance {\n            smallest_distance = distance;\n\
    \            smallest_number = number;\n        }\n        if distance > largest_distance\
    \ {\n            largest_distance = distance;\n            largest_number = number;\n\
    \        }\n    }\n\n    (smallest_number, largest_number)", "    let mut smallest\
    \ = numbers[0];\n    let mut largest = numbers[0];\n    for &n in numbers {\n\
    \        if n < smallest {\n            smallest = n;\n        }\n        if n\
    \ > largest {\n            largest = n;\n        }\n    }\n    (smallest, largest)",
  "    let mut smallest_distance = std::f64::MAX;\n    let mut largest_distance =\
    \ std::f64::MIN;\n    for n in numbers {\n        let distance = n.abs() - smallest_distance;\n\
    \        if distance < largest_distance {\n            smallest_distance = distance;\n\
    \        } else {\n            largest_distance = distance;\n        }\n    }\n\
    \    (smallest_distance, numbers[numbers.iter().position(|n| n.abs() == smallest_distance).unwrap()])",
  "    let mut smallest = numbers[0];\n    let mut largest = numbers[0];\n    for\
    \ &n in numbers {\n        if n < smallest {\n            smallest = n;\n    \
    \    }\n        if n > largest {\n            largest = n;\n        }\n    }\n\
    \    (smallest, largest)", "    let mut smallest_distance = std::f64::MAX;\n \
    \   let mut closest_number = std::f64::MAX;\n    for number in numbers {\n   \
    \     let distance = number.abs() - closest_number;\n        if distance < smallest_distance\
    \ {\n            smallest_distance = distance;\n            closest_number = number;\n\
    \        }\n    }\n    (closest_number, smallest_distance)"]
stop_tokens:
- "\n}"
