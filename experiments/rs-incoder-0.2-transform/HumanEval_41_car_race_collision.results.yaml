language: rs
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_time\
    \ = 0.0;\n    let mut collision_distance = 0.0;\n    let mut collision_speed =\
    \ 0.0;\n    let mut collision_acceleration = 0.0;\n    let mut collision_direction\
    \ = 0.0;\n    let mut collision_direction_magnitude = 0.0;\n    let mut collision_direction_normalized\
    \ = false;\n    let mut collision_direction_normalized_magnitude = 0.0;\n    let\
    \ mut collision_direction_normalized_time = 0;\n    let mut collision_direction_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized = false;\n\
    \    let mut collision_direction_normalized_time_normalized_magnitude = 0.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time = 0;\n    let\
    \ mut collision_direction_normalized_time_normalized_time_magnitude = 0.0;\n \
    \   let mut collision_direction_normalized_time_normalized_time_normalized = false;\n\
    \    let mut collision_direction_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf6v78bma.rs:43:33\n   |\n\
    43 |     let mut collision_direction_\n   |                                 ^\
    \ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf6v78bma.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf6v78bma.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf6v78bma.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut collision_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut collision_speed =\
    \ vec![0.0; n];\n    let mut collision_direction = vec![0.0; n];\n\n    for car_i\
    \ in 0..n {\n        let car_speed = car_positions[car_i];\n        let car_direction\
    \ = car_directions[car_i];\n        for car_j in 0..n {\n            let other_car_speed\
    \ = car_positions[car_j];\n            let other_car_direction = car_directions[car_j];\n\
    \            if car_speed == other_car_speed {\n                collision_speed[car_i]\
    \ += other_car_speed;\n                collision_speed[car_j] -= car_speed;\n\
    \                collision_direction[car_i] += other_car_direction;\n        \
    \        collision_direction[car_j] -= car_direction;\n                collision_count\
    \ += 1;\n            }\n        }\n    }\n    collision_count\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `<eof>`\n  --> /tmp/tmp5c6ge0lj.rs:11:69\n \
    \  |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                                     ^ expected\
    \ `{`\n\nerror: no rules expected the token `for`\n  --> /tmp/tmp5c6ge0lj.rs:11:57\n\
    \   |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                         ^^^ no rules expected\
    \ this token in macro call\n\nerror: expected `{`, found `<eof>`\n  --> /tmp/tmp5c6ge0lj.rs:12:75\n\
    \   |\n12 |     let mut collision_positions = vec![vec![2 * i, 2 * i + 1] for\
    \ i in 0..n];\n   |                                                          \
    \                 ^ expected `{`\n\nerror: no rules expected the token `for`\n\
    \  --> /tmp/tmp5c6ge0lj.rs:12:63\n   |\n12 |     let mut collision_positions =\
    \ vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n   |                          \
    \                                     ^^^ no rules expected this token in macro\
    \ call\n\nerror[E0425]: cannot find value `car_directions` in this scope\n  -->\
    \ /tmp/tmp5c6ge0lj.rs:18:29\n   |\n18 |         let car_direction = car_directions[car_i];\n\
    \   |                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `car_directions` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:21:39\n\
    \   |\n21 |             let other_car_direction = car_directions[car_j];\n   |\
    \                                       ^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `car_direction`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:36:17\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:36:25\n \
    \  |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5c6ge0lj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   "
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction =\
    \ Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2\
    \ = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3\
    \ = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4\
    \ = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5\
    \ = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6\
    \ = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7\
    \ = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8\
    \ = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9\
    \ = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10\
    \ = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11\
    \ = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12\
    \ = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13\
    \ = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14\
    \ = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15\
    \ = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16\
    \ = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17\
    \ = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n    let mut car_direction\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6st2gs8j.rs:49:26\n   |\n\
    49 |     let mut car_direction\n   |                          ^ help: add `;`\
    \ here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp6st2gs8j.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6st2gs8j.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6st2gs8j.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6st2gs8j.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6st2gs8j.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6st2gs8j.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched t"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut\
    \ car_y = 0.0;\n    let mut car_speed2 = 1.0;\n    let mut car_direction2 = 1.0;\n\
    \    let mut car_y2 = 0.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_x3 = 0.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_direction4 = 1.0;\n    let mut car_x4 = 0.0;\n    let\
    \ mut car_y4 = 0.0;\n    let mut car_speed5 = 1.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_x5 = 0.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_x6 = 0.0;\n    let\
    \ mut car_y6 = 0.0;\n    let mut car_speed7 = 1.0;\n    let mut car_direction7\
    \ = 1.0;\n    let mut car_x7 = 0.0;\n    let mut car_y7 = 0.0;\n    let mut car_speed8\
    \ = 1.0;\n    let mut car_direction8 = 1.0;\n    let mut car_x8 = 0.0;\n    let\
    \ mut car_y8 = 0.0;\n    let mut car_speed9 = 1.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_x9 = 0.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10\
    \ = 1.0;\n    let mut car_direction10 = 1.0;\n    let mut car_x10 = 0.0;\n   \
    \ let mut car_y10 = 0.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11\
    \ = 1.0;\n    let mut car_x11 = 0.0;\n    let mut car_y11 = 0.0;\n    let mut\
    \ car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut car_x12\
    \ = 0.0;\n    let mut car_y12 = 0.0;\n    let mut car_speed13 = 1.0;\n    let\
    \ mut car_direction13 = 1.0;\n    let mut car_x13 = 0.0;\n    let mut car_y13\
    \ = 0.0;\n    let mut car_speed14\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxf_fz8v0.rs:62:24\n   |\n\
    62 |     let mut car_speed14\n   |                        ^ help: add `;` here\n\
    63 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpxf_fz8v0.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxf_fz8v0.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxf_fz8v0.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxf_fz8v0.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y\
    \ = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut\
    \ prev_time_diff = 1.0;\n    let mut prev_time_diff2 = 1.0;\n    let mut prev_time_diff3\
    \ = 1.0;\n    let mut prev_time_diff4 = 1.0;\n    let mut prev_time_diff5 = 1.0;\n\
    \    let mut prev_time_diff6 = 1.0;\n    let mut prev_time_diff7 = 1.0;\n    let\
    \ mut prev_time_diff8 = 1.0;\n    let mut prev_time_diff9 = 1.0;\n    let mut\
    \ prev_time_diff10 = 1.0;\n    let mut prev_time_diff11 = 1.0;\n    let mut prev_time_diff12\
    \ = 1.0;\n    let mut prev_time_diff13 = 1.0;\n    let mut prev_time_diff14 =\
    \ 1.0;\n    let mut prev_time_diff15 = 1.0;\n    let mut prev_time_diff16 = 1.0;\n\
    \    let mut prev_time_diff17 = 1.0;\n    let mut prev_time_diff18 = 1.0;\n  \
    \  let mut prev_time_diff19 = 1.0;\n    let mut prev_time_diff20 = 1.0;\n    let\
    \ mut prev_time_diff21 = 1.0;\n    let mut prev_time_diff22 = 1.0;\n    let mut\
    \ prev_time_diff23 = 1.0;\n    let mut prev_time_diff24 = 1.0;\n    let mut prev_time_diff25\
    \ = 1.0;\n    let mut prev_time_diff26 = 1.0;\n    let mut prev_time_diff27 =\
    \ 1.0;\n    let mut prev_time_diff28 = 1.0;\n    let mut prev_time_diff29 = 1.0;\n\
    \    let mut prev_time_diff30 = 1.0;\n    let mut prev_time_diff31 = 1.0;\n  \
    \  let mut prev_time_diff32 = 1.0;\n    let mut prev_time_diff33 = 1.0;\n    let\
    \ mut prev_time_diff34 = 1.0;\n    let mut prev_time_diff35 = 1.0;\n    let mut\
    \ prev_time_diff36 = 1.0;\n    let mut prev_time_diff37 = 1.0;\n    let mut prev_time_diff38\
    \ = 1.0;\n    let mut prev_time_diff39 = 1.0;\n    let mut prev_time_diff40 =\
    \ 1.0;\n    let mut prev_time_diff41 = 1.0;\n    let mut prev_time_diff42 = 1.0;\n\
    \    let mut prev_time_diff4\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0pwd5nw.rs:59:28\n   |\n\
    59 |     let mut prev_time_diff4\n   |                            ^ help: add\
    \ `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0pwd5nw.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0pwd5nw.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt0pwd5nw.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_pos\
    \ = Vec::new();\n    let mut car_pos_2 = Vec::new();\n    let mut car_pos_3 =\
    \ Vec::new();\n    let mut car_pos_4 = Vec::new();\n    let mut car_pos_5 = Vec::new();\n\
    \    let mut car_pos_6 = Vec::new();\n    let mut car_pos_7 = Vec::new();\n  \
    \  let mut car_pos_8 = Vec::new();\n    let mut car_pos_9 = Vec::new();\n    let\
    \ mut car_pos_10 = Vec::new();\n    let mut car_pos_11 = Vec::new();\n    let\
    \ mut car_pos_12 = Vec::new();\n    let mut car_pos_13 = Vec::new();\n    let\
    \ mut car_pos_14 = Vec::new();\n    let mut car_pos_15 = Vec::new();\n    let\
    \ mut car_pos_16 = Vec::new();\n    let mut car_pos_17 = Vec::new();\n    let\
    \ mut car_pos_18 = Vec::new();\n    let mut car_pos_19 = Vec::new();\n    let\
    \ mut car_pos_20 = Vec::new();\n    let mut car_pos_21 = Vec::new();\n    let\
    \ mut car_pos_22 = Vec::new();\n    let mut car_pos_23 = Vec::new();\n    let\
    \ mut car_pos_24 = Vec::new();\n    let mut car_pos_25 = Vec::new();\n    let\
    \ mut car_pos_26 = Vec::new();\n    let mut car_pos_27 = Vec::new();\n    let\
    \ mut car_pos_28 = Vec::new();\n    let mut car_pos_29 = Vec::new();\n    let\
    \ mut car_pos_30 = Vec::new();\n    let mut car_pos_31 = Vec::new();\n    let\
    \ mut car_pos_32 = Vec::new();\n    let mut car_pos_33 = Vec::new();\n    let\
    \ mut car_pos_34 = Vec::new();\n    let mut car_pos_35 = Vec::new();\n    let\
    \ mut car_pos_36 = Vec::new();\n    let mut car_pos_37 = Vec::new();\n    let\
    \ mut car_pos_38 = Vec::\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpr1y7cwia.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpr1y7cwia.rs:56:17\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:56:25\n \
    \  |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr1y7cwia.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr1y7cwia.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr1y7cwia.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr1y7cwia.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr1y7cwia.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = 2.0\n\
    \    let mut car_direction = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction_length = 0.0;\n    let mut car_pos_length = 0.0;\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_speeds_length = 0.0;\n\
    \    let mut car_speeds_direction = Vec::new();\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjw8m3v4k.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjw8m3v4k.rs:11:28\n\
    \   |\n11 |     let mut car_speed = 2.0\n   |                            ^ help:\
    \ add `;` here\n12 |     let mut car_direction = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjw8m3v4k.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjw8m3v4k.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjw8m3v4k.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:60:17\n  \
    \ |\n60 |     assert_eq!("
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_time = 0.0;\n    let mut prev_x\
    \ = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut\
    \ prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n   \
    \ let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x =\
    \ 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir\
    \ = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut\
    \ prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n\
    \    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut\
    \ prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let\
    \ mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n\
    \    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x\
    \ = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut\
    \ prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n   \
    \ let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x =\
    \ 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir\
    \ = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut\
    \ prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n\
    \    let mut prev_time = 0.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpqneeqfqa.rs:75:1\n  \
    \ |\n75 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqneeqfqa.rs:79:17\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:79:25\n \
    \  |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqneeqfqa.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqneeqfqa.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqneeqfqa.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqneeqfqa.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqneeqfqa.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:83:25\n\
    \   |\n83 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_x = 0.0;\n    let mut car_y = 0.0;\n    let mut car_speed2 =\
    \ 0.0;\n    let mut car_speed3 = 0.0;\n    let mut car_speed4 = 0.0;\n    let\
    \ mut car_speed5 = 0.0;\n    let mut car_speed6 = 0.0;\n    let mut car_speed7\
    \ = 0.0;\n    let mut car_speed8 = 0.0;\n    let mut car_speed9 = 0.0;\n    let\
    \ mut car_speed10 = 0.0;\n    let mut car_speed11 = 0.0;\n    let mut car_speed12\
    \ = 0.0;\n    let mut car_speed13 = 0.0;\n    let mut car_speed14 = 0.0;\n   \
    \ let mut car_speed15 = 0.0;\n    let mut car_speed16 = 0.0;\n    let mut car_speed17\
    \ = 0.0;\n    let mut car_speed18 = 0.0;\n    let mut car_speed19 = 0.0;\n   \
    \ let mut car_speed20 = 0.0;\n    let mut car_speed21 = 0.0;\n    let mut car_speed22\
    \ = 0.0;\n    let mut car_speed23 = 0.0;\n    let mut car_speed24 = 0.0;\n   \
    \ let mut car_speed25 = 0.0;\n    let mut car_speed26 = 0.0;\n    let mut car_speed27\
    \ = 0.0;\n    let mut car_speed28 = 0.0;\n    let mut car_speed29 = 0.0;\n   \
    \ let mut car_speed30 = 0.0;\n    let mut car_speed31 = 0.0;\n    let mut car_speed32\
    \ = 0.0;\n    let mut car_speed33 = 0.0;\n    let mut car_speed34 = 0.0;\n   \
    \ let mut car_speed35 = 0.0;\n    let mut car_speed36 = 0.0;\n    let mut car_speed37\
    \ = 0.0;\n    let mut car_speed38 = 0.0;\n    let mut car_speed39 = 0.0;\n   \
    \ let mut car_speed40 = 0.0;\n    let mut car_speed41 = 0.0;\n    let mut car_speed42\
    \ = 0.0;\n    let mut car_speed43 = 0.0;\n    let mut car_speed44 = 0.0;\n   \
    \ let mut car_speed45 = 0.0;\n    let mut car_speed46 = 0.0;\n    let mut car_speed47\
    \ = 0.0;\n    let mut car_speed48 = 0.0;\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk7py6_0v.rs:61:11\n   |\n\
    61 |     let mu\n   |           ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7py6_0v.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk7py6_0v.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![];\n    let mut car_speeds = vec![];\n    let mut car_directions = vec![];\n\
    \    let mut car_collisions = vec![];\n\n    for _ in 0..n {\n        car_positions.push(vec![]);\n\
    \        car_speeds.push(vec![]);\n        car_directions.push(vec![]);\n    \
    \    car_collisions.push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec![]);\n        car_speeds[_].push(vec![]);\n    \
    \    car_directions[_].push(vec![]);\n        car_collisions[_].push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n      \
    \  car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n    \
    \    car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec![]);\n        car_speeds[_].push(vec![]);\n    \
    \    car_directions[_].push(vec![]);\n        car_collisions[_].push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n      \
    \  car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n    \
    \    car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec!\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5dztyslt.rs:83:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n72 |     for _ in 0..n {\n\
    \   |                   - this delimiter might not be properly closed...\n73 |\
    \         car_positions[_].push(vec!\n74 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n83 | }\n   |   ^\n\nerror: expected one of\
    \ `(`, `[`, or `{`, found `)`\n  --> /tmp/tmp5dztyslt.rs:74:1\n   |\n73 |    \
    \     car_positions[_].push(vec!\n   |                                   - expected\
    \ one of `(`, `[`, or `{`\n74 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp5dztyslt.rs:73:30\n   |\n9  | fn car_race_collision(n:\
    \ isize) -> isize {\n   |                                          - closing delimiter\
    \ possibly meant for this\n...\n73 |         car_positions[_].push(vec!\n   |\
    \                              ^ unclosed delimiter\n74 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5dztyslt.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5dztyslt.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5dztyslt.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5dztyslt.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5dztyslt.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5dztyslt.rs:80:25\n   |\n80 |     assert_eq!("
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_x\
    \ = 0.0;\n    let mut max_x = 0.0;\n    let mut min_y = 0.0;\n    let mut max_y\
    \ = 0.0;\n    let mut min_z = 0.0;\n    let mut max_z = 0.0;\n    let mut min_d\
    \ = 0.0;\n    let mut max_d = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplnxmfb5h.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmplnxmfb5h.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_speeds = [(0., 0.)..(n, 0.)];\n    let\
    \ mut car_directions = [(0., 0.)..(n, 0.)];\n    let mut car_collisions = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_directions = [(0., 0.)..(n, 0.)];\n\
    \    let mut car_collisions_speeds = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_positions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_speeds_positions = [(0., 0.)..(n,\
    \ 0.)];\n    let mut car_collisions_speeds_directions_positions = [(0., 0.)..(n,\
    \ 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..\n}\n\nfn main() {\n    let candidate = car_race_collision;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpys901n78.rs:31:1\n   |\n31 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpys901n78.rs:30:148\n   |\n9  | fn car_race_collision(n: isize) -> isize\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n...\n30 |     let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0....\n   |                                                            \
    \                                                                            \
    \            ^ unclosed delimiter\n31 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpys901n78.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpys901n78.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpys901n78.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpys901n78.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpys901n78.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpys901n78.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpys901n78.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in th"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_directions_\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa0knnb_l.rs:49:28\n   |\n\
    49 |     let mut car_directions_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa0knnb_l.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed_left = car_speed;\n    let mut car_speed_right = car_speed;\n\
    \    let mut car_speed_left_to_right = car_speed;\n    let mut car_speed_right_to_left\
    \ = car_speed;\n    let mut car_speed_left_to_right_left = car_speed;\n    let\
    \ mut car_speed_right_to_left_left = car_speed;\n    let mut car_speed_left_to_right_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_left_right = car_speed;\n    let mut car_speed_right_to_left_left_right\
    \ = car_speed;\n    let mut car_speed_left_to_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_right_right = car_speed;\n    let mut car_speed_left_to_right_left_left_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_left_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right = car_speed;\n    let mut\
    \ car_speed_right_to_left_right_right_right = car_speed;\n    let mut car_speed_left_to_right_left_left_right_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_left_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right_right = car_speed;\n   \
    \ let mut car_speed_right_to_left_right_right_right_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_left_left_right_right_right = car_speed;\n    let\
    \ mut car_speed_right_to_left_left_right_right_right_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_right_left_right_right_right = car_speed;\n    let\
    \ mut car_speed_right_to_left_right_right_right_right_right = car_speed;\n   \
    \ let mut car_speed_left_to_right_left_left_right_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_left_right_right_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_right_right_right_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_left_left_right_right_right_right_right =\
    \ car_speed;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpsa1jttke.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpsa1jttke.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsa1jttke.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsa1jttke.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsa1jttke.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsa1jttke.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsa1jttke.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut last_collision_x = 0.0;\n    let mut last_collision_y = 0.0;\n   \
    \ let mut last_collision_time = 0.0;\n    let mut last_collision_direction = 0.0;\n\
    \    let mut last_collision_speed = 0.0;\n    let mut last_collision_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_velocity = 0.0;\n    let mut last_collision_angular_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude = 0.0;\n \
    \   let mut last_collision_angular_acceleration_direction = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7sc8t_gm.rs:44:49\n   |\n\
    44 |     let mut last_collision_angular_acceleration_\n   |                  \
    \                               ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7sc8t_gm.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not f"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n\
    \    let mut car_x_speed = Vec::new();\n    let mut car_y_speed = Vec::new();\n\
    \    let mut car_x_speed2 = Vec::new();\n    let mut car_y_speed2 = Vec::new();\n\
    \    let mut car_x_speed3 = Vec::new();\n    let mut car_y_speed3 = Vec::new();\n\
    \    let mut car_x_speed4 = Vec::new();\n    let mut car_y_speed4 = Vec::new();\n\
    \    let mut car_x_speed5 = Vec::new();\n    let mut car_y_speed5 = Vec::new();\n\
    \    let mut car_x_speed6 = Vec::new();\n    let mut car_y_speed6 = Vec::new();\n\
    \    let mut car_x_speed7 = Vec::new();\n    let mut car_y_speed7 = Vec::new();\n\
    \    let mut car_x_speed8 = Vec::new();\n    let mut car_y_speed8 = Vec::new();\n\
    \    let mut car_x_speed9 = Vec::new();\n    let mut car_y_speed9 = Vec::new();\n\
    \    let mut car_x_speed10 = Vec::new();\n    let mut car_y_speed10 = Vec::new();\n\
    \    let mut car_x_speed11 = Vec::new();\n    let mut car_y_speed11 = Vec::new();\n\
    \    let mut car_x_speed12 = Vec::new();\n    let mut car_y_speed12 = Vec::new();\n\
    \    let mut car_x_speed13 = Vec::new();\n    let mut car_y_speed13 = Vec::new();\n\
    \    let mut car_x_speed14 = Vec::new();\n    let mut car_y_speed14 = Vec::new();\n\
    \    let mut car_x_speed15 = Vec::new();\n    let mut car_y_speed15 = Vec::new();\n\
    \    let mut car_x_speed16 = Vec::new();\n    let mut car_y_speed16 = Vec::new();\n\
    \    let mut car_x_speed17 = Vec::new();\n    let mut car_y_speed17 = Vec::new();\n\
    \    let mut car_x_speed18 = Vec::new();\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpn3amlqdp.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpn3amlqdp.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3amlqdp.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn3amlqdp.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn3amlqdp.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3amlqdp.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3amlqdp.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed2 = Vec::new();\n    let mut car_pos2 = Vec::new();\n  \
    \  let mut car_direction2 = Vec::new();\n    let mut car_speed3 = Vec::new();\n\
    \    let mut car_pos3 = Vec::new();\n    let mut car_direction3 = Vec::new();\n\
    \    let mut car_speed4 = Vec::new();\n    let mut car_pos4 = Vec::new();\n  \
    \  let mut car_direction4 = Vec::new();\n    let mut car_speed5 = Vec::new();\n\
    \    let mut car_pos5 = Vec::new();\n    let mut car_direction5 = Vec::new();\n\
    \    let mut car_speed6 = Vec::new();\n    let mut car_pos6 = Vec::new();\n  \
    \  let mut car_direction6 = Vec::new();\n    let mut car_speed7 = Vec::new();\n\
    \    let mut car_pos7 = Vec::new();\n    let mut car_direction7 = Vec::new();\n\
    \    let mut car_speed8 = Vec::new();\n    let mut car_pos8 = Vec::new();\n  \
    \  let mut car_direction8 = Vec::new();\n    let mut car_speed9 = Vec::new();\n\
    \    let mut car_pos9 = Vec::new();\n    let mut car_direction9 = Vec::new();\n\
    \    let mut car_speed10 = Vec::new();\n    let mut car_pos10 = Vec::new();\n\
    \    let mut car_direction10 = Vec::new();\n    let mut car_speed11 = Vec::new();\n\
    \    let mut car_pos11 = Vec::new();\n    let mut car_direction11 = Vec::new();\n\
    \    let mut car_speed12 = Vec::new();\n    let mut car_pos12 = Vec::new();\n\
    \    let mut car_direction12 = Vec::new();\n    let mut car_speed13 = Vec::new();\n\
    \    let mut car_pos13 = Vec::new();\n    let mut car_direction13 = Vec::new();\n\
    \    let mut car_speed14 = Vec::new();\n    let mut car_pos14 = Vec::new();\n\
    \    let mut car_direction14 = Vec::\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp28ry2zow.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp28ry2zow.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp28ry2zow.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp28ry2zow.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp28ry2zow.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp28ry2zow.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp28ry2zow.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut direction = 1.0;\n    let mut speed2 = 1.0;\n    let mut direction2\
    \ = 1.0;\n    let mut speed3 = 1.0;\n    let mut direction3 = 1.0;\n    let mut\
    \ speed4 = 1.0;\n    let mut direction4 = 1.0;\n    let mut speed5 = 1.0;\n  \
    \  let mut direction5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut direction6\
    \ = 1.0;\n    let mut speed7 = 1.0;\n    let mut direction7 = 1.0;\n    let mut\
    \ speed8 = 1.0;\n    let mut direction8 = 1.0;\n    let mut speed9 = 1.0;\n  \
    \  let mut direction9 = 1.0;\n    let mut speed10 = 1.0;\n    let mut direction10\
    \ = 1.0;\n    let mut speed11 = 1.0;\n    let mut direction11 = 1.0;\n    let\
    \ mut speed12 = 1.0;\n    let mut direction12 = 1.0;\n    let mut speed13 = 1.0;\n\
    \    let mut direction13 = 1.0;\n    let mut speed14 = 1.0;\n    let mut direction14\
    \ = 1.0;\n    let mut speed15 = 1.0;\n    let mut direction15 = 1.0;\n    let\
    \ mut speed16 = 1.0;\n    let mut direction16 = 1.0;\n    let mut speed17 = 1.0;\n\
    \    let mut direction17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut direction18\
    \ = 1.0;\n    let mut speed19 = 1.0;\n    let mut direction19 = 1.0;\n    let\
    \ mut speed20 = 1.0;\n    let mut direction20 = 1.0;\n    let mut speed21 = 1.0;\n\
    \    let mut direction21 = 1.0;\n    let mut speed22 = 1.0;\n    let mut direction22\
    \ = 1.0;\n    let mut speed23 = 1.0;\n    let mut direction23 = 1.0;\n    let\
    \ mut speed24 = 1.0;\n    let mut direction24 = 1.0;\n    let mut speed25 = 1.0;\n\
    \    let mut direction25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut direction26\
    \ = 1.0;\n    let mut speed27 = 1.0;\n    let mut direction27 = 1.0;\n    let\
    \ mut speed28 = 1.0;\n    let mut direction28 = 1.0;\n    let mut speed29 = 1.0;\n\
    \    let mut direction29 = 1.0;\n    let mut speed30 = 1.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphne6o_fv.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphne6o_fv.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_direction_magnitude = 1.0;\n    let mut collision_direction_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude = 1.0;\n    let\
    \ mut collision_direction_normalized_time = 0;\n    let mut collision_direction_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_magnitude = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time = 0;\n    let\
    \ mut collision_direction_normalized_time_normalized_time_magnitude = 1.0;\n \
    \   let mut collision_direction_normalized_time_normalized_time_normalized = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptka6jrbw.rs:40:140\n   |\n\
    40 |     let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_\n\
    \   |                                                                        \
    \                                                                    ^ help: add\
    \ `;` here\n41 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptka6jrbw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptka6jrbw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptka6jrbw.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found i"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut car_speeds\
    \ = Vec::new();\n    let mut car_directions = Vec::new();\n    let mut car_speeds_2\
    \ = Vec::new();\n    let mut car_directions_2 = Vec::new();\n    let mut car_speeds_3\
    \ = Vec::new();\n    let mut car_directions_3 = Vec::new();\n    let mut car_speeds_4\
    \ = Vec::new();\n    let mut car_directions_4 = Vec::new();\n    let mut car_speeds_5\
    \ = Vec::new();\n    let mut car_directions_5 = Vec::new();\n    let mut car_speeds_6\
    \ = Vec::new();\n    let mut car_directions_6 = Vec::new();\n    let mut car_speeds_7\
    \ = Vec::new();\n    let mut car_directions_7 = Vec::new();\n    let mut car_speeds_8\
    \ = Vec::new();\n    let mut car_directions_8 = Vec::new();\n    let mut car_speeds_9\
    \ = Vec::new();\n    let mut car_directions_9 = Vec::new();\n    let mut car_speeds_10\
    \ = Vec::new();\n    let mut car_directions_10 = Vec::new();\n    let mut car_speeds_11\
    \ = Vec::new();\n    let mut car_directions_11 = Vec::new();\n    let mut car_speeds_12\
    \ = Vec::new();\n    let mut car_directions_12 = Vec::new();\n    let mut car_speeds_13\
    \ = Vec::new();\n    let mut car_directions_13 = Vec::new();\n    let mut car_speeds_14\
    \ = Vec::new();\n    let mut car_directions_14 = Vec::new();\n    let mut car_speeds_15\
    \ = Vec::new();\n    let mut car_directions_15 = Vec::new();\n    let mut car_speeds_16\
    \ = Vec::new();\n    let mut car_directions_16 = Vec::new();\n    let mut car_speeds_17\
    \ = Vec::new();\n    let mut car_directions_17 = Vec::new();\n    let mut car_speeds_18\
    \ = Vec::new();\n    let mut car_directions_18 = Vec::new();\n    let \n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpafrjbfn8.rs:50:1\n  \
    \ |\n50 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpafrjbfn8.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpafrjbfn8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpafrjbfn8.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpafrjbfn8.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpafrjbfn8.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpafrjbfn8.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_next = Vec::new();\n    let mut car_next_next = Vec::new();\n\
    \    let mut car_next_next_next = Vec::new();\n    let mut car_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next = Vec::new();\n    let\
    \ mut car_next_next_next_next_next_next = Vec::new();\n    let mut car_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next_next_next =\
    \ Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt8fewray.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt8fewray.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt8fewray.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt8fewray.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt8fewray.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = 2.0\n\
    \    let mut car_speed2 = 2.0\n    let mut car_speed3 = 2.0\n    let mut car_speed4\
    \ = 2.0\n    let mut car_speed5 = 2.0\n    let mut car_speed6 = 2.0\n    let mut\
    \ car_speed7 = 2.0\n    let mut car_speed8 = 2.0\n    let mut car_speed9 = 2.0\n\
    \    let mut car_speed10 = 2.0\n    let mut car_speed11 = 2.0\n    let mut car_speed12\
    \ = 2.0\n    let mut car_speed13 = 2.0\n    let mut car_speed14 = 2.0\n    let\
    \ mut car_speed15 = 2.0\n    let mut car_speed16 = 2.0\n    let mut car_speed17\
    \ = 2.0\n    let mut car_speed18 = 2.0\n    let mut car_speed19 = 2.0\n    let\
    \ mut car_speed20 = 2.0\n    let mut car_speed21 = 2.0\n    let mut car_speed22\
    \ = 2.0\n    let mut car_speed23 = 2.0\n    let mut car_speed24 = 2.0\n    let\
    \ mut car_speed25 = 2.0\n    let mut car_speed26 = 2.0\n    let mut car_speed27\
    \ = 2.0\n    let mut car_speed28 = 2.0\n    let mut car_speed29 = 2.0\n    let\
    \ mut car_speed30 = 2.0\n    let mut car_speed31 = 2.0\n    let mut car_speed32\
    \ = 2.0\n    let mut car_speed33 = 2.0\n    let mut car_speed34 = 2.0\n    let\
    \ mut car_speed35 = 2.0\n    let mut car_speed36 = 2.0\n    let mut car_speed37\
    \ = 2.0\n    let mut car_speed38 = 2.0\n    let mut car_speed39 = 2.0\n    let\
    \ mut car_speed40 = 2.0\n    let mut car_speed41 = 2.0\n    let mut car_speed42\
    \ = 2.0\n    let mut car_speed43 = 2.0\n    let mut car_speed44 = 2.0\n    let\
    \ mut car_speed45 = 2.0\n    let mut car_speed46 = 2.0\n    let mut car_speed47\
    \ = 2.0\n    let mut car_speed48 = 2.0\n    let mut car_speed49 = 2.0\n    let\
    \ mut car_speed50 = 2.0\n    let mut car_speed51 = 2.0\n    let mut car_speed52\
    \ = \n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:11:28\n\
    \   |\n11 |     let mut car_speed = 2.0\n   |                            ^ help:\
    \ add `;` here\n12 |     let mut car_speed2 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:12:29\n\
    \   |\n12 |     let mut car_speed2 = 2.0\n   |                             ^ help:\
    \ add `;` here\n13 |     let mut car_speed3 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:13:29\n\
    \   |\n13 |     let mut car_speed3 = 2.0\n   |                             ^ help:\
    \ add `;` here\n14 |     let mut car_speed4 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:14:29\n\
    \   |\n14 |     let mut car_speed4 = 2.0\n   |                             ^ help:\
    \ add `;` here\n15 |     let mut car_speed5 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:15:29\n\
    \   |\n15 |     let mut car_speed5 = 2.0\n   |                             ^ help:\
    \ add `;` here\n16 |     let mut car_speed6 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:16:29\n\
    \   |\n16 |     let mut car_speed6 = 2.0\n   |                             ^ help:\
    \ add `;` here\n17 |     let mut car_speed7 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:17:29\n\
    \   |\n17 |     let mut car_speed7 = 2.0\n   |                             ^ help:\
    \ add `;` here\n18 |     let mut car_speed8 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:18:29\n\
    \   |\n18 |     let mut car_speed8 = 2.0\n   |                             ^ help:\
    \ add `;` here\n19 |     let mut car_speed9 = 2.0\n   |   "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut car_left = Vec::new();\n    let mut car_right = Vec::new();\n   \
    \ let mut car_speed = Vec::new();\n    let mut car_speed2 = Vec::new();\n    let\
    \ mut car_speed3 = Vec::new();\n    let mut car_speed4 = Vec::new();\n    let\
    \ mut car_speed5 = Vec::new();\n    let mut car_speed6 = Vec::new();\n    let\
    \ mut car_speed7 = Vec::new();\n    let mut car_speed8 = Vec::new();\n    let\
    \ mut car_speed9 = Vec::new();\n    let mut car_speed10 = Vec::new();\n    let\
    \ mut car_speed11 = Vec::new();\n    let mut car_speed12 = Vec::new();\n    let\
    \ mut car_speed13 = Vec::new();\n    let mut car_speed14 = Vec::new();\n    let\
    \ mut car_speed15 = Vec::new();\n    let mut car_speed16 = Vec::new();\n    let\
    \ mut car_speed17 = Vec::new();\n    let mut car_speed18 = Vec::new();\n    let\
    \ mut car_speed19 = Vec::new();\n    let mut car_speed20 = Vec::new();\n    let\
    \ mut car_speed21 = Vec::new();\n    let mut car_speed22 = Vec::new();\n    let\
    \ mut car_speed23 = Vec::new();\n    let mut car_speed24 = Vec::new();\n    let\
    \ mut car_speed25 = Vec::new();\n    let mut car_speed26 = Vec::new();\n    let\
    \ mut car_speed27 = Vec::new();\n    let mut car_speed28 = Vec::new();\n    let\
    \ mut car_speed29 = Vec::new();\n    let mut car_speed30 = Vec::new();\n    let\
    \ mut car_speed31 = Vec::new();\n    let mut car_speed32 = Vec::new();\n    let\
    \ mut car_speed33 = Vec::new();\n    let mut car_speed34 = Vec::new();\n    let\
    \ mut car_speed35 = Vec::new();\n    let mut car_speed36 = Vec::new();\n    let\
    \ mut car_speed37 = Vec::new();\n    let mut car_\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj2cm64xq.rs:51:17\n   |\n\
    51 |     let mut car_\n   |                 ^ help: add `;` here\n52 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2cm64xq.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj2cm64xq.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj2cm64xq.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj2cm64xq.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj2cm64xq.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2cm64xq.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_vel = Vec::new();\n    let\
    \ mut car_acc = Vec::new();\n    let mut car_ang = Vec::new();\n    let mut car_ang_vel\
    \ = Vec::new();\n    let mut car_ang_acc = Vec::new();\n    let mut car_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxa0pj7ay.rs:42:21\n   |\n\
    42 |     let mut car_ang_\n   |                     ^ help: add `;` here\n43 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpxa0pj7ay.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxa0pj7ay.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxa0pj7ay.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxa0pj7ay.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n    let\
    \ mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n  \
    \  let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp3yj_mkw0.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3yj_mkw0.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut direction = 1.0;\n    let mut speed2 = 1.0;\n    let mut direction2\
    \ = 1.0;\n    let mut speed3 = 1.0;\n    let mut direction3 = 1.0;\n    let mut\
    \ speed4 = 1.0;\n    let mut direction4 = 1.0;\n    let mut speed5 = 1.0;\n  \
    \  let mut direction5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut direction6\
    \ = 1.0;\n    let mut speed7 = 1.0;\n    let mut direction7 = 1.0;\n    let mut\
    \ speed8 = 1.0;\n    let mut direction8 = 1.0;\n    let mut speed9 = 1.0;\n  \
    \  let mut direction9 = 1.0;\n    let mut speed10 = 1.0;\n    let mut direction10\
    \ = 1.0;\n    let mut speed11 = 1.0;\n    let mut direction11 = 1.0;\n    let\
    \ mut speed12 = 1.0;\n    let mut direction12 = 1.0;\n    let mut speed13 = 1.0;\n\
    \    let mut direction13 = 1.0;\n    let mut speed14 = 1.0;\n    let mut direction14\
    \ = 1.0;\n    let mut speed15 = 1.0;\n    let mut direction15 = 1.0;\n    let\
    \ mut speed16 = 1.0;\n    let mut direction16 = 1.0;\n    let mut speed17 = 1.0;\n\
    \    let mut direction17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut direction18\
    \ = 1.0;\n    let mut speed19 = 1.0;\n    let mut direction19 = 1.0;\n    let\
    \ mut speed20 = 1.0;\n    let mut direction20 = 1.0;\n    let mut speed21 = 1.0;\n\
    \    let mut direction21 = 1.0;\n    let mut speed22 = 1.0;\n    let mut direction22\
    \ = 1.0;\n    let mut speed23 = 1.0;\n    let mut direction23 = 1.0;\n    let\
    \ mut speed24 = 1.0;\n    let mut direction24 = 1.0;\n    let mut speed25 = 1.0;\n\
    \    let mut direction25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut direction26\
    \ = 1.0;\n    let mut speed27 = 1.0;\n    let mut direction27 = 1.0;\n    let\
    \ mut speed28 = 1.0;\n    let mut direction28 = 1.0;\n    let mut speed29 = 1.0;\n\
    \    let mut direction29 = 1.0;\n    let mut speed30 = 1.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphne6o_fv.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphne6o_fv.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_speed2 = 0.0;\n    let mut collision_time2 = 0.0;\n\
    \    let mut collision_direction2 = 1.0;\n    let mut collision_speed3 = 0.0;\n\
    \    let mut collision_time3 = 0.0;\n    let mut collision_direction3 = 1.0;\n\
    \    let mut collision_speed4 = 0.0;\n    let mut collision_time4 = 0.0;\n   \
    \ let mut collision_direction4 = 1.0;\n    let mut collision_speed5 = 0.0;\n \
    \   let mut collision_time5 = 0.0;\n    let mut collision_direction5 = 1.0;\n\
    \    let mut collision_speed6 = 0.0;\n    let mut collision_time6 = 0.0;\n   \
    \ let mut collision_direction6 = 1.0;\n    let mut collision_speed7 = 0.0;\n \
    \   let mut collision_time7 = 0.0;\n    let mut collision_direction7 = 1.0;\n\
    \    let mut collision_speed8 = 0.0;\n    let mut collision_time8 = 0.0;\n   \
    \ let mut collision_direction8 = 1.0;\n    let mut collision_speed9 = 0.0;\n \
    \   let mut collision_time9 = 0.0;\n    let mut collision_direction9 = 1.0;\n\
    \    let mut collision_speed10 = 0.0;\n    let mut collision_time10 = 0.0;\n \
    \   let mut collision_direction10 = 1.0;\n    let mut collision_speed11 = 0.0;\n\
    \    let mut collision_time11 = 0.0;\n    let mut collision_direction11 = 1.0;\n\
    \    let mut collision_speed12 = 0.0;\n    let mut collision_time12 = 0.0;\n \
    \   let mut collision_direction12 = 1.0;\n    let mut collision_speed13 = 0.0;\n\
    \    let mut collision_time13 = 0.0;\n    let mut collision_direction13 = 1.0;\n\
    \    let mut collision_speed14 = 0.0;\n    let mut collision_time14 = 0.0;\n \
    \   let mut collision_direction14 = 1.0;\n    let mut collision_speed15 = 0.0;\n\
    \    let mut collision_time15 = 0.0;\n    let mut collision_direction15 = 1.0;\n\
    \    let mut collision_speed16 = 0.0;\n    let mut collision_time16 = 0.0;\n \
    \   let mut collision_direction16 = 1.0;\n    let mut collision_speed17 = 0.0;\n\
    \    let mut collision_time17 = 0.0;\n    let mut collision_direction17 = 1.0;\n\
    \    let mut collision_speed18\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd_7ft0t4.rs:62:30\n   |\n\
    62 |     let mut collision_speed18\n   |                              ^ help:\
    \ add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_7ft0t4.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd_7ft0t4.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd_7ft0t4.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_distance\
    \ = 0;\n    let mut collision_speed = 0;\n    let mut collision_direction = 0;\n\
    \    let mut collision_speed2 = 0;\n    let mut collision_direction2 = 0;\n  \
    \  let mut collision_speed3 = 0;\n    let mut collision_direction3 = 0;\n    let\
    \ mut collision_speed4 = 0;\n    let mut collision_direction4 = 0;\n    let mut\
    \ collision_speed5 = 0;\n    let mut collision_direction5 = 0;\n    let mut collision_speed6\
    \ = 0;\n    let mut collision_direction6 = 0;\n    let mut collision_speed7 =\
    \ 0;\n    let mut collision_direction7 = 0;\n    let mut collision_speed8 = 0;\n\
    \    let mut collision_direction8 = 0;\n    let mut collision_speed9 = 0;\n  \
    \  let mut collision_direction9 = 0;\n    let mut collision_speed10 = 0;\n   \
    \ let mut collision_direction10 = 0;\n    let mut collision_speed11 = 0;\n   \
    \ let mut collision_direction11 = 0;\n    let mut collision_speed12 = 0;\n   \
    \ let mut collision_direction12 = 0;\n    let mut collision_speed13 = 0;\n   \
    \ let mut collision_direction13 = 0;\n    let mut collision_speed14 = 0;\n   \
    \ let mut collision_direction14 = 0;\n    let mut collision_speed15 = 0;\n   \
    \ let mut collision_direction15 = 0;\n    let mut collision_speed16 = 0;\n   \
    \ let mut collision_direction16 = 0;\n    let mut collision_speed17 = 0;\n   \
    \ let mut collision_direction17 = 0;\n    let mut collision_speed18 = 0;\n   \
    \ let mut collision_direction18 = 0;\n    let mut collision_speed19 = 0;\n   \
    \ let mut collision_direction19 = 0;\n    let mut collision_speed20 = 0;\n   \
    \ let mut collision_direction20 = 0;\n    let mut collision_speed21 = 0;\n   \
    \ let mut collision_direction21 = 0;\n    let mut collision_speed22 = 0;\n   \
    \ let mut collision_direction22 = 0;\n    let mut collision_speed23 = 0;\n   \
    \ let mut collision_direction23 = 0;\n    let mut collision_speed24 = 0;\n   \
    \ let mut collision_direction24 = 0;\n    let mut collision_speed25 = 0;\n   \
    \ let mut collision_direction25 = 0;\n    let mut collision_speed26 = 0;\n   \
    \ let mut collision_direction26 = 0;\n    let mut collision_speed27 = 0;\n   \
    \ let mut collision_direction27 = 0;\n    let mut collision_speed28 = 0;\n   \
    \ let mut collision_direction28 = 0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp0yu6csjb.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0yu6csjb.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut max_speed = 1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n\n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjrbckrk2.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjrbckrk2.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision = false;\n        for _ in 0..n {\n            if car_collision(n\
    \ - 1, n - 1, n - 1) && car_collision(n - 1, n - 1, n - 1) {\n               \
    \ collision = true;\n                break;\n            }\n        }\n      \
    \  if collision {\n            collisions += 1;\n        }\n    }\n    collisions\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:14:16\n   |\n14 |             if car_collision(n - 1, n\
    \ - 1, n - 1) && car_collision(n - 1, n - 1, n - 1) {\n   |                ^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `collision`\n\nerror[E0425]:\
    \ cannot find function `car_collision` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:14:54\n\
    \   |\n14 |             if car_collision(n - 1, n - 1, n - 1) && car_collision(n\
    \ - 1, n - 1, n - 1) {\n   |                                                 \
    \     ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `collision`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz0_6sf_3.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |    "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0; // number of collisions\n   \
    \ let mut speed = 2.0; // initial speed\n    let mut direction = Direction::Right;\
    \ // initial direction\n    let mut car_speed = 2.0; // speed of each car\n  \
    \  let mut car_direction = Direction::Right; // direction of each car\n    let\
    \ mut car_x = 0.0; // x position of each car\n    let mut car_y = 0.0; // y position\
    \ of each car\n    let mut car_speed2 = 2.0; // speed of each car\n    let mut\
    \ car_direction2 = Direction::Right; // direction of each car\n    let mut car_x2:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y2: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed3 = 2.0; // speed of each car\n    let mut\
    \ car_direction3 = Direction::Right; // direction of each car\n    let mut car_x3:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y3: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed4 = 2.0; // speed of each car\n    let mut\
    \ car_direction4 = Direction::Right; // direction of each car\n    let mut car_x4:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y4: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed5 = 2.0; // speed of each car\n    let mut\
    \ car_direction5 = Direction::Right; // direction of each car\n    let mut car_x5:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y5: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed6 = 2.0; // speed of each car\n    let mut\
    \ car_direction6 = Direction::Right; // direction of each car\n    let mut car_x6:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y6: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed7 = 2.0; // speed of each car\n    let mut\
    \ car_direction7 = Direction::Right; // direction of each car\n    let mut car_x7:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y7: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed8 = 2.0; // speed of each car\n    let mut\
    \ car_direction8 = Direction::Right; // direction of each car\n    let mut car\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw9acgnkf.rs:43:16\n   |\n\
    43 |     let mut car\n   |                ^ help: add `;` here\n44 | }\n   | -\
    \ unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Direction`\n  --> /tmp/tmpw9acgnkf.rs:12:25\n   |\n12 |     let mut direction\
    \ = Direction::Right; // initial direction\n   |                         ^^^^^^^^^\
    \ use of undeclared type `Direction`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:14:29\n   |\n14 |   \
    \  let mut car_direction = Direction::Right; // direction of each car\n   |  \
    \                           ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:18:30\n\
    \   |\n18 |     let mut car_direction2 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:22:30\n\
    \   |\n22 |     let mut car_direction3 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:26:30\n\
    \   |\n26 |     let mut car_direction4 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:30:30\n\
    \   |\n30 |     let mut car_direction5 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:34:30\n\
    \   |\n34 |     let mut car_direction6 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 1.0;\n    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2\
    \ = 0.0;\n    let mut speed3 = 1.0;\n    let mut x3 = 0.0;\n    let mut y3 = 0.0;\n\
    \    let mut z3 = 0.0;\n    let mut speed4 = 1.0;\n    let mut x4 = 0.0;\n   \
    \ let mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut speed5 = 1.0;\n    let\
    \ mut x5 = 0.0;\n    let mut y5 = 0.0;\n    let mut z5 = 0.0;\n    let mut speed6\
    \ = 1.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6 = 0.0;\n\
    \    let mut speed7 = 1.0;\n    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n   \
    \ let mut z7 = 0.0;\n    let mut speed8 = 1.0;\n    let mut x8 = 0.0;\n    let\
    \ mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut speed9 = 1.0;\n    let mut\
    \ x9 = 0.0;\n    let mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut speed10\
    \ = 1.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n    let mut z10 = 0.0;\n\
    \    let mut speed11 = 1.0;\n    let mut x11 = 0.0;\n    let mut y11 = 0.0;\n\
    \    let mut z11 = 0.0;\n    let mut speed12 = 1.0;\n    let mut x12 = 0.0;\n\
    \    let mut y12 = 0.0;\n    let mut z12 = 0.0;\n    let mut speed13 = 1.0;\n\
    \    let mut x13 = 0.0;\n    let mut y13 = 0.0;\n    let mut z13 = 0.0;\n    let\
    \ mut speed14 = 1.0;\n    let mut x14 = 0.0;\n    let mut y14 = 0.0;\n    let\
    \ mut z14 = 0.0;\n    let mut speed15 = 1.0;\n    let mut x15 = 0.0;\n    let\
    \ mut y15 = 0.0;\n    let mut z15 = 0.0;\n    let mut speed16 = 1.0;\n    let\
    \ mut x16 = 0.0;\n    let mut y16 = 0.0;\n    let mut z\n}\n\nfn main() {\n  \
    \  let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptwzlkucj.rs:74:14\n   |\n\
    74 |     let mut z\n   |              ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptwzlkucj.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptwzlku"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpimaeve15.rs:54:33\n   |\n\
    54 |     let mut car_speed = Vec::new\n   |                                 ^\
    \ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpimaeve15.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpimaeve15.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_vel = Vec::new();\n    let mut car_acc = Vec::new();\n    let mut car_ang\
    \ = Vec::new();\n    let mut car_ang_vel = Vec::new();\n    let mut car_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang = Vec::new();\n    let mut car_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_acc = Vec::new();\n    let mut\
    \ car_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ \n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpkse0i5mw.rs:41:1\n  \
    \ |\n41 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpkse0i5mw.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkse0i5mw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkse0i5mw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkse0i5mw.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkse0i5mw.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkse0i5mw.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    for _ in 0..n {\n       \
    \ let mut collision_found = false;\n        for _ in 0..n {\n            if !collision_found\
    \ {\n                if car_collision(&mut collision_found) {\n              \
    \      collisions += 1;\n                }\n            }\n        }\n    }\n\
    \    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5scis_p_.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     for _ in 0..n {\n   |     --- unexpected token\n\nerror[E0425]:\
    \ cannot find function `car_collision` in this scope\n  --> /tmp/tmp5scis_p_.rs:15:20\n\
    \   |\n15 |                 if car_collision(&mut collision_found) {\n   |   \
    \                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5scis_p_.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5scis_p_.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5scis_p_.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_collision_count = 0;\n    let\
    \ mut prev_collision_speed = 1.0;\n    let mut prev_collision_prev_speed = 1.0;\n\
    \    let mut prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_speed = 1.0;\n    let\
    \ mut prev_collision_prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph4p89i__.rs:36:103\n   |\n\
    36 |     let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    \   |                                                                        \
    \                               ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph4p89i__.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph4p89i__.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_sum\
    \ = 0;\n    let mut collision_speed = 0;\n    let mut collision_speed2 = 0;\n\
    \    let mut collision_speed3 = 0;\n    let mut collision_speed4 = 0;\n    let\
    \ mut collision_speed5 = 0;\n    let mut collision_speed6 = 0;\n    let mut collision_speed7\
    \ = 0;\n    let mut collision_speed8 = 0;\n    let mut collision_speed9 = 0;\n\
    \    let mut collision_speed10 = 0;\n    let mut collision_speed11 = 0;\n    let\
    \ mut collision_speed12 = 0;\n    let mut collision_speed13 = 0;\n    let mut\
    \ collision_speed14 = 0;\n    let mut collision_speed15 = 0;\n    let mut collision_speed16\
    \ = 0;\n    let mut collision_speed17 = 0;\n    let mut collision_speed18 = 0;\n\
    \    let mut collision_speed19 = 0;\n    let mut collision_speed20 = 0;\n    let\
    \ mut collision_speed21 = 0;\n    let mut collision_speed22 = 0;\n    let mut\
    \ collision_speed23 = 0;\n    let mut collision_speed24 = 0;\n    let mut collision_speed25\
    \ = 0;\n    let mut collision_speed26 = 0;\n    let mut collision_speed27 = 0;\n\
    \    let mut collision_speed28 = 0;\n    let mut collision_speed29 = 0;\n    let\
    \ mut collision_speed30 = 0;\n    let mut collision_speed31 = 0;\n    let mut\
    \ collision_speed32 = 0;\n    let mut collision_speed33 = 0;\n    let mut collision_speed34\
    \ = 0;\n    let mut collision_speed35 = 0;\n    let mut collision_speed36 = 0;\n\
    \    let mut collision_speed37 = 0;\n    let mut collision_speed38 = 0;\n    let\
    \ mut collision_speed39 = 0;\n    let mut collision_speed40 = 0;\n    let mut\
    \ collision_speed41 = 0;\n    let mut collision_speed42 = 0;\n    let mut collision_speed43\
    \ = 0;\n    let mut collision_speed44 = 0;\n    let mut collision_speed45 = 0;\n\
    \    let mut collision_speed46 = 0;\n    let mut collision_speed47 = 0;\n    let\
    \ mut collision_speed48 = 0;\n    let mut collision_speed49 = 0;\n    let mut\
    \ collision_speed50 = 0;\n    let mut collision_speed51 = 0;\n    let mut collision_speed52\
    \ = 0;\n    let mut collision_speed53 = 0;\n    let mut collision_speed54 = 0;\n\
    \    let mut collision_speed55 = 0;\n    let mut collision_speed56\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvz3_3hi4.rs:67:30\n   |\n\
    67 |     let mut collision_speed56\n   |                              ^ help:\
    \ add `;` here\n68 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvz3_3hi4.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvz3_3hi4.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvz3_3hi4.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speeds = Vec::new();\n    let\
    \ mut car_directions = Vec::new();\n    let mut car_speeds_left = Vec::new();\n\
    \    let mut car_directions_left = Vec::new();\n    let mut car_speeds_right =\
    \ Vec::new();\n    let mut car_directions_right = Vec::new();\n\n    for i in\
    \ 0..n {\n        speed[i] = rand::random::<f32>();\n        car_speed[i] = speed[i];\n\
    \        car_pos[i] = rand::random::<f32>();\n        car_direction[i] = rand::random::<f32>();\n\
    \        car_speeds[i] = speed[i];\n        car_directions[i] = car_direction[i];\n\
    \        car_speeds_left[i] = car_speed[i];\n        car_directions_left[i] =\
    \ car_direction[i];\n        car_speeds_right[i] = car_speed[i];\n        car_directions_right[i]\
    \ = car_direction[i];\n    }\n\n    for i in 0..n {\n        for j in (i + 1)..n\
    \ {\n            let mut collision = false;\n            let mut collision_left\
    \ = false;\n            let mut collision_right = false;\n            let mut\
    \ collision_left_right = false;\n\n            if car_pos[j] > car_pos[i] {\n\
    \                let mut car_pos_left = car_pos[j] - car_speed[j];\n         \
    \       let mut car_pos_right = car_pos[j] + car_speed[j];\n                let\
    \ mut car_speed_left = car_speeds[j];\n                let mut car_speed_right\
    \ = car_speeds[j];\n                let mut car_direction_left = car_directions[j];\n\
    \                let mut car_direction_right = car_directions[j];\n\n        \
    \        while car_pos_left > car_pos_right {\n                    car_pos_left\
    \ -= car_speed_left;\n                    car_speed_left *= 0.5;\n           \
    \         car_direction_left *= 0.5;\n                }\n\n                while\
    \ car_pos_right < car_pos_left {\n                    car_pos_right += car_speed_right;\n\
    \                    car_speed_right *= 0.5;\n                    car_direction_right\
    \ *= 0.5;\n                }\n\n                while car_speed_left > car_speed_right\
    \ {\n                    car_speed_left *= 0.5;\n                    \n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpj3myhbcn.rs:74:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n35 |     for i in 0..n {\n\
    \   |                   - unclosed delimiter\n36 |         for j in (i + 1)..n\
    \ {\n   |                             - unclosed delimiter\n...\n42 |        \
    \     if car_pos[j] > car_pos[i] {\n   |                                     \
    \   - unclosed delimiter\n...\n62 |                 while car_speed_left > car_speed_right\
    \ {\n   |                                                        - this delimiter\
    \ might not be properly closed...\n...\n65 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n74 | }\n   |   ^\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:23:20\n\
    \   |\n23 |         speed[i] = rand::random::<f32>();\n   |                  \
    \  ^^^^ use of undeclared crate or module `rand`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:25:22\n\
    \   |\n25 |         car_pos[i] = rand::random::<f32>();\n   |                \
    \      ^^^^ use of undeclared crate or module `rand`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:26:28\n\
    \   |\n26 |         car_direction[i] = rand::random::<f32>();\n   |          \
    \                  ^^^^ use of undeclared crate or module `rand`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj3myhbcn.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj3myhbcn.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj3myhbcn.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this s"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6 = 1.0;\n    let\
    \ mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let mut car_speed9\
    \ = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11 = 1.0;\n   \
    \ let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16 = 1.0;\n   \
    \ let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_speed19\
    \ = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21 = 1.0;\n   \
    \ let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut car_speed24\
    \ = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26 = 1.0;\n   \
    \ let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n    let mut car_speed29\
    \ = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31 = 1.0;\n   \
    \ let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n    let mut car_speed34\
    \ = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36 = 1.0;\n   \
    \ let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n    let mut car_speed39\
    \ = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41 = 1.0;\n   \
    \ let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n    let mut car_speed44\
    \ = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46 = 1.0;\n   \
    \ let mut car_speed47 = 1.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnopbqers.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnopbqers.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnopbqers.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnopbqers.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collisions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_direction_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_direction_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnl36xfc4.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnl36xfc4.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_distance =\
    \ 0.0;\n    let mut collision_direction = 1.0;\n    let mut collision_speed2 =\
    \ 0.0;\n    let mut collision_time2 = 0.0;\n    let mut collision_distance2 =\
    \ 0.0;\n    let mut collision_direction2 = 1.0;\n    let mut collision_speed3\
    \ = 0.0;\n    let mut collision_time3 = 0.0;\n    let mut collision_distance3\
    \ = 0.0;\n    let mut collision_direction3 = 1.0;\n    let mut collision_speed4\
    \ = 0.0;\n    let mut collision_time4 = 0.0;\n    let mut collision_distance4\
    \ = 0.0;\n    let mut collision_direction4 = 1.0;\n    let mut collision_speed5\
    \ = 0.0;\n    let mut collision_time5 = 0.0;\n    let mut collision_distance5\
    \ = 0.0;\n    let mut collision_direction5 = 1.0;\n    let mut collision_speed6\
    \ = 0.0;\n    let mut collision_time6 = 0.0;\n    let mut collision_distance6\
    \ = 0.0;\n    let mut collision_direction6 = 1.0;\n    let mut collision_speed7\
    \ = 0.0;\n    let mut collision_time7 = 0.0;\n    let mut collision_distance7\
    \ = 0.0;\n    let mut collision_direction7 = 1.0;\n    let mut collision_speed8\
    \ = 0.0;\n    let mut collision_time8 = 0.0;\n    let mut collision_distance8\
    \ = 0.0;\n    let mut collision_direction8 = 1.0;\n    let mut collision_speed9\
    \ = 0.0;\n    let mut collision_time9 = 0.0;\n    let mut collision_distance9\
    \ = 0.0;\n    let mut collision_direction9 = 1.0;\n    let mut collision_speed10\
    \ = 0.0;\n    let mut collision_time10 = 0.0;\n    let mut collision_distance10\
    \ = 0.0;\n    let mut collision_direction10 = 1.0;\n    let mut collision_speed11\
    \ = 0.0;\n    let mut collision_time11 = 0.0;\n    let mut collision_distance11\
    \ = 0.0;\n    let mut collision_direction11 = 1.0;\n    let mut collision_speed12\
    \ = 0.0;\n    let mut collision_time12 = 0.0;\n    let mut collision_distance12\
    \ = 0.0;\n    let mut collision_direction12 = 1.0;\n    let mut collision_speed13\
    \ = 0.0;\n    let mut collision_time13 = 0.0;\n    let mut collision_distance13\
    \ = 0.0;\n    let mut collision_direction13 = 1.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz4_wnsy_.rs:62:39\n   |\n\
    62 |     let mut collision_direction13 = 1.\n   |                            \
    \           ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz4_wnsy_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_heading = 0.0;\n    let mut prev_collisions = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf9g_x_ii.rs:61:18\n   |\n\
    61 |     let mut prev_\n   |                  ^ help: add `;` here\n62 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf9g_x_ii.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf9g_x_ii.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf9g_x_ii.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf9g_x_ii.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_speed2 = 0.0;\n    let mut car_direction2 = 1.0;\n \
    \   let mut car_y2 = 0.0;\n    let mut car_speed3 = 0.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_x3 = 0.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4\
    \ = 0.0;\n    let mut car_direction4 = 1.0;\n    let mut car_x4 = 0.0;\n    let\
    \ mut car_y4 = 0.0;\n    let mut car_speed5 = 0.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_x5 = 0.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 0.0;\n    let mut car_direction6 = 1.0;\n    let mut car_x6 = 0.0;\n    let\
    \ mut car_y6 = 0.0;\n    let mut car_speed7 = 0.0;\n    let mut car_direction7\
    \ = 1.0;\n    let mut car_x7 = 0.0;\n    let mut car_y7 = 0.0;\n    let mut car_speed8\
    \ = 0.0;\n    let mut car_direction8 = 1.0;\n    let mut car_x8 = 0.0;\n    let\
    \ mut car_y8 = 0.0;\n    let mut car_speed9 = 0.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_x9 = 0.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10\
    \ = 0.0;\n    let mut car_direction10 = 1.0;\n    let mut car_x10 = 0.0;\n   \
    \ let mut car_y10 = 0.0;\n    let mut car_speed11 = 0.0;\n    let mut car_direction11\
    \ = 1.0;\n    let mut car_x11 = 0.0;\n    let mut car_y11 = 0.0;\n    let mut\
    \ car_speed12 = 0.0;\n    let mut car_direction12 = 1.0;\n    let mut car_x12\
    \ = 0.0;\n    let mut car_y12 = 0.0;\n    let mut car_speed13 = 0.0;\n    let\
    \ mut car_direction13 = 1.0;\n    let mut car_x13 = 0.0;\n    let mut car_y13\
    \ = 0.0;\n    let mut car_speed14 = 0.0;\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz7tds1ua.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpz7tds1ua.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
