language: rs
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_time\
    \ = 0.0;\n    let mut collision_distance = 0.0;\n    let mut collision_speed =\
    \ 0.0;\n    let mut collision_acceleration = 0.0;\n    let mut collision_direction\
    \ = 0.0;\n    let mut collision_direction_magnitude = 0.0;\n    let mut collision_direction_normalized\
    \ = false;\n    let mut collision_direction_normalized_magnitude = 0.0;\n    let\
    \ mut collision_direction_normalized_time = 0;\n    let mut collision_direction_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized = false;\n\
    \    let mut collision_direction_normalized_time_normalized_magnitude = 0.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time = 0;\n    let\
    \ mut collision_direction_normalized_time_normalized_time_magnitude = 0.0;\n \
    \   let mut collision_direction_normalized_time_normalized_time_normalized = false;\n\
    \    let mut collision_direction_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = false;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 0.0;\n    let mut collision_direction_\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf6v78bma.rs:43:33\n   |\n\
    43 |     let mut collision_direction_\n   |                                 ^\
    \ help: add `;` here\n44 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf6v78bma.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:49:25\n   |\n49 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf6v78bma.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:50:25\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:51:17\n  \
    \ |\n51 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf6v78bma.rs:51:25\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf6v78bma.rs:52:17\n   |\n52 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf6v78bma.rs:52:25\n\
    \   |\n52 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut collision_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut collision_speed =\
    \ vec![0.0; n];\n    let mut collision_direction = vec![0.0; n];\n\n    for car_i\
    \ in 0..n {\n        let car_speed = car_positions[car_i];\n        let car_direction\
    \ = car_directions[car_i];\n        for car_j in 0..n {\n            let other_car_speed\
    \ = car_positions[car_j];\n            let other_car_direction = car_directions[car_j];\n\
    \            if car_speed == other_car_speed {\n                collision_speed[car_i]\
    \ += other_car_speed;\n                collision_speed[car_j] -= car_speed;\n\
    \                collision_direction[car_i] += other_car_direction;\n        \
    \        collision_direction[car_j] -= car_direction;\n                collision_count\
    \ += 1;\n            }\n        }\n    }\n    collision_count\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `<eof>`\n  --> /tmp/tmp5c6ge0lj.rs:11:69\n \
    \  |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                                     ^ expected\
    \ `{`\n\nerror: no rules expected the token `for`\n  --> /tmp/tmp5c6ge0lj.rs:11:57\n\
    \   |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                         ^^^ no rules expected\
    \ this token in macro call\n\nerror: expected `{`, found `<eof>`\n  --> /tmp/tmp5c6ge0lj.rs:12:75\n\
    \   |\n12 |     let mut collision_positions = vec![vec![2 * i, 2 * i + 1] for\
    \ i in 0..n];\n   |                                                          \
    \                 ^ expected `{`\n\nerror: no rules expected the token `for`\n\
    \  --> /tmp/tmp5c6ge0lj.rs:12:63\n   |\n12 |     let mut collision_positions =\
    \ vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n   |                          \
    \                                     ^^^ no rules expected this token in macro\
    \ call\n\nerror[E0425]: cannot find value `car_directions` in this scope\n  -->\
    \ /tmp/tmp5c6ge0lj.rs:18:29\n   |\n18 |         let car_direction = car_directions[car_i];\n\
    \   |                             ^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `car_directions` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:21:39\n\
    \   |\n21 |             let other_car_direction = car_directions[car_j];\n   |\
    \                                       ^^^^^^^^^^^^^^ help: a local variable\
    \ with a similar name exists: `car_direction`\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:36:17\n   |\n36 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5c6ge0lj.rs:36:25\n \
    \  |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5c6ge0lj.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   "
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction =\
    \ Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2\
    \ = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3\
    \ = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4\
    \ = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5\
    \ = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6\
    \ = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7\
    \ = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8\
    \ = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9\
    \ = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10\
    \ = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11\
    \ = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12\
    \ = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13\
    \ = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14\
    \ = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15\
    \ = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16\
    \ = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17\
    \ = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n    let mut car_direction\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6st2gs8j.rs:49:26\n   |\n\
    49 |     let mut car_direction\n   |                          ^ help: add `;`\
    \ here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp6st2gs8j.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6st2gs8j.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6st2gs8j.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6st2gs8j.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6st2gs8j.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6st2gs8j.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6st2gs8j.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched t"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut\
    \ car_y = 0.0;\n    let mut car_speed2 = 1.0;\n    let mut car_direction2 = 1.0;\n\
    \    let mut car_y2 = 0.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_x3 = 0.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_direction4 = 1.0;\n    let mut car_x4 = 0.0;\n    let\
    \ mut car_y4 = 0.0;\n    let mut car_speed5 = 1.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_x5 = 0.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_x6 = 0.0;\n    let\
    \ mut car_y6 = 0.0;\n    let mut car_speed7 = 1.0;\n    let mut car_direction7\
    \ = 1.0;\n    let mut car_x7 = 0.0;\n    let mut car_y7 = 0.0;\n    let mut car_speed8\
    \ = 1.0;\n    let mut car_direction8 = 1.0;\n    let mut car_x8 = 0.0;\n    let\
    \ mut car_y8 = 0.0;\n    let mut car_speed9 = 1.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_x9 = 0.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10\
    \ = 1.0;\n    let mut car_direction10 = 1.0;\n    let mut car_x10 = 0.0;\n   \
    \ let mut car_y10 = 0.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11\
    \ = 1.0;\n    let mut car_x11 = 0.0;\n    let mut car_y11 = 0.0;\n    let mut\
    \ car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut car_x12\
    \ = 0.0;\n    let mut car_y12 = 0.0;\n    let mut car_speed13 = 1.0;\n    let\
    \ mut car_direction13 = 1.0;\n    let mut car_x13 = 0.0;\n    let mut car_y13\
    \ = 0.0;\n    let mut car_speed14\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxf_fz8v0.rs:62:24\n   |\n\
    62 |     let mut car_speed14\n   |                        ^ help: add `;` here\n\
    63 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpxf_fz8v0.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxf_fz8v0.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxf_fz8v0.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxf_fz8v0.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxf_fz8v0.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y\
    \ = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut\
    \ prev_time_diff = 1.0;\n    let mut prev_time_diff2 = 1.0;\n    let mut prev_time_diff3\
    \ = 1.0;\n    let mut prev_time_diff4 = 1.0;\n    let mut prev_time_diff5 = 1.0;\n\
    \    let mut prev_time_diff6 = 1.0;\n    let mut prev_time_diff7 = 1.0;\n    let\
    \ mut prev_time_diff8 = 1.0;\n    let mut prev_time_diff9 = 1.0;\n    let mut\
    \ prev_time_diff10 = 1.0;\n    let mut prev_time_diff11 = 1.0;\n    let mut prev_time_diff12\
    \ = 1.0;\n    let mut prev_time_diff13 = 1.0;\n    let mut prev_time_diff14 =\
    \ 1.0;\n    let mut prev_time_diff15 = 1.0;\n    let mut prev_time_diff16 = 1.0;\n\
    \    let mut prev_time_diff17 = 1.0;\n    let mut prev_time_diff18 = 1.0;\n  \
    \  let mut prev_time_diff19 = 1.0;\n    let mut prev_time_diff20 = 1.0;\n    let\
    \ mut prev_time_diff21 = 1.0;\n    let mut prev_time_diff22 = 1.0;\n    let mut\
    \ prev_time_diff23 = 1.0;\n    let mut prev_time_diff24 = 1.0;\n    let mut prev_time_diff25\
    \ = 1.0;\n    let mut prev_time_diff26 = 1.0;\n    let mut prev_time_diff27 =\
    \ 1.0;\n    let mut prev_time_diff28 = 1.0;\n    let mut prev_time_diff29 = 1.0;\n\
    \    let mut prev_time_diff30 = 1.0;\n    let mut prev_time_diff31 = 1.0;\n  \
    \  let mut prev_time_diff32 = 1.0;\n    let mut prev_time_diff33 = 1.0;\n    let\
    \ mut prev_time_diff34 = 1.0;\n    let mut prev_time_diff35 = 1.0;\n    let mut\
    \ prev_time_diff36 = 1.0;\n    let mut prev_time_diff37 = 1.0;\n    let mut prev_time_diff38\
    \ = 1.0;\n    let mut prev_time_diff39 = 1.0;\n    let mut prev_time_diff40 =\
    \ 1.0;\n    let mut prev_time_diff41 = 1.0;\n    let mut prev_time_diff42 = 1.0;\n\
    \    let mut prev_time_diff4\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt0pwd5nw.rs:59:28\n   |\n\
    59 |     let mut prev_time_diff4\n   |                            ^ help: add\
    \ `;` here\n60 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt0pwd5nw.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt0pwd5nw.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt0pwd5nw.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt0pwd5nw.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_pos\
    \ = Vec::new();\n    let mut car_pos_2 = Vec::new();\n    let mut car_pos_3 =\
    \ Vec::new();\n    let mut car_pos_4 = Vec::new();\n    let mut car_pos_5 = Vec::new();\n\
    \    let mut car_pos_6 = Vec::new();\n    let mut car_pos_7 = Vec::new();\n  \
    \  let mut car_pos_8 = Vec::new();\n    let mut car_pos_9 = Vec::new();\n    let\
    \ mut car_pos_10 = Vec::new();\n    let mut car_pos_11 = Vec::new();\n    let\
    \ mut car_pos_12 = Vec::new();\n    let mut car_pos_13 = Vec::new();\n    let\
    \ mut car_pos_14 = Vec::new();\n    let mut car_pos_15 = Vec::new();\n    let\
    \ mut car_pos_16 = Vec::new();\n    let mut car_pos_17 = Vec::new();\n    let\
    \ mut car_pos_18 = Vec::new();\n    let mut car_pos_19 = Vec::new();\n    let\
    \ mut car_pos_20 = Vec::new();\n    let mut car_pos_21 = Vec::new();\n    let\
    \ mut car_pos_22 = Vec::new();\n    let mut car_pos_23 = Vec::new();\n    let\
    \ mut car_pos_24 = Vec::new();\n    let mut car_pos_25 = Vec::new();\n    let\
    \ mut car_pos_26 = Vec::new();\n    let mut car_pos_27 = Vec::new();\n    let\
    \ mut car_pos_28 = Vec::new();\n    let mut car_pos_29 = Vec::new();\n    let\
    \ mut car_pos_30 = Vec::new();\n    let mut car_pos_31 = Vec::new();\n    let\
    \ mut car_pos_32 = Vec::new();\n    let mut car_pos_33 = Vec::new();\n    let\
    \ mut car_pos_34 = Vec::new();\n    let mut car_pos_35 = Vec::new();\n    let\
    \ mut car_pos_36 = Vec::new();\n    let mut car_pos_37 = Vec::new();\n    let\
    \ mut car_pos_38 = Vec::\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpr1y7cwia.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpr1y7cwia.rs:56:17\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:56:25\n \
    \  |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpr1y7cwia.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpr1y7cwia.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpr1y7cwia.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpr1y7cwia.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpr1y7cwia.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpr1y7cwia.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = 2.0\n\
    \    let mut car_direction = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction_length = 0.0;\n    let mut car_pos_length = 0.0;\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_speeds_length = 0.0;\n\
    \    let mut car_speeds_direction = Vec::new();\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n    let mut car_speeds_direction_length\
    \ = 0.0;\n    let mut car_speeds_direction_length = 0.0;\n\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpjw8m3v4k.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpjw8m3v4k.rs:11:28\n\
    \   |\n11 |     let mut car_speed = 2.0\n   |                            ^ help:\
    \ add `;` here\n12 |     let mut car_direction = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:56:17\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjw8m3v4k.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:57:25\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjw8m3v4k.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjw8m3v4k.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjw8m3v4k.rs:60:17\n  \
    \ |\n60 |     assert_eq!("
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_time = 0.0;\n    let mut prev_x\
    \ = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut\
    \ prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n   \
    \ let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x =\
    \ 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir\
    \ = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut\
    \ prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n\
    \    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut\
    \ prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let\
    \ mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n\
    \    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x\
    \ = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut\
    \ prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n   \
    \ let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x =\
    \ 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir\
    \ = 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_x = 0.0;\n    let mut\
    \ prev_y = 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_dir = 0.0;\n\
    \    let mut prev_time = 0.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpqneeqfqa.rs:75:1\n  \
    \ |\n75 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqneeqfqa.rs:79:17\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:79:25\n \
    \  |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqneeqfqa.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqneeqfqa.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqneeqfqa.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqneeqfqa.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqneeqfqa.rs:83:17\n   |\n83 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqneeqfqa.rs:83:25\n\
    \   |\n83 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_x = 0.0;\n    let mut car_y = 0.0;\n    let mut car_speed2 =\
    \ 0.0;\n    let mut car_speed3 = 0.0;\n    let mut car_speed4 = 0.0;\n    let\
    \ mut car_speed5 = 0.0;\n    let mut car_speed6 = 0.0;\n    let mut car_speed7\
    \ = 0.0;\n    let mut car_speed8 = 0.0;\n    let mut car_speed9 = 0.0;\n    let\
    \ mut car_speed10 = 0.0;\n    let mut car_speed11 = 0.0;\n    let mut car_speed12\
    \ = 0.0;\n    let mut car_speed13 = 0.0;\n    let mut car_speed14 = 0.0;\n   \
    \ let mut car_speed15 = 0.0;\n    let mut car_speed16 = 0.0;\n    let mut car_speed17\
    \ = 0.0;\n    let mut car_speed18 = 0.0;\n    let mut car_speed19 = 0.0;\n   \
    \ let mut car_speed20 = 0.0;\n    let mut car_speed21 = 0.0;\n    let mut car_speed22\
    \ = 0.0;\n    let mut car_speed23 = 0.0;\n    let mut car_speed24 = 0.0;\n   \
    \ let mut car_speed25 = 0.0;\n    let mut car_speed26 = 0.0;\n    let mut car_speed27\
    \ = 0.0;\n    let mut car_speed28 = 0.0;\n    let mut car_speed29 = 0.0;\n   \
    \ let mut car_speed30 = 0.0;\n    let mut car_speed31 = 0.0;\n    let mut car_speed32\
    \ = 0.0;\n    let mut car_speed33 = 0.0;\n    let mut car_speed34 = 0.0;\n   \
    \ let mut car_speed35 = 0.0;\n    let mut car_speed36 = 0.0;\n    let mut car_speed37\
    \ = 0.0;\n    let mut car_speed38 = 0.0;\n    let mut car_speed39 = 0.0;\n   \
    \ let mut car_speed40 = 0.0;\n    let mut car_speed41 = 0.0;\n    let mut car_speed42\
    \ = 0.0;\n    let mut car_speed43 = 0.0;\n    let mut car_speed44 = 0.0;\n   \
    \ let mut car_speed45 = 0.0;\n    let mut car_speed46 = 0.0;\n    let mut car_speed47\
    \ = 0.0;\n    let mut car_speed48 = 0.0;\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk7py6_0v.rs:61:11\n   |\n\
    61 |     let mu\n   |           ^ help: add `;` here\n62 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7py6_0v.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7py6_0v.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7py6_0v.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7py6_0v.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk7py6_0v.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![];\n    let mut car_speeds = vec![];\n    let mut car_directions = vec![];\n\
    \    let mut car_collisions = vec![];\n\n    for _ in 0..n {\n        car_positions.push(vec![]);\n\
    \        car_speeds.push(vec![]);\n        car_directions.push(vec![]);\n    \
    \    car_collisions.push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec![]);\n        car_speeds[_].push(vec![]);\n    \
    \    car_directions[_].push(vec![]);\n        car_collisions[_].push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n      \
    \  car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n    \
    \    car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec![]);\n        car_speeds[_].push(vec![]);\n    \
    \    car_directions[_].push(vec![]);\n        car_collisions[_].push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n      \
    \  car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n    \
    \    car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n\
    \        car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n\
    \        car_collisions[_].push(vec![]);\n    }\n\n    for _ in 0..n {\n     \
    \   car_positions[_].push(vec!\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp5dztyslt.rs:83:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n72 |     for _ in 0..n {\n\
    \   |                   - this delimiter might not be properly closed...\n73 |\
    \         car_positions[_].push(vec!\n74 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n83 | }\n   |   ^\n\nerror: expected one of\
    \ `(`, `[`, or `{`, found `)`\n  --> /tmp/tmp5dztyslt.rs:74:1\n   |\n73 |    \
    \     car_positions[_].push(vec!\n   |                                   - expected\
    \ one of `(`, `[`, or `{`\n74 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmp5dztyslt.rs:73:30\n   |\n9  | fn car_race_collision(n:\
    \ isize) -> isize {\n   |                                          - closing delimiter\
    \ possibly meant for this\n...\n73 |         car_positions[_].push(vec!\n   |\
    \                              ^ unclosed delimiter\n74 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5dztyslt.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5dztyslt.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5dztyslt.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5dztyslt.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5dztyslt.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5dztyslt.rs:80:25\n   |\n80 |     assert_eq!("
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_x\
    \ = 0.0;\n    let mut max_x = 0.0;\n    let mut min_y = 0.0;\n    let mut max_y\
    \ = 0.0;\n    let mut min_z = 0.0;\n    let mut max_z = 0.0;\n    let mut min_d\
    \ = 0.0;\n    let mut max_d = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q\
    \ = 0.0;\n    let mut max_q = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplnxmfb5h.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplnxmfb5h.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplnxmfb5h.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplnxmfb5h.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmplnxmfb5h.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_speeds = [(0., 0.)..(n, 0.)];\n    let\
    \ mut car_directions = [(0., 0.)..(n, 0.)];\n    let mut car_collisions = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_directions = [(0., 0.)..(n, 0.)];\n\
    \    let mut car_collisions_speeds = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_positions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_speeds_positions = [(0., 0.)..(n,\
    \ 0.)];\n    let mut car_collisions_speeds_directions_positions = [(0., 0.)..(n,\
    \ 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds = [(0.,\
    \ 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds\
    \ = [(0., 0.)..(n, 0.)];\n    let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0., 0.)..\n}\n\nfn main() {\n    let candidate = car_race_collision;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmpys901n78.rs:31:1\n   |\n31 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmpys901n78.rs:30:148\n   |\n9  | fn car_race_collision(n: isize) -> isize\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n...\n30 |     let mut car_collisions_speeds_directions_positions_speeds_directions_speeds_directions_speeds_directions_speeds_directions_speeds_directions\
    \ = [(0....\n   |                                                            \
    \                                                                            \
    \            ^ unclosed delimiter\n31 | }\n   | ^ mismatched closing delimiter\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpys901n78.rs:35:17\n\
    \   |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpys901n78.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpys901n78.rs:36:17\n   |\n36 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpys901n78.rs:36:25\n\
    \   |\n36 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpys901n78.rs:37:17\n   |\n37 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpys901n78.rs:37:25\n   |\n37 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpys901n78.rs:38:17\n   |\n38 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in th"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_directions_\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa0knnb_l.rs:49:28\n   |\n\
    49 |     let mut car_directions_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa0knnb_l.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed_left = car_speed;\n    let mut car_speed_right = car_speed;\n\
    \    let mut car_speed_left_to_right = car_speed;\n    let mut car_speed_right_to_left\
    \ = car_speed;\n    let mut car_speed_left_to_right_left = car_speed;\n    let\
    \ mut car_speed_right_to_left_left = car_speed;\n    let mut car_speed_left_to_right_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_left_right = car_speed;\n    let mut car_speed_right_to_left_left_right\
    \ = car_speed;\n    let mut car_speed_left_to_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_right_right = car_speed;\n    let mut car_speed_left_to_right_left_left_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_left_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right = car_speed;\n    let mut\
    \ car_speed_right_to_left_right_right_right = car_speed;\n    let mut car_speed_left_to_right_left_left_right_right\
    \ = car_speed;\n    let mut car_speed_right_to_left_left_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right_right = car_speed;\n   \
    \ let mut car_speed_right_to_left_right_right_right_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_left_left_right_right_right = car_speed;\n    let\
    \ mut car_speed_right_to_left_left_right_right_right_right = car_speed;\n    let\
    \ mut car_speed_left_to_right_right_left_right_right_right = car_speed;\n    let\
    \ mut car_speed_right_to_left_right_right_right_right_right = car_speed;\n   \
    \ let mut car_speed_left_to_right_left_left_right_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_left_right_right_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_right_left_right_right_right_right = car_speed;\n\
    \    let mut car_speed_right_to_left_right_right_right_right_right_right = car_speed;\n\
    \    let mut car_speed_left_to_right_left_left_right_right_right_right_right =\
    \ car_speed;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpsa1jttke.rs:42:1\n\
    \   |\n42 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpsa1jttke.rs:46:17\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:46:25\n \
    \  |\n46 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpsa1jttke.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpsa1jttke.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpsa1jttke.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpsa1jttke.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpsa1jttke.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpsa1jttke.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut last_collision_x = 0.0;\n    let mut last_collision_y = 0.0;\n   \
    \ let mut last_collision_time = 0.0;\n    let mut last_collision_direction = 0.0;\n\
    \    let mut last_collision_speed = 0.0;\n    let mut last_collision_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_velocity = 0.0;\n    let mut last_collision_angular_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude = 0.0;\n \
    \   let mut last_collision_angular_acceleration_direction = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7sc8t_gm.rs:44:49\n   |\n\
    44 |     let mut last_collision_angular_acceleration_\n   |                  \
    \                               ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7sc8t_gm.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not f"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n\
    \    let mut car_x_speed = Vec::new();\n    let mut car_y_speed = Vec::new();\n\
    \    let mut car_x_speed2 = Vec::new();\n    let mut car_y_speed2 = Vec::new();\n\
    \    let mut car_x_speed3 = Vec::new();\n    let mut car_y_speed3 = Vec::new();\n\
    \    let mut car_x_speed4 = Vec::new();\n    let mut car_y_speed4 = Vec::new();\n\
    \    let mut car_x_speed5 = Vec::new();\n    let mut car_y_speed5 = Vec::new();\n\
    \    let mut car_x_speed6 = Vec::new();\n    let mut car_y_speed6 = Vec::new();\n\
    \    let mut car_x_speed7 = Vec::new();\n    let mut car_y_speed7 = Vec::new();\n\
    \    let mut car_x_speed8 = Vec::new();\n    let mut car_y_speed8 = Vec::new();\n\
    \    let mut car_x_speed9 = Vec::new();\n    let mut car_y_speed9 = Vec::new();\n\
    \    let mut car_x_speed10 = Vec::new();\n    let mut car_y_speed10 = Vec::new();\n\
    \    let mut car_x_speed11 = Vec::new();\n    let mut car_y_speed11 = Vec::new();\n\
    \    let mut car_x_speed12 = Vec::new();\n    let mut car_y_speed12 = Vec::new();\n\
    \    let mut car_x_speed13 = Vec::new();\n    let mut car_y_speed13 = Vec::new();\n\
    \    let mut car_x_speed14 = Vec::new();\n    let mut car_y_speed14 = Vec::new();\n\
    \    let mut car_x_speed15 = Vec::new();\n    let mut car_y_speed15 = Vec::new();\n\
    \    let mut car_x_speed16 = Vec::new();\n    let mut car_y_speed16 = Vec::new();\n\
    \    let mut car_x_speed17 = Vec::new();\n    let mut car_y_speed17 = Vec::new();\n\
    \    let mut car_x_speed18 = Vec::new();\n    let mut \n}\n\nfn main() {\n   \
    \ let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpn3amlqdp.rs:50:1\n\
    \   |\n50 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpn3amlqdp.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpn3amlqdp.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpn3amlqdp.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpn3amlqdp.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpn3amlqdp.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpn3amlqdp.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpn3amlqdp.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed2 = Vec::new();\n    let mut car_pos2 = Vec::new();\n  \
    \  let mut car_direction2 = Vec::new();\n    let mut car_speed3 = Vec::new();\n\
    \    let mut car_pos3 = Vec::new();\n    let mut car_direction3 = Vec::new();\n\
    \    let mut car_speed4 = Vec::new();\n    let mut car_pos4 = Vec::new();\n  \
    \  let mut car_direction4 = Vec::new();\n    let mut car_speed5 = Vec::new();\n\
    \    let mut car_pos5 = Vec::new();\n    let mut car_direction5 = Vec::new();\n\
    \    let mut car_speed6 = Vec::new();\n    let mut car_pos6 = Vec::new();\n  \
    \  let mut car_direction6 = Vec::new();\n    let mut car_speed7 = Vec::new();\n\
    \    let mut car_pos7 = Vec::new();\n    let mut car_direction7 = Vec::new();\n\
    \    let mut car_speed8 = Vec::new();\n    let mut car_pos8 = Vec::new();\n  \
    \  let mut car_direction8 = Vec::new();\n    let mut car_speed9 = Vec::new();\n\
    \    let mut car_pos9 = Vec::new();\n    let mut car_direction9 = Vec::new();\n\
    \    let mut car_speed10 = Vec::new();\n    let mut car_pos10 = Vec::new();\n\
    \    let mut car_direction10 = Vec::new();\n    let mut car_speed11 = Vec::new();\n\
    \    let mut car_pos11 = Vec::new();\n    let mut car_direction11 = Vec::new();\n\
    \    let mut car_speed12 = Vec::new();\n    let mut car_pos12 = Vec::new();\n\
    \    let mut car_direction12 = Vec::new();\n    let mut car_speed13 = Vec::new();\n\
    \    let mut car_pos13 = Vec::new();\n    let mut car_direction13 = Vec::new();\n\
    \    let mut car_speed14 = Vec::new();\n    let mut car_pos14 = Vec::new();\n\
    \    let mut car_direction14 = Vec::\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp28ry2zow.rs:53:1\n\
    \   |\n53 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp28ry2zow.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp28ry2zow.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp28ry2zow.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp28ry2zow.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp28ry2zow.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp28ry2zow.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp28ry2zow.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut direction = 1.0;\n    let mut speed2 = 1.0;\n    let mut direction2\
    \ = 1.0;\n    let mut speed3 = 1.0;\n    let mut direction3 = 1.0;\n    let mut\
    \ speed4 = 1.0;\n    let mut direction4 = 1.0;\n    let mut speed5 = 1.0;\n  \
    \  let mut direction5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut direction6\
    \ = 1.0;\n    let mut speed7 = 1.0;\n    let mut direction7 = 1.0;\n    let mut\
    \ speed8 = 1.0;\n    let mut direction8 = 1.0;\n    let mut speed9 = 1.0;\n  \
    \  let mut direction9 = 1.0;\n    let mut speed10 = 1.0;\n    let mut direction10\
    \ = 1.0;\n    let mut speed11 = 1.0;\n    let mut direction11 = 1.0;\n    let\
    \ mut speed12 = 1.0;\n    let mut direction12 = 1.0;\n    let mut speed13 = 1.0;\n\
    \    let mut direction13 = 1.0;\n    let mut speed14 = 1.0;\n    let mut direction14\
    \ = 1.0;\n    let mut speed15 = 1.0;\n    let mut direction15 = 1.0;\n    let\
    \ mut speed16 = 1.0;\n    let mut direction16 = 1.0;\n    let mut speed17 = 1.0;\n\
    \    let mut direction17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut direction18\
    \ = 1.0;\n    let mut speed19 = 1.0;\n    let mut direction19 = 1.0;\n    let\
    \ mut speed20 = 1.0;\n    let mut direction20 = 1.0;\n    let mut speed21 = 1.0;\n\
    \    let mut direction21 = 1.0;\n    let mut speed22 = 1.0;\n    let mut direction22\
    \ = 1.0;\n    let mut speed23 = 1.0;\n    let mut direction23 = 1.0;\n    let\
    \ mut speed24 = 1.0;\n    let mut direction24 = 1.0;\n    let mut speed25 = 1.0;\n\
    \    let mut direction25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut direction26\
    \ = 1.0;\n    let mut speed27 = 1.0;\n    let mut direction27 = 1.0;\n    let\
    \ mut speed28 = 1.0;\n    let mut direction28 = 1.0;\n    let mut speed29 = 1.0;\n\
    \    let mut direction29 = 1.0;\n    let mut speed30 = 1.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphne6o_fv.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphne6o_fv.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_direction_magnitude = 1.0;\n    let mut collision_direction_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude = 1.0;\n    let\
    \ mut collision_direction_normalized_time = 0;\n    let mut collision_direction_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_magnitude = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time = 0;\n    let\
    \ mut collision_direction_normalized_time_normalized_time_magnitude = 1.0;\n \
    \   let mut collision_direction_normalized_time_normalized_time_normalized = 1.0;\n\
    \    let mut collision_direction_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time\
    \ = 0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized\
    \ = 1.0;\n    let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptka6jrbw.rs:40:140\n   |\n\
    40 |     let mut collision_direction_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_time_normalized_\n\
    \   |                                                                        \
    \                                                                    ^ help: add\
    \ `;` here\n41 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptka6jrbw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptka6jrbw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptka6jrbw.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptka6jrbw.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptka6jrbw.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found i"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut car_speeds\
    \ = Vec::new();\n    let mut car_directions = Vec::new();\n    let mut car_speeds_2\
    \ = Vec::new();\n    let mut car_directions_2 = Vec::new();\n    let mut car_speeds_3\
    \ = Vec::new();\n    let mut car_directions_3 = Vec::new();\n    let mut car_speeds_4\
    \ = Vec::new();\n    let mut car_directions_4 = Vec::new();\n    let mut car_speeds_5\
    \ = Vec::new();\n    let mut car_directions_5 = Vec::new();\n    let mut car_speeds_6\
    \ = Vec::new();\n    let mut car_directions_6 = Vec::new();\n    let mut car_speeds_7\
    \ = Vec::new();\n    let mut car_directions_7 = Vec::new();\n    let mut car_speeds_8\
    \ = Vec::new();\n    let mut car_directions_8 = Vec::new();\n    let mut car_speeds_9\
    \ = Vec::new();\n    let mut car_directions_9 = Vec::new();\n    let mut car_speeds_10\
    \ = Vec::new();\n    let mut car_directions_10 = Vec::new();\n    let mut car_speeds_11\
    \ = Vec::new();\n    let mut car_directions_11 = Vec::new();\n    let mut car_speeds_12\
    \ = Vec::new();\n    let mut car_directions_12 = Vec::new();\n    let mut car_speeds_13\
    \ = Vec::new();\n    let mut car_directions_13 = Vec::new();\n    let mut car_speeds_14\
    \ = Vec::new();\n    let mut car_directions_14 = Vec::new();\n    let mut car_speeds_15\
    \ = Vec::new();\n    let mut car_directions_15 = Vec::new();\n    let mut car_speeds_16\
    \ = Vec::new();\n    let mut car_directions_16 = Vec::new();\n    let mut car_speeds_17\
    \ = Vec::new();\n    let mut car_directions_17 = Vec::new();\n    let mut car_speeds_18\
    \ = Vec::new();\n    let mut car_directions_18 = Vec::new();\n    let \n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpafrjbfn8.rs:50:1\n  \
    \ |\n50 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpafrjbfn8.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpafrjbfn8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpafrjbfn8.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpafrjbfn8.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpafrjbfn8.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpafrjbfn8.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpafrjbfn8.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_next = Vec::new();\n    let mut car_next_next = Vec::new();\n\
    \    let mut car_next_next_next = Vec::new();\n    let mut car_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next = Vec::new();\n    let\
    \ mut car_next_next_next_next_next_next = Vec::new();\n    let mut car_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next_next = Vec::new();\n\
    \    let mut car_next_next_next_next_next_next_next_next_next_next_next_next =\
    \ Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n    let mut car_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = Vec::new();\n\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt8fewray.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt8fewray.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt8fewray.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt8fewray.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt8fewray.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt8fewray.rs:46:25\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpt8fewray.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = 2.0\n\
    \    let mut car_speed2 = 2.0\n    let mut car_speed3 = 2.0\n    let mut car_speed4\
    \ = 2.0\n    let mut car_speed5 = 2.0\n    let mut car_speed6 = 2.0\n    let mut\
    \ car_speed7 = 2.0\n    let mut car_speed8 = 2.0\n    let mut car_speed9 = 2.0\n\
    \    let mut car_speed10 = 2.0\n    let mut car_speed11 = 2.0\n    let mut car_speed12\
    \ = 2.0\n    let mut car_speed13 = 2.0\n    let mut car_speed14 = 2.0\n    let\
    \ mut car_speed15 = 2.0\n    let mut car_speed16 = 2.0\n    let mut car_speed17\
    \ = 2.0\n    let mut car_speed18 = 2.0\n    let mut car_speed19 = 2.0\n    let\
    \ mut car_speed20 = 2.0\n    let mut car_speed21 = 2.0\n    let mut car_speed22\
    \ = 2.0\n    let mut car_speed23 = 2.0\n    let mut car_speed24 = 2.0\n    let\
    \ mut car_speed25 = 2.0\n    let mut car_speed26 = 2.0\n    let mut car_speed27\
    \ = 2.0\n    let mut car_speed28 = 2.0\n    let mut car_speed29 = 2.0\n    let\
    \ mut car_speed30 = 2.0\n    let mut car_speed31 = 2.0\n    let mut car_speed32\
    \ = 2.0\n    let mut car_speed33 = 2.0\n    let mut car_speed34 = 2.0\n    let\
    \ mut car_speed35 = 2.0\n    let mut car_speed36 = 2.0\n    let mut car_speed37\
    \ = 2.0\n    let mut car_speed38 = 2.0\n    let mut car_speed39 = 2.0\n    let\
    \ mut car_speed40 = 2.0\n    let mut car_speed41 = 2.0\n    let mut car_speed42\
    \ = 2.0\n    let mut car_speed43 = 2.0\n    let mut car_speed44 = 2.0\n    let\
    \ mut car_speed45 = 2.0\n    let mut car_speed46 = 2.0\n    let mut car_speed47\
    \ = 2.0\n    let mut car_speed48 = 2.0\n    let mut car_speed49 = 2.0\n    let\
    \ mut car_speed50 = 2.0\n    let mut car_speed51 = 2.0\n    let mut car_speed52\
    \ = \n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:11:28\n\
    \   |\n11 |     let mut car_speed = 2.0\n   |                            ^ help:\
    \ add `;` here\n12 |     let mut car_speed2 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:12:29\n\
    \   |\n12 |     let mut car_speed2 = 2.0\n   |                             ^ help:\
    \ add `;` here\n13 |     let mut car_speed3 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:13:29\n\
    \   |\n13 |     let mut car_speed3 = 2.0\n   |                             ^ help:\
    \ add `;` here\n14 |     let mut car_speed4 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:14:29\n\
    \   |\n14 |     let mut car_speed4 = 2.0\n   |                             ^ help:\
    \ add `;` here\n15 |     let mut car_speed5 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:15:29\n\
    \   |\n15 |     let mut car_speed5 = 2.0\n   |                             ^ help:\
    \ add `;` here\n16 |     let mut car_speed6 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:16:29\n\
    \   |\n16 |     let mut car_speed6 = 2.0\n   |                             ^ help:\
    \ add `;` here\n17 |     let mut car_speed7 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:17:29\n\
    \   |\n17 |     let mut car_speed7 = 2.0\n   |                             ^ help:\
    \ add `;` here\n18 |     let mut car_speed8 = 2.0\n   |     --- unexpected token\n\
    \nerror: expected `;`, found keyword `let`\n  --> /tmp/tmpw_lbffv8.rs:18:29\n\
    \   |\n18 |     let mut car_speed8 = 2.0\n   |                             ^ help:\
    \ add `;` here\n19 |     let mut car_speed9 = 2.0\n   |   "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut car_left = Vec::new();\n    let mut car_right = Vec::new();\n   \
    \ let mut car_speed = Vec::new();\n    let mut car_speed2 = Vec::new();\n    let\
    \ mut car_speed3 = Vec::new();\n    let mut car_speed4 = Vec::new();\n    let\
    \ mut car_speed5 = Vec::new();\n    let mut car_speed6 = Vec::new();\n    let\
    \ mut car_speed7 = Vec::new();\n    let mut car_speed8 = Vec::new();\n    let\
    \ mut car_speed9 = Vec::new();\n    let mut car_speed10 = Vec::new();\n    let\
    \ mut car_speed11 = Vec::new();\n    let mut car_speed12 = Vec::new();\n    let\
    \ mut car_speed13 = Vec::new();\n    let mut car_speed14 = Vec::new();\n    let\
    \ mut car_speed15 = Vec::new();\n    let mut car_speed16 = Vec::new();\n    let\
    \ mut car_speed17 = Vec::new();\n    let mut car_speed18 = Vec::new();\n    let\
    \ mut car_speed19 = Vec::new();\n    let mut car_speed20 = Vec::new();\n    let\
    \ mut car_speed21 = Vec::new();\n    let mut car_speed22 = Vec::new();\n    let\
    \ mut car_speed23 = Vec::new();\n    let mut car_speed24 = Vec::new();\n    let\
    \ mut car_speed25 = Vec::new();\n    let mut car_speed26 = Vec::new();\n    let\
    \ mut car_speed27 = Vec::new();\n    let mut car_speed28 = Vec::new();\n    let\
    \ mut car_speed29 = Vec::new();\n    let mut car_speed30 = Vec::new();\n    let\
    \ mut car_speed31 = Vec::new();\n    let mut car_speed32 = Vec::new();\n    let\
    \ mut car_speed33 = Vec::new();\n    let mut car_speed34 = Vec::new();\n    let\
    \ mut car_speed35 = Vec::new();\n    let mut car_speed36 = Vec::new();\n    let\
    \ mut car_speed37 = Vec::new();\n    let mut car_\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpj2cm64xq.rs:51:17\n   |\n\
    51 |     let mut car_\n   |                 ^ help: add `;` here\n52 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2cm64xq.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj2cm64xq.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj2cm64xq.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj2cm64xq.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj2cm64xq.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj2cm64xq.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj2cm64xq.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_vel = Vec::new();\n    let\
    \ mut car_acc = Vec::new();\n    let mut car_ang = Vec::new();\n    let mut car_ang_vel\
    \ = Vec::new();\n    let mut car_ang_acc = Vec::new();\n    let mut car_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_acc = Vec::new();\n    let mut car_ang_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxa0pj7ay.rs:42:21\n   |\n\
    42 |     let mut car_ang_\n   |                     ^ help: add `;` here\n43 |\
    \ }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpxa0pj7ay.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxa0pj7ay.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxa0pj7ay.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxa0pj7ay.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxa0pj7ay.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n    let\
    \ mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n  \
    \  let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp3yj_mkw0.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3yj_mkw0.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut direction = 1.0;\n    let mut speed2 = 1.0;\n    let mut direction2\
    \ = 1.0;\n    let mut speed3 = 1.0;\n    let mut direction3 = 1.0;\n    let mut\
    \ speed4 = 1.0;\n    let mut direction4 = 1.0;\n    let mut speed5 = 1.0;\n  \
    \  let mut direction5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut direction6\
    \ = 1.0;\n    let mut speed7 = 1.0;\n    let mut direction7 = 1.0;\n    let mut\
    \ speed8 = 1.0;\n    let mut direction8 = 1.0;\n    let mut speed9 = 1.0;\n  \
    \  let mut direction9 = 1.0;\n    let mut speed10 = 1.0;\n    let mut direction10\
    \ = 1.0;\n    let mut speed11 = 1.0;\n    let mut direction11 = 1.0;\n    let\
    \ mut speed12 = 1.0;\n    let mut direction12 = 1.0;\n    let mut speed13 = 1.0;\n\
    \    let mut direction13 = 1.0;\n    let mut speed14 = 1.0;\n    let mut direction14\
    \ = 1.0;\n    let mut speed15 = 1.0;\n    let mut direction15 = 1.0;\n    let\
    \ mut speed16 = 1.0;\n    let mut direction16 = 1.0;\n    let mut speed17 = 1.0;\n\
    \    let mut direction17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut direction18\
    \ = 1.0;\n    let mut speed19 = 1.0;\n    let mut direction19 = 1.0;\n    let\
    \ mut speed20 = 1.0;\n    let mut direction20 = 1.0;\n    let mut speed21 = 1.0;\n\
    \    let mut direction21 = 1.0;\n    let mut speed22 = 1.0;\n    let mut direction22\
    \ = 1.0;\n    let mut speed23 = 1.0;\n    let mut direction23 = 1.0;\n    let\
    \ mut speed24 = 1.0;\n    let mut direction24 = 1.0;\n    let mut speed25 = 1.0;\n\
    \    let mut direction25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut direction26\
    \ = 1.0;\n    let mut speed27 = 1.0;\n    let mut direction27 = 1.0;\n    let\
    \ mut speed28 = 1.0;\n    let mut direction28 = 1.0;\n    let mut speed29 = 1.0;\n\
    \    let mut direction29 = 1.0;\n    let mut speed30 = 1.0;\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:74:17\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:74:25\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:17\n   |\n75 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:75:25\n\
    \   |\n75 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphne6o_fv.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphne6o_fv.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphne6o_fv.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphne6o_fv.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmphne6o_fv.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_speed2 = 0.0;\n    let mut collision_time2 = 0.0;\n\
    \    let mut collision_direction2 = 1.0;\n    let mut collision_speed3 = 0.0;\n\
    \    let mut collision_time3 = 0.0;\n    let mut collision_direction3 = 1.0;\n\
    \    let mut collision_speed4 = 0.0;\n    let mut collision_time4 = 0.0;\n   \
    \ let mut collision_direction4 = 1.0;\n    let mut collision_speed5 = 0.0;\n \
    \   let mut collision_time5 = 0.0;\n    let mut collision_direction5 = 1.0;\n\
    \    let mut collision_speed6 = 0.0;\n    let mut collision_time6 = 0.0;\n   \
    \ let mut collision_direction6 = 1.0;\n    let mut collision_speed7 = 0.0;\n \
    \   let mut collision_time7 = 0.0;\n    let mut collision_direction7 = 1.0;\n\
    \    let mut collision_speed8 = 0.0;\n    let mut collision_time8 = 0.0;\n   \
    \ let mut collision_direction8 = 1.0;\n    let mut collision_speed9 = 0.0;\n \
    \   let mut collision_time9 = 0.0;\n    let mut collision_direction9 = 1.0;\n\
    \    let mut collision_speed10 = 0.0;\n    let mut collision_time10 = 0.0;\n \
    \   let mut collision_direction10 = 1.0;\n    let mut collision_speed11 = 0.0;\n\
    \    let mut collision_time11 = 0.0;\n    let mut collision_direction11 = 1.0;\n\
    \    let mut collision_speed12 = 0.0;\n    let mut collision_time12 = 0.0;\n \
    \   let mut collision_direction12 = 1.0;\n    let mut collision_speed13 = 0.0;\n\
    \    let mut collision_time13 = 0.0;\n    let mut collision_direction13 = 1.0;\n\
    \    let mut collision_speed14 = 0.0;\n    let mut collision_time14 = 0.0;\n \
    \   let mut collision_direction14 = 1.0;\n    let mut collision_speed15 = 0.0;\n\
    \    let mut collision_time15 = 0.0;\n    let mut collision_direction15 = 1.0;\n\
    \    let mut collision_speed16 = 0.0;\n    let mut collision_time16 = 0.0;\n \
    \   let mut collision_direction16 = 1.0;\n    let mut collision_speed17 = 0.0;\n\
    \    let mut collision_time17 = 0.0;\n    let mut collision_direction17 = 1.0;\n\
    \    let mut collision_speed18\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd_7ft0t4.rs:62:30\n   |\n\
    62 |     let mut collision_speed18\n   |                              ^ help:\
    \ add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpd_7ft0t4.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpd_7ft0t4.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpd_7ft0t4.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpd_7ft0t4.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_distance\
    \ = 0;\n    let mut collision_speed = 0;\n    let mut collision_direction = 0;\n\
    \    let mut collision_speed2 = 0;\n    let mut collision_direction2 = 0;\n  \
    \  let mut collision_speed3 = 0;\n    let mut collision_direction3 = 0;\n    let\
    \ mut collision_speed4 = 0;\n    let mut collision_direction4 = 0;\n    let mut\
    \ collision_speed5 = 0;\n    let mut collision_direction5 = 0;\n    let mut collision_speed6\
    \ = 0;\n    let mut collision_direction6 = 0;\n    let mut collision_speed7 =\
    \ 0;\n    let mut collision_direction7 = 0;\n    let mut collision_speed8 = 0;\n\
    \    let mut collision_direction8 = 0;\n    let mut collision_speed9 = 0;\n  \
    \  let mut collision_direction9 = 0;\n    let mut collision_speed10 = 0;\n   \
    \ let mut collision_direction10 = 0;\n    let mut collision_speed11 = 0;\n   \
    \ let mut collision_direction11 = 0;\n    let mut collision_speed12 = 0;\n   \
    \ let mut collision_direction12 = 0;\n    let mut collision_speed13 = 0;\n   \
    \ let mut collision_direction13 = 0;\n    let mut collision_speed14 = 0;\n   \
    \ let mut collision_direction14 = 0;\n    let mut collision_speed15 = 0;\n   \
    \ let mut collision_direction15 = 0;\n    let mut collision_speed16 = 0;\n   \
    \ let mut collision_direction16 = 0;\n    let mut collision_speed17 = 0;\n   \
    \ let mut collision_direction17 = 0;\n    let mut collision_speed18 = 0;\n   \
    \ let mut collision_direction18 = 0;\n    let mut collision_speed19 = 0;\n   \
    \ let mut collision_direction19 = 0;\n    let mut collision_speed20 = 0;\n   \
    \ let mut collision_direction20 = 0;\n    let mut collision_speed21 = 0;\n   \
    \ let mut collision_direction21 = 0;\n    let mut collision_speed22 = 0;\n   \
    \ let mut collision_direction22 = 0;\n    let mut collision_speed23 = 0;\n   \
    \ let mut collision_direction23 = 0;\n    let mut collision_speed24 = 0;\n   \
    \ let mut collision_direction24 = 0;\n    let mut collision_speed25 = 0;\n   \
    \ let mut collision_direction25 = 0;\n    let mut collision_speed26 = 0;\n   \
    \ let mut collision_direction26 = 0;\n    let mut collision_speed27 = 0;\n   \
    \ let mut collision_direction27 = 0;\n    let mut collision_speed28 = 0;\n   \
    \ let mut collision_direction28 = 0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp0yu6csjb.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0yu6csjb.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut max_speed = 1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let\
    \ mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed\
    \ = -1.0;\n    let mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let\
    \ mut max_speed = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed\
    \ = -1.0;\n    let mut min_speed = -1.0;\n    let mut max_speed = -1.0;\n\n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:72:17\n\
    \   |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:73:17\n   |\n73 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:73:25\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjrbckrk2.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjrbckrk2.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjrbckrk2.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjrbckrk2.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjrbckrk2.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision = false;\n        for _ in 0..n {\n            if car_collision(n\
    \ - 1, n - 1, n - 1) && car_collision(n - 1, n - 1, n - 1) {\n               \
    \ collision = true;\n                break;\n            }\n        }\n      \
    \  if collision {\n            collisions += 1;\n        }\n    }\n    collisions\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:14:16\n   |\n14 |             if car_collision(n - 1, n\
    \ - 1, n - 1) && car_collision(n - 1, n - 1, n - 1) {\n   |                ^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `collision`\n\nerror[E0425]:\
    \ cannot find function `car_collision` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:14:54\n\
    \   |\n14 |             if car_collision(n - 1, n - 1, n - 1) && car_collision(n\
    \ - 1, n - 1, n - 1) {\n   |                                                 \
    \     ^^^^^^^^^^^^^ help: a local variable with a similar name exists: `collision`\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:28:17\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz0_6sf_3.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz0_6sf_3.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz0_6sf_3.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |    "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0; // number of collisions\n   \
    \ let mut speed = 2.0; // initial speed\n    let mut direction = Direction::Right;\
    \ // initial direction\n    let mut car_speed = 2.0; // speed of each car\n  \
    \  let mut car_direction = Direction::Right; // direction of each car\n    let\
    \ mut car_x = 0.0; // x position of each car\n    let mut car_y = 0.0; // y position\
    \ of each car\n    let mut car_speed2 = 2.0; // speed of each car\n    let mut\
    \ car_direction2 = Direction::Right; // direction of each car\n    let mut car_x2:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y2: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed3 = 2.0; // speed of each car\n    let mut\
    \ car_direction3 = Direction::Right; // direction of each car\n    let mut car_x3:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y3: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed4 = 2.0; // speed of each car\n    let mut\
    \ car_direction4 = Direction::Right; // direction of each car\n    let mut car_x4:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y4: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed5 = 2.0; // speed of each car\n    let mut\
    \ car_direction5 = Direction::Right; // direction of each car\n    let mut car_x5:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y5: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed6 = 2.0; // speed of each car\n    let mut\
    \ car_direction6 = Direction::Right; // direction of each car\n    let mut car_x6:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y6: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed7 = 2.0; // speed of each car\n    let mut\
    \ car_direction7 = Direction::Right; // direction of each car\n    let mut car_x7:\
    \ f64 = 2.0; // x position of each car\n    let mut car_y7: f64 = 2.0; // y position\
    \ of each car\n    let mut car_speed8 = 2.0; // speed of each car\n    let mut\
    \ car_direction8 = Direction::Right; // direction of each car\n    let mut car\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw9acgnkf.rs:43:16\n   |\n\
    43 |     let mut car\n   |                ^ help: add `;` here\n44 | }\n   | -\
    \ unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Direction`\n  --> /tmp/tmpw9acgnkf.rs:12:25\n   |\n12 |     let mut direction\
    \ = Direction::Right; // initial direction\n   |                         ^^^^^^^^^\
    \ use of undeclared type `Direction`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:14:29\n   |\n14 |   \
    \  let mut car_direction = Direction::Right; // direction of each car\n   |  \
    \                           ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:18:30\n\
    \   |\n18 |     let mut car_direction2 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:22:30\n\
    \   |\n22 |     let mut car_direction3 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:26:30\n\
    \   |\n26 |     let mut car_direction4 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:30:30\n\
    \   |\n30 |     let mut car_direction5 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpw9acgnkf.rs:34:30\n\
    \   |\n34 |     let mut car_direction6 = Direction::Right; // direction of each\
    \ car\n   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 1.0;\n    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2\
    \ = 0.0;\n    let mut speed3 = 1.0;\n    let mut x3 = 0.0;\n    let mut y3 = 0.0;\n\
    \    let mut z3 = 0.0;\n    let mut speed4 = 1.0;\n    let mut x4 = 0.0;\n   \
    \ let mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut speed5 = 1.0;\n    let\
    \ mut x5 = 0.0;\n    let mut y5 = 0.0;\n    let mut z5 = 0.0;\n    let mut speed6\
    \ = 1.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6 = 0.0;\n\
    \    let mut speed7 = 1.0;\n    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n   \
    \ let mut z7 = 0.0;\n    let mut speed8 = 1.0;\n    let mut x8 = 0.0;\n    let\
    \ mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut speed9 = 1.0;\n    let mut\
    \ x9 = 0.0;\n    let mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut speed10\
    \ = 1.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n    let mut z10 = 0.0;\n\
    \    let mut speed11 = 1.0;\n    let mut x11 = 0.0;\n    let mut y11 = 0.0;\n\
    \    let mut z11 = 0.0;\n    let mut speed12 = 1.0;\n    let mut x12 = 0.0;\n\
    \    let mut y12 = 0.0;\n    let mut z12 = 0.0;\n    let mut speed13 = 1.0;\n\
    \    let mut x13 = 0.0;\n    let mut y13 = 0.0;\n    let mut z13 = 0.0;\n    let\
    \ mut speed14 = 1.0;\n    let mut x14 = 0.0;\n    let mut y14 = 0.0;\n    let\
    \ mut z14 = 0.0;\n    let mut speed15 = 1.0;\n    let mut x15 = 0.0;\n    let\
    \ mut y15 = 0.0;\n    let mut z15 = 0.0;\n    let mut speed16 = 1.0;\n    let\
    \ mut x16 = 0.0;\n    let mut y16 = 0.0;\n    let mut z\n}\n\nfn main() {\n  \
    \  let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptwzlkucj.rs:74:14\n   |\n\
    74 |     let mut z\n   |              ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptwzlkucj.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptwzlku"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpimaeve15.rs:54:33\n   |\n\
    54 |     let mut car_speed = Vec::new\n   |                                 ^\
    \ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpimaeve15.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpimaeve15.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_vel = Vec::new();\n    let mut car_acc = Vec::new();\n    let mut car_ang\
    \ = Vec::new();\n    let mut car_ang_vel = Vec::new();\n    let mut car_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang = Vec::new();\n    let mut car_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_acc = Vec::new();\n    let mut car_ang_ang_ang\
    \ = Vec::new();\n    let mut car_ang_ang_ang_vel = Vec::new();\n    let mut car_ang_ang_ang_acc\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_acc = Vec::new();\n    let mut\
    \ car_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ mut car_ang_ang_ang_ang_ang_ang = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_vel\
    \ = Vec::new();\n    let mut car_ang_ang_ang_ang_ang_acc = Vec::new();\n    let\
    \ \n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpkse0i5mw.rs:41:1\n  \
    \ |\n41 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpkse0i5mw.rs:45:17\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:45:25\n \
    \  |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkse0i5mw.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:46:25\n   |\n46 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkse0i5mw.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:47:25\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkse0i5mw.rs:48:17\n  \
    \ |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkse0i5mw.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkse0i5mw.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkse0i5mw.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    for _ in 0..n {\n       \
    \ let mut collision_found = false;\n        for _ in 0..n {\n            if !collision_found\
    \ {\n                if car_collision(&mut collision_found) {\n              \
    \      collisions += 1;\n                }\n            }\n        }\n    }\n\
    \    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `for`\n  --> /tmp/tmp5scis_p_.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     for _ in 0..n {\n   |     --- unexpected token\n\nerror[E0425]:\
    \ cannot find function `car_collision` in this scope\n  --> /tmp/tmp5scis_p_.rs:15:20\n\
    \   |\n15 |                 if car_collision(&mut collision_found) {\n   |   \
    \                 ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:26:17\n   |\n26 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:26:25\n\
    \   |\n26 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5scis_p_.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:27:25\n   |\n27 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5scis_p_.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5scis_p_.rs:28:25\n   |\n28 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:29:17\n  \
    \ |\n29 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5scis_p_.rs:29:25\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5scis_p_.rs:30:17\n   |\n30 |\
    \     assert_eq!({left}, {right});\n   "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_collision_count = 0;\n    let\
    \ mut prev_collision_speed = 1.0;\n    let mut prev_collision_prev_speed = 1.0;\n\
    \    let mut prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_speed = 1.0;\n    let\
    \ mut prev_collision_prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph4p89i__.rs:36:103\n   |\n\
    36 |     let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    \   |                                                                        \
    \                               ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph4p89i__.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph4p89i__.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_sum\
    \ = 0;\n    let mut collision_speed = 0;\n    let mut collision_speed2 = 0;\n\
    \    let mut collision_speed3 = 0;\n    let mut collision_speed4 = 0;\n    let\
    \ mut collision_speed5 = 0;\n    let mut collision_speed6 = 0;\n    let mut collision_speed7\
    \ = 0;\n    let mut collision_speed8 = 0;\n    let mut collision_speed9 = 0;\n\
    \    let mut collision_speed10 = 0;\n    let mut collision_speed11 = 0;\n    let\
    \ mut collision_speed12 = 0;\n    let mut collision_speed13 = 0;\n    let mut\
    \ collision_speed14 = 0;\n    let mut collision_speed15 = 0;\n    let mut collision_speed16\
    \ = 0;\n    let mut collision_speed17 = 0;\n    let mut collision_speed18 = 0;\n\
    \    let mut collision_speed19 = 0;\n    let mut collision_speed20 = 0;\n    let\
    \ mut collision_speed21 = 0;\n    let mut collision_speed22 = 0;\n    let mut\
    \ collision_speed23 = 0;\n    let mut collision_speed24 = 0;\n    let mut collision_speed25\
    \ = 0;\n    let mut collision_speed26 = 0;\n    let mut collision_speed27 = 0;\n\
    \    let mut collision_speed28 = 0;\n    let mut collision_speed29 = 0;\n    let\
    \ mut collision_speed30 = 0;\n    let mut collision_speed31 = 0;\n    let mut\
    \ collision_speed32 = 0;\n    let mut collision_speed33 = 0;\n    let mut collision_speed34\
    \ = 0;\n    let mut collision_speed35 = 0;\n    let mut collision_speed36 = 0;\n\
    \    let mut collision_speed37 = 0;\n    let mut collision_speed38 = 0;\n    let\
    \ mut collision_speed39 = 0;\n    let mut collision_speed40 = 0;\n    let mut\
    \ collision_speed41 = 0;\n    let mut collision_speed42 = 0;\n    let mut collision_speed43\
    \ = 0;\n    let mut collision_speed44 = 0;\n    let mut collision_speed45 = 0;\n\
    \    let mut collision_speed46 = 0;\n    let mut collision_speed47 = 0;\n    let\
    \ mut collision_speed48 = 0;\n    let mut collision_speed49 = 0;\n    let mut\
    \ collision_speed50 = 0;\n    let mut collision_speed51 = 0;\n    let mut collision_speed52\
    \ = 0;\n    let mut collision_speed53 = 0;\n    let mut collision_speed54 = 0;\n\
    \    let mut collision_speed55 = 0;\n    let mut collision_speed56\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvz3_3hi4.rs:67:30\n   |\n\
    67 |     let mut collision_speed56\n   |                              ^ help:\
    \ add `;` here\n68 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:72:17\n   |\n72 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:72:25\n \
    \  |\n72 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvz3_3hi4.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvz3_3hi4.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvz3_3hi4.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvz3_3hi4.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speeds = Vec::new();\n    let\
    \ mut car_directions = Vec::new();\n    let mut car_speeds_left = Vec::new();\n\
    \    let mut car_directions_left = Vec::new();\n    let mut car_speeds_right =\
    \ Vec::new();\n    let mut car_directions_right = Vec::new();\n\n    for i in\
    \ 0..n {\n        speed[i] = rand::random::<f32>();\n        car_speed[i] = speed[i];\n\
    \        car_pos[i] = rand::random::<f32>();\n        car_direction[i] = rand::random::<f32>();\n\
    \        car_speeds[i] = speed[i];\n        car_directions[i] = car_direction[i];\n\
    \        car_speeds_left[i] = car_speed[i];\n        car_directions_left[i] =\
    \ car_direction[i];\n        car_speeds_right[i] = car_speed[i];\n        car_directions_right[i]\
    \ = car_direction[i];\n    }\n\n    for i in 0..n {\n        for j in (i + 1)..n\
    \ {\n            let mut collision = false;\n            let mut collision_left\
    \ = false;\n            let mut collision_right = false;\n            let mut\
    \ collision_left_right = false;\n\n            if car_pos[j] > car_pos[i] {\n\
    \                let mut car_pos_left = car_pos[j] - car_speed[j];\n         \
    \       let mut car_pos_right = car_pos[j] + car_speed[j];\n                let\
    \ mut car_speed_left = car_speeds[j];\n                let mut car_speed_right\
    \ = car_speeds[j];\n                let mut car_direction_left = car_directions[j];\n\
    \                let mut car_direction_right = car_directions[j];\n\n        \
    \        while car_pos_left > car_pos_right {\n                    car_pos_left\
    \ -= car_speed_left;\n                    car_speed_left *= 0.5;\n           \
    \         car_direction_left *= 0.5;\n                }\n\n                while\
    \ car_pos_right < car_pos_left {\n                    car_pos_right += car_speed_right;\n\
    \                    car_speed_right *= 0.5;\n                    car_direction_right\
    \ *= 0.5;\n                }\n\n                while car_speed_left > car_speed_right\
    \ {\n                    car_speed_left *= 0.5;\n                    \n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpj3myhbcn.rs:74:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n35 |     for i in 0..n {\n\
    \   |                   - unclosed delimiter\n36 |         for j in (i + 1)..n\
    \ {\n   |                             - unclosed delimiter\n...\n42 |        \
    \     if car_pos[j] > car_pos[i] {\n   |                                     \
    \   - unclosed delimiter\n...\n62 |                 while car_speed_left > car_speed_right\
    \ {\n   |                                                        - this delimiter\
    \ might not be properly closed...\n...\n65 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n74 | }\n   |   ^\n\nerror[E0433]: failed\
    \ to resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:23:20\n\
    \   |\n23 |         speed[i] = rand::random::<f32>();\n   |                  \
    \  ^^^^ use of undeclared crate or module `rand`\n\nerror[E0433]: failed to resolve:\
    \ use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:25:22\n\
    \   |\n25 |         car_pos[i] = rand::random::<f32>();\n   |                \
    \      ^^^^ use of undeclared crate or module `rand`\n\nerror[E0433]: failed to\
    \ resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmpj3myhbcn.rs:26:28\n\
    \   |\n26 |         car_direction[i] = rand::random::<f32>();\n   |          \
    \                  ^^^^ use of undeclared crate or module `rand`\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj3myhbcn.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj3myhbcn.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj3myhbcn.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this s"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6 = 1.0;\n    let\
    \ mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let mut car_speed9\
    \ = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11 = 1.0;\n   \
    \ let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16 = 1.0;\n   \
    \ let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_speed19\
    \ = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21 = 1.0;\n   \
    \ let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut car_speed24\
    \ = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26 = 1.0;\n   \
    \ let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n    let mut car_speed29\
    \ = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31 = 1.0;\n   \
    \ let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n    let mut car_speed34\
    \ = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36 = 1.0;\n   \
    \ let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n    let mut car_speed39\
    \ = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41 = 1.0;\n   \
    \ let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n    let mut car_speed44\
    \ = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46 = 1.0;\n   \
    \ let mut car_speed47 = 1.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnopbqers.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnopbqers.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnopbqers.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnopbqers.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collisions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_direction_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_direction_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions\
    \ = vec![vec![2..n].into_iter().collect::<Vec<_>>()];\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:31:17\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:32:17\n   |\n32 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:32:25\n\
    \   |\n32 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnl36xfc4.rs:33:17\n   |\n33 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:33:25\n   |\n33 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:34:17\n   |\n34 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnl36xfc4.rs:34:25\n   |\n34 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnl36xfc4.rs:35:17\n  \
    \ |\n35 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnl36xfc4.rs:35:25\n   |\n35 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnl36xfc4.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_distance =\
    \ 0.0;\n    let mut collision_direction = 1.0;\n    let mut collision_speed2 =\
    \ 0.0;\n    let mut collision_time2 = 0.0;\n    let mut collision_distance2 =\
    \ 0.0;\n    let mut collision_direction2 = 1.0;\n    let mut collision_speed3\
    \ = 0.0;\n    let mut collision_time3 = 0.0;\n    let mut collision_distance3\
    \ = 0.0;\n    let mut collision_direction3 = 1.0;\n    let mut collision_speed4\
    \ = 0.0;\n    let mut collision_time4 = 0.0;\n    let mut collision_distance4\
    \ = 0.0;\n    let mut collision_direction4 = 1.0;\n    let mut collision_speed5\
    \ = 0.0;\n    let mut collision_time5 = 0.0;\n    let mut collision_distance5\
    \ = 0.0;\n    let mut collision_direction5 = 1.0;\n    let mut collision_speed6\
    \ = 0.0;\n    let mut collision_time6 = 0.0;\n    let mut collision_distance6\
    \ = 0.0;\n    let mut collision_direction6 = 1.0;\n    let mut collision_speed7\
    \ = 0.0;\n    let mut collision_time7 = 0.0;\n    let mut collision_distance7\
    \ = 0.0;\n    let mut collision_direction7 = 1.0;\n    let mut collision_speed8\
    \ = 0.0;\n    let mut collision_time8 = 0.0;\n    let mut collision_distance8\
    \ = 0.0;\n    let mut collision_direction8 = 1.0;\n    let mut collision_speed9\
    \ = 0.0;\n    let mut collision_time9 = 0.0;\n    let mut collision_distance9\
    \ = 0.0;\n    let mut collision_direction9 = 1.0;\n    let mut collision_speed10\
    \ = 0.0;\n    let mut collision_time10 = 0.0;\n    let mut collision_distance10\
    \ = 0.0;\n    let mut collision_direction10 = 1.0;\n    let mut collision_speed11\
    \ = 0.0;\n    let mut collision_time11 = 0.0;\n    let mut collision_distance11\
    \ = 0.0;\n    let mut collision_direction11 = 1.0;\n    let mut collision_speed12\
    \ = 0.0;\n    let mut collision_time12 = 0.0;\n    let mut collision_distance12\
    \ = 0.0;\n    let mut collision_direction12 = 1.0;\n    let mut collision_speed13\
    \ = 0.0;\n    let mut collision_time13 = 0.0;\n    let mut collision_distance13\
    \ = 0.0;\n    let mut collision_direction13 = 1.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpz4_wnsy_.rs:62:39\n   |\n\
    62 |     let mut collision_direction13 = 1.\n   |                            \
    \           ^ help: add `;` here\n63 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz4_wnsy_.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz4_wnsy_.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz4_wnsy_.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\n"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_heading = 0.0;\n    let mut prev_collisions = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y\
    \ = 0.0;\n    let mut prev_collisions_heading = 0.0;\n    let mut prev_collisions_speed\
    \ = 0.0;\n    let mut prev_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpf9g_x_ii.rs:61:18\n   |\n\
    61 |     let mut prev_\n   |                  ^ help: add `;` here\n62 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf9g_x_ii.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpf9g_x_ii.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpf9g_x_ii.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpf9g_x_ii.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpf9g_x_ii.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_speed2 = 0.0;\n    let mut car_direction2 = 1.0;\n \
    \   let mut car_y2 = 0.0;\n    let mut car_speed3 = 0.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_x3 = 0.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4\
    \ = 0.0;\n    let mut car_direction4 = 1.0;\n    let mut car_x4 = 0.0;\n    let\
    \ mut car_y4 = 0.0;\n    let mut car_speed5 = 0.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_x5 = 0.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 0.0;\n    let mut car_direction6 = 1.0;\n    let mut car_x6 = 0.0;\n    let\
    \ mut car_y6 = 0.0;\n    let mut car_speed7 = 0.0;\n    let mut car_direction7\
    \ = 1.0;\n    let mut car_x7 = 0.0;\n    let mut car_y7 = 0.0;\n    let mut car_speed8\
    \ = 0.0;\n    let mut car_direction8 = 1.0;\n    let mut car_x8 = 0.0;\n    let\
    \ mut car_y8 = 0.0;\n    let mut car_speed9 = 0.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_x9 = 0.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10\
    \ = 0.0;\n    let mut car_direction10 = 1.0;\n    let mut car_x10 = 0.0;\n   \
    \ let mut car_y10 = 0.0;\n    let mut car_speed11 = 0.0;\n    let mut car_direction11\
    \ = 1.0;\n    let mut car_x11 = 0.0;\n    let mut car_y11 = 0.0;\n    let mut\
    \ car_speed12 = 0.0;\n    let mut car_direction12 = 1.0;\n    let mut car_x12\
    \ = 0.0;\n    let mut car_y12 = 0.0;\n    let mut car_speed13 = 0.0;\n    let\
    \ mut car_direction13 = 1.0;\n    let mut car_x13 = 0.0;\n    let mut car_y13\
    \ = 0.0;\n    let mut car_speed14 = 0.0;\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz7tds1ua.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpz7tds1ua.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed2 = 1.0;\n    let mut car_pos2 = Vec::new();\n    let mut\
    \ car_direction2 = Vec::new();\n    let mut car_speed3 = 1.0;\n    let mut car_pos3\
    \ = Vec::new();\n    let mut car_direction3 = Vec::new();\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_pos4 = Vec::new();\n    let mut car_direction4 = Vec::new();\n\
    \    let mut car_speed5 = 1.0;\n    let mut car_pos5 = Vec::new();\n    let mut\
    \ car_direction5 = Vec::new();\n    let mut car_speed6 = 1.0;\n    let mut car_pos6\
    \ = Vec::new();\n    let mut car_direction6 = Vec::new();\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_pos7 = Vec::new();\n    let mut car_direction7 = Vec::new();\n\
    \    let mut car_speed8 = 1.0;\n    let mut car_pos8 = Vec::new();\n    let mut\
    \ car_direction8 = Vec::new();\n    let mut car_speed9 = 1.0;\n    let mut car_pos9\
    \ = Vec::new();\n    let mut car_direction9 = Vec::new();\n    let mut car_speed10\
    \ = 1.0;\n    let mut car_pos10 = Vec::new();\n    let mut car_direction10 = Vec::new();\n\
    \    let mut car_speed11 = 1.0;\n    let mut car_pos11 = Vec::new();\n    let\
    \ mut car_direction11 = Vec::new();\n    let mut car_speed12 = 1.0;\n    let mut\
    \ car_pos12 = Vec::new();\n    let mut car_direction12 = Vec::new();\n    let\
    \ mut car_speed13 = 1.0;\n    let mut car_pos13 = Vec::new();\n    let mut car_direction13\
    \ = Vec::new();\n    let mut car_speed14 = 1.0;\n    let mut car_pos14 = Vec::new();\n\
    \    let mut car_direction14 = Vec::new();\n    let mut car_speed15 = 1.0;\n \
    \   let mut car_pos15 = Vec::new();\n    let \n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpm7z8vlne.rs:56:1\n  \
    \ |\n56 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpm7z8vlne.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpm7z8vlne.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm7z8vlne.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm7z8vlne.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm7z8vlne.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm7z8vlne.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm7z8vlne.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm7z8vlne.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm7z8vlne.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm7z8vlne.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2\
    \ = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3\
    \ = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4\
    \ = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5\
    \ = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6\
    \ = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7\
    \ = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8\
    \ = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9\
    \ = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10\
    \ = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11\
    \ = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12\
    \ = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13\
    \ = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14\
    \ = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15\
    \ = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16\
    \ = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17\
    \ = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp4emfy84l.rs:51:1\n  \
    \ |\n51 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4emfy84l.rs:55:17\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:55:25\n \
    \  |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4emfy84l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut cars = Vec::new();\n    for i in 0..n {\n        speed.push(0);\n\
    \        cars.push(0);\n    }\n    for i in 0..n {\n        for j in (i + 1)..n\
    \ {\n            let mut collision = false;\n            for k in 0..n {\n   \
    \             if i != k && j != k {\n                    let d = distance(&speed[k],\
    \ &speed[j]);\n                    if d < CAR_RADIUS {\n                     \
    \   collision = true;\n                        break;\n                    }\n\
    \                }\n            }\n            if collision {\n              \
    \  collisions += 1;\n                speed[j] += CAR_VELOCITY;\n             \
    \   speed[i] += CAR_VELOCITY;\n                cars[j] += CAR_VELOCITY;\n    \
    \            cars[i] += CAR_VELOCITY;\n            }\n        }\n    }\n    collisions\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `distance` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:22:29\n\
    \   |\n22 |                     let d = distance(&speed[k], &speed[j]);\n   |\
    \                             ^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `CAR_RADIUS` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:23:28\n\
    \   |\n23 |                     if d < CAR_RADIUS {\n   |                    \
    \        ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `CAR_VELOCITY` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:31:29\n   |\n31 |  \
    \               speed[j] += CAR_VELOCITY;\n   |                             ^^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `CAR_VELOCITY` in\
    \ this scope\n  --> /tmp/tmpmkpsf_0h.rs:32:29\n   |\n32 |                 speed[i]\
    \ += CAR_VELOCITY;\n   |                             ^^^^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `CAR_VELOCITY` in this scope\n\
    \  --> /tmp/tmpmkpsf_0h.rs:33:28\n   |\n33 |                 cars[j] += CAR_VELOCITY;\n\
    \   |                            ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `CAR_VELOCITY` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:34:28\n\
    \   |\n34 |                 cars[i] += CAR_VELOCITY;\n   |                   \
    \         ^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:43:17\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:43:25\n \
    \  |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpmkpsf_0h.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpmkpsf_0h.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_direction_length = 0.0;\n    let mut car_direction_normalized\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_direction_normalized_length\
    \ = 0.0;\n    let mut car_direction_normalized_length = 0.0;\n    let mut car_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy4the4k7.rs:53:17\n   |\n\
    53 |     let mut car_\n   |                 ^ help: add `;` here\n54 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy4the4k7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy4the4k7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy4the4k7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy4the4k7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy4the4k7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy4the4k7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy4the4k7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy4the4k7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy4the4k7.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy4the4k7.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision_found = false;\n        for _ in 0..n {\n            if car_collision(&mut\
    \ collision_found) {\n                collisions += 1;\n            }\n      \
    \  }\n    }\n    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:14:16\n   |\n14 |             if car_collision(&mut collision_found)\
    \ {\n   |                ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:24:17\n  \
    \ |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplwvzqnip.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in t"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut collision_speed = 1.0;\n    let mut collision_time = 0.0;\n    let\
    \ mut collision_direction = 1.0;\n    let mut collision_direction_magnitude =\
    \ 1.0;\n    let mut collision_direction_normalized = 1.0;\n    let mut collision_direction_normalized_magnitude\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude2 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude3 = 1.0;\n    let mut collision_direction_normalized_magnitude4\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude5 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude6 = 1.0;\n    let mut collision_direction_normalized_magnitude7\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude8 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude9 = 1.0;\n    let mut collision_direction_normalized_magnitude10\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude11 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude12 = 1.0;\n    let mut collision_direction_normalized_magnitude13\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude14 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude15 = 1.0;\n    let mut collision_direction_normalized_magnitude16\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude17 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude18 = 1.0;\n    let mut collision_direction_normalized_magnitude19\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude20 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude21 = 1.0;\n    let mut collision_direction_normalized_magnitude22\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude23 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude24 = 1.0;\n    let mut collision_direction_normalized_magnitude25\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude26 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude27 = 1.0;\n    let mut collision_direction_normalized_magnitude28\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude29 = 1.0;\n    let\
    \ mut collision_direction_normalized_magnitude30 = 1.0;\n    let mut collision_direction_normalized_magnitude31\
    \ = 1.0;\n    let mut collision_direction_normalized_magnitude32 = 1.0;\n    let\
    \ mut collision_direction_normalized_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpewrh0ykm.rs:49:44\n   |\n\
    49 |     let mut collision_direction_normalized_\n   |                       \
    \                     ^ help: add `;` here\n50 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpewrh0ykm.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpewrh0ykm.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpewrh0ykm.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpewrh0ykm.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpewrh0ykm.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpewrh0ykm.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpewrh0ykm.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpewrh0ykm.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpewrh0ykm.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpewrh0ykm.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in th"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_speeds = vec![vec![2\
    \ * i, 2 * i + 1] for i in 0..n];\n    let mut car_directions = vec![vec![2 *\
    \ i, 2 * i + 1] for i in 0..n];\n    let mut car_collisions = vec![vec![2 * i,\
    \ 2 * i + 1] for i in 0..n];\n    let mut car_collision_directions = vec![vec![2\
    \ * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds = vec![vec![2\
    \ * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_positions = vec![vec![2\
    \ * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_direction_speeds\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_direction_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_directions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_speeds\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds_directions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions_speeds\
    \ = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n    let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions_speeds_direction\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3zjqp1q5.rs:28:106\n   |\n\
    28 |     let mut car_collision_speeds_direction_positions_speeds_directions_speeds_directions_speeds_direction\n\
    \   |                                                                        \
    \                                  ^ help: add `;` here\n29 | }\n   | - unexpected\
    \ token\n\nerror: expected `{`, found `<eof>`\n  --> /tmp/tmp3zjqp1q5.rs:11:69\n\
    \   |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                                     ^ expected\
    \ `{`\n\nerror: no rules expected the token `for`\n  --> /tmp/tmp3zjqp1q5.rs:11:57\n\
    \   |\n11 |     let mut car_positions = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                         ^^^ no rules expected\
    \ this token in macro call\n\nerror: expected `{`, found `<eof>`\n  --> /tmp/tmp3zjqp1q5.rs:12:66\n\
    \   |\n12 |     let mut car_speeds = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                                  ^ expected\
    \ `{`\n\nerror: no rules expected the token `for`\n  --> /tmp/tmp3zjqp1q5.rs:12:54\n\
    \   |\n12 |     let mut car_speeds = vec![vec![2 * i, 2 * i + 1] for i in 0..n];\n\
    \   |                                                      ^^^ no rules expected\
    \ this token in macro call\n\nerror: expected `{`, found `<eof>`\n  --> /tmp/tmp3zjqp1q5.rs:13:70\n\
    \   |\n13 |     let mut car_directions = vec![vec![2 * i, 2 * i + 1] for i in\
    \ 0..n];\n   |                                                               \
    \       ^ expected `{`\n\nerror: no rules expected the token `for`\n  --> /tmp/tmp3zjqp1q5.rs:13:58\n\
    \   |\n13 |     let mut car_directions = vec![vec![2 * i, 2 * i + 1] for i in\
    \ 0..n];\n   |                                                          ^^^ no\
    \ rules expected this token in macro call\n\nerror: expected `{`, found `<eof>`\n\
    \  --> /tmp/tmp3zjqp1q5.rs:14:70\n   |\n14 |     let mut car_collisions = vec![vec![2\
    \ * i, 2 * i + 1] for i in 0..n];\n   |                                      \
    \               "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_x_speed = 0.0;\n    let mut car_y_speed = 0.0;\n   \
    \ let mut car_x_direction = 0.0;\n    let mut car_y_direction = 0.0;\n    let\
    \ mut car_x_speed2 = 0.0;\n    let mut car_y_speed2 = 0.0;\n    let mut car_x_direction2\
    \ = 0.0;\n    let mut car_y_direction2 = 0.0;\n    let mut car_x_speed3 = 0.0;\n\
    \    let mut car_y_speed3 = 0.0;\n    let mut car_x_direction3 = 0.0;\n    let\
    \ mut car_y_direction3 = 0.0;\n    let mut car_x_speed4 = 0.0;\n    let mut car_y_speed4\
    \ = 0.0;\n    let mut car_x_direction4 = 0.0;\n    let mut car_y_direction4 =\
    \ 0.0;\n    let mut car_x_speed5 = 0.0;\n    let mut car_y_speed5 = 0.0;\n   \
    \ let mut car_x_direction5 = 0.0;\n    let mut car_y_direction5 = 0.0;\n    let\
    \ mut car_x_speed6 = 0.0;\n    let mut car_y_speed6 = 0.0;\n    let mut car_x_direction6\
    \ = 0.0;\n    let mut car_y_direction6 = 0.0;\n    let mut car_x_speed7 = 0.0;\n\
    \    let mut car_y_speed7 = 0.0;\n    let mut car_x_direction7 = 0.0;\n    let\
    \ mut car_y_direction7 = 0.0;\n    let mut car_x_speed8 = 0.0;\n    let mut car_y_speed8\
    \ = 0.0;\n    let mut car_x_direction8 = 0.0;\n    let mut car_y_direction8 =\
    \ 0.0;\n    let mut car_x_speed9 = 0.0;\n    let mut car_y_speed9 = 0.0;\n   \
    \ let mut car_x_direction9 = 0.0;\n    let mut car_y_direction9 = 0.0;\n    let\
    \ mut car_x_speed10 = 0.0;\n    let mut car_y_speed10 = 0.0;\n    let mut car_x_direction10\
    \ = 0.0;\n    let mut car_y_direction10 = 0.0;\n    let mut car_x_speed11 = 0.0;\n\
    \    let mut car_y_speed11 = 0.0;\n    let mut car_x_direction11 = 0.0;\n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkom7hwpc.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpkom7hwpc.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_speeds = Vec::new();\n   \
    \ let mut car_speeds_left = Vec::new();\n    let mut car_speeds_right = Vec::new();\n\
    \    let mut car_speeds_left_right = Vec::new();\n    let mut car_speeds_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_left = Vec::new();\n    let mut\
    \ car_speeds_right_right = Vec::new();\n    let mut car_speeds_left_right_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_right = Vec::new();\n    let\
    \ mut car_speeds_right_left_left = Vec::new();\n    let mut car_speeds_right_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left = Vec::new();\n \
    \   let mut car_speeds_left_right_left_right = Vec::new();\n    let mut car_speeds_right_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_left_left_right = Vec::new();\n\
    \    let mut car_speeds_left_right_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_right = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_left_right_left = Vec::new();\n    let mut car_speeds_right_left_left_right_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_right_left = Vec::new();\n\
    \    let mut car_speeds_left_right_left_right_left_right = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_left_right_left_left = Vec::new();\n    let mut\
    \ car_speeds_right_left_left_right_left_right_left = Vec::new();\n    let mut\
    \ car_speeds_left_right_left_right_left_right_left = Vec::new();\n    let mut\
    \ car_speeds_left_right_left_right_left_right_left = Vec::new();\n    let mut\
    \ car_speeds_right_left_left_right_left_right_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_right_left_right_left_left = Vec::new();\n  \
    \  let mut car_speeds_right_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8op0bni7.rs:42:30\n   |\n\
    42 |     let mut car_speeds_right_\n   |                              ^ help:\
    \ add `;` here\n43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp8op0bni7.rs:47:17\n   |\n47 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8op0bni7.rs:47:25\n \
    \  |\n47 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8op0bni7.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8op0bni7.rs:48:25\n   |\n48 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8op0bni7.rs:49:17\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8op0bni7.rs:49:25\n   |\n49 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8op0bni7.rs:50:17\n  \
    \ |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8op0bni7.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8op0bni7.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8op0bni7.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mism"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_pos_right = Vec::new();\n    let mut car_pos_left = Vec::new();\n  \
    \  let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = Vec::new();\n\
    \    let mut car_pos_left = Vec::new();\n    let mut car_pos_right = \n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpyuva_bw2.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpyuva_bw2.rs:58:17\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpyuva_bw2.rs:58:25\n \
    \  |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyuva_bw2.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyuva_bw2.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyuva_bw2.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyuva_bw2.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyuva_bw2.rs:61:17\n  \
    \ |\n61 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyuva_bw2.rs:61:25\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyuva_bw2.rs:62:17\n   |\n62 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyuva_bw2.rs:62:25\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_distance\
    \ = 1.0;\n    let mut max_distance = 1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = 1.0;\n    let mut min_speed = 1.0;\n    let mut max_speed =\
    \ 1.0;\n    let mut min_distance = 1.0;\n    let mut max_distance = 1.0;\n   \
    \ let mut min_angle = 1.0;\n    let mut max_angle = 1.0;\n    let mut min_speed\
    \ = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_distance = 1.0;\n    let\
    \ mut max_distance = 1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle\
    \ = 1.0;\n    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let\
    \ mut min_distance = 1.0;\n    let mut max_distance = 1.0;\n    let mut min_angle\
    \ = 1.0;\n    let mut max_angle = 1.0;\n    let mut min_speed = 1.0;\n    let\
    \ mut max_speed = 1.0;\n    let mut min_distance = 1.0;\n    let mut max_distance\
    \ = 1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = 1.0;\n    let\
    \ mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_distance\
    \ = 1.0;\n    let mut max_distance = 1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = 1.0;\n    let mut min_speed = 1.0;\n    let mut max_speed =\
    \ 1.0;\n    let mut min_distance = 1.0;\n    let mut max_distance = 1.0;\n   \
    \ let mut min_angle = 1.0;\n    let mut max_angle = 1.0;\n    let mut min_speed\
    \ = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_distance = 1.0;\n    let\
    \ mut max_distance = 1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle\
    \ = 1.0;\n    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let\
    \ mut min_distance = 1.0;\n    let mut max_distance = 1.0;\n    let mut min_angle\
    \ = 1.0;\n    let mut max_angle = 1.0;\n    let mut min_speed = 1.0;\n    let\
    \ mut max_speed = 1.0;\n    let mut min_distance = 1.0;\n    let mut max_distance\
    \ = 1.0;\n    let mut min_angle = 1.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpgg4bnavg.rs:72:1\n\
    \   |\n72 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpgg4bnavg.rs:76:17\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgg4bnavg.rs:76:25\n \
    \  |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgg4bnavg.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgg4bnavg.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgg4bnavg.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgg4bnavg.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgg4bnavg.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgg4bnavg.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgg4bnavg.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgg4bnavg.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ vx = 0.0;\n    let mut vy = 0.0;\n    let mut vz = 0.0;\n    let mut ax = 0.0;\n\
    \    let mut ay = 0.0;\n    let mut az = 0.0;\n    let mut bx = 0.0;\n    let\
    \ mut by = 0.0;\n    let mut bz = 0.0;\n    let mut ax2 = 0.0;\n    let mut ay2\
    \ = 0.0;\n    let mut az2 = 0.0;\n    let mut bx = 0.0;\n    let mut by = 0.0;\n\
    \    let mut bz = 0.0;\n    let mut ax3 = 0.0;\n    let mut ay3 = 0.0;\n    let\
    \ mut az3 = 0.0;\n    let mut bx = 0.0;\n    let mut by = 0.0;\n    let mut bz\
    \ = 0.0;\n    let mut ax4 = 0.0;\n    let mut ay4 = 0.0;\n    let mut az4 = 0.0;\n\
    \    let mut bx = 0.0;\n    let mut by = 0.0;\n    let mut bz = 0.0;\n    let\
    \ mut ax5 = 0.0;\n    let mut ay5 = 0.0;\n    let mut az5 = 0.0;\n    let mut\
    \ bx = 0.0;\n    let mut by = 0.0;\n    let mut bz = 0.0;\n    let mut ax6 = 0.0;\n\
    \    let mut ay6 = 0.0;\n    let mut az6 = 0.0;\n    let mut bx = 0.0;\n    let\
    \ mut by = 0.0;\n    let mut bz = 0.0;\n    let mut ax7 = 0.0;\n    let mut ay7\
    \ = 0.0;\n    let mut az7 = 0.0;\n    let mut bx = 0.0;\n    let mut by = 0.0;\n\
    \    let mut bz = 0.0;\n    let mut ax8 = 0.0;\n    let mut ay8 = 0.0;\n    let\
    \ mut az8 = 0.0;\n    let mut bx = 0.0;\n    let mut by = 0.0;\n    let mut bz\
    \ = 0.0;\n    let mut ax9 = 0.0;\n    let mut ay9 = 0.0;\n    let mut az9 = 0.0;\n\
    \    let mut bx = 0.0;\n    let mut by = 0.0;\n    let mut bz = 0.0;\n    let\
    \ mut ax10 = 0.0;\n    let mut ay10 = 0.0;\n    let mut az10 = 0.0;\n    let mut\
    \ bx = 0.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp7u2yfgzl.rs:77:1\n  \
    \ |\n77 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp7u2yfgzl.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7u2yfgzl.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7u2yfgzl.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7u2yfgzl.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7u2yfgzl.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2\
    \ = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3\
    \ = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4\
    \ = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5\
    \ = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6\
    \ = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7\
    \ = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8\
    \ = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9\
    \ = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10\
    \ = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11\
    \ = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12\
    \ = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13\
    \ = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14\
    \ = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15\
    \ = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16\
    \ = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17\
    \ = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp4emfy84l.rs:51:1\n  \
    \ |\n51 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4emfy84l.rs:55:17\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:55:25\n \
    \  |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4emfy84l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed: isize\
    \ = n;\n    let mut speed2 = speed;\n    let mut speed3 = speed;\n    let mut\
    \ speed4 = speed;\n    let mut speed5 = speed;\n    let mut speed6 = speed;\n\
    \    let mut speed7 = speed;\n    let mut speed8 = speed;\n    let mut speed9\
    \ = speed;\n    let mut speed10 = speed;\n    let mut speed11 = speed;\n    let\
    \ mut speed12 = speed;\n    let mut speed13 = speed;\n    let mut speed14 = speed;\n\
    \    let mut speed15 = speed;\n    let mut speed16 = speed;\n    let mut speed17\
    \ = speed;\n    let mut speed18 = speed;\n    let mut speed19 = speed;\n    let\
    \ mut speed20 = speed;\n    let mut speed21 = speed;\n    let mut speed22 = speed;\n\
    \    let mut speed23 = speed;\n    let mut speed24 = speed;\n    let mut speed25\
    \ = speed;\n    let mut speed26 = speed;\n    let mut speed27 = speed;\n    let\
    \ mut speed28 = speed;\n    let mut speed29 = speed;\n    let mut speed30 = speed;\n\
    \    let mut speed31 = speed;\n    let mut speed32 = speed;\n    let mut speed33\
    \ = speed;\n    let mut speed34 = speed;\n    let mut speed35 = speed;\n    let\
    \ mut speed36 = speed;\n    let mut speed37 = speed;\n    let mut speed38 = speed;\n\
    \    let mut speed39 = speed;\n    let mut speed40 = speed;\n    let mut speed41\
    \ = speed;\n    let mut speed42 = speed;\n    let mut speed43 = speed;\n    let\
    \ mut speed44 = speed;\n    let mut speed45 = speed;\n    let mut speed46 = speed;\n\
    \    let mut speed47 = speed;\n    let mut speed48 = speed;\n    let mut speed49\
    \ = speed;\n    let mut speed50 = speed;\n    let mut speed51 = speed;\n    let\
    \ mut speed52 = speed;\n    let mut speed53 = speed;\n    let mut speed54 = speed;\n\
    \    let mut speed55 = speed;\n    let mut speed56 = speed;\n    let mut speed57\
    \ = speed;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnr2ldyoa.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnr2ldyoa.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnr2ldyoa.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnr2ldyoa.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnr2ldyoa.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnr2ldyoa.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut\
    \ speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut direction\
    \ = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n   \
    \ let mut direction = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let\
    \ mut y = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n    let mut\
    \ x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut speed =\
    \ 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n \
    \   let mut speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut\
    \ direction = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let mut y\
    \ = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n    let mut x =\
    \ 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut\
    \ speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut direction\
    \ = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n   \
    \ let mut direction = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let\
    \ mut y = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n    let mut\
    \ x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut speed =\
    \ 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n \
    \   let mut speed = 1.0;\n    let mut x = 0;\n    let mut y = 0;\n    let mut\
    \ direction = 0;\n    let mut speed = 1.0;\n    let mut x = 0;\n    let mut y\
    \ = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n    let mut x =\
    \ 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut speed = 1.0;\n\
    \    let mut x = 0;\n    let mut y = 0;\n    let mut direction = 0;\n    let mut\
    \ speed = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp5teq9kfu.rs:89:1\n  \
    \ |\n89 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp5teq9kfu.rs:93:17\n   |\n93 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp5teq9kfu.rs:93:25\n \
    \  |\n93 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5teq9kfu.rs:94:17\n   |\n94 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5teq9kfu.rs:94:25\n   |\n94 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5teq9kfu.rs:95:17\n   |\n95 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5teq9kfu.rs:95:25\n   |\n95 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5teq9kfu.rs:96:17\n  \
    \ |\n96 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5teq9kfu.rs:96:25\n   |\n96 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5teq9kfu.rs:97:17\n   |\n97 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5teq9kfu.rs:97:25\n\
    \   |\n97 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut x = Vec::new();\n    let mut y = Vec::new();\n    let mut z = Vec::new();\n\
    \    let mut speed2 = Vec::new();\n    let mut x2 = Vec::new();\n    let mut y2\
    \ = Vec::new();\n    let mut z2 = Vec::new();\n    let mut speed3 = Vec::new();\n\
    \    let mut x3 = Vec::new();\n    let mut y3 = Vec::new();\n    let mut z3 =\
    \ Vec::new();\n    let mut speed4 = Vec::new();\n    let mut x4 = Vec::new();\n\
    \    let mut y4 = Vec::new();\n    let mut z4 = Vec::new();\n    let mut speed5\
    \ = Vec::new();\n    let mut x5 = Vec::new();\n    let mut y5 = Vec::new();\n\
    \    let mut z5 = Vec::new();\n    let mut speed6 = Vec::new();\n    let mut x6\
    \ = Vec::new();\n    let mut y6 = Vec::new();\n    let mut z6 = Vec::new();\n\
    \    let mut speed7 = Vec::new();\n    let mut x7 = Vec::new();\n    let mut y7\
    \ = Vec::new();\n    let mut z7 = Vec::new();\n    let mut speed8 = Vec::new();\n\
    \    let mut x8 = Vec::new();\n    let mut y8 = Vec::new();\n    let mut z8 =\
    \ Vec::new();\n    let mut speed9 = Vec::new();\n    let mut x9 = Vec::new();\n\
    \    let mut y9 = Vec::new();\n    let mut z9 = Vec::new();\n    let mut speed10\
    \ = Vec::new();\n    let mut x10 = Vec::new();\n    let mut y10 = Vec::new();\n\
    \    let mut z10 = Vec::new();\n    let mut speed11 = Vec::new();\n    let mut\
    \ x11 = Vec::new();\n    let mut y11 = Vec::new();\n    let mut z11 = Vec::new();\n\
    \    let mut speed12 = Vec::new();\n    let mut x12 = Vec::new();\n    let mut\
    \ y12 = Vec::new();\n    let mut z12 = Vec::new();\n    let mut speed13 = Vec::new();\n\
    \    let mut x13 = Vec::new();\n    let mut y13 = Vec::new\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyaha2yxq.rs:61:27\n   |\n\
    61 |     let mut y13 = Vec::new\n   |                           ^ help: add `;`\
    \ here\n62 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpyaha2yxq.rs:66:17\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpyaha2yxq.rs:66:25\n \
    \  |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyaha2yxq.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyaha2yxq.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyaha2yxq.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyaha2yxq.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyaha2yxq.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyaha2yxq.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyaha2yxq.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyaha2yxq.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_directions_\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa0knnb_l.rs:49:28\n   |\n\
    49 |     let mut car_directions_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa0knnb_l.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp67gtmfc2.rs:68:18\n   |\n\
    68 |     let mut speed\n   |                  ^ help: add `;` here\n69 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp67gtmfc2.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp67gtmfc2.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp67gtmfc2.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp67gtmfc2.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp67gtmfc2.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp67gtmfc2.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp67gtmfc2.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp67gtmfc2.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp67gtmfc2.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp67gtmfc2.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/t"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2\
    \ = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3\
    \ = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4\
    \ = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5\
    \ = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6\
    \ = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7\
    \ = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8\
    \ = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9\
    \ = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10\
    \ = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11\
    \ = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12\
    \ = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13\
    \ = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14\
    \ = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15\
    \ = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16\
    \ = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17\
    \ = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n    let \n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp4emfy84l.rs:51:1\n  \
    \ |\n51 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4emfy84l.rs:55:17\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:55:25\n \
    \  |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4emfy84l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4emfy84l.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp4emfy84l.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0;\n    let mut y = 0;\n    let mut x_speed = 0;\n    let mut\
    \ y_speed = 0;\n    let mut x_speed2 = 0;\n    let mut y_speed2 = 0;\n    let\
    \ mut x_speed3 = 0;\n    let mut y_speed3 = 0;\n    let mut x_speed4 = 0;\n  \
    \  let mut y_speed4 = 0;\n    let mut x_speed5 = 0;\n    let mut y_speed5 = 0;\n\
    \    let mut x_speed6 = 0;\n    let mut y_speed6 = 0;\n    let mut x_speed7 =\
    \ 0;\n    let mut y_speed7 = 0;\n    let mut x_speed8 = 0;\n    let mut y_speed8\
    \ = 0;\n    let mut x_speed9 = 0;\n    let mut y_speed9 = 0;\n    let mut x_speed10\
    \ = 0;\n    let mut y_speed10 = 0;\n    let mut x_speed11 = 0;\n    let mut y_speed11\
    \ = 0;\n    let mut x_speed12 = 0;\n    let mut y_speed12 = 0;\n    let mut x_speed13\
    \ = 0;\n    let mut y_speed13 = 0;\n    let mut x_speed14 = 0;\n    let mut y_speed14\
    \ = 0;\n    let mut x_speed15 = 0;\n    let mut y_speed15 = 0;\n    let mut x_speed16\
    \ = 0;\n    let mut y_speed16 = 0;\n    let mut x_speed17 = 0;\n    let mut y_speed17\
    \ = 0;\n    let mut x_speed18 = 0;\n    let mut y_speed18 = 0;\n    let mut x_speed19\
    \ = 0;\n    let mut y_speed19 = 0;\n    let mut x_speed20 = 0;\n    let mut y_speed20\
    \ = 0;\n    let mut x_speed21 = 0;\n    let mut y_speed21 = 0;\n    let mut x_speed22\
    \ = 0;\n    let mut y_speed22 = 0;\n    let mut x_speed23 = 0;\n    let mut y_speed23\
    \ = 0;\n    let mut x_speed24 = 0;\n    let mut y_speed24 = 0;\n    let mut x_speed25\
    \ = 0;\n    let mut y_speed25 = 0;\n    let mut x_speed26 = 0;\n    let mut y_speed26\
    \ = 0;\n    let mut x_speed27 = 0;\n    let mut y_speed27 = 0;\n    let mut x_speed28\
    \ = 0;\n    let mut y_speed28 = 0;\n    let mut x_speed29 = 0;\n    let mut y_speed29\
    \ = 0;\n    let mut x_speed30 = 0;\n    let mut y_speed30 = 0;\n    let mut x_speed31\
    \ = 0;\n    let mut y_speed31 = 0;\n\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp0y10r4jw.rs:81:17\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0y10r4jw.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0y10r4jw.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0y10r4jw.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0y10r4jw.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0y10r4jw.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0y10r4jw.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0y10r4jw.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0y10r4jw.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0y10r4jw.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp0y10r4jw.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision_found = false;\n        for _ in 0..n {\n            if car_collision(n\
    \ - 1, n - 1) != 0 {\n                collision_found = true;\n              \
    \  break;\n            }\n        }\n        if !collision_found {\n         \
    \   collisions += 1;\n        }\n    }\n    collisions\n}\n\nfn main() {\n   \
    \ let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmp5zaidzxt.rs:14:16\n   |\n14 |             if car_collision(n - 1, n\
    \ - 1) != 0 {\n   |                ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5zaidzxt.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5zaidzxt.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5zaidzxt.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5zaidzxt.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5zaidzxt.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5zaidzxt.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5zaidzxt.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5zaidzxt.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5zaidzxt.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5zaidzxt.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_car_x = 0.0;\n    let mut\
    \ prev_car_y = 0.0;\n    let mut prev_car_time = 0.0;\n    let mut car_x = 0.0;\n\
    \    let mut car_y = 0.0;\n    let mut car_time = 0.0;\n    let mut car_speed\
    \ = 0.0;\n    let mut car_direction = 0.0;\n    let mut car_direction_x = 0.0;\n\
    \    let mut car_direction_y = 0.0;\n    let mut car_direction_time = 0.0;\n \
    \   let mut car_direction_speed = 0.0;\n    let mut car_direction_acceleration\
    \ = 0.0;\n    let mut car_direction_acceleration_x = 0.0;\n    let mut car_direction_acceleration_y\
    \ = 0.0;\n    let mut car_direction_acceleration_time = 0.0;\n    let mut car_direction_acceleration_speed\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration = 0.0;\n    let\
    \ mut car_direction_acceleration_acceleration_x = 0.0;\n    let mut car_direction_acceleration_acceleration_y\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_time = 0.0;\n  \
    \  let mut car_direction_acceleration_acceleration_speed = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_x =\
    \ 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_y = 0.0;\n\
    \    let mut car_direction_acceleration_acceleration_acceleration_time = 0.0;\n\
    \    let mut car_direction_acceleration_acceleration_acceleration_speed = 0.0;\n\
    \    let mut car_direction_acceleration_acceleration_acceleration_acceleration\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_acceleration_x\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_acceleration_y\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_acceleration_time\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_acceleration_speed\
    \ = 0.0;\n    let mut car_direction_acceleration_acceleration_acceleration_acceleration_acceleration\
    \ = 0.0;\n    let mut car_direction_acceleration_acceler\n}\n\nfn main() {\n \
    \   let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk7q6wgo3.rs:49:47\n   |\n\
    49 |     let mut car_direction_acceleration_acceler\n   |                    \
    \                           ^ help: add `;` here\n50 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:54:17\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7q6wgo3.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:55:17\n   |\n55 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:55:25\n\
    \   |\n55 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk7q6wgo3.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:56:25\n   |\n56 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk7q6wgo3.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:57:25\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk7q6wgo3.rs:58:17\n  \
    \ |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk7q6wgo3.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpimaeve15.rs:54:33\n   |\n\
    54 |     let mut car_speed = Vec::new\n   |                                 ^\
    \ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpimaeve15.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpimaeve15.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_collision_count = 0;\n    let\
    \ mut prev_collision_speed = 1.0;\n    let mut prev_collision_prev_speed = 1.0;\n\
    \    let mut prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_speed = 1.0;\n    let\
    \ mut prev_collision_prev_collision_prev_collision_count = 0;\n    let mut prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_count\
    \ = 0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_speed\
    \ = 1.0;\n    let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph4p89i__.rs:36:103\n   |\n\
    36 |     let mut prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_prev_collision_\n\
    \   |                                                                        \
    \                               ^ help: add `;` here\n37 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:41:17\n\
    \   |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:42:17\n   |\n42 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:42:25\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph4p89i__.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph4p89i__.rs:43:25\n   |\n43 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph4p89i__.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph4p89i__.rs:44:25\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph4p89i__.rs:45:17\n  \
    \ |\n45 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> "
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision_found = false;\n        for _ in 0..n {\n            if car_race_collision_test()\
    \ {\n                collision_found = true;\n                break;\n       \
    \     }\n        }\n        if !collision_found {\n            collisions += 1;\n\
    \        }\n    }\n    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_race_collision_test` in this scope\n\
    \  --> /tmp/tmpqwkzis26.rs:14:16\n   |\n14 |             if car_race_collision_test()\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqwkzis26.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqwkzis26.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqwkzis26.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqwkzis26.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqwkzis26.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqwkzis26.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqwkzis26.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqwkzis26.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqwkzis26.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqwkzis26.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n    let\
    \ mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n  \
    \  let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp3yj_mkw0.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3yj_mkw0.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3yj_mkw0.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3yj_mkw0.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0; // number of collisions\n   \
    \ let mut speed = 2.0; // speed of cars\n    let mut direction = Direction::Right;\
    \ // direction of cars\n    let mut car_speed = 2.0; // speed of cars\n    let\
    \ mut car_direction = Direction::Right; // direction of cars\n    let mut car_speed2\
    \ = 2.0; // speed of cars\n    let mut car_direction2 = Direction::Right; // direction\
    \ of cars\n    let mut car_speed3 = 2.0; // speed of cars\n    let mut car_direction3\
    \ = Direction::Right; // direction of cars\n    let mut car_speed4 = 2.0; // speed\
    \ of cars\n    let mut car_direction4 = Direction::Right; // direction of cars\n\
    \    let mut car_speed5 = 2.0; // speed of cars\n    let mut car_direction5 =\
    \ Direction::Right; // direction of cars\n    let mut car_speed6 = 2.0; // speed\
    \ of cars\n    let mut car_direction6 = Direction::Right; // direction of cars\n\
    \    let mut car_speed7 = 2.0; // speed of cars\n    let mut car_direction7 =\
    \ Direction::Right; // direction of cars\n    let mut car_speed8 = 2.0; // speed\
    \ of cars\n    let mut car_direction8 = Direction::Right; // direction of cars\n\
    \    let mut car_speed9 = 2.0; // speed of cars\n    let mut car_direction9 =\
    \ Direction::Right; // direction of cars\n    let mut car_speed10 = 2.0; // speed\
    \ of cars\n    let mut car_direction10 = Direction::Right; // direction of cars\n\
    \    let mut car_speed11 = 2.0; // speed of cars\n    let mut car_direction11\
    \ = Direction::Right; // direction of cars\n    let mut car_speed12 = 2.0; //\
    \ speed of cars\n    let mut car_direction12 = Direction::Right; // direction\
    \ of cars\n    let mut car_speed13 = 2.0; // speed of cars\n    let mut car_direction13\
    \ = Direction::Right; // direction of cars\n    let mut car_speed14 = 2.0; //\
    \ speed of cars\n    let mut car_direction14 = Direction::Right; // direction\
    \ of cars\n    let mut car_speed15 = 2.0; // speed of cars\n    let mut car_direction15\
    \ = Direction::Right; // direction of cars\n    let mut car_speed16 = 2.0; //\
    \ speed of cars\n    let mut car_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1l987o54.rs:44:17\n   |\n\
    44 |     let mut car_\n   |                 ^ help: add `;` here\n45 | }\n   |\
    \ - unexpected token\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Direction`\n  --> /tmp/tmp1l987o54.rs:12:25\n   |\n12 |     let mut direction\
    \ = Direction::Right; // direction of cars\n   |                         ^^^^^^^^^\
    \ use of undeclared type `Direction`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:14:29\n   |\n14 |   \
    \  let mut car_direction = Direction::Right; // direction of cars\n   |      \
    \                       ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:16:30\n\
    \   |\n16 |     let mut car_direction2 = Direction::Right; // direction of cars\n\
    \   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:18:30\n\
    \   |\n18 |     let mut car_direction3 = Direction::Right; // direction of cars\n\
    \   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:20:30\n\
    \   |\n20 |     let mut car_direction4 = Direction::Right; // direction of cars\n\
    \   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:22:30\n\
    \   |\n22 |     let mut car_direction5 = Direction::Right; // direction of cars\n\
    \   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54.rs:24:30\n\
    \   |\n24 |     let mut car_direction6 = Direction::Right; // direction of cars\n\
    \   |                              ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmp1l987o54"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ vx = 0.0;\n    let mut vy = 0.0;\n    let mut vz = 0.0;\n    let mut ax = 0.0;\n\
    \    let mut ay = 0.0;\n    let mut az = 0.0;\n    let mut ax2 = 0.0;\n    let\
    \ mut ay2 = 0.0;\n    let mut az2 = 0.0;\n    let mut ax3 = 0.0;\n    let mut\
    \ ay3 = 0.0;\n    let mut az3 = 0.0;\n    let mut ax4 = 0.0;\n    let mut ay4\
    \ = 0.0;\n    let mut az4 = 0.0;\n    let mut ax5 = 0.0;\n    let mut ay5 = 0.0;\n\
    \    let mut az5 = 0.0;\n    let mut ax6 = 0.0;\n    let mut ay6 = 0.0;\n    let\
    \ mut az6 = 0.0;\n    let mut ax7 = 0.0;\n    let mut ay7 = 0.0;\n    let mut\
    \ az7 = 0.0;\n    let mut ax8 = 0.0;\n    let mut ay8 = 0.0;\n    let mut az8\
    \ = 0.0;\n    let mut ax9 = 0.0;\n    let mut ay9 = 0.0;\n    let mut az9 = 0.0;\n\
    \    let mut ax10 = 0.0;\n    let mut ay10 = 0.0;\n    let mut az10 = 0.0;\n \
    \   let mut ax11 = 0.0;\n    let mut ay11 = 0.0;\n    let mut az11 = 0.0;\n  \
    \  let mut ax12 = 0.0;\n    let mut ay12 = 0.0;\n    let mut az12 = 0.0;\n   \
    \ let mut ax13 = 0.0;\n    let mut ay13 = 0.0;\n    let mut az13 = 0.0;\n    let\
    \ mut ax14 = 0.0;\n    let mut ay14 = 0.0;\n    let mut az14 = 0.0;\n    let mut\
    \ ax15 = 0.0;\n    let mut ay15 = 0.0;\n    let mut az15 = 0.0;\n    let mut ax16\
    \ = 0.0;\n    let mut ay16 = 0.0;\n    let mut az16 = 0.0;\n    let mut ax17 =\
    \ 0.0;\n    let mut ay17 = 0.0;\n    let mut az17 = 0.0;\n    let mut ax18 = 0.0;\n\
    \    let mut ay18 = 0.0;\n    let mut az18 = 0.0;\n    let mut ax19 = 0.0;\n \
    \   let mut ay19 = 0.0;\n    let mut az19\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnqsxqoz8.rs:74:17\n   |\n\
    74 |     let mut az19\n   |                 ^ help: add `;` here\n75 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnqsxqoz8.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnqsxqoz8.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnqsxqoz8.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnqsxqoz8.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnqsxqoz8.rs:83:25\n   |\n83 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_direction_change = 0.0;\n    let mut collision_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction = 1.0;\n    let mut\
    \ collision_direction_change_direction_change = 0.0;\n    let mut collision_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction =\
    \ 1.0;\n    let mut collision_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction\
    \ = 1.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction\
    \ = 1.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction\
    \ = 1.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction\
    \ = 1.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_time\
    \ = 0.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction\
    \ = 1.0;\n    let mut collision_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change_direction_change\
    \ = 0.0;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp8n0pwz2n.rs:37:1\n\
    \   |\n37 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp8n0pwz2n.rs:41:17\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:41:25\n \
    \  |\n41 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8n0pwz2n.rs:42:17\n   |\n42 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:42:25\n   |\n42 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8n0pwz2n.rs:43:17\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:43:25\n   |\n43 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:44:17\n  \
    \ |\n44 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8n0pwz2n.rs:44:25\n   |\n44 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:45:17\n   |\n45 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8n0pwz2n.rs:45:25\n\
    \   |\n45 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut left = Vec::new();\n    let mut right = Vec::new();\n    for _ in\
    \ 0..n {\n        speed.push(0);\n        left.push(0);\n        right.push(0);\n\
    \    }\n    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n \
    \       right.push(0);\n    }\n    for _ in 0..n {\n        speed.push(0);\n \
    \       left.push(0);\n        right.push(0);\n    }\n    for _ in 0..n {\n  \
    \      speed.push(0);\n        left.push(0);\n        right.push(0);\n    }\n\
    \    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n        right.push(0);\n\
    \    }\n    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n \
    \       right.push(0);\n    }\n    for _ in 0..n {\n        speed.push(0);\n \
    \       left.push(0);\n        right.push(0);\n    }\n    for _ in 0..n {\n  \
    \      speed.push(0);\n        left.push(0);\n        right.push(0);\n    }\n\
    \    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n        right.push(0);\n\
    \    }\n    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n \
    \       right.push(0);\n    }\n    for _ in 0..n {\n        speed.push(0);\n \
    \       left.push(0);\n        right.push(0);\n    }\n    for _ in 0..n {\n  \
    \      speed.push(0);\n        left.push(0);\n        right.push(0);\n    }\n\
    \    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n        right.push(0);\n\
    \    }\n    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n \
    \       right.push(0);\n    }\n    for _ in 0..n {\n        speed.push(0);\n \
    \       left.push(0);\n        right.push(0);\n    }\n    for _ in 0..n {\n  \
    \      speed.push(0);\n        left.push(0);\n        right.push(0);\n    }\n\
    \    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n        right.push(0);\n\
    \    }\n    for _ in 0..n {\n        speed.push(0);\n        left.push(0);\n \
    \       right.push(0);\n    }\n    for _ in 0..n {\n        speed.push(0);\n \
    \       left.push(0);\n        right.push(0);\n    }\n    for _ in 0.\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmpvqi6o6cn.rs:110:1\n    |\n\
    110 | }\n    | ^ expected `{`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpvqi6o6cn.rs:114:17\n    |\n114 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpvqi6o6cn.rs:114:25\n\
    \    |\n114 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpvqi6o6cn.rs:115:17\n    |\n115 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpvqi6o6cn.rs:115:25\n\
    \    |\n115 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpvqi6o6cn.rs:116:17\n    |\n116 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpvqi6o6cn.rs:116:25\n\
    \    |\n116 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpvqi6o6cn.rs:117:17\n    |\n117 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpvqi6o6cn.rs:117:25\n\
    \    |\n117 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n   --> /tmp/tmpvqi6o6cn.rs:118:17\n    |\n118 |     assert_eq!({left},\
    \ {right});\n    |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n   --> /tmp/tmpvqi6o6cn.rs:118:25\n\
    \    |\n118 |     assert_eq!({left}, {right});\n    |                        \
    \ ^^^^^ not found in this scope\n\nerror: aborting due to 11 previous errors\n\
    \nFor more inform"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let\
    \ mut car_speed4 = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6\
    \ = 1.0;\n    let mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let\
    \ mut car_speed9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11\
    \ = 1.0;\n    let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n   \
    \ let mut car_speed14 = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16\
    \ = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n   \
    \ let mut car_speed19 = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n   \
    \ let mut car_speed24 = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26\
    \ = 1.0;\n    let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n   \
    \ let mut car_speed29 = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31\
    \ = 1.0;\n    let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n   \
    \ let mut car_speed34 = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36\
    \ = 1.0;\n    let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n   \
    \ let mut car_speed39 = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41\
    \ = 1.0;\n    let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n   \
    \ let mut car_speed44 = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46\
    \ = 1.0;\n    let mut car_speed47 = 1.\n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw_hn4rpu.rs:57:29\n   |\n\
    57 |     let mut car_speed47 = 1.\n   |                             ^ help: add\
    \ `;` here\n58 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:62:17\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:62:25\n \
    \  |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw_hn4rpu.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw_hn4rpu.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw_hn4rpu.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_distance\
    \ = 0;\n    let mut collision_speed = 0;\n    let mut collision_direction = 0;\n\
    \    let mut collision_speed2 = 0;\n    let mut collision_direction2 = 0;\n  \
    \  let mut collision_speed3 = 0;\n    let mut collision_direction3 = 0;\n    let\
    \ mut collision_speed4 = 0;\n    let mut collision_direction4 = 0;\n    let mut\
    \ collision_speed5 = 0;\n    let mut collision_direction5 = 0;\n    let mut collision_speed6\
    \ = 0;\n    let mut collision_direction6 = 0;\n    let mut collision_speed7 =\
    \ 0;\n    let mut collision_direction7 = 0;\n    let mut collision_speed8 = 0;\n\
    \    let mut collision_direction8 = 0;\n    let mut collision_speed9 = 0;\n  \
    \  let mut collision_direction9 = 0;\n    let mut collision_speed10 = 0;\n   \
    \ let mut collision_direction10 = 0;\n    let mut collision_speed11 = 0;\n   \
    \ let mut collision_direction11 = 0;\n    let mut collision_speed12 = 0;\n   \
    \ let mut collision_direction12 = 0;\n    let mut collision_speed13 = 0;\n   \
    \ let mut collision_direction13 = 0;\n    let mut collision_speed14 = 0;\n   \
    \ let mut collision_direction14 = 0;\n    let mut collision_speed15 = 0;\n   \
    \ let mut collision_direction15 = 0;\n    let mut collision_speed16 = 0;\n   \
    \ let mut collision_direction16 = 0;\n    let mut collision_speed17 = 0;\n   \
    \ let mut collision_direction17 = 0;\n    let mut collision_speed18 = 0;\n   \
    \ let mut collision_direction18 = 0;\n    let mut collision_speed19 = 0;\n   \
    \ let mut collision_direction19 = 0;\n    let mut collision_speed20 = 0;\n   \
    \ let mut collision_direction20 = 0;\n    let mut collision_speed21 = 0;\n   \
    \ let mut collision_direction21 = 0;\n    let mut collision_speed22 = 0;\n   \
    \ let mut collision_direction22 = 0;\n    let mut collision_speed23 = 0;\n   \
    \ let mut collision_direction23 = 0;\n    let mut collision_speed24 = 0;\n   \
    \ let mut collision_direction24 = 0;\n    let mut collision_speed25 = 0;\n   \
    \ let mut collision_direction25 = 0;\n    let mut collision_speed26 = 0;\n   \
    \ let mut collision_direction26 = 0;\n    let mut collision_speed27 = 0;\n   \
    \ let mut collision_direction27 = 0;\n    let mut collision_speed28 = 0;\n   \
    \ let mut collision_direction28 = 0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp0yu6csjb.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0yu6csjb.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0yu6csjb.rs:76:25\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:17\n   |\n77 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0yu6csjb.rs:77:25\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_speeds = Vec::new();\n   \
    \ let mut car_speeds_left = Vec::new();\n    let mut car_speeds_right = Vec::new();\n\
    \    let mut car_speeds_left_right = Vec::new();\n    let mut car_speeds_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_left = Vec::new();\n    let mut\
    \ car_speeds_right_right = Vec::new();\n    let mut car_speeds_left_right_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_right = Vec::new();\n    let\
    \ mut car_speeds_right_left_left = Vec::new();\n    let mut car_speeds_right_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left = Vec::new();\n \
    \   let mut car_speeds_left_right_left_right = Vec::new();\n    let mut car_speeds_right_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_left_left_right = Vec::new();\n\
    \    let mut car_speeds_left_right_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_right = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_left_right_left = Vec::new();\n    let mut car_speeds_right_left_left_right_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_right_left = Vec::new();\n\
    \    let mut car_speeds_left_right_left_right_left_right = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_left_right_left_left = Vec::new();\n    let mut\
    \ car_speeds_right_left_left_right_left_right_left = Vec::new();\n    let mut\
    \ car_speeds_left_right_left_right_left_right_left = Vec::new();\n    let mut\
    \ car_speeds_right_left_left_right_left_right_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_left_left_right_left_right_left_right = Vec::new();\n \
    \   let mut car_speeds_left_right_left_right_left_right_left_right = Vec::new();\n\
    \    let mut car_speeds_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk8azg5ck.rs:42:24\n   |\n\
    42 |     let mut car_speeds_\n   |                        ^ help: add `;` here\n\
    43 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpk8azg5ck.rs:47:17\n   |\n47 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk8azg5ck.rs:47:25\n   |\n47 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk8azg5ck.rs:48:17\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk8azg5ck.rs:48:25\n   |\n48 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk8azg5ck.rs:49:17\n  \
    \ |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk8azg5ck.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk8azg5ck.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk8azg5ck.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk8azg5ck.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk8azg5ck.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut position = 0.0;\n    let mut speed2 = 0.0;\n    let mut position2\
    \ = 0.0;\n    let mut speed3 = 0.0;\n    let mut position3 = 0.0;\n    let mut\
    \ speed4 = 0.0;\n    let mut position4 = 0.0;\n    let mut speed5 = 0.0;\n   \
    \ let mut position5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut position6 =\
    \ 0.0;\n    let mut speed7 = 0.0;\n    let mut position7 = 0.0;\n    let mut speed8\
    \ = 0.0;\n    let mut position8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut\
    \ position9 = 0.0;\n    let mut speed10 = 0.0;\n    let mut position10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut position11 = 0.0;\n    let mut speed12\
    \ = 0.0;\n    let mut position12 = 0.0;\n    let mut speed13 = 0.0;\n    let mut\
    \ position13 = 0.0;\n    let mut speed14 = 0.0;\n    let mut position14 = 0.0;\n\
    \    let mut speed15 = 0.0;\n    let mut position15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut position16 = 0.0;\n    let mut speed17 = 0.0;\n    let mut\
    \ position17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut position18 = 0.0;\n\
    \    let mut speed19 = 0.0;\n    let mut position19 = 0.0;\n    let mut speed20\
    \ = 0.0;\n    let mut position20 = 0.0;\n    let mut speed21 = 0.0;\n    let mut\
    \ position21 = 0.0;\n    let mut speed22 = 0.0;\n    let mut position22 = 0.0;\n\
    \    let mut speed23 = 0.0;\n    let mut position23 = 0.0;\n    let mut speed24\
    \ = 0.0;\n    let mut position24 = 0.0;\n    let mut speed25 = 0.0;\n    let mut\
    \ position25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut position26 = 0.0;\n\
    \    let mut speed27 = 0.0;\n    let mut position27 = 0.0;\n    let mut speed28\
    \ = 0.0;\n    let mut position28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut\
    \ position29 = 0.0;\n    let mut speed30 = 0.0;\n    let mut position30 = 0.0;\n\
    \    let mut speed31 = 0.0;\n    let mut position31 = 0.0;\n    let mut speed32\
    \ = 0.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpjfihx_5h.rs:78:17\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjfihx_5h.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpjfihx_5h.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpjfihx_5h.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpjfihx_5h.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpjfihx_5h.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpjfihx_5h.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpjfihx_5h.rs:81:25\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpjfihx_5h.rs:82:17\n  \
    \ |\n82 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpjfihx_5h.rs:82:25\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpjfihx_5h.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n\
    \    let mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n\
    \    let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut speed60 = 0.0;\n    let mut\
    \ speed61 = 0.0;\n    let mut speed62 = 0.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp100iql6m.rs:72:25\n   |\n\
    72 |     let mut speed62 = 0.\n   |                         ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp100iql6m.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp100iql6m.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp100iql6m.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision_found = false;\n        for _ in 0..n {\n            if car_collision(&mut\
    \ collision_found) {\n                collisions += 1;\n            }\n      \
    \  }\n    }\n    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:14:16\n   |\n14 |             if car_collision(&mut collision_found)\
    \ {\n   |                ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:24:17\n  \
    \ |\n24 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:24:25\n   |\n24 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:25:17\n   |\n25 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:25:25\n\
    \   |\n25 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplwvzqnip.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:26:25\n   |\n26 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:27:17\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplwvzqnip.rs:27:25\n   |\n27 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplwvzqnip.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplwvzqnip.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in t"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = [0; n];\n    let mut car_speeds = [0; n];\n    let mut car_directions = [0;\
    \ n];\n    let mut car_direction_changes = [0; n];\n    let mut car_collision_directions\
    \ = [0; n];\n    let mut car_collision_direction_changes = [0; n];\n\n    // Initialize\
    \ car_positions and car_speeds to some random values.\n    for car_id in 0..n\
    \ {\n        car_positions[car_id] = rand::random::<f32>();\n        car_speeds[car_id]\
    \ = rand::random::<f32>();\n    }\n\n    // Initialize car_collision_directions\
    \ and car_collision_direction_changes to\n    // some random values.\n    for\
    \ car_id in 0..n {\n        car_collision_directions[car_id] = rand::random::<f32>();\n\
    \        car_collision_direction_changes[car_id] = rand::random::<f32>();\n  \
    \  }\n\n    // Initialize car_direction_changes to some random values.\n    for\
    \ car_id in 0..n {\n        car_direction_changes[car_id] = rand::random::<f32>();\n\
    \    }\n\n    // Keep track of whether a car has collided with another car.\n\
    \    let mut collided_with = false;\n\n    // Keep track of whether a car has\
    \ collided with another car.\n    let mut collided_with = false;\n\n    // Keep\
    \ track of whether a car has collided with another car.\n    let mut collided_with\
    \ = false;\n\n    // Keep track of whether a car has collided with another car.\n\
    \    let mut collided_with = false;\n\n    // Keep track of whether a car has\
    \ collided with another car.\n    let mut collided_with = false;\n\n    // Keep\
    \ track of whether a car has collided with another car.\n    let mut collided_with\
    \ = false;\n\n    // Keep track of whether a car has collided with another car.\n\
    \    let mut collided_with = false;\n\n    // Keep track of whether a car has\
    \ collided with another car.\n    let mut collided_with = false;\n\n    // Keep\
    \ track of whether a car has collided with another car.\n    let mut collided_with\
    \ = false;\n\n    // Keep track of whether a car has collided with another car.\n\
    \    let mut collided_with = false;\n\n    // Keep track of whether a car has\
    \ collided with another car.\n    let mut collided_with = false;\n\n    // Keep\
    \ track of whether \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp5gp8yx3k.rs:11:33\n   |\n9  | fn car_race_collision(n: isize) -> isize\
    \ {\n   |                       - this would need to be a `const`\n10 |     let\
    \ mut collision_count = 0;\n11 |     let mut car_positions = [0; n];\n   |   \
    \                              ^\n\nerror[E0435]: attempt to use a non-constant\
    \ value in a constant\n  --> /tmp/tmp5gp8yx3k.rs:12:30\n   |\n9  | fn car_race_collision(n:\
    \ isize) -> isize {\n   |                       - this would need to be a `const`\n\
    ...\n12 |     let mut car_speeds = [0; n];\n   |                             \
    \ ^\n\nerror[E0435]: attempt to use a non-constant value in a constant\n  -->\
    \ /tmp/tmp5gp8yx3k.rs:13:34\n   |\n9  | fn car_race_collision(n: isize) -> isize\
    \ {\n   |                       - this would need to be a `const`\n...\n13 | \
    \    let mut car_directions = [0; n];\n   |                                  ^\n\
    \nerror[E0435]: attempt to use a non-constant value in a constant\n  --> /tmp/tmp5gp8yx3k.rs:14:41\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \      - this would need to be a `const`\n...\n14 |     let mut car_direction_changes\
    \ = [0; n];\n   |                                         ^\n\nerror[E0435]: attempt\
    \ to use a non-constant value in a constant\n  --> /tmp/tmp5gp8yx3k.rs:15:44\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \      - this would need to be a `const`\n...\n15 |     let mut car_collision_directions\
    \ = [0; n];\n   |                                            ^\n\nerror[E0435]:\
    \ attempt to use a non-constant value in a constant\n  --> /tmp/tmp5gp8yx3k.rs:16:51\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \      - this would need to be a `const`\n...\n16 |     let mut car_collision_direction_changes\
    \ = [0; n];\n   |                                                   ^\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared crate or module `rand`\n  --> /tmp/tmp5gp8yx3k.rs:20:33\n\
    \   |\n20 |         car_positions[car_id] = rand::random::<f32>();\n   "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_heading = 0.0;\n    let mut prev_heading_dir = 0.0;\n\
    \    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n  \
    \  let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let\
    \ mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut\
    \ prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir\
    \ = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir =\
    \ 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n\
    \    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n  \
    \  let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let\
    \ mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut\
    \ prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir\
    \ = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir =\
    \ 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n\
    \    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n  \
    \  let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let\
    \ mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut\
    \ prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir\
    \ = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir =\
    \ 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n\
    \    let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n  \
    \  let mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let\
    \ mut prev_heading_dir = 0.0;\n    let mut prev_heading_dir = 0.0;\n    let mut\
    \ prev_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpspuxti6r.rs:62:18\n   |\n\
    62 |     let mut prev_\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpspuxti6r.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpspuxti6r.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpspuxti6r.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpspuxti6r.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpspuxti6r.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpspuxti6r.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpspuxti6r.rs:70:17\n   |\n70 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpspuxti6r.rs:70:25\n\
    \   |\n70 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpspuxti6r.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpspuxti6r.rs:71:25\n   |\n71 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/t"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut car_speed3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_speed5 = 1.0;\n    let\
    \ mut car_speed6 = 1.0;\n    let mut car_speed7 = 1.0;\n    let mut car_speed8\
    \ = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let\
    \ mut car_speed11 = 1.0;\n    let mut car_speed12 = 1.0;\n    let mut car_speed13\
    \ = 1.0;\n    let mut car_speed14 = 1.0;\n    let mut car_speed15 = 1.0;\n   \
    \ let mut car_speed16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_speed18\
    \ = 1.0;\n    let mut car_speed19 = 1.0;\n    let mut car_speed20 = 1.0;\n   \
    \ let mut car_speed21 = 1.0;\n    let mut car_speed22 = 1.0;\n    let mut car_speed23\
    \ = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_speed25 = 1.0;\n   \
    \ let mut car_speed26 = 1.0;\n    let mut car_speed27 = 1.0;\n    let mut car_speed28\
    \ = 1.0;\n    let mut car_speed29 = 1.0;\n    let mut car_speed30 = 1.0;\n   \
    \ let mut car_speed31 = 1.0;\n    let mut car_speed32 = 1.0;\n    let mut car_speed33\
    \ = 1.0;\n    let mut car_speed34 = 1.0;\n    let mut car_speed35 = 1.0;\n   \
    \ let mut car_speed36 = 1.0;\n    let mut car_speed37 = 1.0;\n    let mut car_speed38\
    \ = 1.0;\n    let mut car_speed39 = 1.0;\n    let mut car_speed40 = 1.0;\n   \
    \ let mut car_speed41 = 1.0;\n    let mut car_speed42 = 1.0;\n    let mut car_speed43\
    \ = 1.0;\n    let mut car_speed44 = 1.0;\n    let mut car_speed45 = 1.0;\n   \
    \ let mut car_speed46 = 1.0;\n    let mut car\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpzhap5cnx.rs:58:16\n   |\n\
    58 |     let mut car\n   |                ^ help: add `;` here\n59 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpzhap5cnx.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzhap5cnx.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpzhap5cnx.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpzhap5cnx.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpzhap5cnx.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpzhap5cnx.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpzhap5cnx.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpzhap5cnx.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpzhap5cnx.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpzhap5cnx.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzh"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_speed2 = 1.0;\n    let mut collision_speed3 =\
    \ 1.0;\n    let mut collision_speed4 = 1.0;\n    let mut collision_speed5 = 1.0;\n\
    \    let mut collision_speed6 = 1.0;\n    let mut collision_speed7 = 1.0;\n  \
    \  let mut collision_speed8 = 1.0;\n    let mut collision_speed9 = 1.0;\n    let\
    \ mut collision_speed10 = 1.0;\n    let mut collision_speed11 = 1.0;\n    let\
    \ mut collision_speed12 = 1.0;\n    let mut collision_speed13 = 1.0;\n    let\
    \ mut collision_speed14 = 1.0;\n    let mut collision_speed15 = 1.0;\n    let\
    \ mut collision_speed16 = 1.0;\n    let mut collision_speed17 = 1.0;\n    let\
    \ mut collision_speed18 = 1.0;\n    let mut collision_speed19 = 1.0;\n    let\
    \ mut collision_speed20 = 1.0;\n    let mut collision_speed21 = 1.0;\n    let\
    \ mut collision_speed22 = 1.0;\n    let mut collision_speed23 = 1.0;\n    let\
    \ mut collision_speed24 = 1.0;\n    let mut collision_speed25 = 1.0;\n    let\
    \ mut collision_speed26 = 1.0;\n    let mut collision_speed27 = 1.0;\n    let\
    \ mut collision_speed28 = 1.0;\n    let mut collision_speed29 = 1.0;\n    let\
    \ mut collision_speed30 = 1.0;\n    let mut collision_speed31 = 1.0;\n    let\
    \ mut collision_speed32 = 1.0;\n    let mut collision_speed33 = 1.0;\n    let\
    \ mut collision_speed34 = 1.0;\n    let mut collision_speed35 = 1.0;\n    let\
    \ mut collision_speed36 = 1.0;\n    let mut collision_speed37 = 1.0;\n    let\
    \ mut collision_speed38 = 1.0;\n    let mut collision_speed39 = 1.0;\n    let\
    \ mut collision_speed40 = 1.0;\n    let mut collision_speed41 = 1.0;\n    let\
    \ mut collision_speed42 = 1.0;\n    let mut collision_speed43 = 1.0;\n    let\
    \ mut collision_speed44 = 1.0;\n    let mut collision_speed45 = 1.0;\n    let\
    \ mut collision_speed46 = 1.0;\n    let mut collision_speed47 = 1.0;\n\n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplg5o6_0z.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplg5o6_0z.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplg5o6_0z.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplg5o6_0z.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplg5o6_0z.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplg5o6_0z.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplg5o6_0z.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplg5o6_0z.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplg5o6_0z.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplg5o6_0z.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmplg5o6_0z.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_vec:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_2: Vec<isize> = vec![];\n  \
    \  let mut collision_vec_3: Vec<isize> = vec![];\n    let mut collision_vec_4:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_5: Vec<isize> = vec![];\n  \
    \  let mut collision_vec_6: Vec<isize> = vec![];\n    let mut collision_vec_7:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_8: Vec<isize> = vec![];\n  \
    \  let mut collision_vec_9: Vec<isize> = vec![];\n    let mut collision_vec_10:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_11: Vec<isize> = vec![];\n \
    \   let mut collision_vec_12: Vec<isize> = vec![];\n    let mut collision_vec_13:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_14: Vec<isize> = vec![];\n \
    \   let mut collision_vec_15: Vec<isize> = vec![];\n    let mut collision_vec_16:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_17: Vec<isize> = vec![];\n \
    \   let mut collision_vec_18: Vec<isize> = vec![];\n    let mut collision_vec_19:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_20: Vec<isize> = vec![];\n \
    \   let mut collision_vec_21: Vec<isize> = vec![];\n    let mut collision_vec_22:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_23: Vec<isize> = vec![];\n \
    \   let mut collision_vec_24: Vec<isize> = vec![];\n    let mut collision_vec_25:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_26: Vec<isize> = vec![];\n \
    \   let mut collision_vec_27: Vec<isize> = vec![];\n    let mut collision_vec_28:\
    \ Vec<isize> = vec![];\n    let mut collision_vec_\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpqz0463dz.rs:39:27\n   |\n\
    39 |     let mut collision_vec_\n   |                           ^ help: add `;`\
    \ here\n40 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqz0463dz.rs:44:17\n   |\n44 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqz0463dz.rs:44:25\n \
    \  |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqz0463dz.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqz0463dz.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqz0463dz.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqz0463dz.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqz0463dz.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqz0463dz.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqz0463dz.rs:48:17\n   |\n48 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqz0463dz.rs:48:25\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_directions_\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgxxgovcg.rs:49:28\n   |\n\
    49 |     let mut car_directions_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpgxxgovcg.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpgxxgovcg.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpgxxgovcg.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpgxxgovcg.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpgxxgovcg.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpgxxgovcg.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpgxxgovcg.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpgxxgovcg.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpgxxgovcg.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpgxxgovcg.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0;\n    let mut y = 0;\n    let mut z = 0;\n    let mut speed2\
    \ = 1.0;\n    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2 = 0.0;\n\
    \    let mut speed3 = 1.0;\n    let mut x3 = 0.0;\n    let mut y3 = 0.0;\n   \
    \ let mut z3 = 0.0;\n    let mut speed4 = 1.0;\n    let mut x4 = 0.0;\n    let\
    \ mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut speed5 = 1.0;\n    let mut\
    \ x5 = 0.0;\n    let mut y5 = 0.0;\n    let mut z5 = 0.0;\n    let mut speed6\
    \ = 1.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6 = 0.0;\n\
    \    let mut speed7 = 1.0;\n    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n   \
    \ let mut z7 = 0.0;\n    let mut speed8 = 1.0;\n    let mut x8 = 0.0;\n    let\
    \ mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut speed9 = 1.0;\n    let mut\
    \ x9 = 0.0;\n    let mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut speed10\
    \ = 1.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n    let mut z10 = 0.0;\n\
    \    let mut speed11 = 1.0;\n    let mut x11 = 0.0;\n    let mut y11 = 0.0;\n\
    \    let mut z11 = 0.0;\n    let mut speed12 = 1.0;\n    let mut x12 = 0.0;\n\
    \    let mut y12 = 0.0;\n    let mut z12 = 0.0;\n    let mut speed13 = 1.0;\n\
    \    let mut x13 = 0.0;\n    let mut y13 = 0.0;\n    let mut z13 = 0.0;\n    let\
    \ mut speed14 = 1.0;\n    let mut x14 = 0.0;\n    let mut y14 = 0.0;\n    let\
    \ mut z14 = 0.0;\n    let mut speed15 = 1.0;\n    let mut x15 = 0.0;\n    let\
    \ mut y15 = 0.0;\n    let mut z15 = 0.0;\n    let mut speed16 = 1.0;\n    let\
    \ mut x16 = 0.0;\n    let mut y16 = 0.0;\n    let mut z16 = 0.0;\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu4nmjtzx.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpu4nmjtzx.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpu4nmjtzx.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpu4nmjtzx.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpu4nmjtzx.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpu4nmjtzx.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_x\
    \ = 0.0;\n    let mut max_x = 0.0;\n    let mut min_y = 0.0;\n    let mut max_y\
    \ = 0.0;\n    let mut min_z = 0.0;\n    let mut max_z = 0.0;\n    let mut min_r\
    \ = 0.0;\n    let mut max_r = 0.0;\n    let mut min_g = 0.0;\n    let mut max_g\
    \ = 0.0;\n    let mut min_b = 0.0;\n    let mut max_b = 0.0;\n    let mut min_a\
    \ = 0.0;\n    let mut max_a = 0.0;\n    let mut min_d = 0.0;\n    let mut max_d\
    \ = 0.0;\n    let mut min_v = 0.0;\n    let mut max_v = 0.0;\n    let mut min_i\
    \ = 0.0;\n    let mut max_i = 0.0;\n    let mut min_j = 0.0;\n    let mut max_j\
    \ = 0.0;\n    let mut min_k = 0.0;\n    let mut max_k = 0.0;\n    let mut min_l\
    \ = 0.0;\n    let mut max_l = 0.0;\n    let mut min_m = 0.0;\n    let mut max_m\
    \ = 0.0;\n    let mut min_n = 0.0;\n    let mut max_n = 0.0;\n    let mut min_p\
    \ = 0.0;\n    let mut max_p = 0.0;\n    let mut min_q = 0.0;\n    let mut max_q\
    \ = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r = 0.0;\n    let mut min_s\
    \ = 0.0;\n    let mut max_s = 0.0;\n    let mut min_t = 0.0;\n    let mut max_t\
    \ = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r = 0.0;\n    let mut min_g\
    \ = 0.0;\n    let mut max_g = 0.0;\n    let mut min_b = 0.0;\n    let mut max_b\
    \ = 0.0;\n    let mut min_a = 0.0;\n    let mut max_a = 0.0;\n    let mut min_d\
    \ = 0.0;\n    let mut max_d = 0.0;\n    let mut min_v = 0.0;\n    let mut max_v\
    \ = 0.0;\n    let mut min_i = 0.0;\n    let mut max_i = 0.0;\n    let mut min_j\
    \ = 0.0;\n    let mut max_j = 0.0;\n    let mut min_k = 0.0;\n    let mut max_k\
    \ = 0.0;\n    let mut min_l = 0.0;\n    let mut max_l = 0.0;\n\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpybfr44tb.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpybfr44tb.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpybfr44tb.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpybfr44tb.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpybfr44tb.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpybfr44tb.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpybfr44tb.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpybfr44tb.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpybfr44tb.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpybfr44tb.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpybfr44tb.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n\n    for _ in 0..n {\n        let mut collision_direction = 1.0;\n  \
    \      let mut collision_time = 0.0;\n        for _ in 0..n {\n            let\
    \ collision_speed = collision_speed * collision_direction;\n            let collision_time\
    \ = collision_time + collision_speed;\n            if collision_time > collision_time\
    \ {\n                collision_direction = -1.0;\n                collision_time\
    \ = collision_time;\n            }\n            if collision_time < collision_time\
    \ {\n                collision_direction = 1.0;\n                collision_time\
    \ = collision_time;\n            }\n        }\n        collision_count = collision_count\
    \ + 1;\n    }\n    collision_count\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp46648y__.rs:37:17\n\
    \   |\n37 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp46648y__.rs:37:25\n   |\n37 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp46648y__.rs:38:17\n   |\n38 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp46648y__.rs:38:25\n\
    \   |\n38 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp46648y__.rs:39:17\n   |\n39 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp46648y__.rs:39:25\n   |\n39 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp46648y__.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp46648y__.rs:40:25\n   |\n40 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp46648y__.rs:41:17\n  \
    \ |\n41 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp46648y__.rs:41:25\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror: aborting due\
    \ to 10 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed2 = Vec::new();\n    let mut car_pos2 =\
    \ Vec::new();\n    let mut car_direction2 = Vec::new();\n    let mut car_speed3\
    \ = Vec::new();\n    let mut car_pos3 = Vec::new();\n    let mut car_direction3\
    \ = Vec::new();\n    let mut car_speed4 = Vec::new();\n    let mut car_pos4 =\
    \ Vec::new();\n    let mut car_direction4 = Vec::new();\n    let mut car_speed5\
    \ = Vec::new();\n    let mut car_pos5 = Vec::new();\n    let mut car_direction5\
    \ = Vec::new();\n    let mut car_speed6 = Vec::new();\n    let mut car_pos6 =\
    \ Vec::new();\n    let mut car_direction6 = Vec::new();\n    let mut car_speed7\
    \ = Vec::new();\n    let mut car_pos7 = Vec::new();\n    let mut car_direction7\
    \ = Vec::new();\n    let mut car_speed8 = Vec::new();\n    let mut car_pos8 =\
    \ Vec::new();\n    let mut car_direction8 = Vec::new();\n    let mut car_speed9\
    \ = Vec::new();\n    let mut car_pos9 = Vec::new();\n    let mut car_direction9\
    \ = Vec::new();\n    let mut car_speed10 = Vec::new();\n    let mut car_pos10\
    \ = Vec::new();\n    let mut car_direction10 = Vec::new();\n    let mut car_speed11\
    \ = Vec::new();\n    let mut car_pos11 = Vec::new();\n    let mut car_direction11\
    \ = Vec::new();\n    let mut car_speed12 = Vec::new();\n    let mut car_pos12\
    \ = Vec::new();\n    let mut car_direction12 = Vec::new();\n    let mut car_speed13\
    \ = Vec::new();\n    let mut car_pos13 = Vec::new();\n    let mut car_direction13\
    \ = Vec::new();\n    let mut car_speed14 = Vec::new();\n    let mut car_pos14\
    \ = Vec::new();\n    let mut car\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpprvuyu_4.rs:53:16\n   |\n\
    53 |     let mut car\n   |                ^ help: add `;` here\n54 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpprvuyu_4.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpprvuyu_4.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpprvuyu_4.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpprvuyu_4.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpprvuyu_4.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpprvuyu_4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmppr"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed2 = Vec::new();\n    let mut car_pos2 =\
    \ Vec::new();\n    let mut car_direction2 = Vec::new();\n    let mut car_speed3\
    \ = Vec::new();\n    let mut car_pos3 = Vec::new();\n    let mut car_direction3\
    \ = Vec::new();\n    let mut car_speed4 = Vec::new();\n    let mut car_pos4 =\
    \ Vec::new();\n    let mut car_direction4 = Vec::new();\n    let mut car_speed5\
    \ = Vec::new();\n    let mut car_pos5 = Vec::new();\n    let mut car_direction5\
    \ = Vec::new();\n    let mut car_speed6 = Vec::new();\n    let mut car_pos6 =\
    \ Vec::new();\n    let mut car_direction6 = Vec::new();\n    let mut car_speed7\
    \ = Vec::new();\n    let mut car_pos7 = Vec::new();\n    let mut car_direction7\
    \ = Vec::new();\n    let mut car_speed8 = Vec::new();\n    let mut car_pos8 =\
    \ Vec::new();\n    let mut car_direction8 = Vec::new();\n    let mut car_speed9\
    \ = Vec::new();\n    let mut car_pos9 = Vec::new();\n    let mut car_direction9\
    \ = Vec::new();\n    let mut car_speed10 = Vec::new();\n    let mut car_pos10\
    \ = Vec::new();\n    let mut car_direction10 = Vec::new();\n    let mut car_speed11\
    \ = Vec::new();\n    let mut car_pos11 = Vec::new();\n    let mut car_direction11\
    \ = Vec::new();\n    let mut car_speed12 = Vec::new();\n    let mut car_pos12\
    \ = Vec::new();\n    let mut car_direction12 = Vec::new();\n    let mut car_speed13\
    \ = Vec::new();\n    let mut car_pos13 = Vec::new();\n    let mut car_direction13\
    \ = Vec::new();\n    let mut car_speed14 = Vec::new();\n    let mut car_pos14\
    \ = Vec::new();\n    let mut car\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpprvuyu_4.rs:53:16\n   |\n\
    53 |     let mut car\n   |                ^ help: add `;` here\n54 | }\n   | -\
    \ unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n \
    \ --> /tmp/tmpprvuyu_4.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpprvuyu_4.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpprvuyu_4.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpprvuyu_4.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpprvuyu_4.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpprvuyu_4.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpprvuyu_4.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmppr"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_x_speed = 0.0;\n    let mut car_y_speed = 0.0;\n   \
    \ let mut car_x_direction = 0.0;\n    let mut car_y_direction = 0.0;\n    let\
    \ mut car_x_acceleration = 0.0;\n    let mut car_y_acceleration = 0.0;\n    let\
    \ mut car_x_deceleration = 0.0;\n    let mut car_y_deceleration = 0.0;\n    let\
    \ mut car_x_collision_distance = 0.0;\n    let mut car_y_collision_distance =\
    \ 0.0;\n    let mut car_x_collision_time = 0.0;\n    let mut car_y_collision_time\
    \ = 0.0;\n    let mut car_x_collision_time_left = 0.0;\n    let mut car_y_collision_time_left\
    \ = 0.0;\n    let mut car_x_collision_time_right = 0.0;\n    let mut car_y_collision_time_right\
    \ = 0.0;\n    let mut car_x_collision_time_left_left = 0.0;\n    let mut car_y_collision_time_left_left\
    \ = 0.0;\n    let mut car_x_collision_time_left_right = 0.0;\n    let mut car_y_collision_time_left_right\
    \ = 0.0;\n    let mut car_x_collision_time_right_left = 0.0;\n    let mut car_y_collision_time_right_left\
    \ = 0.0;\n    let mut car_x_collision_time_right_right = 0.0;\n    let mut car_y_collision_time_right_right\
    \ = 0.0;\n    let mut car_x_collision_time_left_left_left = 0.0;\n    let mut\
    \ car_y_collision_time_left_left_left = 0.0;\n    let mut car_x_collision_time_left_left_right\
    \ = 0.0;\n    let mut car_y_collision_time_left_left_right = 0.0;\n    let mut\
    \ car_x_collision_time_left_right_left = 0.0;\n    let mut car_y_collision_time_left_right_left\
    \ = 0.0;\n    let mut car_x_collision_time_left_right_right = 0.0;\n    let mut\
    \ car_y_collision_time_left_right_right = 0.0;\n    let mut car_x_collision_time_right_left_left\
    \ = 0.0;\n    let mut car_y_collision_time_right_left_left = 0.0;\n    let mut\
    \ car_x_collision_time_right_left_right = 0.0;\n    let mut car_\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5x1ga18e.rs:50:17\n   |\n\
    50 |     let mut car_\n   |                 ^ help: add `;` here\n51 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5x1ga18e.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5x1ga18e.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5x1ga18e.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5x1ga18e.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5x1ga18e.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5x1ga18e.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5x1ga18e.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5x1ga18e.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5x1ga18e.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5x1ga18e.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_speed_2 = 1.0;\n    let mut car_speed_3 = 1.0;\n    let\
    \ mut car_speed_4 = 1.0;\n    let mut car_speed_5 = 1.0;\n    let mut car_speed_6\
    \ = 1.0;\n    let mut car_speed_7 = 1.0;\n    let mut car_speed_8 = 1.0;\n   \
    \ let mut car_speed_9 = 1.0;\n    let mut car_speed_10 = 1.0;\n    let mut car_speed_11\
    \ = 1.0;\n    let mut car_speed_12 = 1.0;\n    let mut car_speed_13 = 1.0;\n \
    \   let mut car_speed_14 = 1.0;\n    let mut car_speed_15 = 1.0;\n    let mut\
    \ car_speed_16 = 1.0;\n    let mut car_speed_17 = 1.0;\n    let mut car_speed_18\
    \ = 1.0;\n    let mut car_speed_19 = 1.0;\n    let mut car_speed_20 = 1.0;\n \
    \   let mut car_speed_21 = 1.0;\n    let mut car_speed_22 = 1.0;\n    let mut\
    \ car_speed_23 = 1.0;\n    let mut car_speed_24 = 1.0;\n    let mut car_speed_25\
    \ = 1.0;\n    let mut car_speed_26 = 1.0;\n    let mut car_speed_27 = 1.0;\n \
    \   let mut car_speed_28 = 1.0;\n    let mut car_speed_29 = 1.0;\n    let mut\
    \ car_speed_30 = 1.0;\n    let mut car_speed_31 = 1.0;\n    let mut car_speed_32\
    \ = 1.0;\n    let mut car_speed_33 = 1.0;\n    let mut car_speed_34 = 1.0;\n \
    \   let mut car_speed_35 = 1.0;\n    let mut car_speed_36 = 1.0;\n    let mut\
    \ car_speed_37 = 1.0;\n    let mut car_speed_38 = 1.0;\n    let mut car_speed_39\
    \ = 1.0;\n    let mut car_speed_40 = 1.0;\n    let mut car_speed_41 = 1.0;\n \
    \   let mut car_speed_42 = 1.0;\n    let mut car_speed_43 = 1.0;\n    let mut\
    \ car_speed_44 = 1.0;\n    let mut car_speed_45 = 1.0;\n    let mut car_speed_46\
    \ = 1.0;\n    let mut car_speed_47 = 1.0;\n\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7u0hm2r2.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7u0hm2r2.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_speeds = Vec::new();\n   \
    \ let mut car_speeds_2 = Vec::new();\n    let mut car_speeds_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_speeds_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_speeds_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_speeds_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_speeds_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_speeds_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_speeds_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_speeds_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_speeds_19 = Vec::new();\n\
    \    let mut car_speeds_20 = Vec::new();\n    let mut car_speeds_21 = Vec::new();\n\
    \    let mut car_speeds_22 = Vec::new();\n    let mut car_speeds_23 = Vec::new();\n\
    \    let mut car_speeds_24 = Vec::new();\n    let mut car_speeds_25 = Vec::new();\n\
    \    let mut car_speeds_26 = Vec::new();\n    let mut car_speeds_27 = Vec::new();\n\
    \    let mut car_speeds_28 = Vec::new();\n    let mut car_speeds_29 = Vec::new();\n\
    \    let mut car_speeds_30 = Vec::new();\n    let mut car_speeds_31 = Vec::new();\n\
    \    let mut car_speeds_32 = Vec::new();\n    let mut car_speeds_33 = Vec::new();\n\
    \    let mut car_speeds_34 = Vec::new();\n    let mut car_speeds_35 = Vec::new();\n\
    \    let mut car_speed\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp87_vo66t.rs:48:22\n   |\n\
    48 |     let mut car_speed\n   |                      ^ help: add `;` here\n49\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp87_vo66t.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp87_vo66t.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp87_vo66t.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp87_vo66t.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp87_vo66t.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp87_vo66t.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp87_vo66t.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp87_vo66t.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp87_vo66t.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp87_vo66t.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  for _ in 0..n {\n            if car_race_collision_helper(false) {\n      \
    \          collisions += 1;\n            }\n        }\n    }\n    collisions\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_race_collision_helper` in this\
    \ scope\n  --> /tmp/tmplsgxlvsz.rs:13:16\n   |\n13 |             if car_race_collision_helper(false)\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmplsgxlvsz.rs:23:17\n\
    \   |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplsgxlvsz.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmplsgxlvsz.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmplsgxlvsz.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmplsgxlvsz.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmplsgxlvsz.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmplsgxlvsz.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmplsgxlvsz.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmplsgxlvsz.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmplsgxlvsz.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                        "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut position = (0.0, 0.0);\n    let mut direction = (0.0, 0.0);\n   \
    \ let mut speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n\
    \    let mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n\
    \    let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpfggymv6x.rs:73:1\n\
    \   |\n73 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpfggymv6x.rs:77:17\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpfggymv6x.rs:77:25\n \
    \  |\n77 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfggymv6x.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfggymv6x.rs:78:25\n   |\n78 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfggymv6x.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfggymv6x.rs:79:25\n   |\n79 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfggymv6x.rs:80:17\n  \
    \ |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfggymv6x.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfggymv6x.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfggymv6x.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_z = 0.0;\n\
    \    let mut prev_w = 0.0;\n    let mut prev_speed = 0.0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n    let mut prev_time_elapsed\
    \ = 0.0;\n    let mut prev_time_elapsed = 0.0;\n\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmploq7m_82.rs:68:17\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmploq7m_82.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmploq7m_82.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmploq7m_82.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmploq7m_82.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmploq7m_82.rs:70:25\n   |\n70 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmploq7m_82.rs:71:17\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmploq7m_82.rs:71:25\n   |\n71 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmploq7m_82.rs:72:17\n  \
    \ |\n72 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmploq7m_82.rs:72:25\n   |\n72 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmploq7m_82.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_speeds_left\
    \ = Vec::new();\n    let mut car_speeds_right = Vec::new();\n    let mut car_speeds_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_left = Vec::new();\n    let mut car_speeds_right_left\
    \ = Vec::new();\n    let mut car_speeds_right_right = Vec::new();\n    let mut\
    \ car_speeds_left_left_right = Vec::new();\n    let mut car_speeds_left_right_left\
    \ = Vec::new();\n    let mut car_speeds_right_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_right_left = Vec::new();\n    let mut car_speeds_left_left_right_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left = Vec::new();\n \
    \   let mut car_speeds_right_left_left_left = Vec::new();\n    let mut car_speeds_right_right_left_left\
    \ = Vec::new();\n    let mut car_speeds_left_left_right_left_left = Vec::new();\n\
    \    let mut car_speeds_left_right_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_right_left_left_left = Vec::new();\n\
    \    let mut car_speeds_left_left_right_left_left_left = Vec::new();\n    let\
    \ mut car_speeds_left_right_left_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_right_left_left_left_left = Vec::new();\n\
    \    let mut car_speeds_left_left_right_left_left_left = Vec::new();\n    let\
    \ mut car_speeds_left_right_left_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_right_left_left_left_left = Vec::new();\n\
    \    let mut car_speeds_left_left_right_left_left_left_left = Vec::new();\n  \
    \  let mut car_speeds_left_right_left_left_left_left_left = Vec::new();\n\n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpylt2oy8y.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpylt2oy8y.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpylt2oy8y.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpylt2oy8y.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpylt2oy8y.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpylt2oy8y.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpylt2oy8y.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpylt2oy8y.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpylt2oy8y.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpylt2oy8y.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpylt2oy8y.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_speeds_left\
    \ = Vec::new();\n    let mut car_speeds_right = Vec::new();\n    let mut car_speeds_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_left = Vec::new();\n    let mut car_speeds_right_left\
    \ = Vec::new();\n    let mut car_speeds_right_right = Vec::new();\n    let mut\
    \ car_speeds_left_right_left = Vec::new();\n    let mut car_speeds_left_right_right\
    \ = Vec::new();\n    let mut car_speeds_right_left_left = Vec::new();\n    let\
    \ mut car_speeds_right_left_right = Vec::new();\n    let mut car_speeds_left_right_left_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_right = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left = Vec::new();\n    let mut car_speeds_right_left_left_right\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_left = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left_right = Vec::new();\n    let mut\
    \ car_speeds_left_right_left_left_right = Vec::new();\n    let mut car_speeds_right_left_left_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_right_left_left_left_right_left = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left_right_right = Vec::new();\n    let\
    \ mut car_speeds_left_right_left_left_right_left = Vec::new();\n    let mut car_speeds_left_right_left_left_right_right\
    \ = Vec::new();\n    let mut car_speeds_right_left_left_left_right_left_left =\
    \ Vec::new();\n    let mut car_speeds_right_left_left_left_right_right_left =\
    \ Vec::new();\n    let mut car_speeds_right_left_left_left_right_right_right =\
    \ Vec::new();\n    let mut car_speeds_left_right_left_left_right_right_left =\
    \ Vec::new();\n    let mut car_speeds_left_right_left_left_right_right_right =\
    \ Vec::new();\n    let mut car_speeds_right_left_left_left_\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpq80xfdac.rs:43:45\n   |\n\
    43 |     let mut car_speeds_right_left_left_left_\n   |                      \
    \                       ^ help: add `;` here\n44 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpq80xfdac.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq80xfdac.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpq80xfdac.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpq80xfdac.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpq80xfdac.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpq80xfdac.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpq80xfdac.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpq80xfdac.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpq80xfdac.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpq80xfdac.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in "
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_speed2 = 1.0;\n    let mut collision_time2 = 0.0;\n\
    \    let mut collision_direction2 = 1.0;\n    let mut collision_speed3 = 1.0;\n\
    \    let mut collision_time3 = 0.0;\n    let mut collision_direction3 = 1.0;\n\
    \    let mut collision_speed4 = 1.0;\n    let mut collision_time4 = 0.0;\n   \
    \ let mut collision_direction4 = 1.0;\n    let mut collision_speed5 = 1.0;\n \
    \   let mut collision_time5 = 0.0;\n    let mut collision_direction5 = 1.0;\n\
    \    let mut collision_speed6 = 1.0;\n    let mut collision_time6 = 0.0;\n   \
    \ let mut collision_direction6 = 1.0;\n    let mut collision_speed7 = 1.0;\n \
    \   let mut collision_time7 = 0.0;\n    let mut collision_direction7 = 1.0;\n\
    \    let mut collision_speed8 = 1.0;\n    let mut collision_time8 = 0.0;\n   \
    \ let mut collision_direction8 = 1.0;\n    let mut collision_speed9 = 1.0;\n \
    \   let mut collision_time9 = 0.0;\n    let mut collision_direction9 = 1.0;\n\
    \    let mut collision_speed10 = 1.0;\n    let mut collision_time10 = 0.0;\n \
    \   let mut collision_direction10 = 1.0;\n    let mut collision_speed11 = 1.0;\n\
    \    let mut collision_time11 = 0.0;\n    let mut collision_direction11 = 1.0;\n\
    \    let mut collision_speed12 = 1.0;\n    let mut collision_time12 = 0.0;\n \
    \   let mut collision_direction12 = 1.0;\n    let mut collision_speed13 = 1.0;\n\
    \    let mut collision_time13 = 0.0;\n    let mut collision_direction13 = 1.0;\n\
    \    let mut collision_speed14 = 1.0;\n    let mut collision_time14 = 0.0;\n \
    \   let mut collision_direction14 = 1.0;\n    let mut collision_speed15 = 1.0;\n\
    \    let mut collision_time15 = 0.0;\n    let mut collision_direction15 = 1.0;\n\
    \    let mut collision_speed16 = 1.0;\n    let mut collision_time16 = 0.0;\n \
    \   let mut collision_direction16 = 1.0;\n    let mut collision_speed17 = 1.0;\n\
    \    let mut collision_time17 = 0.0;\n    let mut collision_direction17 = 1.0;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa06yb2ab.rs:62:11\n   |\n\
    62 |     let mu\n   |           ^ help: add `;` here\n63 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa06yb2ab.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpa06yb2ab.rs:"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speeds = Vec::new();\n\
    \    let mut car_directions = Vec::new();\n    let mut car_speeds_left = Vec::new();\n\
    \    let mut car_directions_left = Vec::new();\n    let mut car_speeds_right =\
    \ Vec::new();\n    let mut car_directions_right = Vec::new();\n\n    for _ in\
    \ 0..n {\n        car_speed.push(0);\n        car_direction.push(0);\n       \
    \ car_speeds.push(0);\n        car_directions.push(0);\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        collisions\
    \ += 1;\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n    \
    \    car_directions_left.push(0);\n        car_speeds_right.push(0);\n       \
    \ car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in 0..n {\n        car_speeds_left.push(0);\n\
    \        car_directions_left.push(0);\n        car_speeds_right.push(0);\n   \
    \     car_directions_right.push(0);\n    }\n\n    for _ in \n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmp2fhwhrng.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror: expected expression, found `}`\n  --> /tmp/tmp2fhwhrng.rs:85:1\n\
    \   |\n85 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp2fhwhrng.rs:89:17\n   |\n89 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp2fhwhrng.rs:89:25\n \
    \  |\n89 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp2fhwhrng.rs:90:17\n   |\n90 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp2fhwhrng.rs:90:25\n   |\n90 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp2fhwhrng.rs:91:17\n   |\n91 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp2fhwhrng.rs:91:25\n   |\n91 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp2fhwhrng.rs:92:17\n  \
    \ |\n92 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp2fhwhrng.rs:92:25\n   |\n92 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp2fhwhrng.rs:93:17\n   |\n93 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_x_speed = 0.0;\n    let mut car_y_speed = 0.0;\n   \
    \ let mut car_x_direction = 0.0;\n    let mut car_y_direction = 0.0;\n    let\
    \ mut car_x_speed2 = 0.0;\n    let mut car_y_speed2 = 0.0;\n    let mut car_x_direction2\
    \ = 0.0;\n    let mut car_y_direction2 = 0.0;\n    let mut car_x_speed3 = 0.0;\n\
    \    let mut car_y_speed3 = 0.0;\n    let mut car_x_direction3 = 0.0;\n    let\
    \ mut car_y_direction3 = 0.0;\n    let mut car_x_speed4 = 0.0;\n    let mut car_y_speed4\
    \ = 0.0;\n    let mut car_x_direction4 = 0.0;\n    let mut car_y_direction4 =\
    \ 0.0;\n    let mut car_x_speed5 = 0.0;\n    let mut car_y_speed5 = 0.0;\n   \
    \ let mut car_x_direction5 = 0.0;\n    let mut car_y_direction5 = 0.0;\n    let\
    \ mut car_x_speed6 = 0.0;\n    let mut car_y_speed6 = 0.0;\n    let mut car_x_direction6\
    \ = 0.0;\n    let mut car_y_direction6 = 0.0;\n    let mut car_x_speed7 = 0.0;\n\
    \    let mut car_y_speed7 = 0.0;\n    let mut car_x_direction7 = 0.0;\n    let\
    \ mut car_y_direction7 = 0.0;\n    let mut car_x_speed8 = 0.0;\n    let mut car_y_speed8\
    \ = 0.0;\n    let mut car_x_direction8 = 0.0;\n    let mut car_y_direction8 =\
    \ 0.0;\n    let mut car_x_speed9 = 0.0;\n    let mut car_y_speed9 = 0.0;\n   \
    \ let mut car_x_direction9 = 0.0;\n    let mut car_y_direction9 = 0.0;\n    let\
    \ mut car_x_speed10 = 0.0;\n    let mut car_y_speed10 = 0.0;\n    let mut car_x_direction10\
    \ = 0.0;\n    let mut car_y_direction10 = 0.0;\n    let mut car_x_speed11 = 0.0;\n\
    \    let mut car_y_speed11 = 0.0;\n    let mut car_x_direction11 = 0.0;\n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:62:17\n\
    \   |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpkom7hwpc.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpkom7hwpc.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpkom7hwpc.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpkom7hwpc.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpkom7hwpc.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![n; n];\n    let mut car_speeds = vec![n; n];\n    let mut car_directions\
    \ = vec![n; n];\n    let mut car_collisions = vec![n; n];\n\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            car_positions[i][j] = i * 100.0;\n \
    \           car_speeds[i][j] = 0.0;\n            car_directions[i][j] = 0.0;\n\
    \            car_collisions[i][j] = 0.0;\n        }\n    }\n\n    for i in 0..n\
    \ {\n        for j in 0..n {\n            if i != j {\n                let car_speed\
    \ = car_speeds[i][j];\n                let car_direction = car_directions[i][j];\n\
    \                let car_position = car_positions[i][j];\n                let\
    \ car_collision = car_collisions[i][j];\n\n                let car_speed2 = car_speeds[j];\n\
    \                let car_direction2 = car_directions[j];\n                let\
    \ car_position2 = car_positions[j];\n                let car_collision2 = car_collisions[j];\n\
    \n                let car_speed3 = car_speeds[i];\n                let car_direction3\
    \ = car_directions[i];\n                let car_position3 = car_positions[i];\n\
    \                let car_collision3 = car_collisions[i];\n\n                let\
    \ car_speed4 = car_speeds[j];\n                let car_direction4 = car_directions[j];\n\
    \                let car_position4 = car_positions[j];\n                let car_collision4\
    \ = car_collisions[j];\n\n                let car_speed5 = car_speeds[i];\n  \
    \              let car_direction5 = car_directions[i];\n                let car_position5\
    \ = car_positions[i];\n                let car_collision5 = car_collisions[i];\n\
    \n                let car_speed6 = car_speeds[j];\n                let car_direction6\
    \ = car_directions[j];\n                let car_position6 = car_positions[j];\n\
    \                let car_collision6 = car_collisions[j];\n\n                let\
    \ car_speed7 = car_speeds[i];\n                let car_direction7 = car_directions[i];\n\
    \                let car_position7 = car_positions[i];\n                let car_collision7\
    \ = car_collisions[i];\n\n                let car_speed8 = car_speeds[j];\n  \
    \              let car_direction8 = car_directions[j];\n                let car_position8\
    \ = car_positions[j];\n                let car_collision8 = car_collisions[j];\n\
    \n                let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp4f971xn1.rs:78:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n25 |     for i in 0..n {\n\
    \   |                   - unclosed delimiter\n26 |         for j in 0..n {\n \
    \  |                       - unclosed delimiter\n27 |             if i != j {\n\
    \   |                       - this delimiter might not be properly closed...\n\
    ...\n69 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    78 | }\n   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmp4f971xn1.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp4f971xn1.rs:73:17\n   |\n73 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp4f971xn1.rs:73:25\n \
    \  |\n73 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp4f971xn1.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp4f971xn1.rs:74:25\n   |\n74 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp4f971xn1.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp4f971xn1.rs:75:25\n   |\n75 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp4f971xn1.rs:76:17\n  \
    \ |\n76 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp4f971xn1.rs:76:25\n   |\n76 |     assert_eq!({le"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_left = vec![0; n];\n    let mut car_right = vec![0; n];\n    let\
    \ mut car_speed = vec![0.0; n];\n    let mut car_speed2 = vec![0.0; n];\n    let\
    \ mut car_speed3 = vec![0.0; n];\n    let mut car_speed4 = vec![0.0; n];\n   \
    \ let mut car_speed5 = vec![0.0; n];\n    let mut car_speed6 = vec![0.0; n];\n\
    \    let mut car_speed7 = vec![0.0; n];\n    let mut car_speed8 = vec![0.0; n];\n\
    \    let mut car_speed9 = vec![0.0; n];\n    let mut car_speed10 = vec![0.0; n];\n\
    \    let mut car_speed11 = vec![0.0; n];\n    let mut car_speed12 = vec![0.0;\
    \ n];\n    let mut car_speed13 = vec![0.0; n];\n    let mut car_speed14 = vec![0.0;\
    \ n];\n    let mut car_speed15 = vec![0.0; n];\n    let mut car_speed16 = vec![0.0;\
    \ n];\n    let mut car_speed17 = vec![0.0; n];\n    let mut car_speed18 = vec![0.0;\
    \ n];\n    let mut car_speed19 = vec![0.0; n];\n    let mut car_speed20 = vec![0.0;\
    \ n];\n    let mut car_speed21 = vec![0.0; n];\n    let mut car_speed22 = vec![0.0;\
    \ n];\n    let mut car_speed23 = vec![0.0; n];\n    let mut car_speed24 = vec![0.0;\
    \ n];\n    let mut car_speed25 = vec![0.0; n];\n    let mut car_speed26 = vec![0.0;\
    \ n];\n    let mut car_speed27 = vec![0.0; n];\n    let mut car_speed28 = vec![0.0;\
    \ n];\n    let mut car_speed29 = vec![0.0; n];\n    let mut car_speed30 = vec![0.0;\
    \ n];\n    let mut car_speed31 = vec![0.0; n];\n    let mut car_speed32 = vec![0.0;\
    \ n];\n    let mut car_speed\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvkqemkk8.rs:46:22\n   |\n\
    46 |     let mut car_speed\n   |                      ^ help: add `;` here\n47\
    \ | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpvkqemkk8.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvkqemkk8.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvkqemkk8.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvkqemkk8.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvkqemkk8.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvkqemkk8.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvkqemkk8.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvkqemkk8.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvkqemkk8.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvkqemkk8.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  -"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_x = 0.0;\n    let mut car_y = 0.0;\n    let mut car_x_speed =\
    \ 0.0;\n    let mut car_y_speed = 0.0;\n    let mut car_x_direction = 0.0;\n \
    \   let mut car_y_direction = 0.0;\n    let mut car_x_acceleration = 0.0;\n  \
    \  let mut car_y_acceleration = 0.0;\n    let mut car_x_deceleration = 0.0;\n\
    \    let mut car_y_deceleration = 0.0;\n    let mut car_x_collision_time = 0.0;\n\
    \    let mut car_y_collision_time = 0.0;\n    let mut car_x_collision_time_left\
    \ = 0.0;\n    let mut car_y_collision_time_left = 0.0;\n    let mut car_x_collision_time_right\
    \ = 0.0;\n    let mut car_y_collision_time_right = 0.0;\n    let mut car_x_collision_time_left_left\
    \ = 0.0;\n    let mut car_y_collision_time_left_left = 0.0;\n    let mut car_x_collision_time_left_right\
    \ = 0.0;\n    let mut car_y_collision_time_left_right = 0.0;\n    let mut car_x_collision_time_right_left\
    \ = 0.0;\n    let mut car_y_collision_time_right_left = 0.0;\n    let mut car_x_collision_time_right_right\
    \ = 0.0;\n    let mut car_y_collision_time_right_right = 0.0;\n    let mut car_x_collision_time_left_left_left\
    \ = 0.0;\n    let mut car_y_collision_time_left_left_left = 0.0;\n    let mut\
    \ car_x_collision_time_left_left_right = 0.0;\n    let mut car_y_collision_time_left_left_right\
    \ = 0.0;\n    let mut car_x_collision_time_left_right_left = 0.0;\n    let mut\
    \ car_y_collision_time_left_right_left = 0.0;\n    let mut car_x_collision_time_left_right_right\
    \ = 0.0;\n    let mut car_y_collision_time_left_right_right = 0.0;\n    let mut\
    \ car_x_collision_time_right_left_left = 0.0;\n    let mut car_y_collision_time_right_left_left\
    \ = 0.0;\n    let mut car_x_collision_time_right_left_right = 0.0;\n    let mut\
    \ car_y_collision_time_right_left_right = 0.0;\n    let mut car_x_collision_time_right_right_left\
    \ = 0.0;\n    let mut car_y_collision_time_\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpe83ux4o4.rs:49:34\n   |\n\
    49 |     let mut car_y_collision_time_\n   |                                 \
    \ ^ help: add `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe83ux4o4.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe83ux4o4.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpe83ux4o4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpe83ux4o4.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpe83ux4o4.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpe83ux4o4.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpe83ux4o4.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpe83ux4o4.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpe83ux4o4.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpe83ux4o4.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E030"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_speed = 1.0;\n    let mut prev_collisions = 1;\n    let mut\
    \ prev_collisions_speed = 1.0;\n    let mut prev_collisions_speed2 = 1.0;\n  \
    \  let mut prev_collisions_speed3 = 1.0;\n    let mut prev_collisions_speed4 =\
    \ 1.0;\n    let mut prev_collisions_speed5 = 1.0;\n    let mut prev_collisions_speed6\
    \ = 1.0;\n    let mut prev_collisions_speed7 = 1.0;\n    let mut prev_collisions_speed8\
    \ = 1.0;\n    let mut prev_collisions_speed9 = 1.0;\n    let mut prev_collisions_speed10\
    \ = 1.0;\n    let mut prev_collisions_speed11 = 1.0;\n    let mut prev_collisions_speed12\
    \ = 1.0;\n    let mut prev_collisions_speed13 = 1.0;\n    let mut prev_collisions_speed14\
    \ = 1.0;\n    let mut prev_collisions_speed15 = 1.0;\n    let mut prev_collisions_speed16\
    \ = 1.0;\n    let mut prev_collisions_speed17 = 1.0;\n    let mut prev_collisions_speed18\
    \ = 1.0;\n    let mut prev_collisions_speed19 = 1.0;\n    let mut prev_collisions_speed20\
    \ = 1.0;\n    let mut prev_collisions_speed21 = 1.0;\n    let mut prev_collisions_speed22\
    \ = 1.0;\n    let mut prev_collisions_speed23 = 1.0;\n    let mut prev_collisions_speed24\
    \ = 1.0;\n    let mut prev_collisions_speed25 = 1.0;\n    let mut prev_collisions_speed26\
    \ = 1.0;\n    let mut prev_collisions_speed27 = 1.0;\n    let mut prev_collisions_speed28\
    \ = 1.0;\n    let mut prev_collisions_speed29 = 1.0;\n    let mut prev_collisions_speed30\
    \ = 1.0;\n    let mut prev_collisions_speed31 = 1.0;\n    let mut prev_collisions_speed32\
    \ = 1.0;\n    let mut prev_collisions_speed33 = 1.0;\n    let mut prev_collisions_speed34\
    \ = 1.0;\n    let mut prev_collisions_speed35 = 1.0;\n    let mut prev_collisions_speed36\
    \ = 1.0;\n    let mut prev_collisions_speed37 = 1.0;\n    let mut prev_collisions_speed38\
    \ = 1.0;\n    let mut prev_collisions_speed39 = 1.0;\n    let mut prev_collisions_speed40\
    \ = 1.0;\n    let mut prev_collisions_speed41 = 1.\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp8sah4px_.rs:54:41\n   |\n\
    54 |     let mut prev_collisions_speed41 = 1.\n   |                          \
    \               ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8sah4px_.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8sah4px_.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp8sah4px_.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp8sah4px_.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp8sah4px_.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp8sah4px_.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp8sah4px_.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp8sah4px_.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp8sah4px_.rs:63:17\n  \
    \ |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp8sah4px_.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this sco"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_positions\
    \ = vec![];\n    let mut car_speeds = vec![];\n    let mut car_directions = vec![];\n\
    \    let mut car_collisions = vec![];\n    let mut car_collision_directions =\
    \ vec![];\n    let mut car_collision_speeds = vec![];\n    let mut car_collision_positions\
    \ = vec![];\n    let mut car_collision_direction_speeds = vec![];\n    let mut\
    \ car_collision_direction_positions = vec![];\n\n    for _ in 0..n {\n       \
    \ car_positions.push(vec![]);\n        car_speeds.push(vec![]);\n        car_directions.push(vec![]);\n\
    \        car_collisions.push(vec![]);\n        car_collision_directions.push(vec![]);\n\
    \        car_collision_speeds.push(vec![]);\n        car_collision_positions.push(vec![]);\n\
    \        car_collision_direction_speeds.push(vec![]);\n        car_collision_direction_positions.push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        car_positions[_].push(vec![]);\n      \
    \  car_speeds[_].push(vec![]);\n        car_directions[_].push(vec![]);\n    \
    \    car_collisions[_].push(vec![]);\n        car_collision_directions[_].push(vec![]);\n\
    \        car_collision_speeds[_].push(vec![]);\n        car_collision_positions[_].push(vec![]);\n\
    \        car_collision_direction_speeds[_].push(vec![]);\n        car_collision_direction_positions[_].push(vec![]);\n\
    \    }\n\n    for _ in 0..n {\n        for _ in 0..n {\n            car_positions[_][_].push((0.0,\
    \ 0.0));\n            car_speeds[_][_].push((0.0, 0.0));\n            car_directions[_][_].push((0.0,\
    \ 0.0));\n            car_collisions[_][_].push(false);\n            car_collision_directions[_][_].push((0.0,\
    \ 0.0));\n            car_collision_speeds[_][_].push((0.0, 0.0));\n         \
    \   car_collision_positions[_][_].push((0.0, 0.0));\n            car_collision_direction_speeds[_][_].push((0.0,\
    \ 0.0));\n            car_collision_direction_positions[_][_].push((0.0, \n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp71u6_d6q.rs:65:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n45 |     for _ in 0..n {\n\
    \   |                   - unclosed delimiter\n46 |         for _ in 0..n {\n \
    \  |                       - this delimiter might not be properly closed...\n\
    ...\n56 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    65 | }\n   |   ^\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmp71u6_d6q.rs:55:58\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - closing delimiter possibly meant for this\n...\n55\
    \ |             car_collision_direction_positions[_][_].push((0.0, \n   |    \
    \                                                      ^ unclosed delimiter\n\
    56 | }\n   | ^ mismatched closing delimiter\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp71u6_d6q.rs:60:17\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp71u6_d6q.rs:60:25\n \
    \  |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp71u6_d6q.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp71u6_d6q.rs:61:25\n   |\n61 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp71u6_d6q.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp71u6_d6q.rs:62:25\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision = false;\n        for _ in 0..n {\n            if car_collision(n\
    \ - 1, n - 1) && car_collision(n - 1, n - 2) {\n                collision = true;\n\
    \                break;\n            }\n        }\n        if collision {\n  \
    \          collisions += 1;\n        }\n    }\n    collisions\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmpj4pd778f.rs:14:16\n   |\n14 |             if car_collision(n - 1, n\
    \ - 1) && car_collision(n - 1, n - 2) {\n   |                ^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `collision`\n\nerror[E0425]: cannot\
    \ find function `car_collision` in this scope\n  --> /tmp/tmpj4pd778f.rs:14:47\n\
    \   |\n14 |             if car_collision(n - 1, n - 1) && car_collision(n - 1,\
    \ n - 2) {\n   |                                               ^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `collision`\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpj4pd778f.rs:28:17\n   |\n28 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpj4pd778f.rs:28:25\n\
    \   |\n28 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpj4pd778f.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpj4pd778f.rs:29:25\n   |\n29 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpj4pd778f.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpj4pd778f.rs:30:25\n   |\n30 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpj4pd778f.rs:31:17\n  \
    \ |\n31 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpj4pd778f.rs:31:25\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not foun"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    for _ in 0..n {\n\
    \        for _ in 0..n {\n            if car_race_collision_test() {\n       \
    \         collisions += 1;\n            }\n        }\n    }\n    collisions\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_race_collision_test` in this scope\n\
    \  --> /tmp/tmp0825hcyh.rs:13:16\n   |\n13 |             if car_race_collision_test()\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0825hcyh.rs:23:17\n  \
    \ |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0825hcyh.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0825hcyh.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0825hcyh.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0825hcyh.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0825hcyh.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0825hcyh.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0825hcyh.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0825hcyh.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0825hcyh.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not "
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6 = 1.0;\n    let\
    \ mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let mut car_speed9\
    \ = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11 = 1.0;\n   \
    \ let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16 = 1.0;\n   \
    \ let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_speed19\
    \ = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21 = 1.0;\n   \
    \ let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut car_speed24\
    \ = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26 = 1.0;\n   \
    \ let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n    let mut car_speed29\
    \ = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31 = 1.0;\n   \
    \ let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n    let mut car_speed34\
    \ = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36 = 1.0;\n   \
    \ let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n    let mut car_speed39\
    \ = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41 = 1.0;\n   \
    \ let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n    let mut car_speed44\
    \ = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46 = 1.0;\n   \
    \ let mut car_speed47 = 1.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnopbqers.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnopbqers.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnopbqers.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnopbqers.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed:\
    \ isize = 2 * n / CAR_WIDTH;\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n   \
    \ for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n        car_speeds.push(0);\n\
    \    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in 0..CAR_WIDTH {\n        car_directions.push(Vec::new());\n\
    \        car_speeds.push(0);\n    }\n    for _ in \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpplfif1eh.rs:80:1\n\
    \   |\n80 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `CAR_WIDTH`\
    \ in this scope\n  --> /tmp/tmpplfif1eh.rs:11:40\n   |\n11 |     let mut car_speed:\
    \ isize = 2 * n / CAR_WIDTH;\n   |                                        ^^^^^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `CAR_WIDTH` in this\
    \ scope\n  --> /tmp/tmpplfif1eh.rs:15:17\n   |\n15 |     for _ in 0..CAR_WIDTH\
    \ {\n   |                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `CAR_WIDTH` in this scope\n  --> /tmp/tmpplfif1eh.rs:19:17\n   |\n\
    19 |     for _ in 0..CAR_WIDTH {\n   |                 ^^^^^^^^^ not found in\
    \ this scope\n\nerror[E0425]: cannot find value `CAR_WIDTH` in this scope\n  -->\
    \ /tmp/tmpplfif1eh.rs:23:17\n   |\n23 |     for _ in 0..CAR_WIDTH {\n   |    \
    \             ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `CAR_WIDTH` in this scope\n  --> /tmp/tmpplfif1eh.rs:27:17\n   |\n27 |     for\
    \ _ in 0..CAR_WIDTH {\n   |                 ^^^^^^^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `CAR_WIDTH` in this scope\n  --> /tmp/tmpplfif1eh.rs:31:17\n\
    \   |\n31 |     for _ in 0..CAR_WIDTH {\n   |                 ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `CAR_WIDTH` in this scope\n\
    \  --> /tmp/tmpplfif1eh.rs:35:17\n   |\n35 |     for _ in 0..CAR_WIDTH {\n   |\
    \                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `CAR_WIDTH` in this scope\n  --> /tmp/tmpplfif1eh.rs:39:17\n   |\n39 |\
    \     for _ in 0..CAR_WIDTH {\n   |                 ^^^^^^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `CAR_WIDTH` in this scope\n  --> /tmp/tmpplfif1eh.rs:43:17\n\
    \   |\n43 |     for _ in 0..CAR_WIDTH {\n   |                 ^^^^^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `CAR_WIDTH` in this scope\n\
    \  --> /tmp/tmpplfif1eh.rs:47:17\n   |\n47 |     for _ in 0..CAR_WIDTH {\n   |\
    \                 ^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `CAR_WIDTH` in this sc"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_time = 0.0;\n    let mut prev_x\
    \ = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_z = 0.0;\n    let mut prev_yaw\
    \ = 0.0;\n    let mut prev_pitch = 0.0;\n    let mut prev_roll = 0.0;\n    let\
    \ mut prev_accel = 0.0;\n    let mut prev_steer = 0.0;\n    let mut prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_x = 0.0;\n    let mut prev_prev_y = 0.0;\n   \
    \ let mut prev_prev_z = 0.0;\n    let mut prev_prev_yaw = 0.0;\n    let mut prev_prev_pitch\
    \ = 0.0;\n    let mut prev_prev_roll = 0.0;\n    let mut prev_prev_accel = 0.0;\n\
    \    let mut prev_prev_steer = 0.0;\n    let mut prev_prev_prev_time = 0.0;\n\
    \    let mut prev_prev_prev_x = 0.0;\n    let mut prev_prev_prev_y = 0.0;\n  \
    \  let mut prev_prev_prev_z = 0.0;\n    let mut prev_prev_prev_yaw = 0.0;\n  \
    \  let mut prev_prev_prev_pitch = 0.0;\n    let mut prev_prev_prev_roll = 0.0;\n\
    \    let mut prev_prev_prev_accel = 0.0;\n    let mut prev_prev_prev_steer = 0.0;\n\
    \    let mut prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_x\
    \ = 0.0;\n    let mut prev_prev_prev_prev_y = 0.0;\n    let mut prev_prev_prev_prev_z\
    \ = 0.0;\n    let mut prev_prev_prev_prev_yaw = 0.0;\n    let mut prev_prev_prev_prev_pitch\
    \ = 0.0;\n    let mut prev_prev_prev_prev_roll = 0.0;\n    let mut prev_prev_prev_prev_accel\
    \ = 0.0;\n    let mut prev_prev_prev_prev_steer = 0.0;\n    let mut prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_x = 0.0;\n    let mut prev_prev_prev_prev_prev_y\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_z = 0.0;\n    let mut prev_prev_prev_prev_prev_yaw\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_pitch = 0.0;\n    let mut prev_prev_prev_prev_prev_roll\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_accel = 0.0;\n    let mut prev_prev_prev_prev_prev_steer\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_x\
    \ = 0.0;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpqh6mfbj3.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpqh6mfbj3.rs:65:17\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:65:25\n \
    \  |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpqh6mfbj3.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpqh6mfbj3.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpqh6mfbj3.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:69:17\n   |\n69 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpqh6mfbj3.rs:69:25\n\
    \   |\n69 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_collisions = 0;\n    let mut prev_time\
    \ = 0.0;\n    let mut prev_prev_time = 0.0;\n    let mut prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_speed = 1.0;\n    let mut prev_prev_time = 0.0;\n\
    \    let mut prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n    let mut\
    \ prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_collisions = 0;\n   \
    \ let mut prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n    let\
    \ mut prev_prev_prev_prev_prev_prev_prev_prev_collisions = 0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n  \
    \  let mut prev_prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n\
    \    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n    let\
    \ mut prev_prev_prev_prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptkqo3rz7.rs:52:28\n   |\n\
    52 |     let mut prev_prev_prev_\n   |                            ^ help: add\
    \ `;` here\n53 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmptkqo3rz7.rs:57:17\n   |\n57 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmptkqo3rz7.rs:57:25\n \
    \  |\n57 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptkqo3rz7.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptkqo3rz7.rs:58:25\n   |\n58 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptkqo3rz7.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptkqo3rz7.rs:59:25\n   |\n59 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptkqo3rz7.rs:60:17\n  \
    \ |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptkqo3rz7.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptkqo3rz7.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptkqo3rz7.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut car_y\
    \ = 0.0;\n    let mut car_speed2 = 0.0;\n    let mut car_direction2 = 1.0;\n \
    \   let mut car_y2 = 0.0;\n    let mut car_speed3 = 0.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_x3 = 0.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4\
    \ = 0.0;\n    let mut car_direction4 = 1.0;\n    let mut car_x4 = 0.0;\n    let\
    \ mut car_y4 = 0.0;\n    let mut car_speed5 = 0.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_x5 = 0.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 0.0;\n    let mut car_direction6 = 1.0;\n    let mut car_x6 = 0.0;\n    let\
    \ mut car_y6 = 0.0;\n    let mut car_speed7 = 0.0;\n    let mut car_direction7\
    \ = 1.0;\n    let mut car_x7 = 0.0;\n    let mut car_y7 = 0.0;\n    let mut car_speed8\
    \ = 0.0;\n    let mut car_direction8 = 1.0;\n    let mut car_x8 = 0.0;\n    let\
    \ mut car_y8 = 0.0;\n    let mut car_speed9 = 0.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_x9 = 0.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10\
    \ = 0.0;\n    let mut car_direction10 = 1.0;\n    let mut car_x10 = 0.0;\n   \
    \ let mut car_y10 = 0.0;\n    let mut car_speed11 = 0.0;\n    let mut car_direction11\
    \ = 1.0;\n    let mut car_x11 = 0.0;\n    let mut car_y11 = 0.0;\n    let mut\
    \ car_speed12 = 0.0;\n    let mut car_direction12 = 1.0;\n    let mut car_x12\
    \ = 0.0;\n    let mut car_y12 = 0.0;\n    let mut car_speed13 = 0.0;\n    let\
    \ mut car_direction13 = 1.0;\n    let mut car_x13 = 0.0;\n    let mut car_y13\
    \ = 0.0;\n    let mut car_speed14 = 0.0;\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpz7tds1ua.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpz7tds1ua.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpz7tds1ua.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpz7tds1ua.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpz7tds1ua.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  for _ in 0..n {\n            if car_race_collision_test() {\n             \
    \   collisions += 1;\n            }\n        }\n    }\n    collisions\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_race_collision_test` in this scope\n\
    \  --> /tmp/tmphp8y64l1.rs:13:16\n   |\n13 |             if car_race_collision_test()\
    \ {\n   |                ^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphp8y64l1.rs:23:17\n  \
    \ |\n23 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphp8y64l1.rs:23:25\n   |\n23 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmphp8y64l1.rs:24:17\n   |\n24 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmphp8y64l1.rs:24:25\n\
    \   |\n24 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmphp8y64l1.rs:25:17\n   |\n25 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmphp8y64l1.rs:25:25\n   |\n25 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmphp8y64l1.rs:26:17\n   |\n26 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmphp8y64l1.rs:26:25\n   |\n26 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmphp8y64l1.rs:27:17\n  \
    \ |\n27 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmphp8y64l1.rs:27:25\n   |\n27 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not "
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk66v1iii.rs:68:11\n   |\n\
    68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk66v1iii.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk66v1iii.rs:"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed2 = Vec::new();\n    let mut car_pos2 = Vec::new();\n  \
    \  let mut car_direction2 = Vec::new();\n\n    for _ in 0..n {\n        car_speed.push(0);\n\
    \        car_pos.push(0);\n        car_direction.push(0);\n        car_speed2.push(0);\n\
    \        car_pos2.push(0);\n        car_direction2.push(0);\n    }\n\n    for\
    \ _ in 0..n {\n        car_speed[n - 1] += 1;\n        car_pos[n - 1] += 1;\n\
    \        car_direction[n - 1] += 1;\n        car_speed2[n - 1] += 1;\n       \
    \ car_pos2[n - 1] += 1;\n        car_direction2[n - 1] += 1;\n    }\n\n    for\
    \ _ in 0..n {\n        if car_speed[n - 1] > car_speed2[n - 1] {\n           \
    \ collisions += 1;\n        }\n    }\n\n    for _ in 0..n {\n        if car_speed[n\
    \ - 1] < car_speed2[n - 1] {\n            collisions += 1;\n        }\n    }\n\
    \n    for _ in 0..n {\n        if car_pos[n - 1] > car_pos2[n - 1] {\n       \
    \     collisions += 1;\n        }\n    }\n\n    for _ in 0..n {\n        if car_pos[n\
    \ - 1] < car_pos2[n - 1] {\n            collisions += 1;\n        }\n    }\n\n\
    \    for _ in 0..n {\n        if car_direction[n - 1] > car_direction2[n - 1]\
    \ {\n            collisions += 1;\n        }\n    }\n\n    for _ in 0..n {\n \
    \       if car_direction[n - 1] < car_direction2[n - 1] {\n            collisions\
    \ += 1;\n        }\n    }\n\n    collisions\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpp9ujyqqe.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:77:17\n\
    \   |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp9ujyqqe.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:78:17\n   |\n78 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:78:25\n\
    \   |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpp9ujyqqe.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpp9ujyqqe.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpp9ujyqqe.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpp9ujyqqe.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change\
    \ = 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n   \
    \ let mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n    let mut\
    \ car_direction = 1.0;\n    let mut car_direction_change = 1.0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change =\
    \ 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let\
    \ mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction\
    \ = 1.0;\n    let mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_direction_change = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change\
    \ = 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n   \
    \ let mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n    let mut\
    \ car_direction = 1.0;\n    let mut car_direction_change = 1.0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change =\
    \ 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let\
    \ mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n    let mut car_direction\
    \ = 1.0;\n    let mut car_direction_change = 1.0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_direction_change = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change\
    \ = 1.0;\n    let mut car_speed = 1.0;\n    let mut car_\n}\n\nfn main() {\n \
    \   let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfobk2whc.rs:58:17\n   |\n\
    58 |     let mut car_\n   |                 ^ help: add `;` here\n59 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfobk2whc.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfobk2whc.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpfobk2whc.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpfobk2whc.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpfobk2whc.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpfobk2whc.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpfobk2whc.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpfobk2whc.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpfobk2whc.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpfobk2whc.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_direction_change\
    \ = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut car_speed2_change = 1.0;\n\
    \    let mut car_direction2 = 1.0;\n    let mut car_direction2_change = 1.0;\n\
    \    let mut car_speed3 = 1.0;\n    let mut car_speed3_change = 1.0;\n    let\
    \ mut car_direction3 = 1.0;\n    let mut car_direction3_change = 1.0;\n    let\
    \ mut car_speed4 = 1.0;\n    let mut car_speed4_change = 1.0;\n    let mut car_direction4\
    \ = 1.0;\n    let mut car_direction4_change = 1.0;\n    let mut car_speed5 = 1.0;\n\
    \    let mut car_speed5_change = 1.0;\n    let mut car_direction5 = 1.0;\n   \
    \ let mut car_direction5_change = 1.0;\n    let mut car_speed6 = 1.0;\n    let\
    \ mut car_speed6_change = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut\
    \ car_direction6_change = 1.0;\n    let mut car_speed7 = 1.0;\n    let mut car_speed7_change\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_direction7_change\
    \ = 1.0;\n    let mut car_speed8 = 1.0;\n    let mut car_speed8_change = 1.0;\n\
    \    let mut car_direction8 = 1.0;\n    let mut car_direction8_change = 1.0;\n\
    \    let mut car_speed9 = 1.0;\n    let mut car_speed9_change = 1.0;\n    let\
    \ mut car_direction9 = 1.0;\n    let mut car_direction9_change = 1.0;\n    let\
    \ mut car_speed10 = 1.0;\n    let mut car_speed10_change = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_direction10_change = 1.0;\n    let mut car_speed11 =\
    \ 1.0;\n    let mut car_speed11_change = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_direction11_change = 1.0;\n    let mut car_speed12 = 1.0;\n \
    \   let mut car_speed12_change = 1.0;\n    let mut \n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp6v6m8wbr.rs:58:1\n\
    \   |\n58 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp6v6m8wbr.rs:62:17\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:62:25\n \
    \  |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6v6m8wbr.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6v6m8wbr.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6v6m8wbr.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6v6m8wbr.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_x = 0.0;\n    let mut\
    \ car_y = 0.0;\n    let mut car_speed2 = 1.0;\n    let mut car_direction2 = 1.0;\n\
    \    let mut car_y2 = 0.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_y3 = 0.0;\n    let mut car_speed4 = 1.0;\n    let mut\
    \ car_direction4 = 1.0;\n    let mut car_y4 = 0.0;\n    let mut car_speed5 = 1.0;\n\
    \    let mut car_direction5 = 1.0;\n    let mut car_y5 = 0.0;\n    let mut car_speed6\
    \ = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_y6 = 0.0;\n    let\
    \ mut car_speed7 = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_y7\
    \ = 0.0;\n    let mut car_speed8 = 1.0;\n    let mut car_direction8 = 1.0;\n \
    \   let mut car_y8 = 0.0;\n    let mut car_speed9 = 1.0;\n    let mut car_direction9\
    \ = 1.0;\n    let mut car_y9 = 0.0;\n    let mut car_speed10 = 1.0;\n    let mut\
    \ car_direction10 = 1.0;\n    let mut car_y10 = 0.0;\n    let mut car_speed11\
    \ = 1.0;\n    let mut car_direction11 = 1.0;\n    let mut car_y11 = 0.0;\n   \
    \ let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_y12 = 0.0;\n    let mut car_speed13 = 1.0;\n    let mut car_direction13\
    \ = 1.0;\n    let mut car_y13 = 0.0;\n    let mut car_speed14 = 1.0;\n    let\
    \ mut car_direction14 = 1.0;\n    let mut car_y14 = 0.0;\n    let mut car_speed15\
    \ = 1.0;\n    let mut car_direction15 = 1.0;\n    let mut car_y15 = 0.0;\n   \
    \ let mut car_speed16 = 1.0;\n    let mut car_direction16 = 1.0;\n    let mut\
    \ car_y16 = 0.0;\n    let mut car_speed17 = 1.0;\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmporl0xqxi.rs:65:17\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmporl0xqxi.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmporl0xqxi.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmporl0xqxi.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmporl0xqxi.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmporl0xqxi.rs:67:25\n   |\n67 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmporl0xqxi.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmporl0xqxi.rs:68:25\n   |\n68 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmporl0xqxi.rs:69:17\n  \
    \ |\n69 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmporl0xqxi.rs:69:25\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmporl0xqxi.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_2 = Vec::new();\n    let mut car_directions_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_directions_3 = Vec::new();\n\
    \    let mut car_speeds_4 = Vec::new();\n    let mut car_directions_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_directions_5 = Vec::new();\n\
    \    let mut car_speeds_6 = Vec::new();\n    let mut car_directions_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_directions_7 = Vec::new();\n\
    \    let mut car_speeds_8 = Vec::new();\n    let mut car_directions_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_directions_9 = Vec::new();\n\
    \    let mut car_speeds_10 = Vec::new();\n    let mut car_directions_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_directions_11 = Vec::new();\n\
    \    let mut car_speeds_12 = Vec::new();\n    let mut car_directions_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_directions_13 = Vec::new();\n\
    \    let mut car_speeds_14 = Vec::new();\n    let mut car_directions_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_directions_15 = Vec::new();\n\
    \    let mut car_speeds_16 = Vec::new();\n    let mut car_directions_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_directions_17 = Vec::new();\n\
    \    let mut car_speeds_18 = Vec::new();\n    let mut car_directions_\n}\n\nfn\
    \ main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa0knnb_l.rs:49:28\n   |\n\
    49 |     let mut car_directions_\n   |                            ^ help: add\
    \ `;` here\n50 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:17\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:54:25\n \
    \  |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa0knnb_l.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa0knnb_l.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa0knnb_l.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatch"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_speeds_2 = Vec::new();\n\
    \    let mut car_speeds_3 = Vec::new();\n    let mut car_speeds_4 = Vec::new();\n\
    \    let mut car_speeds_5 = Vec::new();\n    let mut car_speeds_6 = Vec::new();\n\
    \    let mut car_speeds_7 = Vec::new();\n    let mut car_speeds_8 = Vec::new();\n\
    \    let mut car_speeds_9 = Vec::new();\n    let mut car_speeds_10 = Vec::new();\n\
    \    let mut car_speeds_11 = Vec::new();\n    let mut car_speeds_12 = Vec::new();\n\
    \    let mut car_speeds_13 = Vec::new();\n    let mut car_speeds_14 = Vec::new();\n\
    \    let mut car_speeds_15 = Vec::new();\n    let mut car_speeds_16 = Vec::new();\n\
    \    let mut car_speeds_17 = Vec::new();\n    let mut car_speeds_18 = Vec::new();\n\
    \    let mut car_speeds_19 = Vec::new();\n    let mut car_speeds_20 = Vec::new();\n\
    \    let mut car_speeds_21 = Vec::new();\n    let mut car_speeds_22 = Vec::new();\n\
    \    let mut car_speeds_23 = Vec::new();\n    let mut car_speeds_24 = Vec::new();\n\
    \    let mut car_speeds_25 = Vec::new();\n    let mut car_speeds_26 = Vec::new();\n\
    \    let mut car_speeds_27 = Vec::new();\n    let mut car_speeds_28 = Vec::new();\n\
    \    let mut car_speeds_29 = Vec::new();\n    let mut car_speeds_30 = Vec::new();\n\
    \    let mut car_speeds_31 = Vec::new();\n    let mut car_speeds_32 = Vec::new();\n\
    \    let mut car_speeds_33 = Vec::new();\n    let mut car_speeds_34 = Vec::new();\n\
    \    let mut car_speeds_35\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpneyhd247.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpneyhd247.rs:48:26\n \
    \  |\n48 |     let mut car_speeds_35\n   |                          ^ help: add\
    \ `;` here\n49 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpneyhd247.rs:53:17\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpneyhd247.rs:53:25\n \
    \  |\n53 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpneyhd247.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpneyhd247.rs:54:25\n   |\n54 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpneyhd247.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpneyhd247.rs:55:25\n   |\n55 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpneyhd247.rs:56:17\n  \
    \ |\n56 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpneyhd247.rs:56:25\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpneyhd247.rs:57:17\n   |\n57 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not fo"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_speed4\
    \ = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6 = 1.0;\n    let\
    \ mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let mut car_speed9\
    \ = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11 = 1.0;\n   \
    \ let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16 = 1.0;\n   \
    \ let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_speed19\
    \ = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21 = 1.0;\n   \
    \ let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut car_speed24\
    \ = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26 = 1.0;\n   \
    \ let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n    let mut car_speed29\
    \ = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31 = 1.0;\n   \
    \ let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n    let mut car_speed34\
    \ = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36 = 1.0;\n   \
    \ let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n    let mut car_speed39\
    \ = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41 = 1.0;\n   \
    \ let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n    let mut car_speed44\
    \ = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46 = 1.0;\n   \
    \ let mut car_speed47 = 1.0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpnopbqers.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpnopbqers.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnopbqers.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnopbqers.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnopbqers.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnopbqers.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnopbqers.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_time = 0.0;\n    let mut prev_collisions = 0.0;\n   \
    \ let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_time = 0.0;\n\
    \    let mut prev_collisions_x = 0.0;\n    let mut prev_collisions_y = 0.0;\n\
    \    let mut prev_collisions_time = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6oweo0zg.rs:62:29\n   |\n\
    62 |     let mut prev_collisions_\n   |                             ^ help: add\
    \ `;` here\n63 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmp6oweo0zg.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp6oweo0zg.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp6oweo0zg.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp6oweo0zg.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp6oweo0zg.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp6oweo0zg.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp6oweo0zg.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp6oweo0zg.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp6oweo0zg.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp6oweo0zg.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_x\
    \ = 0.0;\n    let mut max_x = 0.0;\n    let mut min_y = 0.0;\n    let mut max_y\
    \ = 0.0;\n    let mut min_z = 0.0;\n    let mut max_z = 0.0;\n    let mut min_r\
    \ = 0.0;\n    let mut max_r = 0.0;\n    let mut min_g = 0.0;\n    let mut max_g\
    \ = 0.0;\n    let mut min_b = 0.0;\n    let mut max_b = 0.0;\n    let mut min_a\
    \ = 0.0;\n    let mut max_a = 0.0;\n    let mut min_d = 0.0;\n    let mut max_d\
    \ = 0.0;\n    let mut min_v = 0.0;\n    let mut max_v = 0.0;\n    let mut min_i\
    \ = 0.0;\n    let mut max_i = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p\
    \ = 0.0;\n    let mut min_s = 0.0;\n    let mut max_s = 0.0;\n    let mut min_t\
    \ = 0.0;\n    let mut max_t = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r\
    \ = 0.0;\n    let mut min_g = 0.0;\n    let mut max_g = 0.0;\n    let mut min_b\
    \ = 0.0;\n    let mut max_b = 0.0;\n    let mut min_a = 0.0;\n    let mut max_a\
    \ = 0.0;\n    let mut min_d = 0.0;\n    let mut max_d = 0.0;\n    let mut min_v\
    \ = 0.0;\n    let mut max_v = 0.0;\n    let mut min_i = 0.0;\n    let mut max_i\
    \ = 0.0;\n    let mut min_p = 0.0;\n    let mut max_p = 0.0;\n    let mut min_s\
    \ = 0.0;\n    let mut max_s = 0.0;\n    let mut min_t = 0.0;\n    let mut max_t\
    \ = 0.0;\n    let mut min_r = 0.0;\n    let mut max_r = 0.0;\n    let mut min_g\
    \ = 0.0;\n    let mut max_g = 0.0;\n    let mut min_b = 0.0;\n    let mut max_b\
    \ = 0.0;\n    let mut min_a = 0.0;\n    let mut max_a = 0.0;\n    let mut min_d\
    \ = 0.0;\n    let mut max_d = 0.0;\n    let mut min_v = 0.0;\n    let mut max_v\
    \ = 0.0;\n    let mut min_i = 0.0;\n    let mut max_i = \n}\n\nfn main() {\n \
    \   let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n  \
    \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp63aapvdr.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp63aapvdr.rs:78:17\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp63aapvdr.rs:78:25\n \
    \  |\n78 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp63aapvdr.rs:79:17\n   |\n79 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp63aapvdr.rs:79:25\n   |\n79 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp63aapvdr.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp63aapvdr.rs:80:25\n   |\n80 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp63aapvdr.rs:81:17\n  \
    \ |\n81 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp63aapvdr.rs:81:25\n   |\n81 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp63aapvdr.rs:82:17\n   |\n82 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp63aapvdr.rs:82:25\n\
    \   |\n82 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpk66v1iii.rs:68:11\n   |\n\
    68 |     let mu\n   |           ^ help: add `;` here\n69 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:73:17\n\
    \   |\n73 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:73:25\n   |\n73 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:74:17\n   |\n74 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:74:25\n\
    \   |\n74 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpk66v1iii.rs:75:17\n   |\n75 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:75:25\n   |\n75 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpk66v1iii.rs:76:25\n   |\n76 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpk66v1iii.rs:77:17\n  \
    \ |\n77 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpk66v1iii.rs:77:25\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpk66v1iii.rs:"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut min_speed = 1.0;\n    let mut max_speed = 1.0;\n    let mut min_distance\
    \ = 1.0;\n    let mut max_distance = 1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = 1.0;\n    let mut min_velocity = 1.0;\n    let mut max_velocity\
    \ = 1.0;\n    let mut min_acceleration = 1.0;\n    let mut max_acceleration =\
    \ 1.0;\n    let mut min_jerk = 1.0;\n    let mut max_jerk = 1.0;\n    let mut\
    \ min_jerk_acceleration = 1.0;\n    let mut max_jerk_acceleration = 1.0;\n   \
    \ let mut min_jerk_velocity = 1.0;\n    let mut max_jerk_velocity = 1.0;\n   \
    \ let mut min_jerk_distance = 1.0;\n    let mut max_jerk_distance = 1.0;\n   \
    \ let mut min_jerk_angle = 1.0;\n    let mut max_jerk_angle = 1.0;\n    let mut\
    \ min_jerk_jerk = 1.0;\n    let mut max_jerk_jerk = 1.0;\n    let mut min_jerk_jerk_acceleration\
    \ = 1.0;\n    let mut max_jerk_jerk_acceleration = 1.0;\n    let mut min_jerk_jerk_velocity\
    \ = 1.0;\n    let mut max_jerk_jerk_velocity = 1.0;\n    let mut min_jerk_jerk_distance\
    \ = 1.0;\n    let mut max_jerk_jerk_distance = 1.0;\n    let mut min_jerk_jerk_angle\
    \ = 1.0;\n    let mut max_jerk_jerk_angle = 1.0;\n    let mut min_jerk_jerk_jerk\
    \ = 1.0;\n    let mut max_jerk_jerk_jerk = 1.0;\n    let mut min_jerk_jerk_jerk_acceleration\
    \ = 1.0;\n    let mut max_jerk_jerk_jerk_acceleration = 1.0;\n    let mut min_jerk_jerk_jerk_velocity\
    \ = 1.0;\n    let mut max_jerk_jerk_jerk_velocity = 1.0;\n    let mut min_jerk_jerk_jerk_distance\
    \ = 1.0;\n    let mut max_jerk_jerk_jerk_distance = 1.0;\n    let mut min_jerk_jerk_jerk_angle\
    \ = 1.0;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxtonybz6.rs:52:1\n\
    \   |\n52 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpxtonybz6.rs:56:17\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpxtonybz6.rs:56:25\n \
    \  |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpxtonybz6.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpxtonybz6.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpxtonybz6.rs:58:17\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpxtonybz6.rs:58:25\n   |\n58 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpxtonybz6.rs:59:17\n  \
    \ |\n59 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpxtonybz6.rs:59:25\n   |\n59 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpxtonybz6.rs:60:17\n   |\n60 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpxtonybz6.rs:60:25\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let\
    \ mut car_speed4 = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_speed6\
    \ = 1.0;\n    let mut car_speed7 = 1.0;\n    let mut car_speed8 = 1.0;\n    let\
    \ mut car_speed9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_speed11\
    \ = 1.0;\n    let mut car_speed12 = 1.0;\n    let mut car_speed13 = 1.0;\n   \
    \ let mut car_speed14 = 1.0;\n    let mut car_speed15 = 1.0;\n    let mut car_speed16\
    \ = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_speed18 = 1.0;\n   \
    \ let mut car_speed19 = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_speed22 = 1.0;\n    let mut car_speed23 = 1.0;\n   \
    \ let mut car_speed24 = 1.0;\n    let mut car_speed25 = 1.0;\n    let mut car_speed26\
    \ = 1.0;\n    let mut car_speed27 = 1.0;\n    let mut car_speed28 = 1.0;\n   \
    \ let mut car_speed29 = 1.0;\n    let mut car_speed30 = 1.0;\n    let mut car_speed31\
    \ = 1.0;\n    let mut car_speed32 = 1.0;\n    let mut car_speed33 = 1.0;\n   \
    \ let mut car_speed34 = 1.0;\n    let mut car_speed35 = 1.0;\n    let mut car_speed36\
    \ = 1.0;\n    let mut car_speed37 = 1.0;\n    let mut car_speed38 = 1.0;\n   \
    \ let mut car_speed39 = 1.0;\n    let mut car_speed40 = 1.0;\n    let mut car_speed41\
    \ = 1.0;\n    let mut car_speed42 = 1.0;\n    let mut car_speed43 = 1.0;\n   \
    \ let mut car_speed44 = 1.0;\n    let mut car_speed45 = 1.0;\n    let mut car_speed46\
    \ = 1.0;\n    let mut car_speed47 = 1.\n}\n\nfn main() {\n    let candidate =\
    \ car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpw_hn4rpu.rs:57:29\n   |\n\
    57 |     let mut car_speed47 = 1.\n   |                             ^ help: add\
    \ `;` here\n58 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value\
    \ `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:62:17\n   |\n62 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:62:25\n \
    \  |\n62 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw_hn4rpu.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:63:25\n   |\n63 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw_hn4rpu.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:64:25\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:65:17\n  \
    \ |\n65 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw_hn4rpu.rs:65:25\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:66:17\n   |\n66 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw_hn4rpu.rs:66:25\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismat"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed:\
    \ f32 = 1.0;\n    let mut car_position: f32 = 1.0;\n    let mut car_direction:\
    \ f32 = 1.0;\n    let mut car_speed2: f32 = 1.0;\n    let mut car_position2: f32\
    \ = 1.0;\n    let mut car_direction2: f32 = 1.0;\n    let mut car_speed3: f32\
    \ = 1.0;\n    let mut car_position3: f32 = 1.0;\n    let mut car_direction3: f32\
    \ = 1.0;\n    let mut car_speed4: f32 = 1.0;\n    let mut car_position4: f32 =\
    \ 1.0;\n    let mut car_direction4: f32 = 1.0;\n    let mut car_speed5: f32 =\
    \ 1.0;\n    let mut car_position5: f32 = 1.0;\n    let mut car_direction5: f32\
    \ = 1.0;\n    let mut car_speed6: f32 = 1.0;\n    let mut car_position6: f32 =\
    \ 1.0;\n    let mut car_direction6: f32 = 1.0;\n    let mut car_speed7: f32 =\
    \ 1.0;\n    let mut car_position7: f32 = 1.0;\n    let mut car_direction7: f32\
    \ = 1.0;\n    let mut car_speed8: f32 = 1.0;\n    let mut car_position8: f32 =\
    \ 1.0;\n    let mut car_direction8: f32 = 1.0;\n    let mut car_speed9: f32 =\
    \ 1.0;\n    let mut car_position9: f32 = 1.0;\n    let mut car_direction9: f32\
    \ = 1.0;\n    let mut car_speed10: f32 = 1.0;\n    let mut car_position10: f32\
    \ = 1.0;\n    let mut car_direction10: f32 = 1.0;\n    let mut car_speed11: f32\
    \ = 1.0;\n    let mut car_position11: f32 = 1.0;\n    let mut car_direction11:\
    \ f32 = 1.0;\n    let mut car_speed12: f32 = 1.0;\n    let mut car_position12:\
    \ f32 = 1.0;\n    let mut car_direction12: f32 = 1.0;\n    let mut car_speed13:\
    \ f32 = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnt4dfafc.rs:48:11\n   |\n\
    48 |     let mu\n   |           ^ help: add `;` here\n49 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpnt4dfafc.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnt4dfafc.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpnt4dfafc.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpnt4dfafc.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpnt4dfafc.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpnt4dfafc.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpnt4dfafc.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpnt4dfafc.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpnt4dfafc.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpnt4dfafc.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpnt4dfafc.rs:"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut max_speed = 1.0;\n    let mut min_speed = -1.0;\n    let mut min_dist\
    \ = 1.0;\n    let mut max_dist = -1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = -1.0;\n    let mut min_angle_diff = 1.0;\n    let mut max_angle_diff\
    \ = -1.0;\n    let mut min_angle_speed = 1.0;\n    let mut max_angle_speed = -1.0;\n\
    \    let mut min_angle_speed_diff = 1.0;\n    let mut max_angle_speed_diff = -1.0;\n\
    \    let mut min_angle_speed_speed = 1.0;\n    let mut max_angle_speed_speed =\
    \ -1.0;\n    let mut min_angle_speed_speed_diff = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let mut min_angle_speed_speed_speed = 1.0;\n    let mut max_angle_speed_speed_diff\
    \ = -1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpti_tetm8.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpti_tetm8.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpti_tetm8.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpti_tetm8.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpti_tetm8.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpti_tetm8.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpti_tetm8.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpti_tetm8.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpti_tetm8.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpti_tetm8.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpti_tetm8.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_speed2 = 1.0;\n    let mut collision_time2 = 0.0;\n\
    \    let mut collision_direction2 = 1.0;\n    let mut collision_speed3 = 1.0;\n\
    \    let mut collision_time3 = 0.0;\n    let mut collision_direction3 = 1.0;\n\
    \    let mut collision_speed4 = 1.0;\n    let mut collision_time4 = 0.0;\n   \
    \ let mut collision_direction4 = 1.0;\n    let mut collision_speed5 = 1.0;\n \
    \   let mut collision_time5 = 0.0;\n    let mut collision_direction5 = 1.0;\n\
    \    let mut collision_speed6 = 1.0;\n    let mut collision_time6 = 0.0;\n   \
    \ let mut collision_direction6 = 1.0;\n    let mut collision_speed7 = 1.0;\n \
    \   let mut collision_time7 = 0.0;\n    let mut collision_direction7 = 1.0;\n\
    \    let mut collision_speed8 = 1.0;\n    let mut collision_time8 = 0.0;\n   \
    \ let mut collision_direction8 = 1.0;\n    let mut collision_speed9 = 1.0;\n \
    \   let mut collision_time9 = 0.0;\n    let mut collision_direction9 = 1.0;\n\
    \    let mut collision_speed10 = 1.0;\n    let mut collision_time10 = 0.0;\n \
    \   let mut collision_direction10 = 1.0;\n    let mut collision_speed11 = 1.0;\n\
    \    let mut collision_time11 = 0.0;\n    let mut collision_direction11 = 1.0;\n\
    \    let mut collision_speed12 = 1.0;\n    let mut collision_time12 = 0.0;\n \
    \   let mut collision_direction12 = 1.0;\n    let mut collision_speed13 = 1.0;\n\
    \    let mut collision_time13 = 0.0;\n    let mut collision_direction13 = 1.0;\n\
    \    let mut collision_speed14 = 1.0;\n    let mut collision_time14 = 0.0;\n \
    \   let mut collision_direction14 = 1.0;\n    let mut collision_speed15 = 1.0;\n\
    \    let mut collision_time15 = 0.0;\n    let mut collision_direction15 = 1.0;\n\
    \    let mut collision_speed16 = 1.0;\n    let mut collision_time16 = 0.0;\n \
    \   let mut collision_direction16 = 1.0;\n    let mut collision_speed17 = 1.0;\n\
    \    let mut collision_time17 = 0.0;\n    let mut collision_direction17 = 1.0;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa06yb2ab.rs:62:11\n   |\n\
    62 |     let mu\n   |           ^ help: add `;` here\n63 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:67:17\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpa06yb2ab.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:69:25\n   |\n69 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:70:17\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpa06yb2ab.rs:70:25\n   |\n70 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpa06yb2ab.rs:71:17\n  \
    \ |\n71 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpa06yb2ab.rs:71:25\n   |\n71 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpa06yb2ab.rs:"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n\
    \    let mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n\
    \    let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut speed60 = 0.0;\n    let mut\
    \ speed61 = 0.0;\n    let mut speed62 = 0.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp100iql6m.rs:72:25\n   |\n\
    72 |     let mut speed62 = 0.\n   |                         ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp100iql6m.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp100iql6m.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp100iql6m.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = Vec::new();\n\
    \    let mut speed2 = Vec::new();\n    let mut speed3 = Vec::new();\n    let mut\
    \ speed4 = Vec::new();\n    let mut speed5 = Vec::new();\n    let mut speed6 =\
    \ Vec::new();\n    let mut speed7 = Vec::new();\n    let mut speed8 = Vec::new();\n\
    \    let mut speed9 = Vec::new();\n    let mut speed10 = Vec::new();\n    let\
    \ mut speed11 = Vec::new();\n    let mut speed12 = Vec::new();\n    let mut speed13\
    \ = Vec::new();\n    let mut speed14 = Vec::new();\n    let mut speed15 = Vec::new();\n\
    \    let mut speed16 = Vec::new();\n    let mut speed17 = Vec::new();\n    let\
    \ mut speed18 = Vec::new();\n    let mut speed19 = Vec::new();\n    let mut speed20\
    \ = Vec::new();\n    let mut speed21 = Vec::new();\n    let mut speed22 = Vec::new();\n\
    \    let mut speed23 = Vec::new();\n    let mut speed24 = Vec::new();\n    let\
    \ mut speed25 = Vec::new();\n    let mut speed26 = Vec::new();\n    let mut speed27\
    \ = Vec::new();\n    let mut speed28 = Vec::new();\n    let mut speed29 = Vec::new();\n\
    \    let mut speed30 = Vec::new();\n    let mut speed31 = Vec::new();\n    let\
    \ mut speed32 = Vec::new();\n    let mut speed33 = Vec::new();\n    let mut speed34\
    \ = Vec::new();\n    let mut speed35 = Vec::new();\n    let mut speed36 = Vec::new();\n\
    \    let mut speed37 = Vec::new();\n    let mut speed38 = Vec::new();\n    let\
    \ mut speed39 = Vec::new();\n    let mut speed40 = Vec::new();\n    let mut speed41\
    \ = Vec::new();\n    let mut speed42 = Vec::new();\n    let mut speed43 = Vec::new();\n\
    \    let mut speed44 = Vec::new();\n    let mut speed45 = Vec::new();\n    let\
    \ mut speed46 = Vec::new();\n    let mut speed47 = Vec::new();\n    let \n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpdt9kcngp.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpdt9kcngp.rs:63:17\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpdt9kcngp.rs:63:25\n \
    \  |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpdt9kcngp.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpdt9kcngp.rs:64:25\n   |\n64 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpdt9kcngp.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpdt9kcngp.rs:65:25\n   |\n65 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpdt9kcngp.rs:66:17\n  \
    \ |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpdt9kcngp.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpdt9kcngp.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpdt9kcngp.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n\
    \    let mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n\
    \    let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut speed60 = 0.0;\n    let mut\
    \ speed61 = 0.0;\n    let mut speed62 = 0.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp100iql6m.rs:72:25\n   |\n\
    72 |     let mut speed62 = 0.\n   |                         ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp100iql6m.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp100iql6m.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp100iql6m.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision_found = false;\n        for _ in 0..n {\n            if car_collision(n\
    \ - 1, n - 1) {\n                collision_found = true;\n                break;\n\
    \            }\n        }\n        if !collision_found {\n            collisions\
    \ += 1;\n        }\n    }\n    collisions\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmpw3gudi32.rs:14:16\n   |\n14 |             if car_collision(n - 1, n\
    \ - 1) {\n   |                ^^^^^^^^^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw3gudi32.rs:28:17\n  \
    \ |\n28 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw3gudi32.rs:28:25\n   |\n28 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpw3gudi32.rs:29:17\n   |\n29 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpw3gudi32.rs:29:25\n\
    \   |\n29 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpw3gudi32.rs:30:17\n   |\n30 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpw3gudi32.rs:30:25\n   |\n30 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpw3gudi32.rs:31:17\n   |\n31 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpw3gudi32.rs:31:25\n   |\n31 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpw3gudi32.rs:32:17\n  \
    \ |\n32 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpw3gudi32.rs:32:25\n   |\n32 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scop"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut max_speed = 1.0;\n    let mut min_speed = -1.0;\n    let mut min_dist\
    \ = 1.0;\n    let mut max_dist = -1.0;\n    let mut min_angle = std::f64::consts::PI\
    \ * 1.0;\n    let mut max_angle = std::f64::consts::PI * 2.0;\n    let mut min_angle\
    \ = std::f64::consts::PI * 1.0;\n    let mut max_angle = std::f64::consts::PI\
    \ * 2.0;\n    let mut min_angle = std::f64::consts::PI * 1.0;\n    let mut max_angle\
    \ = std::f64::consts::PI * 2.0;\n    let mut min_angle = std::f64::consts::PI\
    \ * 1.0;\n    let mut max_angle = std::f64::consts::PI * 2.0;\n    let mut min_angle\
    \ = std::f64::consts::PI * 1.0;\n    let mut max_angle = std::f64::consts::PI\
    \ * 2.0;\n    let mut min_angle = std::f64::consts::PI * 1.0;\n    let mut max_angle\
    \ = std::f64::consts::PI * 2.0;\n    let mut min_angle = std::f64::consts::PI\
    \ * 1.0;\n    let mut max_angle = std::f64::consts::PI * 2.0;\n    let mut min_angle\
    \ = std::f64::consts::PI * 1.0;\n    let mut max_angle = std::f64::consts::PI\
    \ * 2.0;\n    let mut min_angle = std::f64::consts::PI * 1.0;\n    let mut max_angle\
    \ = std::f64::consts::PI * 2.0;\n    let mut min_angle = std::f64::consts::PI\
    \ * 1.0;\n    let mut max_angle = std::f64::consts::PI * 2.0;\n    let mut min_angle\
    \ = std::f64::consts::PI * 1.0;\n    let mut max_angle = std::f64::consts::PI\
    \ * 2.0;\n    let mut min_angle = std::f64::consts::PI * 1.0;\n    let mut max_angle\
    \ = std::f64::consts::PI * 2.0;\n    let mut min_angle = std::f64::consts::PI\
    \ * 1.0;\n    let mut max_angle = std::f64::consts::PI * 2.0;\n    let mut min_angle\
    \ = std::f64::consts::PI * 1.0;\n    let mut max_angle = std::f64::consts::PI\
    \ * 2.0;\n    let mut min_angle = std::f64::consts::PI * 1.0;\n\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:50:17\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm1o6f9y2.rs:50:25\n   |\n50 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:51:17\n   |\n51 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:51:25\n\
    \   |\n51 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpm1o6f9y2.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:52:25\n   |\n52 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpm1o6f9y2.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:53:25\n   |\n53 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpm1o6f9y2.rs:54:17\n  \
    \ |\n54 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpm1o6f9y2.rs:54:25\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpm1o6f9y2.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speeds = Vec::new();\n    let mut car_directions\
    \ = Vec::new();\n    let mut car_speeds_left = Vec::new();\n    let mut car_directions_left\
    \ = Vec::new();\n    let mut car_speeds_right = Vec::new();\n    let mut car_directions_right\
    \ = Vec::new();\n\n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n    \
    \    car_speeds_right.push(0);\n        car_directions_right.push(0);\n    }\n\
    \n    for _ in 0..n {\n        car_speeds.push(0);\n        car_directions.push(0);\n\
    \        car_speeds_left.push(0);\n        car_directions_left.push(0);\n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp9ocy6yhs.rs:89:3\n\
    \   |\n9  | fn car_race_collision(n: isize) -> isize {\n   |                 \
    \                         - unclosed delimiter\n...\n75 |     for _ in 0..n {\n\
    \   |                   - this delimiter might not be properly closed...\n...\n\
    80 | }\n   | - ...as it matches this but it has different indentation\n...\n89\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9ocy6yhs.rs:84:17\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp9ocy6yhs.rs:84:25\n   |\n84 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp9ocy6yhs.rs:85:17\n  \
    \ |\n85 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp9ocy6yhs.rs:85:25\n   |\n85 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp9ocy6yhs.rs:86:17\n   |\n86 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp9ocy6yhs.rs:86:25\n\
    \   |\n86 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp9ocy6yhs.rs:87:17\n   |\n87 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp9ocy6yhs.rs:87:25\n   |\n87 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp9ocy6yhs.rs:88:17\n   |\n88 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerr"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ vx = 0.0;\n    let mut vy = 0.0;\n    let mut vz = 0.0;\n    let mut ax = 0.0;\n\
    \    let mut ay = 0.0;\n    let mut az = 0.0;\n    let mut bx = 0.0;\n    let\
    \ mut by = 0.0;\n    let mut bz = 0.0;\n    let mut cx = 0.0;\n    let mut cy\
    \ = 0.0;\n    let mut cz = 0.0;\n    let mut dx = 0.0;\n    let mut dy = 0.0;\n\
    \    let mut dz = 0.0;\n    let mut ex = 0.0;\n    let mut ey = 0.0;\n    let\
    \ mut ez = 0.0;\n    let mut fx = 0.0;\n    let mut fy = 0.0;\n    let mut fz\
    \ = 0.0;\n    let mut gx = 0.0;\n    let mut gy = 0.0;\n    let mut gz = 0.0;\n\
    \    let mut hx = 0.0;\n    let mut hy = 0.0;\n    let mut hz = 0.0;\n    let\
    \ mut ix = 0.0;\n    let mut iy = 0.0;\n    let mut iz = 0.0;\n    let mut jx\
    \ = 0.0;\n    let mut jy = 0.0;\n    let mut jz = 0.0;\n    let mut kx = 0.0;\n\
    \    let mut ky = 0.0;\n    let mut kz = 0.0;\n    let mut lx = 0.0;\n    let\
    \ mut ly = 0.0;\n    let mut lz = 0.0;\n    let mut mx = 0.0;\n    let mut my\
    \ = 0.0;\n    let mut mz = 0.0;\n    let mut nx = 0.0;\n    let mut ny = 0.0;\n\
    \    let mut nz = 0.0;\n    let mut ox = 0.0;\n    let mut oy = 0.0;\n    let\
    \ mut oz = 0.0;\n    let mut px = 0.0;\n    let mut py = 0.0;\n    let mut pz\
    \ = 0.0;\n    let mut qx = 0.0;\n    let mut qy = 0.0;\n    let mut qz = 0.0;\n\
    \    let mut rx = 0.0;\n    let mut ry = 0.0;\n    let mut rz = 0.0;\n    let\
    \ mut sx = 0.0;\n    let mut sy = 0.0;\n    let mut sz = 0.0;\n    let mut tx\
    \ = 0.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpi1_v9q1s.rs:77:1\n  \
    \ |\n77 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpi1_v9q1s.rs:81:17\n   |\n81 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:81:25\n \
    \  |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpi1_v9q1s.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpi1_v9q1s.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpi1_v9q1s.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:85:17\n   |\n85 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpi1_v9q1s.rs:85:25\n\
    \   |\n85 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_pos = vec![0.0, 0.0];\n    let mut car_direction = vec![1.0,\
    \ 0.0];\n    let mut car_speed2 = 1.0;\n    let mut car_pos2 = vec![0.0, 0.0];\n\
    \    let mut car_direction2 = vec![1.0, 0.0];\n    let mut car_speed3 = 1.0;\n\
    \    let mut car_pos3 = vec![0.0, 0.0];\n    let mut car_direction3 = vec![1.0,\
    \ 0.0];\n    let mut car_speed4 = 1.0;\n    let mut car_pos4 = vec![0.0, 0.0];\n\
    \    let mut car_direction4 = vec![1.0, 0.0];\n    let mut car_speed5 = 1.0;\n\
    \    let mut car_pos5 = vec![0.0, 0.0];\n    let mut car_direction5 = vec![1.0,\
    \ 0.0];\n    let mut car_speed6 = 1.0;\n    let mut car_pos6 = vec![0.0, 0.0];\n\
    \    let mut car_direction6 = vec![1.0, 0.0];\n    let mut car_speed7 = 1.0;\n\
    \    let mut car_pos7 = vec![0.0, 0.0];\n    let mut car_direction7 = vec![1.0,\
    \ 0.0];\n    let mut car_speed8 = 1.0;\n    let mut car_pos8 = vec![0.0, 0.0];\n\
    \    let mut car_direction8 = vec![1.0, 0.0];\n    let mut car_speed9 = 1.0;\n\
    \    let mut car_pos9 = vec![0.0, 0.0];\n    let mut car_direction9 = vec![1.0,\
    \ 0.0];\n    let mut car_speed10 = 1.0;\n    let mut car_pos10 = vec![0.0, 0.0];\n\
    \    let mut car_direction10 = vec![1.0, 0.0];\n    let mut car_speed11 = 1.0;\n\
    \    let mut car_pos11 = vec![0.0, 0.0];\n    let mut car_direction11 = vec![1.0,\
    \ 0.0];\n    let mut car_speed12 = 1.0;\n    let mut car_pos12 = vec![0.0, 0.0];\n\
    \    let mut car_direction12 = vec![1.0, 0.0];\n    let mut car_speed13 = 1.0;\n\
    \    let mut car_pos13 = vec![0.0, 0.0];\n    let mut car_direction13 = vec![1.0,\
    \ 0.0];\n    let mut car_speed14 = 1.0;\n    let mut car_pos14 = vec![0.0, 0.0];\n\
    \    let mut car_direction14 = vec![\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `}`\n\
    \  --> /tmp/tmp_p7y8d7o.rs:53:1\n   |\n53 | }\n   | ^ expected one of `.`, `;`,\
    \ `?`, `else`, or an operator\n\nerror: mismatched closing delimiter: `}`\n  -->\
    \ /tmp/tmp_p7y8d7o.rs:52:35\n   |\n9  | fn car_race_collision(n: isize) -> isize\
    \ {\n   |                                          - closing delimiter possibly\
    \ meant for this\n...\n52 |     let mut car_direction14 = vec![\n   |        \
    \                           ^ unclosed delimiter\n53 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp_p7y8d7o.rs:57:17\n\
    \   |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_p7y8d7o.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_p7y8d7o.rs:58:17\n   |\n58 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_p7y8d7o.rs:58:25\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_p7y8d7o.rs:59:17\n   |\n59 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_p7y8d7o.rs:59:25\n   |\n59 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_p7y8d7o.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_p7y8d7o.rs:60:25\n   |\n60 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `l"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_speed_left = 1.0;\n    let mut car_speed_right = 1.0;\n    let\
    \ mut car_speed_left_right = 1.0;\n    let mut car_speed_left_left = 1.0;\n  \
    \  let mut car_speed_right_left = 1.0;\n    let mut car_speed_right_right = 1.0;\n\
    \    let mut car_speed_left_left_right = 1.0;\n    let mut car_speed_left_left_left\
    \ = 1.0;\n    let mut car_speed_right_left_left = 1.0;\n    let mut car_speed_right_right_left\
    \ = 1.0;\n    let mut car_speed_left_right_left = 1.0;\n    let mut car_speed_left_right_right\
    \ = 1.0;\n    let mut car_speed_left_left_left_right = 1.0;\n    let mut car_speed_left_left_left_left\
    \ = 1.0;\n    let mut car_speed_right_left_left_left = 1.0;\n    let mut car_speed_right_right_left_left\
    \ = 1.0;\n    let mut car_speed_left_right_right_left = 1.0;\n    let mut car_speed_left_right_right_right\
    \ = 1.0;\n    let mut car_speed_left_left_left_right_right = 1.0;\n    let mut\
    \ car_speed_left_left_left_left_right = 1.0;\n    let mut car_speed_right_left_left_left_right\
    \ = 1.0;\n    let mut car_speed_right_right_left_left_right = 1.0;\n    let mut\
    \ car_speed_left_right_right_right_right = 1.0;\n    let mut car_speed_left_right_right_right_right\
    \ = 1.0;\n    let mut car_speed_left_left_left_left_right_right_right = 1.0;\n\
    \    let mut car_speed_left_left_left_left_right_right_right = 1.0;\n    let mut\
    \ car_speed_right_left_left_left_right_right_right = 1.0;\n    let mut car_speed_right_right_left_left_right_right_right\
    \ = 1.0;\n    let mut car_speed_left_right_right_right_right_right = 1.0;\n  \
    \  let mut car_speed_left_right_right_right_right_right = 1.0;\n    let mut car_speed_left_left_left_right_right_right_right\
    \ = 1.0;\n    let mut car_speed_left_left_left_left_right_right_right_right =\
    \ 1.0;\n    let mut car_speed_right_left_left_left_right_right_right_right = 1.0;\n\
    \    let mut car_speed_right_right_left_left_right_right_right_right = 1.0;\n\
    \    let mut car_speed_left_right_right_right_right_right_right = 1.0;\n    let\
    \ mut car_speed_left_right_right_right_right_right_right = 1.0;\n    let mut car_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp123nmnwc.rs:48:17\n   |\n\
    48 |     let mut car_\n   |                 ^ help: add `;` here\n49 | }\n   |\
    \ - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp123nmnwc.rs:53:17\n   |\n53 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp123nmnwc.rs:53:25\n   |\n53 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp123nmnwc.rs:54:17\n   |\n54 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp123nmnwc.rs:54:25\n   |\n54 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp123nmnwc.rs:55:17\n  \
    \ |\n55 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp123nmnwc.rs:55:25\n   |\n55 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp123nmnwc.rs:56:17\n   |\n56 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp123nmnwc.rs:56:25\n\
    \   |\n56 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp123nmnwc.rs:57:17\n   |\n57 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp123nmnwc.rs:57:25\n   |\n57 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmp"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_z = 0.0;\n\
    \    let mut prev_w = 0.0;\n    let mut prev_speed = 1.0;\n    let mut prev_direction\
    \ = 0.0;\n    let mut prev_direction_x = 0.0;\n    let mut prev_direction_y =\
    \ 0.0;\n    let mut prev_direction_z = 0.0;\n    let mut prev_direction_w = 0.0;\n\
    \    let mut prev_direction_x_prev = 0.0;\n    let mut prev_direction_y_prev =\
    \ 0.0;\n    let mut prev_direction_z_prev = 0.0;\n    let mut prev_direction_w_prev\
    \ = 0.0;\n    let mut prev_direction_x_next = 0.0;\n    let mut prev_direction_y_next\
    \ = 0.0;\n    let mut prev_direction_z_next = 0.0;\n    let mut prev_direction_w_next\
    \ = 0.0;\n    let mut prev_direction_x_next_prev = 0.0;\n    let mut prev_direction_y_next_prev\
    \ = 0.0;\n    let mut prev_direction_z_next_prev = 0.0;\n    let mut prev_direction_w_next_prev\
    \ = 0.0;\n    let mut prev_direction_x_next_next = 0.0;\n    let mut prev_direction_y_next_next\
    \ = 0.0;\n    let mut prev_direction_z_next_next = 0.0;\n    let mut prev_direction_w_next_next\
    \ = 0.0;\n    let mut prev_direction_x_next_next_prev = 0.0;\n    let mut prev_direction_y_next_next_prev\
    \ = 0.0;\n    let mut prev_direction_z_next_next_prev = 0.0;\n    let mut prev_direction_w_next_next_prev\
    \ = 0.0;\n    let mut prev_direction_x_next_next_next = 0.0;\n    let mut prev_direction_y_next_next_next\
    \ = 0.0;\n    let mut prev_direction_z_next_next_next = 0.0;\n    let mut prev_direction_w_next_next_next\
    \ = 0.0;\n    let mut prev_direction_x_next_next_next_prev = 0.0;\n    let mut\
    \ prev_direction_y_next_next_next_prev = 0.0;\n    let mut prev_direction_z_next_next_next_prev\
    \ = 0.0;\n    let mut prev_direction_w_next_next_next_prev = 0.0;\n    let mut\
    \ prev_direction_x_next_next_next_next = 0.0;\n    let mut prev_direction_y_next_next_next_next\
    \ = 0.0;\n    let mut prev_direction_z_next_next_next_next = 0.0;\n    let mut\
    \ prev_direction_w_next_next_next_next = 0.0;\n    let mut prev_direction_x_next_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp751gn_ei.rs:54:35\n   |\n\
    54 |     let mut prev_direction_x_next_\n   |                                \
    \   ^ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp751gn_ei.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp751gn_ei.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp751gn_ei.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp751gn_ei.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp751gn_ei.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp751gn_ei.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp751gn_ei.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp751gn_ei.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp751gn_ei.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp751gn_ei.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut speed = 1.0;\n\
    \    let mut collision_speed = 1.0;\n    let mut collision_direction = 1.0;\n\
    \    let mut collision_direction_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.0;\n    let mut collision_direction_length_sign = 1.0;\n    let mut collision_direction_length\
    \ = 1.\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp3crjxqlp.rs:53:44\n   |\n\
    53 |     let mut collision_direction_length = 1.\n   |                       \
    \                     ^ help: add `;` here\n54 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp3crjxqlp.rs:58:17\n\
    \   |\n58 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3crjxqlp.rs:58:25\n   |\n58 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp3crjxqlp.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp3crjxqlp.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp3crjxqlp.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp3crjxqlp.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp3crjxqlp.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp3crjxqlp.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp3crjxqlp.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp3crjxqlp.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in th"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 0.0;\n    let mut speed3 = 0.0;\n    let mut speed4 = 0.0;\n\
    \    let mut speed5 = 0.0;\n    let mut speed6 = 0.0;\n    let mut speed7 = 0.0;\n\
    \    let mut speed8 = 0.0;\n    let mut speed9 = 0.0;\n    let mut speed10 = 0.0;\n\
    \    let mut speed11 = 0.0;\n    let mut speed12 = 0.0;\n    let mut speed13 =\
    \ 0.0;\n    let mut speed14 = 0.0;\n    let mut speed15 = 0.0;\n    let mut speed16\
    \ = 0.0;\n    let mut speed17 = 0.0;\n    let mut speed18 = 0.0;\n    let mut\
    \ speed19 = 0.0;\n    let mut speed20 = 0.0;\n    let mut speed21 = 0.0;\n   \
    \ let mut speed22 = 0.0;\n    let mut speed23 = 0.0;\n    let mut speed24 = 0.0;\n\
    \    let mut speed25 = 0.0;\n    let mut speed26 = 0.0;\n    let mut speed27 =\
    \ 0.0;\n    let mut speed28 = 0.0;\n    let mut speed29 = 0.0;\n    let mut speed30\
    \ = 0.0;\n    let mut speed31 = 0.0;\n    let mut speed32 = 0.0;\n    let mut\
    \ speed33 = 0.0;\n    let mut speed34 = 0.0;\n    let mut speed35 = 0.0;\n   \
    \ let mut speed36 = 0.0;\n    let mut speed37 = 0.0;\n    let mut speed38 = 0.0;\n\
    \    let mut speed39 = 0.0;\n    let mut speed40 = 0.0;\n    let mut speed41 =\
    \ 0.0;\n    let mut speed42 = 0.0;\n    let mut speed43 = 0.0;\n    let mut speed44\
    \ = 0.0;\n    let mut speed45 = 0.0;\n    let mut speed46 = 0.0;\n    let mut\
    \ speed47 = 0.0;\n    let mut speed48 = 0.0;\n    let mut speed49 = 0.0;\n   \
    \ let mut speed50 = 0.0;\n    let mut speed51 = 0.0;\n    let mut speed52 = 0.0;\n\
    \    let mut speed53 = 0.0;\n    let mut speed54 = 0.0;\n    let mut speed55 =\
    \ 0.0;\n    let mut speed56 = 0.0;\n    let mut speed57 = 0.0;\n    let mut speed58\
    \ = 0.0;\n    let mut speed59 = 0.0;\n    let mut speed60 = 0.0;\n    let mut\
    \ speed61 = 0.0;\n    let mut speed62 = 0.\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp100iql6m.rs:72:25\n   |\n\
    72 |     let mut speed62 = 0.\n   |                         ^ help: add `;` here\n\
    73 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmp100iql6m.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:78:17\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp100iql6m.rs:78:25\n   |\n78 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:79:17\n  \
    \ |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp100iql6m.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp100iql6m.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp100iql6m.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp100iql6m.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut speed = 1.0;\n\
    \    let mut car_speed = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2\
    \ = 1.0;\n    let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n \
    \   let mut car_direction3 = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut\
    \ car_direction4 = 1.0;\n    let mut car_speed5 = 1.0;\n    let mut car_direction5\
    \ = 1.0;\n    let mut car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n \
    \   let mut car_speed7 = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut\
    \ car_speed8 = 1.0;\n    let mut car_direction8 = 1.0;\n    let mut car_speed9\
    \ = 1.0;\n    let mut car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n\
    \    let mut car_direction10 = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut\
    \ car_direction11 = 1.0;\n    let mut car_speed12 = 1.0;\n    let mut car_direction12\
    \ = 1.0;\n    let mut car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n\
    \    let mut car_speed14 = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut\
    \ car_speed15 = 1.0;\n    let mut car_direction15 = 1.0;\n    let mut car_speed16\
    \ = 1.0;\n    let mut car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n\
    \    let mut car_direction17 = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut\
    \ car_direction18 = 1.0;\n    let mut car_speed19 = 1.0;\n    let mut car_direction19\
    \ = 1.0;\n    let mut car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n\
    \    let mut car_speed21 = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut\
    \ car_speed22 = 1.0;\n    let mut car_direction22 = 1.0;\n    let mut car_speed23\
    \ = 1.0;\n    let mut car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n\
    \    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvm6tgx9t.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm6tgx9t.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvm6tgx9t.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvm6tgx9t.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvm6tgx9t.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm6tgx9t.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpvm6tgx9t.rs:"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut max_speed = 1.0;\n    let mut min_speed = -1.0;\n    let mut min_distance\
    \ = 1.0;\n    let mut max_distance = -1.0;\n    let mut min_angle = 1.0;\n   \
    \ let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle\
    \ = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let\
    \ mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle =\
    \ 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut\
    \ max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n\
    \    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle\
    \ = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle =\
    \ -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let\
    \ mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle =\
    \ 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut\
    \ max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n\
    \    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle\
    \ = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle =\
    \ -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let\
    \ mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle =\
    \ 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut\
    \ max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n\
    \    let mut min_angle = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle\
    \ = 1.0;\n    let mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let\
    \ mut max_angle = -1.0;\n    let mut min_angle = 1.0;\n    let mut max_angle =\
    \ -1.0;\n\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpehc1wp79.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpehc1wp79.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpehc1wp79.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpehc1wp79.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpehc1wp79.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpehc1wp79.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpehc1wp79.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpehc1wp79.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpehc1wp79.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpehc1wp79.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpehc1wp79.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0; // number of collisions\n   \
    \ let mut speed = 2.0; // initial speed\n    let mut direction = Direction::Right;\
    \ // initial direction\n    let mut car_speed = 2.0; // car speed\n    let mut\
    \ car_direction = Direction::Right; // car direction\n    let mut car_x = 0.0;\
    \ // car position\n    let mut car_y = 0.0; // car position\n    let mut car_speed\
    \ = 2.0; // car speed\n    let mut car_direction = Direction::Right; // car direction\n\
    \    let mut car_x = 0.0; // car position\n    let mut car_y = 0.0; // car position\n\
    \    let mut car_speed = 2.0; // car speed\n    let mut car_direction = Direction::Right;\
    \ // car direction\n    let mut car_x = 0.0; // car position\n    let mut car_y\
    \ = 0.0; // car position\n    let mut car_speed = 2.0; // car speed\n    let mut\
    \ car_direction = Direction::Right; // car direction\n    let mut car_x = 0.0;\
    \ // car position\n    let mut car_y = 0.0; // car position\n    let mut car_speed\
    \ = 2.0; // car speed\n    let mut car_direction = Direction::Right; // car direction\n\
    \    let mut car_x = 0.0; // car position\n    let mut car_y = 0.0; // car position\n\
    \    let mut car_speed = 2.0; // car speed\n    let mut car_direction = Direction::Right;\
    \ // car direction\n    let mut car_x = 0.0; // car position\n    let mut car_y\
    \ = 0.0; // car position\n    let mut car_speed = 2.0; // car speed\n    let mut\
    \ car_direction = Direction::Right; // car direction\n    let mut car_x = 0.0;\
    \ // car position\n    let mut car_y = 0.0; // car position\n    let mut car_speed\
    \ = 2.0; // car speed\n    let mut car_direction = Direction::Right; // car direction\n\
    \    let mut car_x = 0.0; // car position\n    let mut car_y = 0.0; // car position\n\
    \    let mut car_speed = 2.0; // car speed\n    let mut car_direction = Direction::Right;\
    \ // car direction\n    let mut car_x = 0.0; // car position\n    let mut car_y\
    \ = 0.0; // car position\n    let mut car_speed = 2.0; // car speed\n}\n\nfn main()\
    \ {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Direction`\n \
    \ --> /tmp/tmpggus764q.rs:12:25\n   |\n12 |     let mut direction = Direction::Right;\
    \ // initial direction\n   |                         ^^^^^^^^^ use of undeclared\
    \ type `Direction`\n\nerror[E0433]: failed to resolve: use of undeclared type\
    \ `Direction`\n  --> /tmp/tmpggus764q.rs:14:29\n   |\n14 |     let mut car_direction\
    \ = Direction::Right; // car direction\n   |                             ^^^^^^^^^\
    \ use of undeclared type `Direction`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:18:29\n   |\n18 |   \
    \  let mut car_direction = Direction::Right; // car direction\n   |          \
    \                   ^^^^^^^^^ use of undeclared type `Direction`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:22:29\n\
    \   |\n22 |     let mut car_direction = Direction::Right; // car direction\n \
    \  |                             ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:26:29\n\
    \   |\n26 |     let mut car_direction = Direction::Right; // car direction\n \
    \  |                             ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:30:29\n\
    \   |\n30 |     let mut car_direction = Direction::Right; // car direction\n \
    \  |                             ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:34:29\n\
    \   |\n34 |     let mut car_direction = Direction::Right; // car direction\n \
    \  |                             ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use of undeclared type `Direction`\n  --> /tmp/tmpggus764q.rs:38:29\n\
    \   |\n38 |     let mut car_direction = Direction::Right; // car direction\n \
    \  |                             ^^^^^^^^^ use of undeclared type `Direction`\n\
    \nerror[E0433]: failed to resolve: use"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ vx = 0.0;\n    let mut vy = 0.0;\n    let mut vz = 0.0;\n    let mut ax = 0.0;\n\
    \    let mut ay = 0.0;\n    let mut az = 0.0;\n    let mut ax2 = 0.0;\n    let\
    \ mut ay2 = 0.0;\n    let mut az2 = 0.0;\n    let mut ax3 = 0.0;\n    let mut\
    \ ay3 = 0.0;\n    let mut az3 = 0.0;\n    let mut ax4 = 0.0;\n    let mut ay4\
    \ = 0.0;\n    let mut az4 = 0.0;\n    let mut ax5 = 0.0;\n    let mut ay5 = 0.0;\n\
    \    let mut az5 = 0.0;\n    let mut ax6 = 0.0;\n    let mut ay6 = 0.0;\n    let\
    \ mut az6 = 0.0;\n    let mut ax7 = 0.0;\n    let mut ay7 = 0.0;\n    let mut\
    \ az7 = 0.0;\n    let mut ax8 = 0.0;\n    let mut ay8 = 0.0;\n    let mut az8\
    \ = 0.0;\n    let mut ax9 = 0.0;\n    let mut ay9 = 0.0;\n    let mut az9 = 0.0;\n\
    \    let mut ax10 = 0.0;\n    let mut ay10 = 0.0;\n    let mut az10 = 0.0;\n \
    \   let mut ax11 = 0.0;\n    let mut ay11 = 0.0;\n    let mut az11 = 0.0;\n  \
    \  let mut ax12 = 0.0;\n    let mut ay12 = 0.0;\n    let mut az12 = 0.0;\n   \
    \ let mut ax13 = 0.0;\n    let mut ay13 = 0.0;\n    let mut az13 = 0.0;\n    let\
    \ mut ax14 = 0.0;\n    let mut ay14 = 0.0;\n    let mut az14 = 0.0;\n    let mut\
    \ ax15 = 0.0;\n    let mut ay15 = 0.0;\n    let mut az15 = 0.0;\n    let mut ax16\
    \ = 0.0;\n    let mut ay16 = 0.0;\n    let mut az16 = 0.0;\n    let mut ax17 =\
    \ 0.0;\n    let mut ay17 = 0.0;\n    let mut az17 = 0.0;\n    let mut ax18 = 0.0;\n\
    \    let mut ay18 = 0.0;\n    let mut az18 = 0.0;\n    let mut ax19 = 0.0;\n \
    \   let mut ay19 = 0.0;\n    let mut az19 = 0.0;\n\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp29afdqkm.rs:80:17\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp29afdqkm.rs:80:25\n   |\n80 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp29afdqkm.rs:81:17\n   |\n81 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp29afdqkm.rs:81:25\n\
    \   |\n81 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp29afdqkm.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp29afdqkm.rs:82:25\n   |\n82 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp29afdqkm.rs:83:17\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp29afdqkm.rs:83:25\n   |\n83 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp29afdqkm.rs:84:17\n  \
    \ |\n84 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp29afdqkm.rs:84:25\n   |\n84 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp29afdqkm.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = 1.0;\n\
    \    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let mut\
    \ car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpiaj8uv8l.rs:59:11\n   |\n\
    59 |     let mu\n   |           ^ help: add `;` here\n60 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:64:17\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:17\n   |\n65 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:65:25\n\
    \   |\n65 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpiaj8uv8l.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:66:25\n   |\n66 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:67:17\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:67:25\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpiaj8uv8l.rs:68:17\n  \
    \ |\n68 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpiaj8uv8l.rs:68:25\n   |\n68 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpiaj8uv8l.rs:"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut car_speed = 1.0;\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut car_direction\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n\
    \    let mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let\
    \ mut car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let\
    \ mut car_speed = Vec::new();\n    let mut car_pos = Vec::new();\n    let mut\
    \ car_direction = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut\
    \ car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n    let mut\
    \ car_speed = Vec::new\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpimaeve15.rs:54:33\n   |\n\
    54 |     let mut car_speed = Vec::new\n   |                                 ^\
    \ help: add `;` here\n55 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:59:17\n   |\n59 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:59:25\n\
    \   |\n59 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpimaeve15.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpimaeve15.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpimaeve15.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpimaeve15.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpimaeve15.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut direction = 1.0;\n    let mut speed2 = 0.0;\n    let mut direction2\
    \ = 1.0;\n    let mut speed3 = 0.0;\n    let mut direction3 = 1.0;\n    let mut\
    \ speed4 = 0.0;\n    let mut direction4 = 1.0;\n    let mut speed5 = 0.0;\n  \
    \  let mut direction5 = 1.0;\n    let mut speed6 = 0.0;\n    let mut direction6\
    \ = 1.0;\n    let mut speed7 = 0.0;\n    let mut direction7 = 1.0;\n    let mut\
    \ speed8 = 0.0;\n    let mut direction8 = 1.0;\n    let mut speed9 = 0.0;\n  \
    \  let mut direction9 = 1.0;\n    let mut speed10 = 0.0;\n    let mut direction10\
    \ = 1.0;\n    let mut speed11 = 0.0;\n    let mut direction11 = 1.0;\n    let\
    \ mut speed12 = 0.0;\n    let mut direction12 = 1.0;\n    let mut speed13 = 0.0;\n\
    \    let mut direction13 = 1.0;\n    let mut speed14 = 0.0;\n    let mut direction14\
    \ = 1.0;\n    let mut speed15 = 0.0;\n    let mut direction15 = 1.0;\n    let\
    \ mut speed16 = 0.0;\n    let mut direction16 = 1.0;\n    let mut speed17 = 0.0;\n\
    \    let mut direction17 = 1.0;\n    let mut speed18 = 0.0;\n    let mut direction18\
    \ = 1.0;\n    let mut speed19 = 0.0;\n    let mut direction19 = 1.0;\n    let\
    \ mut speed20 = 0.0;\n    let mut direction20 = 1.0;\n    let mut speed21 = 0.0;\n\
    \    let mut direction21 = 1.0;\n    let mut speed22 = 0.0;\n    let mut direction22\
    \ = 1.0;\n    let mut speed23 = 0.0;\n    let mut direction23 = 1.0;\n    let\
    \ mut speed24 = 0.0;\n    let mut direction24 = 1.0;\n    let mut speed25 = 0.0;\n\
    \    let mut direction25 = 1.0;\n    let mut speed26 = 0.0;\n    let mut direction26\
    \ = 1.0;\n    let mut speed27 = 0.0;\n    let mut direction27 = 1.0;\n    let\
    \ mut speed28 = 0.0;\n    let mut direction28 = 1.0;\n    let mut speed29 = 0.0;\n\
    \    let mut direction29 = 1.0;\n    let mut speed30 = 0.0;\n    let mut direction30\
    \ = 1.0;\n    let mut speed31 = 0.\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpy5a6c8bf.rs:71:25\n   |\n\
    71 |     let mut speed31 = 0.\n   |                         ^ help: add `;` here\n\
    72 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpy5a6c8bf.rs:76:17\n   |\n76 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:76:25\n   |\n76 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy5a6c8bf.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:77:25\n   |\n77 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:78:17\n  \
    \ |\n78 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy5a6c8bf.rs:78:25\n   |\n78 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:79:17\n   |\n79 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:79:25\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy5a6c8bf.rs:80:17\n   |\n80 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy5a6c8bf.rs:80:25\n   |\n80 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched typ"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_collisions = 1;\n    let mut prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_collisions = 1;\n    let mut prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_collisions = 1;\n    let mut prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_collisions = 1;\n    let mut prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_collisions = 1;\n    let mut prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_collisions = 1;\n    let mut\
    \ prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n   \
    \ let mut prev_prev_prev_prev_prev_prev_prev_prev_collisions = 1;\n    let mut\
    \ prev_prev_prev_prev_prev_prev_prev_prev_prev_speed = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed =\
    \ 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed =\
    \ 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_collisions\
    \ = 1;\n    let mut prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_speed\
    \ = 1.0;\n    let mut prev_prev_prev_prev_prev_prev_\n}\n\nfn main() {\n    let\
    \ candidate = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpcep0x9dj.rs:43:43\n   |\n\
    43 |     let mut prev_prev_prev_prev_prev_prev_\n   |                        \
    \                   ^ help: add `;` here\n44 | }\n   | - unexpected token\n\n\
    error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpcep0x9dj.rs:48:17\n\
    \   |\n48 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcep0x9dj.rs:48:25\n   |\n48 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpcep0x9dj.rs:49:17\n   |\n49 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpcep0x9dj.rs:49:25\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpcep0x9dj.rs:50:17\n   |\n50 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpcep0x9dj.rs:50:25\n   |\n50 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpcep0x9dj.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpcep0x9dj.rs:51:25\n   |\n51 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpcep0x9dj.rs:52:17\n  \
    \ |\n52 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpcep0x9dj.rs:52:25\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed:\
    \ isize = n;\n    let mut car_x: isize = n;\n    let mut car_y: isize = n;\n \
    \   let mut car_direction: isize = n;\n    let mut car_speeds: Vec<isize> = Vec::new();\n\
    \    let mut car_directions: Vec<isize> = Vec::new();\n    let mut car_speeds_2:\
    \ Vec<isize> = Vec::new();\n    let mut car_directions_2: Vec<isize> = Vec::new();\n\
    \    let mut car_speeds_3: Vec<isize> = Vec::new();\n    let mut car_directions_3:\
    \ Vec<isize> = Vec::new();\n    let mut car_speeds_4: Vec<isize> = Vec::new();\n\
    \    let mut car_directions_4: Vec<isize> = Vec::new();\n    let mut car_speeds_5:\
    \ Vec<isize> = Vec::new();\n    let mut car_directions_5: Vec<isize> = Vec::new();\n\
    \    let mut car_speeds_6: Vec<isize> = Vec::new();\n    let mut car_directions_6:\
    \ Vec<isize> = Vec::new();\n    let mut car_speeds_7: Vec<isize> = Vec::new();\n\
    \    let mut car_directions_7: Vec<isize> = Vec::new();\n    let mut car_speeds_8:\
    \ Vec<isize> = Vec::new();\n    let mut car_directions_8: Vec<isize> = Vec::new();\n\
    \    let mut car_speeds_9: Vec<isize> = Vec::new();\n    let mut car_directions_9:\
    \ Vec<isize> = Vec::new();\n    let mut car_speeds_10: Vec<isize> = Vec::new();\n\
    \    let mut car_directions_10: Vec<isize> = Vec::new();\n    let mut car_speeds_11:\
    \ Vec<isize> = Vec::new();\n    let mut car_directions_11: Vec<isize> = Vec::new();\n\
    \    let mut car_speeds_12: Vec<isize> = Vec::new();\n    let mut car_directions_12:\
    \ Vec<isize>\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpvm11j347.rs:38:42\n   |\n\
    38 |     let mut car_directions_12: Vec<isize>\n   |                         \
    \                 ^ help: add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvm11j347.rs:43:17\n  \
    \ |\n43 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm11j347.rs:43:25\n   |\n43 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpvm11j347.rs:44:17\n   |\n44 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpvm11j347.rs:44:25\n\
    \   |\n44 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpvm11j347.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpvm11j347.rs:45:25\n   |\n45 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpvm11j347.rs:46:17\n   |\n46 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpvm11j347.rs:46:25\n   |\n46 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpvm11j347.rs:47:17\n  \
    \ |\n47 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpvm11j347.rs:47:25\n   |\n47 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this s"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0\n    let mut car_speed = Vec::new();\n\
    \    let mut car_pos = Vec::new();\n    let mut car_direction = Vec::new();\n\
    \    let mut car_speeds = Vec::new();\n    let mut car_directions = Vec::new();\n\
    \    let mut car_speeds_left = Vec::new();\n    let mut car_directions_left =\
    \ Vec::new();\n    let mut car_speeds_right = Vec::new();\n    let mut car_directions_right\
    \ = Vec::new();\n    let mut car_speeds_left_right = Vec::new();\n    let mut\
    \ car_directions_left_right = Vec::new();\n    let mut car_speeds_right_left =\
    \ Vec::new();\n    let mut car_directions_right_left = Vec::new();\n    let mut\
    \ car_speeds_left_right_left = Vec::new();\n    let mut car_directions_left_right_left\
    \ = Vec::new();\n    let mut car_speeds_right_left_left = Vec::new();\n    let\
    \ mut car_directions_right_left_left = Vec::new();\n    let mut car_speeds_left_right_left_left\
    \ = Vec::new();\n    let mut car_directions_left_right_left_left = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left = Vec::new();\n    let mut car_directions_right_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_left = Vec::new();\n\
    \    let mut car_directions_left_right_left_left_left = Vec::new();\n    let mut\
    \ car_speeds_right_left_left_left_left = Vec::new();\n    let mut car_directions_right_left_left_left_left\
    \ = Vec::new();\n    let mut car_speeds_left_right_left_left_left_left = Vec::new();\n\
    \    let mut car_directions_left_right_left_left_left_left = Vec::new();\n   \
    \ let mut car_speeds_right_left_left_left_left_left = Vec::new();\n    let mut\
    \ car_directions_right_left_left_left_left_left = Vec::new();\n    let mut car_speeds_left_right_left_left_left_left\
    \ = Vec::new();\n    let mut car_directions_left_right_left_left_left_left = Vec::new();\n\
    \    let mut car_speeds_right_left_left_left_left_left_left = Vec::new();\n  \
    \  let mut car_directions_right_left_left_left_left_left = Vec::new();\n    let\
    \ mu\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `let`\n  --> /tmp/tmpy2a7z9l8.rs:10:27\n\
    \   |\n10 |     let mut collisions = 0\n   |                           ^ help:\
    \ add `;` here\n11 |     let mut car_speed = Vec::new();\n   |     --- unexpected\
    \ token\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpy2a7z9l8.rs:44:11\n \
    \  |\n44 |     let mu\n   |           ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpy2a7z9l8.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpy2a7z9l8.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpy2a7z9l8.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpy2a7z9l8.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut car_speed = Vec::new();\n\
    \    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_x = Vec::new();\n\
    \    let mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_x = Vec::new();\n    let\
    \ mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_x\
    \ = Vec::new();\n    let mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n    let mut\
    \ car_speed = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y\
    \ = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_x = Vec::new();\n\
    \    let mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n    let\
    \ mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n    let mut car_speed\
    \ = Vec::new();\n    let mut car_x = Vec::new();\n    let mut car_y = Vec::new();\n\
    \    let mut car_speed = Vec::new();\n    let mut car_x = Vec::new();\n    let\
    \ mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n    let mut car_x\
    \ = Vec::new();\n    let mut car_y = Vec::new();\n    let mut car_speed = Vec::new();\n\
    \    let mut car_x = Vec::new();\n    let mut car_y = Vec\n}\n\nfn main() {\n\
    \    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n \
    \   assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpg0vh0ejj.rs:55:24\n   |\n\
    55 |     let mut car_y = Vec\n   |                        ^ help: add `;` here\n\
    56 | }\n   | - unexpected token\n\nerror[E0423]: expected value, found struct\
    \ `Vec`\n   --> /tmp/tmpg0vh0ejj.rs:55:21\n    |\n55  |       let mut car_y =\
    \ Vec\n    |                       ^^^ help: use struct literal syntax instead:\
    \ `Vec { buf: val, len: val }`\n\nerror[E0425]: cannot find value `left` in this\
    \ scope\n  --> /tmp/tmpg0vh0ejj.rs:60:17\n   |\n60 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg0vh0ejj.rs:60:25\n   |\n60 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg0vh0ejj.rs:61:17\n   |\n61 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg0vh0ejj.rs:61:25\n   |\n61 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg0vh0ejj.rs:62:17\n  \
    \ |\n62 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg0vh0ejj.rs:62:25\n   |\n62 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg0vh0ejj.rs:63:17\n   |\n63 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg0vh0ejj.rs:63:25\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg0vh0ejj.rs:64:17\n   |\n64 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this sco"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    for _ in 0..n {\n      \
    \  let mut collision = false;\n        for _ in 0..n {\n            if car_collision(&mut\
    \ collision) {\n                collision = true;\n                break;\n  \
    \          }\n        }\n        if collision {\n            collisions += 1;\n\
    \        }\n    }\n    collisions\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `car_collision` in this scope\n  -->\
    \ /tmp/tmph0quee6_.rs:14:16\n   |\n14 |             if car_collision(&mut collision)\
    \ {\n   |                ^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `collision`\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph0quee6_.rs:28:17\n   |\n28 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph0quee6_.rs:28:25\n   |\n28 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph0quee6_.rs:29:17\n   |\n29 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph0quee6_.rs:29:25\n   |\n29 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph0quee6_.rs:30:17\n  \
    \ |\n30 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph0quee6_.rs:30:25\n   |\n30 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph0quee6_.rs:31:17\n   |\n31 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph0quee6_.rs:31:25\n\
    \   |\n31 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph0quee6_.rs:32:17\n   |\n32 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph0quee6_.rs:32:25\n   |\n32 |   \
    \  assert_eq!({left}, {right});\n   |            "
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ speed2 = 1.0;\n    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2\
    \ = 0.0;\n    let mut speed3 = 1.0;\n    let mut x3 = 0.0;\n    let mut y3 = 0.0;\n\
    \    let mut z3 = 0.0;\n    let mut speed4 = 1.0;\n    let mut x4 = 0.0;\n   \
    \ let mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut speed5 = 1.0;\n    let\
    \ mut x5 = 0.0;\n    let mut y5 = 0.0;\n    let mut z5 = 0.0;\n    let mut speed6\
    \ = 1.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6 = 0.0;\n\
    \    let mut speed7 = 1.0;\n    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n   \
    \ let mut z7 = 0.0;\n    let mut speed8 = 1.0;\n    let mut x8 = 0.0;\n    let\
    \ mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut speed9 = 1.0;\n    let mut\
    \ x9 = 0.0;\n    let mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut speed10\
    \ = 1.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n    let mut z10 = 0.0;\n\
    \    let mut speed11 = 1.0;\n    let mut x11 = 0.0;\n    let mut y11 = 0.0;\n\
    \    let mut z11 = 0.0;\n    let mut speed12 = 1.0;\n    let mut x12 = 0.0;\n\
    \    let mut y12 = 0.0;\n    let mut z12 = 0.0;\n    let mut speed13 = 1.0;\n\
    \    let mut x13 = 0.0;\n    let mut y13 = 0.0;\n    let mut z13 = 0.0;\n    let\
    \ mut speed14 = 1.0;\n    let mut x14 = 0.0;\n    let mut y14 = 0.0;\n    let\
    \ mut z14 = 0.0;\n    let mut speed15 = 1.0;\n    let mut x15 = 0.0;\n    let\
    \ mut y15 = 0.0;\n    let mut z15 = 0.0;\n    let mut speed16 = 1.0;\n    let\
    \ mut x16 = 0.0;\n    let mut y16 = 0.0;\n    let mut z\n}\n\nfn main() {\n  \
    \  let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n   \
    \ assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmptwzlkucj.rs:74:14\n   |\n\
    74 |     let mut z\n   |              ^ help: add `;` here\n75 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:79:17\n\
    \   |\n79 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:79:25\n   |\n79 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:17\n   |\n80 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:80:25\n\
    \   |\n80 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmptwzlkucj.rs:81:17\n   |\n81 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:81:25\n   |\n81 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:82:17\n   |\n82 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmptwzlkucj.rs:82:25\n   |\n82 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmptwzlkucj.rs:83:17\n  \
    \ |\n83 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmptwzlkucj.rs:83:25\n   |\n83 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmptwzlku"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_time\
    \ = 0.0;\n    let mut collision_distance = 0.0;\n    let mut collision_speed =\
    \ 0.0;\n    let mut collision_acceleration = 0.0;\n    let mut collision_angular_velocity\
    \ = 0.0;\n    let mut collision_angular_acceleration = 0.0;\n    let mut collision_angular_acceleration_magnitude\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction = 0.0;\n    let\
    \ mut collision_angular_acceleration_magnitude2 = 0.0;\n    let mut collision_angular_acceleration_direction2\
    \ = 0.0;\n    let mut collision_angular_acceleration_magnitude3 = 0.0;\n    let\
    \ mut collision_angular_acceleration_direction3 = 0.0;\n    let mut collision_angular_acceleration_magnitude4\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction4 = 0.0;\n    let\
    \ mut collision_angular_acceleration_magnitude5 = 0.0;\n    let mut collision_angular_acceleration_direction5\
    \ = 0.0;\n    let mut collision_angular_acceleration_magnitude6 = 0.0;\n    let\
    \ mut collision_angular_acceleration_direction6 = 0.0;\n    let mut collision_angular_acceleration_magnitude7\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction7 = 0.0;\n    let\
    \ mut collision_angular_acceleration_magnitude8 = 0.0;\n    let mut collision_angular_acceleration_direction8\
    \ = 0.0;\n    let mut collision_angular_acceleration_magnitude9 = 0.0;\n    let\
    \ mut collision_angular_acceleration_direction9 = 0.0;\n    let mut collision_angular_acceleration_magnitude10\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction10 = 0.0;\n    let\
    \ mut collision_angular_acceleration_magnitude11 = 0.0;\n    let mut collision_angular_acceleration_direction11\
    \ = 0.0;\n    let mut collision_angular_acceleration_magnitude12 = 0.0;\n    let\
    \ mut collision_angular_acceleration_direction12 = 0.0;\n    let mut collision_angular_acceleration_magnitude13\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction13 = 0.0;\n    let\
    \ mut collision_angular_acceleration_magnitude14 = 0.0;\n    let mut collision_angular_acceleration_direction14\
    \ = 0.0;\n    let mut collision_angular_acceleration_magnitude15 = 0.0;\n    let\
    \ mut collision_angular_acceleration_direction15 = 0.0;\n    let mut collision_angular_acceleration_magnitude16\
    \ = 0.0;\n    let mut collision_angular_acceleration_direction16 = 0.0;\n}\n\n\
    fn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp5w209qj4.rs:53:17\n\
    \   |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5w209qj4.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp5w209qj4.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp5w209qj4.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp5w209qj4.rs:55:17\n   |\n55 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp5w209qj4.rs:55:25\n   |\n55 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp5w209qj4.rs:56:17\n   |\n56 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp5w209qj4.rs:56:25\n   |\n56 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp5w209qj4.rs:57:17\n  \
    \ |\n57 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp5w209qj4.rs:57:25\n   |\n57 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp5w209qj4.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_speed\
    \ = 1.0;\n    let mut collision_time = 0.0;\n    let mut collision_direction =\
    \ 1.0;\n    let mut collision_direction_length = 0.0;\n    let mut collision_direction_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length = 0.0;\n    let mut\
    \ collision_direction_length_time_length_time = 0.0;\n    let mut collision_direction_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time_length\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_time_length_time_length_time\
    \ = 0.0;\n    let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpx3sms47d.rs:37:100\n   |\n\
    37 |     let mut collision_direction_length_time_length_time_length_time_length_time_length_time_length_\n\
    \   |                                                                        \
    \                            ^ help: add `;` here\n38 | }\n   | - unexpected token\n\
    \nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpx3sms47d.rs:42:17\n\
    \   |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpx3sms47d.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpx3sms47d.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpx3sms47d.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpx3sms47d.rs:44:17\n   |\n44 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpx3sms47d.rs:44:25\n   |\n44 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpx3sms47d.rs:45:17\n   |\n45 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpx3sms47d.rs:45:25\n   |\n45 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpx3sms47d.rs:46:17\n  \
    \ |\n46 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/t"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_x = 0.0;\n    let mut prev_y = 0.0;\n    let mut prev_z = 0.0;\n\
    \    let mut prev_speed = 0.0;\n    let mut prev_collisions = 0.0;\n    let mut\
    \ prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n    let\
    \ mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n    let\
    \ mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n   \
    \ let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n   \
    \ let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = 0.0;\n\
    \    let mut prev_collisions_y = 0.0;\n    let mut prev_collisions_z = 0.0;\n\
    \    let mut prev_collisions_speed = 0.0;\n    let mut prev_collisions_x = \n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmph3k4c3cr.rs:63:1\n\
    \   |\n63 | }\n   | ^ expected expression\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmph3k4c3cr.rs:67:17\n   |\n67 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmph3k4c3cr.rs:67:25\n \
    \  |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmph3k4c3cr.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmph3k4c3cr.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmph3k4c3cr.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmph3k4c3cr.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmph3k4c3cr.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmph3k4c3cr.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmph3k4c3cr.rs:71:17\n   |\n71 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmph3k4c3cr.rs:71:25\n\
    \   |\n71 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0; // number of collisions\n   \
    \ let mut speed = 1; // initial speed\n    let mut direction = 1; // initial direction\n\
    \    let mut car_speed = 1; // speed of each car\n    let mut car_direction =\
    \ 1; // direction of each car\n    let mut car_distance = 1; // distance of each\
    \ car\n    let mut car_speeds = vec![car_speed]; // vector of speeds of each car\n\
    \    let mut car_directions = vec![car_direction]; // vector of directions of\
    \ each car\n    let mut car_distances = vec![car_distance]; // vector of distances\
    \ of each car\n    let mut car_speeds_left = vec![car_speed]; // vector of speeds\
    \ of each car moving left\n    let mut car_directions_left = vec![car_direction];\
    \ // vector of directions of each car moving left\n    let mut car_distances_left\
    \ = vec![car_distance]; // vector of distances of each car moving left\n    let\
    \ mut car_speeds_right = vec![car_speed]; // vector of speeds of each car moving\
    \ right\n    let mut car_directions_right = vec![car_direction]; // vector of\
    \ directions of each car moving right\n    let mut car_distances_right = vec![car_distance];\
    \ // vector of distances of each car moving right\n    let mut car_speeds_left_to_right\
    \ = vec![car_speed]; // vector of speeds of each car moving left to right\n  \
    \  let mut car_directions_left_to_right = vec![car_direction]; // vector of directions\
    \ of each car moving left to right\n    let mut car_distances_left_to_right =\
    \ vec![car_distance]; // vector of distances of each car moving left to right\n\
    \    let mut car_speeds_right_to_left = vec![car_speed]; // vector of speeds of\
    \ each car moving right to left\n    let mut car_directions_right_to_left = vec![car_direction];\
    \ // vector of directions of each car moving right to left\n    let mut car_distances_right_to_left\
    \ = vec![car_distance]; // vector of distances of each car moving right to left\n\
    \    let mut car_speeds_left_to_left = vec![car_speed]; // vector of speeds of\
    \ each car moving left to left\n    let mut car_directions_left_to_left = vec![car_direction];\
    \ // vector of directions of each car moving left to left\n    let mut car_distances_left_to_left\
    \ = vec![car_distance]; // vector of distances of each car moving left to left\n\
    \    let mut car_speeds_right_to_\n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpyuzw9f_f.rs:34:33\n   |\n\
    34 |     let mut car_speeds_right_to_\n   |                                 ^\
    \ help: add `;` here\n35 | }\n   | - unexpected token\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:39:17\n   |\n39 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:39:25\n\
    \   |\n39 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpyuzw9f_f.rs:40:17\n   |\n40 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:40:25\n   |\n40 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpyuzw9f_f.rs:41:17\n   |\n41 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:41:25\n   |\n41 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:42:17\n  \
    \ |\n42 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpyuzw9f_f.rs:42:25\n   |\n42 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:43:17\n   |\n43 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpyuzw9f_f.rs:43:25\n\
    \   |\n43 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0308]"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut prev_speed = 1.0;\n    let mut prev_x = 0.0;\n    let mut prev_y =\
    \ 0.0;\n    let mut prev_dir = 0.0;\n    let mut prev_time = 0.0;\n    let mut\
    \ prev_prev_time = 0.0;\n    let mut prev_prev_x = 0.0;\n    let mut prev_prev_y\
    \ = 0.0;\n    let mut prev_prev_dir = 0.0;\n    let mut prev_prev_time = 0.0;\n\
    \    let mut prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_x = 0.0;\n\
    \    let mut prev_prev_prev_y = 0.0;\n    let mut prev_prev_prev_dir = 0.0;\n\
    \    let mut prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_x = 0.0;\n    let mut prev_prev_prev_prev_y\
    \ = 0.0;\n    let mut prev_prev_prev_prev_dir = 0.0;\n    let mut prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_x\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_y = 0.0;\n    let mut prev_prev_prev_prev_prev_dir\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_x = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_y\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_dir = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_x\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_y = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_dir\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_x = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_y\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_dir = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_time = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_x\
    \ = 0.0;\n    let mut prev_prev_prev_prev_prev_prev_prev_y = 0.0;\n    let mut\
    \ prev_prev_prev_prev_prev_prev_prev_dir = 0.0;\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:60:17\n\
    \   |\n60 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg4rkpwxm.rs:60:25\n   |\n60 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:61:17\n   |\n61 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:61:25\n\
    \   |\n61 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpg4rkpwxm.rs:62:17\n   |\n62 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:62:25\n   |\n62 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpg4rkpwxm.rs:63:17\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:63:25\n   |\n63 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpg4rkpwxm.rs:64:17\n  \
    \ |\n64 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpg4rkpwxm.rs:64:25\n   |\n64 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpg4rkpwxm.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut collision_time\
    \ = 0.0;\n    let mut collision_distance = 0.0;\n    let mut collision_speed =\
    \ 0.0;\n    let mut collision_direction = 0.0;\n    let mut collision_distance2\
    \ = 0.0;\n    let mut collision_speed2 = 0.0;\n    let mut collision_direction2\
    \ = 0.0;\n    let mut collision_distance3 = 0.0;\n    let mut collision_speed3\
    \ = 0.0;\n    let mut collision_direction3 = 0.0;\n    let mut collision_distance4\
    \ = 0.0;\n    let mut collision_speed4 = 0.0;\n    let mut collision_direction4\
    \ = 0.0;\n    let mut collision_distance5 = 0.0;\n    let mut collision_speed5\
    \ = 0.0;\n    let mut collision_direction5 = 0.0;\n    let mut collision_distance6\
    \ = 0.0;\n    let mut collision_speed6 = 0.0;\n    let mut collision_direction6\
    \ = 0.0;\n    let mut collision_distance7 = 0.0;\n    let mut collision_speed7\
    \ = 0.0;\n    let mut collision_direction7 = 0.0;\n    let mut collision_distance8\
    \ = 0.0;\n    let mut collision_speed8 = 0.0;\n    let mut collision_direction8\
    \ = 0.0;\n    let mut collision_distance9 = 0.0;\n    let mut collision_speed9\
    \ = 0.0;\n    let mut collision_direction9 = 0.0;\n    let mut collision_distance10\
    \ = 0.0;\n    let mut collision_speed10 = 0.0;\n    let mut collision_direction10\
    \ = 0.0;\n    let mut collision_distance11 = 0.0;\n    let mut collision_speed11\
    \ = 0.0;\n    let mut collision_direction11 = 0.0;\n    let mut collision_distance12\
    \ = 0.0;\n    let mut collision_speed12 = 0.0;\n    let mut collision_direction12\
    \ = 0.0;\n    let mut collision_distance13 = 0.0;\n    let mut collision_speed13\
    \ = 0.0;\n    let mut collision_direction13 = 0.0;\n    let mut collision_distance14\
    \ = 0.0;\n    let mut collision_speed14 = 0.0;\n    let mut collision_direction14\
    \ = 0.0;\n    let mut collision_distance15 = 0.0;\n    let mut collision_speed15\
    \ = 0.0;\n    let mut collision_direction15 = 0.0;\n    let mut collision_distance16\
    \ = 0.0;\n    let mut collision_speed16 = 0.0;\n    let mut collision_direction16\
    \ = 0.0;\n    let mut collision_distance17 = 0.0;\n    let mut collision_speed17\
    \ = 0.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmpux11qp7w.rs:66:17\n\
    \   |\n66 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpux11qp7w.rs:66:25\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpux11qp7w.rs:67:17\n   |\n67 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpux11qp7w.rs:67:25\n\
    \   |\n67 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpux11qp7w.rs:68:17\n   |\n68 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpux11qp7w.rs:68:25\n   |\n68 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpux11qp7w.rs:69:17\n   |\n69 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpux11qp7w.rs:69:25\n   |\n69 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpux11qp7w.rs:70:17\n  \
    \ |\n70 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpux11qp7w.rs:70:25\n   |\n70 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmpux11qp7w.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n    let\
    \ mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n    let \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpt9y6814y.rs:60:1\n  \
    \ |\n60 | }\n   | ^ expected pattern\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmpt9y6814y.rs:64:17\n   |\n64 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:64:25\n \
    \  |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmpt9y6814y.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmpt9y6814y.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:17\n   |\n68 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmpt9y6814y.rs:68:25\n\
    \   |\n68 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut speed2 = 1.0;\n    let mut speed3 = 1.0;\n    let mut speed4 = 1.0;\n\
    \    let mut speed5 = 1.0;\n    let mut speed6 = 1.0;\n    let mut speed7 = 1.0;\n\
    \    let mut speed8 = 1.0;\n    let mut speed9 = 1.0;\n    let mut speed10 = 1.0;\n\
    \    let mut speed11 = 1.0;\n    let mut speed12 = 1.0;\n    let mut speed13 =\
    \ 1.0;\n    let mut speed14 = 1.0;\n    let mut speed15 = 1.0;\n    let mut speed16\
    \ = 1.0;\n    let mut speed17 = 1.0;\n    let mut speed18 = 1.0;\n    let mut\
    \ speed19 = 1.0;\n    let mut speed20 = 1.0;\n    let mut speed21 = 1.0;\n   \
    \ let mut speed22 = 1.0;\n    let mut speed23 = 1.0;\n    let mut speed24 = 1.0;\n\
    \    let mut speed25 = 1.0;\n    let mut speed26 = 1.0;\n    let mut speed27 =\
    \ 1.0;\n    let mut speed28 = 1.0;\n    let mut speed29 = 1.0;\n    let mut speed30\
    \ = 1.0;\n    let mut speed31 = 1.0;\n    let mut speed32 = 1.0;\n    let mut\
    \ speed33 = 1.0;\n    let mut speed34 = 1.0;\n    let mut speed35 = 1.0;\n   \
    \ let mut speed36 = 1.0;\n    let mut speed37 = 1.0;\n    let mut speed38 = 1.0;\n\
    \    let mut speed39 = 1.0;\n    let mut speed40 = 1.0;\n    let mut speed41 =\
    \ 1.0;\n    let mut speed42 = 1.0;\n    let mut speed43 = 1.0;\n    let mut speed44\
    \ = 1.0;\n    let mut speed45 = 1.0;\n    let mut speed46 = 1.0;\n    let mut\
    \ speed47 = 1.0;\n    let mut speed48 = 1.0;\n    let mut speed49 = 1.0;\n   \
    \ let mut speed50 = 1.0;\n    let mut speed51 = 1.0;\n    let mut speed52 = 1.0;\n\
    \    let mut speed53 = 1.0;\n    let mut speed54 = 1.0;\n    let mut speed55 =\
    \ 1.0;\n    let mut speed56 = 1.0;\n    let mut speed57 = 1.0;\n    let mut speed58\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp_7fw7lsk.rs:68:20\n   |\n\
    68 |     let mut speed58\n   |                    ^ help: add `;` here\n69 | }\n\
    \   | - unexpected token\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:73:17\n   |\n73 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:73:25\n   |\n73 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:74:17\n   |\n74 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:74:25\n   |\n74 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:75:17\n  \
    \ |\n75 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp_7fw7lsk.rs:75:25\n   |\n75 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:17\n   |\n76 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:76:25\n\
    \   |\n76 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp_7fw7lsk.rs:77:17\n   |\n77 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp_7fw7lsk.rs:77:25\n   |\n77 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n --> /t"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions: isize = 0;\n    let mut car_speed\
    \ = 1.0;\n    let mut car_direction = 1.0;\n    let mut car_speed2 = 1.0;\n  \
    \  let mut car_direction2 = 1.0;\n    let mut car_speed3 = 1.0;\n    let mut car_direction3\
    \ = 1.0;\n    let mut car_speed4 = 1.0;\n    let mut car_direction4 = 1.0;\n \
    \   let mut car_speed5 = 1.0;\n    let mut car_direction5 = 1.0;\n    let mut\
    \ car_speed6 = 1.0;\n    let mut car_direction6 = 1.0;\n    let mut car_speed7\
    \ = 1.0;\n    let mut car_direction7 = 1.0;\n    let mut car_speed8 = 1.0;\n \
    \   let mut car_direction8 = 1.0;\n    let mut car_speed9 = 1.0;\n    let mut\
    \ car_direction9 = 1.0;\n    let mut car_speed10 = 1.0;\n    let mut car_direction10\
    \ = 1.0;\n    let mut car_speed11 = 1.0;\n    let mut car_direction11 = 1.0;\n\
    \    let mut car_speed12 = 1.0;\n    let mut car_direction12 = 1.0;\n    let mut\
    \ car_speed13 = 1.0;\n    let mut car_direction13 = 1.0;\n    let mut car_speed14\
    \ = 1.0;\n    let mut car_direction14 = 1.0;\n    let mut car_speed15 = 1.0;\n\
    \    let mut car_direction15 = 1.0;\n    let mut car_speed16 = 1.0;\n    let mut\
    \ car_direction16 = 1.0;\n    let mut car_speed17 = 1.0;\n    let mut car_direction17\
    \ = 1.0;\n    let mut car_speed18 = 1.0;\n    let mut car_direction18 = 1.0;\n\
    \    let mut car_speed19 = 1.0;\n    let mut car_direction19 = 1.0;\n    let mut\
    \ car_speed20 = 1.0;\n    let mut car_direction20 = 1.0;\n    let mut car_speed21\
    \ = 1.0;\n    let mut car_direction21 = 1.0;\n    let mut car_speed22 = 1.0;\n\
    \    let mut car_direction22 = 1.0;\n    let mut car_speed23 = 1.0;\n    let mut\
    \ car_direction23 = 1.0;\n    let mut car_speed24 = 1.0;\n    let mut car_direction24\
    \ = 1.0;\n}\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmprxvv8puy.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmprxvv8puy.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmprxvv8puy.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmprxvv8puy.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmprxvv8puy.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659792648
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collision_count = 0;\n    let mut car_speed =\
    \ 1.0;\n    let mut car_speed_2 = 1.0;\n    let mut car_speed_3 = 1.0;\n    let\
    \ mut car_speed_4 = 1.0;\n    let mut car_speed_5 = 1.0;\n    let mut car_speed_6\
    \ = 1.0;\n    let mut car_speed_7 = 1.0;\n    let mut car_speed_8 = 1.0;\n   \
    \ let mut car_speed_9 = 1.0;\n    let mut car_speed_10 = 1.0;\n    let mut car_speed_11\
    \ = 1.0;\n    let mut car_speed_12 = 1.0;\n    let mut car_speed_13 = 1.0;\n \
    \   let mut car_speed_14 = 1.0;\n    let mut car_speed_15 = 1.0;\n    let mut\
    \ car_speed_16 = 1.0;\n    let mut car_speed_17 = 1.0;\n    let mut car_speed_18\
    \ = 1.0;\n    let mut car_speed_19 = 1.0;\n    let mut car_speed_20 = 1.0;\n \
    \   let mut car_speed_21 = 1.0;\n    let mut car_speed_22 = 1.0;\n    let mut\
    \ car_speed_23 = 1.0;\n    let mut car_speed_24 = 1.0;\n    let mut car_speed_25\
    \ = 1.0;\n    let mut car_speed_26 = 1.0;\n    let mut car_speed_27 = 1.0;\n \
    \   let mut car_speed_28 = 1.0;\n    let mut car_speed_29 = 1.0;\n    let mut\
    \ car_speed_30 = 1.0;\n    let mut car_speed_31 = 1.0;\n    let mut car_speed_32\
    \ = 1.0;\n    let mut car_speed_33 = 1.0;\n    let mut car_speed_34 = 1.0;\n \
    \   let mut car_speed_35 = 1.0;\n    let mut car_speed_36 = 1.0;\n    let mut\
    \ car_speed_37 = 1.0;\n    let mut car_speed_38 = 1.0;\n    let mut car_speed_39\
    \ = 1.0;\n    let mut car_speed_40 = 1.0;\n    let mut car_speed_41 = 1.0;\n \
    \   let mut car_speed_42 = 1.0;\n    let mut car_speed_43 = 1.0;\n    let mut\
    \ car_speed_44 = 1.0;\n    let mut car_speed_45 = 1.0;\n    let mut car_speed_46\
    \ = 1.0;\n    let mut car_speed_47 = 1.0;\n\n}\n\nfn main() {\n    let candidate\
    \ = car_race_collision;\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:63:17\n\
    \   |\n63 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:63:25\n   |\n63 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:64:17\n   |\n64 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:64:25\n\
    \   |\n64 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7u0hm2r2.rs:65:17\n   |\n65 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:65:25\n   |\n65 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:66:17\n   |\n66 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:66:25\n   |\n66 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7u0hm2r2.rs:67:17\n  \
    \ |\n67 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7u0hm2r2.rs:67:25\n   |\n67 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp7u0hm2r2.rs:9:36\n  |\n9 | fn car_race_collision(n: isize)\
    \ -> isize {\n  |    ------------------              ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implic"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut last_collision_x = 0.0;\n    let mut last_collision_y = 0.0;\n   \
    \ let mut last_collision_time = 0.0;\n    let mut last_collision_direction = 0.0;\n\
    \    let mut last_collision_speed = 0.0;\n    let mut last_collision_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_velocity = 0.0;\n    let mut last_collision_angular_acceleration\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude = 0.0;\n \
    \   let mut last_collision_angular_acceleration_direction = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut last_collision_angular_acceleration_direction_squared\
    \ = 0.0;\n    let mut last_collision_angular_acceleration_magnitude_squared =\
    \ 0.0;\n    let mut last_collision_angular_acceleration_direction_squared = 0.0;\n\
    \    let mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n  \
    \  let mut last_collision_angular_acceleration_direction_squared = 0.0;\n    let\
    \ mut last_collision_angular_acceleration_magnitude_squared = 0.0;\n    let mut\
    \ last_collision_angular_acceleration_direction_squared = 0.0;\n    let mut last_collision_angular_acceleration_\n\
    }\n\nfn main() {\n    let candidate = car_race_collision;\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp7sc8t_gm.rs:44:49\n   |\n\
    44 |     let mut last_collision_angular_acceleration_\n   |                  \
    \                               ^ help: add `;` here\n45 | }\n   | - unexpected\
    \ token\n\nerror[E0425]: cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:49:17\n\
    \   |\n49 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:49:25\n   |\n49 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:17\n   |\n50 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:50:25\n\
    \   |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp7sc8t_gm.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp7sc8t_gm.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp7sc8t_gm.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not f"
  stdout: ''
  timestamp: 1659746932
- exit_code: 1
  program: "/// Imagine a road that's a perfectly straight infinitely long line.\n\
    /// n cars are driving left to right;  simultaneously, a different set of n cars\n\
    /// are driving right to left.   The two sets of cars start out being very far\
    \ from\n/// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n/// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n/// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n/// in their trajectory as if they did not collide.\n\
    /// This function outputs the number of such collisions.\nfn car_race_collision(n:\
    \ isize) -> isize {\n    let mut collisions = 0;\n    let mut speed = 1.0;\n \
    \   let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ vx = 0.0;\n    let mut vy = 0.0;\n    let mut vz = 0.0;\n    let mut theta =\
    \ 0.0;\n    let mut phi = 0.0;\n    let mut psi = 0.0;\n    let mut omega = 0.0;\n\
    \    let mut omegadot = 0.0;\n    let mut omegadotdot = 0.0;\n    let mut omegadot_dot\
    \ = 0.0;\n    let mut omegadot_dot_dot = 0.0;\n    let mut omegadotdot_dot = 0.0;\n\
    \    let mut omegadotdot_dot_dot = 0.0;\n    let mut omegadotdot_dot_dot_dot =\
    \ 0.0;\n    let mut omegadotdot_dot_dot_dot_dot = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot = 0.0;\n    let mut\
    \ omegadotdot_dot_dot_dot_dot_dot_dot_dot = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot = 0.0;\n\
    \    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot = 0.0;\n    let mut\
    \ omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut omegadotdot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot_dot\
    \ = 0.0;\n    let mut \n}\n\nfn main() {\n    let candidate = car_race_collision;\n\
    \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
    \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmp0nyyzuxp.rs:46:1\n\
    \   |\n46 | }\n   | ^ expected identifier\n\nerror[E0425]: cannot find value `left`\
    \ in this scope\n  --> /tmp/tmp0nyyzuxp.rs:50:17\n   |\n50 |     assert_eq!({left},\
    \ {right});\n   |                 ^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `right` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:50:25\n \
    \  |\n50 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n\
    \  --> /tmp/tmp0nyyzuxp.rs:51:17\n   |\n51 |     assert_eq!({left}, {right});\n\
    \   |                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `right` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:51:25\n   |\n51 |   \
    \  assert_eq!({left}, {right});\n   |                         ^^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `left` in this scope\n  -->\
    \ /tmp/tmp0nyyzuxp.rs:52:17\n   |\n52 |     assert_eq!({left}, {right});\n   |\
    \                 ^^^^ not found in this scope\n\nerror[E0425]: cannot find value\
    \ `right` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:52:25\n   |\n52 |     assert_eq!({left},\
    \ {right});\n   |                         ^^^^^ not found in this scope\n\nerror[E0425]:\
    \ cannot find value `left` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:53:17\n  \
    \ |\n53 |     assert_eq!({left}, {right});\n   |                 ^^^^ not found\
    \ in this scope\n\nerror[E0425]: cannot find value `right` in this scope\n  -->\
    \ /tmp/tmp0nyyzuxp.rs:53:25\n   |\n53 |     assert_eq!({left}, {right});\n   |\
    \                         ^^^^^ not found in this scope\n\nerror[E0425]: cannot\
    \ find value `left` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:54:17\n   |\n54 |\
    \     assert_eq!({left}, {right});\n   |                 ^^^^ not found in this\
    \ scope\n\nerror[E0425]: cannot find value `right` in this scope\n  --> /tmp/tmp0nyyzuxp.rs:54:25\n\
    \   |\n54 |     assert_eq!({left}, {right});\n   |                         ^^^^^\
    \ not found in this scope\n\nerror: aborting due to 11 previous errors\n\nFor\
    \ more information about this error, try `rustc --expl"
  stdout: ''
  timestamp: 1659822334
